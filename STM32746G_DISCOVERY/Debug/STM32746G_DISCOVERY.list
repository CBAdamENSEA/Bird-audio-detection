
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .qspi         00000000  90000000  90000000  00040770  2**0
                  CONTENTS
  1 .qspi         00000000  90000000  90000000  00040770  2**0
                  CONTENTS
  2 .sdram_data   00000000  c0000000  c0000000  00040770  2**0
                  CONTENTS
  3 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text         00013f88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .rodata       00018410  08014158  08014158  00024158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0802c568  0802c568  00040770  2**0
                  CONTENTS
  7 .ARM          00000008  0802c568  0802c568  0003c568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0802c570  0802c570  00040770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  0802c570  0802c570  0003c570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000004  0802c574  0802c574  0003c574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000770  20000000  0802c578  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0001afec  20000780  0802cce8  00040780  2**5
                  ALLOC
 13 ._user_heap_stack 00006004  2001b76c  0802cce8  0004b76c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00040770  2**0
                  CONTENTS, READONLY
 15 .debug_info   000412cc  00000000  00000000  000407a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008cb4  00000000  00000000  00081a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00024e3e  00000000  00000000  0008a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001e48  00000000  00000000  000af560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002fb8  00000000  00000000  000b13a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00032dc1  00000000  00000000  000b4360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00042ae5  00000000  00000000  000e7121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00112771  00000000  00000000  00129c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000be  00000000  00000000  0023c377  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00007690  00000000  00000000  0023c438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000780 	.word	0x20000780
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014140 	.word	0x08014140

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000784 	.word	0x20000784
 800020c:	08014140 	.word	0x08014140

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9aa 	b.w	80010f4 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff ff0b 	bl	8000bdc <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc81 	bl	80006f8 <__aeabi_dmul>
 8000df6:	f7ff ff57 	bl	8000ca8 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fc02 	bl	8000604 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc78 	bl	80006f8 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff faba 	bl	8000388 <__aeabi_dsub>
 8000e14:	f7ff ff48 	bl	8000ca8 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	468e      	mov	lr, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d14d      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	4694      	mov	ip, r2
 8000e36:	d969      	bls.n	8000f0c <__udivmoddi4+0xe8>
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b152      	cbz	r2, 8000e54 <__udivmoddi4+0x30>
 8000e3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e42:	f1c2 0120 	rsb	r1, r2, #32
 8000e46:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e52:	4094      	lsls	r4, r2
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	0c21      	lsrs	r1, r4, #16
 8000e5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e5e:	fa1f f78c 	uxth.w	r7, ip
 8000e62:	fb08 e316 	mls	r3, r8, r6, lr
 8000e66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e6a:	fb06 f107 	mul.w	r1, r6, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e7a:	f080 811f 	bcs.w	80010bc <__udivmoddi4+0x298>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 811c 	bls.w	80010bc <__udivmoddi4+0x298>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb00 f707 	mul.w	r7, r0, r7
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	d90a      	bls.n	8000eb6 <__udivmoddi4+0x92>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	f080 810a 	bcs.w	80010c0 <__udivmoddi4+0x29c>
 8000eac:	42a7      	cmp	r7, r4
 8000eae:	f240 8107 	bls.w	80010c0 <__udivmoddi4+0x29c>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eba:	1be4      	subs	r4, r4, r7
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	b11d      	cbz	r5, 8000ec8 <__udivmoddi4+0xa4>
 8000ec0:	40d4      	lsrs	r4, r2
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d909      	bls.n	8000ee6 <__udivmoddi4+0xc2>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	f000 80ef 	beq.w	80010b6 <__udivmoddi4+0x292>
 8000ed8:	2600      	movs	r6, #0
 8000eda:	e9c5 0100 	strd	r0, r1, [r5]
 8000ede:	4630      	mov	r0, r6
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	fab3 f683 	clz	r6, r3
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d14a      	bne.n	8000f84 <__udivmoddi4+0x160>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d302      	bcc.n	8000ef8 <__udivmoddi4+0xd4>
 8000ef2:	4282      	cmp	r2, r0
 8000ef4:	f200 80f9 	bhi.w	80010ea <__udivmoddi4+0x2c6>
 8000ef8:	1a84      	subs	r4, r0, r2
 8000efa:	eb61 0303 	sbc.w	r3, r1, r3
 8000efe:	2001      	movs	r0, #1
 8000f00:	469e      	mov	lr, r3
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d0e0      	beq.n	8000ec8 <__udivmoddi4+0xa4>
 8000f06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f0a:	e7dd      	b.n	8000ec8 <__udivmoddi4+0xa4>
 8000f0c:	b902      	cbnz	r2, 8000f10 <__udivmoddi4+0xec>
 8000f0e:	deff      	udf	#255	; 0xff
 8000f10:	fab2 f282 	clz	r2, r2
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	f040 8092 	bne.w	800103e <__udivmoddi4+0x21a>
 8000f1a:	eba1 010c 	sub.w	r1, r1, ip
 8000f1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	2601      	movs	r6, #1
 8000f28:	0c20      	lsrs	r0, r4, #16
 8000f2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000f32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f36:	fb0e f003 	mul.w	r0, lr, r3
 8000f3a:	4288      	cmp	r0, r1
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x12c>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x12a>
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	f200 80cb 	bhi.w	80010e4 <__udivmoddi4+0x2c0>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	1a09      	subs	r1, r1, r0
 8000f52:	b2a4      	uxth	r4, r4
 8000f54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f58:	fb07 1110 	mls	r1, r7, r0, r1
 8000f5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f60:	fb0e fe00 	mul.w	lr, lr, r0
 8000f64:	45a6      	cmp	lr, r4
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x156>
 8000f68:	eb1c 0404 	adds.w	r4, ip, r4
 8000f6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f70:	d202      	bcs.n	8000f78 <__udivmoddi4+0x154>
 8000f72:	45a6      	cmp	lr, r4
 8000f74:	f200 80bb 	bhi.w	80010ee <__udivmoddi4+0x2ca>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f82:	e79c      	b.n	8000ebe <__udivmoddi4+0x9a>
 8000f84:	f1c6 0720 	rsb	r7, r6, #32
 8000f88:	40b3      	lsls	r3, r6
 8000f8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f92:	fa20 f407 	lsr.w	r4, r0, r7
 8000f96:	fa01 f306 	lsl.w	r3, r1, r6
 8000f9a:	431c      	orrs	r4, r3
 8000f9c:	40f9      	lsrs	r1, r7
 8000f9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fa2:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000faa:	0c20      	lsrs	r0, r4, #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000fb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000fbc:	4288      	cmp	r0, r1
 8000fbe:	fa02 f206 	lsl.w	r2, r2, r6
 8000fc2:	d90b      	bls.n	8000fdc <__udivmoddi4+0x1b8>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fcc:	f080 8088 	bcs.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd0:	4288      	cmp	r0, r1
 8000fd2:	f240 8085 	bls.w	80010e0 <__udivmoddi4+0x2bc>
 8000fd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fe4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fe8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ff0:	458e      	cmp	lr, r1
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x1e2>
 8000ff4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ffc:	d26c      	bcs.n	80010d8 <__udivmoddi4+0x2b4>
 8000ffe:	458e      	cmp	lr, r1
 8001000:	d96a      	bls.n	80010d8 <__udivmoddi4+0x2b4>
 8001002:	3802      	subs	r0, #2
 8001004:	4461      	add	r1, ip
 8001006:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800100a:	fba0 9402 	umull	r9, r4, r0, r2
 800100e:	eba1 010e 	sub.w	r1, r1, lr
 8001012:	42a1      	cmp	r1, r4
 8001014:	46c8      	mov	r8, r9
 8001016:	46a6      	mov	lr, r4
 8001018:	d356      	bcc.n	80010c8 <__udivmoddi4+0x2a4>
 800101a:	d053      	beq.n	80010c4 <__udivmoddi4+0x2a0>
 800101c:	b15d      	cbz	r5, 8001036 <__udivmoddi4+0x212>
 800101e:	ebb3 0208 	subs.w	r2, r3, r8
 8001022:	eb61 010e 	sbc.w	r1, r1, lr
 8001026:	fa01 f707 	lsl.w	r7, r1, r7
 800102a:	fa22 f306 	lsr.w	r3, r2, r6
 800102e:	40f1      	lsrs	r1, r6
 8001030:	431f      	orrs	r7, r3
 8001032:	e9c5 7100 	strd	r7, r1, [r5]
 8001036:	2600      	movs	r6, #0
 8001038:	4631      	mov	r1, r6
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103e:	f1c2 0320 	rsb	r3, r2, #32
 8001042:	40d8      	lsrs	r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	fa21 f303 	lsr.w	r3, r1, r3
 800104c:	4091      	lsls	r1, r2
 800104e:	4301      	orrs	r1, r0
 8001050:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001054:	fa1f fe8c 	uxth.w	lr, ip
 8001058:	fbb3 f0f7 	udiv	r0, r3, r7
 800105c:	fb07 3610 	mls	r6, r7, r0, r3
 8001060:	0c0b      	lsrs	r3, r1, #16
 8001062:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001066:	fb00 f60e 	mul.w	r6, r0, lr
 800106a:	429e      	cmp	r6, r3
 800106c:	fa04 f402 	lsl.w	r4, r4, r2
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x260>
 8001072:	eb1c 0303 	adds.w	r3, ip, r3
 8001076:	f100 38ff 	add.w	r8, r0, #4294967295
 800107a:	d22f      	bcs.n	80010dc <__udivmoddi4+0x2b8>
 800107c:	429e      	cmp	r6, r3
 800107e:	d92d      	bls.n	80010dc <__udivmoddi4+0x2b8>
 8001080:	3802      	subs	r0, #2
 8001082:	4463      	add	r3, ip
 8001084:	1b9b      	subs	r3, r3, r6
 8001086:	b289      	uxth	r1, r1
 8001088:	fbb3 f6f7 	udiv	r6, r3, r7
 800108c:	fb07 3316 	mls	r3, r7, r6, r3
 8001090:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001094:	fb06 f30e 	mul.w	r3, r6, lr
 8001098:	428b      	cmp	r3, r1
 800109a:	d908      	bls.n	80010ae <__udivmoddi4+0x28a>
 800109c:	eb1c 0101 	adds.w	r1, ip, r1
 80010a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80010a4:	d216      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d914      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 80010aa:	3e02      	subs	r6, #2
 80010ac:	4461      	add	r1, ip
 80010ae:	1ac9      	subs	r1, r1, r3
 80010b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010b4:	e738      	b.n	8000f28 <__udivmoddi4+0x104>
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e705      	b.n	8000ec8 <__udivmoddi4+0xa4>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e3      	b.n	8000e88 <__udivmoddi4+0x64>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6f8      	b.n	8000eb6 <__udivmoddi4+0x92>
 80010c4:	454b      	cmp	r3, r9
 80010c6:	d2a9      	bcs.n	800101c <__udivmoddi4+0x1f8>
 80010c8:	ebb9 0802 	subs.w	r8, r9, r2
 80010cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7a3      	b.n	800101c <__udivmoddi4+0x1f8>
 80010d4:	4646      	mov	r6, r8
 80010d6:	e7ea      	b.n	80010ae <__udivmoddi4+0x28a>
 80010d8:	4620      	mov	r0, r4
 80010da:	e794      	b.n	8001006 <__udivmoddi4+0x1e2>
 80010dc:	4640      	mov	r0, r8
 80010de:	e7d1      	b.n	8001084 <__udivmoddi4+0x260>
 80010e0:	46d0      	mov	r8, sl
 80010e2:	e77b      	b.n	8000fdc <__udivmoddi4+0x1b8>
 80010e4:	3b02      	subs	r3, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	e732      	b.n	8000f50 <__udivmoddi4+0x12c>
 80010ea:	4630      	mov	r0, r6
 80010ec:	e709      	b.n	8000f02 <__udivmoddi4+0xde>
 80010ee:	4464      	add	r4, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e742      	b.n	8000f7a <__udivmoddi4+0x156>

080010f4 <__aeabi_idiv0>:
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80010f8:	4770      	bx	lr

080010fa <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80010fa:	2000      	movs	r0, #0
 80010fc:	4770      	bx	lr
	...

08001100 <ft5336_Init>:
{
 8001100:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8001102:	4c05      	ldr	r4, [pc, #20]	; (8001118 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8001104:	20c8      	movs	r0, #200	; 0xc8
 8001106:	f000 ff2d 	bl	8001f64 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800110a:	7823      	ldrb	r3, [r4, #0]
 800110c:	b91b      	cbnz	r3, 8001116 <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800110e:	f000 feff 	bl	8001f10 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001112:	2301      	movs	r3, #1
 8001114:	7023      	strb	r3, [r4, #0]
}
 8001116:	bd10      	pop	{r4, pc}
 8001118:	2000079c 	.word	0x2000079c

0800111c <ft5336_TS_DetectTouch>:
{
 800111c:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 800111e:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001120:	2102      	movs	r1, #2
 8001122:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8001124:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001128:	f000 ff06 	bl	8001f38 <TS_IO_Read>
 800112c:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001130:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800113c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d901      	bls.n	8001148 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8001144:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001148:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 800114e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001152:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8001154:	2200      	movs	r2, #0
 8001156:	709a      	strb	r2, [r3, #2]
}
 8001158:	b002      	add	sp, #8
 800115a:	bd10      	pop	{r4, pc}
 800115c:	2000079c 	.word	0x2000079c

08001160 <ft5336_TS_GetXY>:
{
 8001160:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001164:	4d2b      	ldr	r5, [pc, #172]	; (8001214 <ft5336_TS_GetXY+0xb4>)
{
 8001166:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8001168:	2300      	movs	r3, #0
{
 800116a:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800116c:	78ac      	ldrb	r4, [r5, #2]
 800116e:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8001170:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001174:	42a2      	cmp	r2, r4
 8001176:	d945      	bls.n	8001204 <ft5336_TS_GetXY+0xa4>
    switch(ft5336_handle.currActiveTouchIdx)
 8001178:	2c09      	cmp	r4, #9
 800117a:	d846      	bhi.n	800120a <ft5336_TS_GetXY+0xaa>
 800117c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	1d19      	adds	r1, r3, #4
 8001186:	f103 0a03 	add.w	sl, r3, #3
 800118a:	f103 0906 	add.w	r9, r3, #6
 800118e:	3305      	adds	r3, #5
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	fa5f fa8a 	uxtb.w	sl, sl
 8001196:	fa5f f989 	uxtb.w	r9, r9
 800119a:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800119e:	b2c4      	uxtb	r4, r0
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec9 	bl	8001f38 <TS_IO_Read>
 80011a6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80011ae:	4651      	mov	r1, sl
 80011b0:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011b2:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80011b4:	f000 fec0 	bl	8001f38 <TS_IO_Read>
 80011b8:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80011bc:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80011c2:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011c4:	88aa      	ldrh	r2, [r5, #4]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80011cc:	4313      	orrs	r3, r2
    *X = coord;
 80011ce:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011d0:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80011d2:	f000 feb1 	bl	8001f38 <TS_IO_Read>
 80011d6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80011da:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80011e0:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011e2:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80011e4:	f000 fea8 	bl	8001f38 <TS_IO_Read>
 80011e8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011f0:	88aa      	ldrh	r2, [r5, #4]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80011f8:	4313      	orrs	r3, r2
 80011fa:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
 80011fc:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80011fe:	78ab      	ldrb	r3, [r5, #2]
 8001200:	3301      	adds	r3, #1
 8001202:	70ab      	strb	r3, [r5, #2]
}
 8001204:	b002      	add	sp, #8
 8001206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800120a:	4698      	mov	r8, r3
 800120c:	4699      	mov	r9, r3
 800120e:	469a      	mov	sl, r3
 8001210:	4619      	mov	r1, r3
 8001212:	e7c4      	b.n	800119e <ft5336_TS_GetXY+0x3e>
 8001214:	2000079c 	.word	0x2000079c

08001218 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001218:	2201      	movs	r2, #1
 800121a:	21a4      	movs	r1, #164	; 0xa4
 800121c:	b2c0      	uxtb	r0, r0
 800121e:	f000 be79 	b.w	8001f14 <TS_IO_Write>

08001222 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001222:	2200      	movs	r2, #0
 8001224:	21a4      	movs	r1, #164	; 0xa4
 8001226:	b2c0      	uxtb	r0, r0
 8001228:	f000 be74 	b.w	8001f14 <TS_IO_Write>

0800122c <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 800122c:	f7ff bff9 	b.w	8001222 <ft5336_TS_DisableIT>

08001230 <ft5336_TS_ClearIT>:
 8001230:	4770      	bx	lr
	...

08001234 <ft5336_ReadID>:
{
 8001234:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8001236:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
 8001238:	4c0f      	ldr	r4, [pc, #60]	; (8001278 <ft5336_ReadID+0x44>)
{
 800123a:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 800123c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001240:	7823      	ldrb	r3, [r4, #0]
 8001242:	b91b      	cbnz	r3, 800124c <ft5336_ReadID+0x18>
    TS_IO_Init();
 8001244:	f000 fe64 	bl	8001f10 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001248:	2301      	movs	r3, #1
 800124a:	7023      	strb	r3, [r4, #0]
{
 800124c:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800124e:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001250:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001252:	21a8      	movs	r1, #168	; 0xa8
 8001254:	4628      	mov	r0, r5
 8001256:	f000 fe6f 	bl	8001f38 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800125a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800125e:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8001262:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001266:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001268:	d103      	bne.n	8001272 <ft5336_ReadID+0x3e>
  return (ucReadId);
 800126a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800126e:	b003      	add	sp, #12
 8001270:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001272:	2b51      	cmp	r3, #81	; 0x51
 8001274:	d1ec      	bne.n	8001250 <ft5336_ReadID+0x1c>
 8001276:	e7f8      	b.n	800126a <ft5336_ReadID+0x36>
 8001278:	2000079c 	.word	0x2000079c

0800127c <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 800127c:	2300      	movs	r3, #0
{
 800127e:	b513      	push	{r0, r1, r4, lr}
 8001280:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001282:	b2c0      	uxtb	r0, r0
 8001284:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8001286:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800128a:	f000 fe55 	bl	8001f38 <TS_IO_Read>
 800128e:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8001292:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001296:	6023      	str	r3, [r4, #0]
}
 8001298:	b002      	add	sp, #8
 800129a:	bd10      	pop	{r4, pc}

0800129c <ft5336_TS_GetTouchInfo>:
{
 800129c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012a0:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 80012a4:	2400      	movs	r4, #0
{
 80012a6:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80012a8:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 80012aa:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80012ae:	428b      	cmp	r3, r1
 80012b0:	d92c      	bls.n	800130c <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 80012b2:	2909      	cmp	r1, #9
 80012b4:	d82d      	bhi.n	8001312 <ft5336_TS_GetTouchInfo+0x76>
 80012b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80012ba:	004c      	lsls	r4, r1, #1
 80012bc:	b2e4      	uxtb	r4, r4
 80012be:	1ce1      	adds	r1, r4, #3
 80012c0:	1de7      	adds	r7, r4, #7
 80012c2:	3408      	adds	r4, #8
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	b2ff      	uxtb	r7, r7
 80012c8:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80012ca:	fa5f f880 	uxtb.w	r8, r0
 80012ce:	4640      	mov	r0, r8
 80012d0:	f000 fe32 	bl	8001f38 <TS_IO_Read>
 80012d4:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80012d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80012dc:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80012de:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80012e0:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80012e6:	f000 fe27 	bl	8001f38 <TS_IO_Read>
 80012ea:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80012ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80012f2:	4621      	mov	r1, r4
 80012f4:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80012f6:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80012f8:	f000 fe1e 	bl	8001f38 <TS_IO_Read>
 80012fc:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001300:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001304:	0912      	lsrs	r2, r2, #4
 8001306:	f002 0204 	and.w	r2, r2, #4
 800130a:	602a      	str	r2, [r5, #0]
}
 800130c:	b002      	add	sp, #8
 800130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001312:	4627      	mov	r7, r4
 8001314:	4621      	mov	r1, r4
 8001316:	e7d8      	b.n	80012ca <ft5336_TS_GetTouchInfo+0x2e>
 8001318:	2000079c 	.word	0x2000079c

0800131c <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 800131c:	2901      	cmp	r1, #1
{
 800131e:	b507      	push	{r0, r1, r2, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001320:	b2c0      	uxtb	r0, r0
  switch (Output) 
 8001322:	d00f      	beq.n	8001344 <wm8994_SetOutputMode+0x28>
 8001324:	2903      	cmp	r1, #3
 8001326:	d12f      	bne.n	8001388 <wm8994_SetOutputMode+0x6c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001328:	f640 720f 	movw	r2, #3855	; 0xf0f
 800132c:	2105      	movs	r1, #5
 800132e:	9001      	str	r0, [sp, #4]
 8001330:	f000 fd8e 	bl	8001e50 <AUDIO_IO_Write>
 8001334:	2201      	movs	r2, #1
 8001336:	f240 6101 	movw	r1, #1537	; 0x601
 800133a:	9801      	ldr	r0, [sp, #4]
 800133c:	f000 fd88 	bl	8001e50 <AUDIO_IO_Write>
 8001340:	2201      	movs	r2, #1
 8001342:	e00c      	b.n	800135e <wm8994_SetOutputMode+0x42>
 8001344:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001348:	2105      	movs	r1, #5
 800134a:	9001      	str	r0, [sp, #4]
 800134c:	f000 fd80 	bl	8001e50 <AUDIO_IO_Write>
 8001350:	2200      	movs	r2, #0
 8001352:	f240 6101 	movw	r1, #1537	; 0x601
 8001356:	9801      	ldr	r0, [sp, #4]
 8001358:	f000 fd7a 	bl	8001e50 <AUDIO_IO_Write>
 800135c:	2200      	movs	r2, #0
 800135e:	f240 6102 	movw	r1, #1538	; 0x602
 8001362:	9801      	ldr	r0, [sp, #4]
 8001364:	f000 fd74 	bl	8001e50 <AUDIO_IO_Write>
 8001368:	2202      	movs	r2, #2
 800136a:	f240 6104 	movw	r1, #1540	; 0x604
 800136e:	9801      	ldr	r0, [sp, #4]
 8001370:	f000 fd6e 	bl	8001e50 <AUDIO_IO_Write>
 8001374:	2202      	movs	r2, #2
 8001376:	9801      	ldr	r0, [sp, #4]
 8001378:	f240 6105 	movw	r1, #1541	; 0x605
 800137c:	f000 fd68 	bl	8001e50 <AUDIO_IO_Write>
}
 8001380:	2000      	movs	r0, #0
 8001382:	b003      	add	sp, #12
 8001384:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001388:	f240 3203 	movw	r2, #771	; 0x303
 800138c:	2105      	movs	r1, #5
 800138e:	9001      	str	r0, [sp, #4]
 8001390:	f000 fd5e 	bl	8001e50 <AUDIO_IO_Write>
 8001394:	2201      	movs	r2, #1
 8001396:	f240 6101 	movw	r1, #1537	; 0x601
 800139a:	9801      	ldr	r0, [sp, #4]
 800139c:	f000 fd58 	bl	8001e50 <AUDIO_IO_Write>
 80013a0:	2201      	movs	r2, #1
 80013a2:	f240 6102 	movw	r1, #1538	; 0x602
 80013a6:	9801      	ldr	r0, [sp, #4]
 80013a8:	f000 fd52 	bl	8001e50 <AUDIO_IO_Write>
 80013ac:	2200      	movs	r2, #0
 80013ae:	f240 6104 	movw	r1, #1540	; 0x604
 80013b2:	9801      	ldr	r0, [sp, #4]
 80013b4:	f000 fd4c 	bl	8001e50 <AUDIO_IO_Write>
 80013b8:	2200      	movs	r2, #0
 80013ba:	e7dc      	b.n	8001376 <wm8994_SetOutputMode+0x5a>

080013bc <wm8994_SetFrequency>:
{
 80013bc:	b508      	push	{r3, lr}
  switch (AudioFreq)
 80013be:	f245 6322 	movw	r3, #22050	; 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80013c2:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 80013c4:	4299      	cmp	r1, r3
 80013c6:	d025      	beq.n	8001414 <wm8994_SetFrequency+0x58>
 80013c8:	d80b      	bhi.n	80013e2 <wm8994_SetFrequency+0x26>
 80013ca:	f642 3311 	movw	r3, #11025	; 0x2b11
 80013ce:	4299      	cmp	r1, r3
 80013d0:	d01e      	beq.n	8001410 <wm8994_SetFrequency+0x54>
 80013d2:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 80013d6:	d017      	beq.n	8001408 <wm8994_SetFrequency+0x4c>
 80013d8:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 80013dc:	d00d      	beq.n	80013fa <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80013de:	2283      	movs	r2, #131	; 0x83
 80013e0:	e00c      	b.n	80013fc <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 80013e2:	f64a 4344 	movw	r3, #44100	; 0xac44
 80013e6:	4299      	cmp	r1, r3
 80013e8:	d016      	beq.n	8001418 <wm8994_SetFrequency+0x5c>
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <wm8994_SetFrequency+0x60>)
 80013ec:	4299      	cmp	r1, r3
 80013ee:	d00d      	beq.n	800140c <wm8994_SetFrequency+0x50>
 80013f0:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 80013f4:	d1f3      	bne.n	80013de <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 80013f6:	2263      	movs	r2, #99	; 0x63
 80013f8:	e000      	b.n	80013fc <wm8994_SetFrequency+0x40>
 80013fa:	2203      	movs	r2, #3
 80013fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001400:	f000 fd26 	bl	8001e50 <AUDIO_IO_Write>
}
 8001404:	2000      	movs	r0, #0
 8001406:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001408:	2233      	movs	r2, #51	; 0x33
 800140a:	e7f7      	b.n	80013fc <wm8994_SetFrequency+0x40>
 800140c:	22a3      	movs	r2, #163	; 0xa3
 800140e:	e7f5      	b.n	80013fc <wm8994_SetFrequency+0x40>
 8001410:	2213      	movs	r2, #19
 8001412:	e7f3      	b.n	80013fc <wm8994_SetFrequency+0x40>
 8001414:	2243      	movs	r2, #67	; 0x43
 8001416:	e7f1      	b.n	80013fc <wm8994_SetFrequency+0x40>
 8001418:	2273      	movs	r2, #115	; 0x73
 800141a:	e7ef      	b.n	80013fc <wm8994_SetFrequency+0x40>
 800141c:	00017700 	.word	0x00017700

08001420 <wm8994_Reset>:
 8001420:	2200      	movs	r2, #0
 8001422:	b2c0      	uxtb	r0, r0
{
 8001424:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	4611      	mov	r1, r2
 8001428:	f000 fd12 	bl	8001e50 <AUDIO_IO_Write>
  outputEnabled = 0;
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <wm8994_Reset+0x18>)
 800142e:	2000      	movs	r0, #0
  inputEnabled=0;
 8001430:	e9c3 0000 	strd	r0, r0, [r3]
}
 8001434:	bd08      	pop	{r3, pc}
 8001436:	bf00      	nop
 8001438:	200007a4 	.word	0x200007a4

0800143c <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 800143c:	f000 bd06 	b.w	8001e4c <AUDIO_IO_DeInit>

08001440 <wm8994_ReadID>:
{
 8001440:	b510      	push	{r4, lr}
 8001442:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8001444:	f000 fcfc 	bl	8001e40 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001448:	2100      	movs	r1, #0
 800144a:	b2e0      	uxtb	r0, r4
 800144c:	f000 fd14 	bl	8001e78 <AUDIO_IO_Read>
}
 8001450:	bd10      	pop	{r4, pc}
	...

08001454 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <wm8994_SetMute+0x44>)
 8001456:	681b      	ldr	r3, [r3, #0]
{
 8001458:	b507      	push	{r0, r1, r2, lr}
  if (outputEnabled != 0)
 800145a:	b183      	cbz	r3, 800147e <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 800145c:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800145e:	b2c0      	uxtb	r0, r0
    if(Cmd == AUDIO_MUTE_ON)
 8001460:	d111      	bne.n	8001486 <wm8994_SetMute+0x32>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001466:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800146a:	9001      	str	r0, [sp, #4]
 800146c:	f000 fcf0 	bl	8001e50 <AUDIO_IO_Write>
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	f240 4122 	movw	r1, #1058	; 0x422
 8001478:	9801      	ldr	r0, [sp, #4]
 800147a:	f000 fce9 	bl	8001e50 <AUDIO_IO_Write>
}
 800147e:	2000      	movs	r0, #0
 8001480:	b003      	add	sp, #12
 8001482:	f85d fb04 	ldr.w	pc, [sp], #4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001486:	2210      	movs	r2, #16
 8001488:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800148c:	9001      	str	r0, [sp, #4]
 800148e:	f000 fcdf 	bl	8001e50 <AUDIO_IO_Write>
 8001492:	2210      	movs	r2, #16
 8001494:	e7ee      	b.n	8001474 <wm8994_SetMute+0x20>
 8001496:	bf00      	nop
 8001498:	200007a4 	.word	0x200007a4

0800149c <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800149c:	2100      	movs	r1, #0
 800149e:	f7ff bfd9 	b.w	8001454 <wm8994_SetMute>

080014a2 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80014a2:	2100      	movs	r1, #0
 80014a4:	f7ff bfd6 	b.w	8001454 <wm8994_SetMute>

080014a8 <wm8994_Pause>:
{  
 80014a8:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80014aa:	2101      	movs	r1, #1
{  
 80014ac:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80014ae:	f7ff ffd1 	bl	8001454 <wm8994_SetMute>
 80014b2:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80014b4:	2201      	movs	r2, #1
 80014b6:	b2e8      	uxtb	r0, r5
 80014b8:	2102      	movs	r1, #2
 80014ba:	f000 fcc9 	bl	8001e50 <AUDIO_IO_Write>
}
 80014be:	4620      	mov	r0, r4
 80014c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080014c4 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80014c4:	2964      	cmp	r1, #100	; 0x64
 80014c6:	f04f 0264 	mov.w	r2, #100	; 0x64
{
 80014ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80014ce:	bf98      	it	ls
 80014d0:	ebc1 1781 	rsbls	r7, r1, r1, lsl #6
  if (outputEnabled != 0)
 80014d4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80015c4 <wm8994_SetVolume+0x100>
{
 80014d8:	4605      	mov	r5, r0
 80014da:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 80014dc:	f8d8 6000 	ldr.w	r6, [r8]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80014e0:	bf8e      	itee	hi
 80014e2:	4617      	movhi	r7, r2
 80014e4:	fbb7 f2f2 	udivls	r2, r7, r2
 80014e8:	b2d7      	uxtbls	r7, r2
  if (outputEnabled != 0)
 80014ea:	b32e      	cbz	r6, 8001538 <wm8994_SetVolume+0x74>
    if(convertedvol > 0x3E)
 80014ec:	2f3e      	cmp	r7, #62	; 0x3e
 80014ee:	d91d      	bls.n	800152c <wm8994_SetVolume+0x68>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80014f0:	2100      	movs	r1, #0
 80014f2:	f7ff ffaf 	bl	8001454 <wm8994_SetMute>
 80014f6:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80014f8:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80014fa:	f240 127f 	movw	r2, #383	; 0x17f
 80014fe:	211c      	movs	r1, #28
 8001500:	9000      	str	r0, [sp, #0]
 8001502:	f000 fca5 	bl	8001e50 <AUDIO_IO_Write>
 8001506:	f240 127f 	movw	r2, #383	; 0x17f
 800150a:	211d      	movs	r1, #29
 800150c:	9800      	ldr	r0, [sp, #0]
 800150e:	f000 fc9f 	bl	8001e50 <AUDIO_IO_Write>
 8001512:	f240 127f 	movw	r2, #383	; 0x17f
 8001516:	2126      	movs	r1, #38	; 0x26
 8001518:	9800      	ldr	r0, [sp, #0]
 800151a:	f000 fc99 	bl	8001e50 <AUDIO_IO_Write>
 800151e:	f240 127f 	movw	r2, #383	; 0x17f
 8001522:	2127      	movs	r1, #39	; 0x27
 8001524:	9800      	ldr	r0, [sp, #0]
 8001526:	f000 fc93 	bl	8001e50 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800152a:	e005      	b.n	8001538 <wm8994_SetVolume+0x74>
    else if (Volume == 0)
 800152c:	2900      	cmp	r1, #0
 800152e:	d130      	bne.n	8001592 <wm8994_SetVolume+0xce>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001530:	2101      	movs	r1, #1
 8001532:	f7ff ff8f 	bl	8001454 <wm8994_SetMute>
 8001536:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 8001538:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800153c:	b32b      	cbz	r3, 800158a <wm8994_SetVolume+0xc6>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800153e:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001540:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001546:	bf9a      	itte	ls
 8001548:	ebc4 1204 	rsbls	r2, r4, r4, lsl #4
 800154c:	2464      	movls	r4, #100	; 0x64
 800154e:	22ef      	movhi	r2, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 8001550:	9000      	str	r0, [sp, #0]
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001552:	bf9e      	ittt	ls
 8001554:	0112      	lslls	r2, r2, #4
 8001556:	fbb2 f2f4 	udivls	r2, r2, r4
 800155a:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800155c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 8001560:	9201      	str	r2, [sp, #4]
 8001562:	f000 fc75 	bl	8001e50 <AUDIO_IO_Write>
 8001566:	9a01      	ldr	r2, [sp, #4]
 8001568:	f240 4101 	movw	r1, #1025	; 0x401
 800156c:	9800      	ldr	r0, [sp, #0]
 800156e:	f000 fc6f 	bl	8001e50 <AUDIO_IO_Write>
 8001572:	9a01      	ldr	r2, [sp, #4]
 8001574:	f240 4104 	movw	r1, #1028	; 0x404
 8001578:	9800      	ldr	r0, [sp, #0]
 800157a:	f000 fc69 	bl	8001e50 <AUDIO_IO_Write>
 800157e:	9a01      	ldr	r2, [sp, #4]
 8001580:	f240 4105 	movw	r1, #1029	; 0x405
 8001584:	9800      	ldr	r0, [sp, #0]
 8001586:	f000 fc63 	bl	8001e50 <AUDIO_IO_Write>
}
 800158a:	4630      	mov	r0, r6
 800158c:	b002      	add	sp, #8
 800158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001592:	2100      	movs	r1, #0
 8001594:	f7ff ff5e 	bl	8001454 <wm8994_SetMute>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001598:	f447 72a0 	orr.w	r2, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800159c:	4606      	mov	r6, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800159e:	b2e8      	uxtb	r0, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80015a0:	211c      	movs	r1, #28
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	9000      	str	r0, [sp, #0]
 80015a6:	f000 fc53 	bl	8001e50 <AUDIO_IO_Write>
 80015aa:	9a01      	ldr	r2, [sp, #4]
 80015ac:	211d      	movs	r1, #29
 80015ae:	9800      	ldr	r0, [sp, #0]
 80015b0:	f000 fc4e 	bl	8001e50 <AUDIO_IO_Write>
 80015b4:	9a01      	ldr	r2, [sp, #4]
 80015b6:	2126      	movs	r1, #38	; 0x26
 80015b8:	9800      	ldr	r0, [sp, #0]
 80015ba:	f000 fc49 	bl	8001e50 <AUDIO_IO_Write>
 80015be:	9a01      	ldr	r2, [sp, #4]
 80015c0:	e7af      	b.n	8001522 <wm8994_SetVolume+0x5e>
 80015c2:	bf00      	nop
 80015c4:	200007a4 	.word	0x200007a4

080015c8 <wm8994_Init>:
{
 80015c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	4681      	mov	r9, r0
 80015ce:	4698      	mov	r8, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80015d0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 80015d4:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80015d6:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 80015da:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 80015dc:	f000 fc30 	bl	8001e40 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 80015e0:	2203      	movs	r2, #3
 80015e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 fc32 	bl	8001e50 <AUDIO_IO_Write>
 80015ec:	2200      	movs	r2, #0
 80015ee:	f640 0117 	movw	r1, #2071	; 0x817
 80015f2:	4620      	mov	r0, r4
 80015f4:	f000 fc2c 	bl	8001e50 <AUDIO_IO_Write>
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 80015fe:	4620      	mov	r0, r4
 8001600:	f000 fc26 	bl	8001e50 <AUDIO_IO_Write>
 8001604:	226c      	movs	r2, #108	; 0x6c
 8001606:	2139      	movs	r1, #57	; 0x39
 8001608:	4620      	mov	r0, r4
 800160a:	f000 fc21 	bl	8001e50 <AUDIO_IO_Write>
  if (input_device > 0)
 800160e:	b3c5      	cbz	r5, 8001682 <wm8994_Init+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001610:	2213      	movs	r2, #19
 8001612:	2101      	movs	r1, #1
 8001614:	4620      	mov	r0, r4
 8001616:	f000 fc1b 	bl	8001e50 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 800161a:	2032      	movs	r0, #50	; 0x32
 800161c:	f8df b4ec 	ldr.w	fp, [pc, #1260]	; 8001b0c <wm8994_Init+0x544>
 8001620:	f000 fc42 	bl	8001ea8 <AUDIO_IO_Delay>
  if (output_device > 0)
 8001624:	2e00      	cmp	r6, #0
 8001626:	f000 809a 	beq.w	800175e <wm8994_Init+0x196>
    outputEnabled = 1;
 800162a:	2701      	movs	r7, #1
    switch (output_device)
 800162c:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 800162e:	f8cb 7000 	str.w	r7, [fp]
    switch (output_device)
 8001632:	d07a      	beq.n	800172a <wm8994_Init+0x162>
 8001634:	2e03      	cmp	r6, #3
 8001636:	d026      	beq.n	8001686 <wm8994_Init+0xbe>
 8001638:	42be      	cmp	r6, r7
 800163a:	d176      	bne.n	800172a <wm8994_Init+0x162>
 AUDIO_IO_Write(Addr, Reg, Value);
 800163c:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001640:	2105      	movs	r1, #5
 8001642:	4620      	mov	r0, r4
 8001644:	f000 fc04 	bl	8001e50 <AUDIO_IO_Write>
 8001648:	2200      	movs	r2, #0
 800164a:	f240 6101 	movw	r1, #1537	; 0x601
 800164e:	4620      	mov	r0, r4
 8001650:	f000 fbfe 	bl	8001e50 <AUDIO_IO_Write>
 8001654:	2200      	movs	r2, #0
 8001656:	f240 6102 	movw	r1, #1538	; 0x602
 800165a:	4620      	mov	r0, r4
 800165c:	f000 fbf8 	bl	8001e50 <AUDIO_IO_Write>
 8001660:	2202      	movs	r2, #2
 8001662:	f240 6104 	movw	r1, #1540	; 0x604
 8001666:	4620      	mov	r0, r4
 8001668:	f000 fbf2 	bl	8001e50 <AUDIO_IO_Write>
 800166c:	2202      	movs	r2, #2
 800166e:	f240 6105 	movw	r1, #1541	; 0x605
 8001672:	4620      	mov	r0, r4
 8001674:	f000 fbec 	bl	8001e50 <AUDIO_IO_Write>
  if (input_device > 0)
 8001678:	bb3d      	cbnz	r5, 80016ca <wm8994_Init+0x102>
    inputEnabled = 0;
 800167a:	462f      	mov	r7, r5
 800167c:	f8cb 5004 	str.w	r5, [fp, #4]
 8001680:	e032      	b.n	80016e8 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001682:	2203      	movs	r2, #3
 8001684:	e7c5      	b.n	8001612 <wm8994_Init+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001686:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800168a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800168e:	f04f 0105 	mov.w	r1, #5
 8001692:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001694:	d13f      	bne.n	8001716 <wm8994_Init+0x14e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001696:	f000 fbdb 	bl	8001e50 <AUDIO_IO_Write>
 800169a:	4632      	mov	r2, r6
 800169c:	f240 6101 	movw	r1, #1537	; 0x601
 80016a0:	4620      	mov	r0, r4
 80016a2:	f000 fbd5 	bl	8001e50 <AUDIO_IO_Write>
 80016a6:	4632      	mov	r2, r6
 80016a8:	f240 6102 	movw	r1, #1538	; 0x602
 80016ac:	4620      	mov	r0, r4
 80016ae:	f000 fbcf 	bl	8001e50 <AUDIO_IO_Write>
 80016b2:	4632      	mov	r2, r6
 80016b4:	f240 6104 	movw	r1, #1540	; 0x604
 80016b8:	4620      	mov	r0, r4
 80016ba:	f000 fbc9 	bl	8001e50 <AUDIO_IO_Write>
 80016be:	4632      	mov	r2, r6
 80016c0:	f240 6105 	movw	r1, #1541	; 0x605
 80016c4:	4620      	mov	r0, r4
 80016c6:	f000 fbc3 	bl	8001e50 <AUDIO_IO_Write>
    inputEnabled = 1;
 80016ca:	2701      	movs	r7, #1
    switch (input_device)
 80016cc:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    inputEnabled = 1;
 80016d0:	f8cb 7004 	str.w	r7, [fp, #4]
    switch (input_device)
 80016d4:	f000 809d 	beq.w	8001812 <wm8994_Init+0x24a>
 80016d8:	d844      	bhi.n	8001764 <wm8994_Init+0x19c>
 80016da:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80016de:	f000 80c7 	beq.w	8001870 <wm8994_Init+0x2a8>
 80016e2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80016e6:	d06e      	beq.n	80017c6 <wm8994_Init+0x1fe>
  switch (AudioFreq)
 80016e8:	f5b8 4ffa 	cmp.w	r8, #32000	; 0x7d00
 80016ec:	f000 81cd 	beq.w	8001a8a <wm8994_Init+0x4c2>
 80016f0:	f200 80c8 	bhi.w	8001884 <wm8994_Init+0x2bc>
 80016f4:	f5b8 5f7a 	cmp.w	r8, #16000	; 0x3e80
 80016f8:	f000 81c5 	beq.w	8001a86 <wm8994_Init+0x4be>
 80016fc:	f200 80bb 	bhi.w	8001876 <wm8994_Init+0x2ae>
 8001700:	f5b8 5ffa 	cmp.w	r8, #8000	; 0x1f40
 8001704:	f000 80ce 	beq.w	80018a4 <wm8994_Init+0x2dc>
 8001708:	f642 3311 	movw	r3, #11025	; 0x2b11
 800170c:	4598      	cmp	r8, r3
 800170e:	f000 81c0 	beq.w	8001a92 <wm8994_Init+0x4ca>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001712:	2283      	movs	r2, #131	; 0x83
 8001714:	e0c7      	b.n	80018a6 <wm8994_Init+0x2de>
 8001716:	f000 fb9b 	bl	8001e50 <AUDIO_IO_Write>
 800171a:	463a      	mov	r2, r7
 800171c:	f240 6101 	movw	r1, #1537	; 0x601
 8001720:	4620      	mov	r0, r4
 8001722:	f000 fb95 	bl	8001e50 <AUDIO_IO_Write>
 8001726:	463a      	mov	r2, r7
 8001728:	e795      	b.n	8001656 <wm8994_Init+0x8e>
 800172a:	f240 3203 	movw	r2, #771	; 0x303
 800172e:	2105      	movs	r1, #5
 8001730:	4620      	mov	r0, r4
 8001732:	f000 fb8d 	bl	8001e50 <AUDIO_IO_Write>
 8001736:	463a      	mov	r2, r7
 8001738:	f240 6101 	movw	r1, #1537	; 0x601
 800173c:	4620      	mov	r0, r4
 800173e:	f000 fb87 	bl	8001e50 <AUDIO_IO_Write>
 8001742:	463a      	mov	r2, r7
 8001744:	f240 6102 	movw	r1, #1538	; 0x602
 8001748:	4620      	mov	r0, r4
 800174a:	f000 fb81 	bl	8001e50 <AUDIO_IO_Write>
 800174e:	2200      	movs	r2, #0
 8001750:	f240 6104 	movw	r1, #1540	; 0x604
 8001754:	4620      	mov	r0, r4
 8001756:	f000 fb7b 	bl	8001e50 <AUDIO_IO_Write>
 800175a:	2200      	movs	r2, #0
 800175c:	e787      	b.n	800166e <wm8994_Init+0xa6>
    outputEnabled = 0;
 800175e:	f8cb 6000 	str.w	r6, [fp]
 8001762:	e789      	b.n	8001678 <wm8994_Init+0xb0>
    switch (input_device)
 8001764:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001768:	d1be      	bne.n	80016e8 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 800176a:	f640 723c 	movw	r2, #3900	; 0xf3c
 800176e:	2104      	movs	r1, #4
 8001770:	4620      	mov	r0, r4
 8001772:	f000 fb6d 	bl	8001e50 <AUDIO_IO_Write>
 8001776:	22db      	movs	r2, #219	; 0xdb
 8001778:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800177c:	4620      	mov	r0, r4
 800177e:	f000 fb67 	bl	8001e50 <AUDIO_IO_Write>
 8001782:	22db      	movs	r2, #219	; 0xdb
 8001784:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fb61 	bl	8001e50 <AUDIO_IO_Write>
 800178e:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8001792:	2102      	movs	r1, #2
 8001794:	4620      	mov	r0, r4
 8001796:	f000 fb5b 	bl	8001e50 <AUDIO_IO_Write>
 800179a:	2202      	movs	r2, #2
 800179c:	f240 6106 	movw	r1, #1542	; 0x606
 80017a0:	4620      	mov	r0, r4
 80017a2:	f000 fb55 	bl	8001e50 <AUDIO_IO_Write>
 80017a6:	2202      	movs	r2, #2
 80017a8:	f240 6107 	movw	r1, #1543	; 0x607
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 fb4f 	bl	8001e50 <AUDIO_IO_Write>
 80017b2:	2202      	movs	r2, #2
 80017b4:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80017b8:	4620      	mov	r0, r4
 80017ba:	f000 fb49 	bl	8001e50 <AUDIO_IO_Write>
 80017be:	2202      	movs	r2, #2
 80017c0:	f240 6109 	movw	r1, #1545	; 0x609
 80017c4:	e04f      	b.n	8001866 <wm8994_Init+0x29e>
 80017c6:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80017ca:	2104      	movs	r1, #4
 80017cc:	4620      	mov	r0, r4
 80017ce:	f000 fb3f 	bl	8001e50 <AUDIO_IO_Write>
 80017d2:	22db      	movs	r2, #219	; 0xdb
 80017d4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80017d8:	4620      	mov	r0, r4
 80017da:	f000 fb39 	bl	8001e50 <AUDIO_IO_Write>
 80017de:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80017e2:	2102      	movs	r1, #2
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 fb33 	bl	8001e50 <AUDIO_IO_Write>
 80017ea:	2202      	movs	r2, #2
 80017ec:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80017f0:	4620      	mov	r0, r4
 80017f2:	f000 fb2d 	bl	8001e50 <AUDIO_IO_Write>
 80017f6:	2202      	movs	r2, #2
 80017f8:	f240 6109 	movw	r1, #1545	; 0x609
 80017fc:	4620      	mov	r0, r4
 80017fe:	f000 fb27 	bl	8001e50 <AUDIO_IO_Write>
 8001802:	220e      	movs	r2, #14
 8001804:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001808:	4620      	mov	r0, r4
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800180a:	2700      	movs	r7, #0
 AUDIO_IO_Write(Addr, Reg, Value);
 800180c:	f000 fb20 	bl	8001e50 <AUDIO_IO_Write>
      break;
 8001810:	e76a      	b.n	80016e8 <wm8994_Init+0x120>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001812:	2211      	movs	r2, #17
 8001814:	2128      	movs	r1, #40	; 0x28
 8001816:	4620      	mov	r0, r4
 8001818:	f000 fb1a 	bl	8001e50 <AUDIO_IO_Write>
 800181c:	2235      	movs	r2, #53	; 0x35
 800181e:	2129      	movs	r1, #41	; 0x29
 8001820:	4620      	mov	r0, r4
 8001822:	f000 fb15 	bl	8001e50 <AUDIO_IO_Write>
 8001826:	2235      	movs	r2, #53	; 0x35
 8001828:	212a      	movs	r1, #42	; 0x2a
 800182a:	4620      	mov	r0, r4
 800182c:	f000 fb10 	bl	8001e50 <AUDIO_IO_Write>
 8001830:	f240 3203 	movw	r2, #771	; 0x303
 8001834:	2104      	movs	r1, #4
 8001836:	4620      	mov	r0, r4
 8001838:	f000 fb0a 	bl	8001e50 <AUDIO_IO_Write>
 800183c:	22db      	movs	r2, #219	; 0xdb
 800183e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001842:	4620      	mov	r0, r4
 8001844:	f000 fb04 	bl	8001e50 <AUDIO_IO_Write>
 8001848:	f246 3250 	movw	r2, #25424	; 0x6350
 800184c:	2102      	movs	r1, #2
 800184e:	4620      	mov	r0, r4
 8001850:	f000 fafe 	bl	8001e50 <AUDIO_IO_Write>
 8001854:	2202      	movs	r2, #2
 8001856:	f240 6106 	movw	r1, #1542	; 0x606
 800185a:	4620      	mov	r0, r4
 800185c:	f000 faf8 	bl	8001e50 <AUDIO_IO_Write>
 8001860:	2202      	movs	r2, #2
 8001862:	f240 6107 	movw	r1, #1543	; 0x607
 8001866:	4620      	mov	r0, r4
 8001868:	f000 faf2 	bl	8001e50 <AUDIO_IO_Write>
 800186c:	220d      	movs	r2, #13
 800186e:	e7c9      	b.n	8001804 <wm8994_Init+0x23c>
 8001870:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001874:	e7de      	b.n	8001834 <wm8994_Init+0x26c>
  switch (AudioFreq)
 8001876:	f245 6322 	movw	r3, #22050	; 0x5622
 800187a:	4598      	cmp	r8, r3
 800187c:	f47f af49 	bne.w	8001712 <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001880:	2243      	movs	r2, #67	; 0x43
 8001882:	e010      	b.n	80018a6 <wm8994_Init+0x2de>
  switch (AudioFreq)
 8001884:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001888:	4598      	cmp	r8, r3
 800188a:	f43f af42 	beq.w	8001712 <wm8994_Init+0x14a>
 800188e:	4b9d      	ldr	r3, [pc, #628]	; (8001b04 <wm8994_Init+0x53c>)
 8001890:	4598      	cmp	r8, r3
 8001892:	f000 80fc 	beq.w	8001a8e <wm8994_Init+0x4c6>
 8001896:	f64a 4344 	movw	r3, #44100	; 0xac44
 800189a:	4598      	cmp	r8, r3
 800189c:	f47f af39 	bne.w	8001712 <wm8994_Init+0x14a>
 AUDIO_IO_Write(Addr, Reg, Value);
 80018a0:	2273      	movs	r2, #115	; 0x73
 80018a2:	e000      	b.n	80018a6 <wm8994_Init+0x2de>
 80018a4:	2203      	movs	r2, #3
 80018a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 fad0 	bl	8001e50 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80018b0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 80018b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018b8:	4620      	mov	r0, r4
 80018ba:	bf0c      	ite	eq
 80018bc:	f244 0218 	movweq	r2, #16408	; 0x4018
 80018c0:	f244 0210 	movwne	r2, #16400	; 0x4010
 80018c4:	f000 fac4 	bl	8001e50 <AUDIO_IO_Write>
 80018c8:	2200      	movs	r2, #0
 80018ca:	f240 3102 	movw	r1, #770	; 0x302
 80018ce:	4620      	mov	r0, r4
 80018d0:	f000 fabe 	bl	8001e50 <AUDIO_IO_Write>
 80018d4:	220a      	movs	r2, #10
 80018d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80018da:	4620      	mov	r0, r4
 80018dc:	f000 fab8 	bl	8001e50 <AUDIO_IO_Write>
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e6:	4620      	mov	r0, r4
 80018e8:	f000 fab2 	bl	8001e50 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 80018ec:	2e00      	cmp	r6, #0
 80018ee:	f000 80a9 	beq.w	8001a44 <wm8994_Init+0x47c>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80018f2:	2e02      	cmp	r6, #2
 80018f4:	d123      	bne.n	800193e <wm8994_Init+0x376>
 AUDIO_IO_Write(Addr, Reg, Value);
 80018f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fa:	212d      	movs	r1, #45	; 0x2d
 80018fc:	4620      	mov	r0, r4
      if(ColdStartup)
 80018fe:	4e82      	ldr	r6, [pc, #520]	; (8001b08 <wm8994_Init+0x540>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8001900:	f000 faa6 	bl	8001e50 <AUDIO_IO_Write>
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	212e      	movs	r1, #46	; 0x2e
 800190a:	4620      	mov	r0, r4
 800190c:	f000 faa0 	bl	8001e50 <AUDIO_IO_Write>
      if(ColdStartup)
 8001910:	7833      	ldrb	r3, [r6, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80bf 	beq.w	8001a96 <wm8994_Init+0x4ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001918:	4620      	mov	r0, r4
 800191a:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800191e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001922:	f000 fa95 	bl	8001e50 <AUDIO_IO_Write>
        ColdStartup=0;
 8001926:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 8001928:	f44f 7096 	mov.w	r0, #300	; 0x12c
        ColdStartup=0;
 800192c:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 800192e:	f000 fabb 	bl	8001ea8 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001938:	4620      	mov	r0, r4
 800193a:	f000 fa89 	bl	8001e50 <AUDIO_IO_Write>
 800193e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001942:	2103      	movs	r1, #3
 8001944:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001946:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 800194a:	f000 fa81 	bl	8001e50 <AUDIO_IO_Write>
 800194e:	2200      	movs	r2, #0
 8001950:	2122      	movs	r1, #34	; 0x22
 8001952:	4620      	mov	r0, r4
 8001954:	f000 fa7c 	bl	8001e50 <AUDIO_IO_Write>
 8001958:	2200      	movs	r2, #0
 800195a:	2123      	movs	r1, #35	; 0x23
 800195c:	4620      	mov	r0, r4
 800195e:	f000 fa77 	bl	8001e50 <AUDIO_IO_Write>
 8001962:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001966:	2136      	movs	r1, #54	; 0x36
 8001968:	4620      	mov	r0, r4
 800196a:	f000 fa71 	bl	8001e50 <AUDIO_IO_Write>
 800196e:	f243 0203 	movw	r2, #12291	; 0x3003
 8001972:	2101      	movs	r1, #1
 8001974:	4620      	mov	r0, r4
 8001976:	f000 fa6b 	bl	8001e50 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800197a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800197e:	f04f 0151 	mov.w	r1, #81	; 0x51
 8001982:	4620      	mov	r0, r4
 8001984:	bf0c      	ite	eq
 8001986:	f240 2205 	movweq	r2, #517	; 0x205
 800198a:	2205      	movne	r2, #5
 800198c:	f000 fa60 	bl	8001e50 <AUDIO_IO_Write>
 8001990:	f243 3203 	movw	r2, #13059	; 0x3303
 8001994:	2101      	movs	r1, #1
 8001996:	4620      	mov	r0, r4
 8001998:	f000 fa5a 	bl	8001e50 <AUDIO_IO_Write>
 800199c:	2222      	movs	r2, #34	; 0x22
 800199e:	2160      	movs	r1, #96	; 0x60
 80019a0:	4620      	mov	r0, r4
 80019a2:	f000 fa55 	bl	8001e50 <AUDIO_IO_Write>
 80019a6:	f649 7225 	movw	r2, #40741	; 0x9f25
 80019aa:	214c      	movs	r1, #76	; 0x4c
 80019ac:	4620      	mov	r0, r4
 80019ae:	f000 fa4f 	bl	8001e50 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 fa78 	bl	8001ea8 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80019b8:	2201      	movs	r2, #1
 80019ba:	212d      	movs	r1, #45	; 0x2d
 80019bc:	4620      	mov	r0, r4
 80019be:	f000 fa47 	bl	8001e50 <AUDIO_IO_Write>
 80019c2:	2201      	movs	r2, #1
 80019c4:	212e      	movs	r1, #46	; 0x2e
 80019c6:	4620      	mov	r0, r4
 80019c8:	f000 fa42 	bl	8001e50 <AUDIO_IO_Write>
 80019cc:	f44f 724c 	mov.w	r2, #816	; 0x330
 80019d0:	2103      	movs	r1, #3
 80019d2:	4620      	mov	r0, r4
 80019d4:	f000 fa3c 	bl	8001e50 <AUDIO_IO_Write>
 80019d8:	2233      	movs	r2, #51	; 0x33
 80019da:	2154      	movs	r1, #84	; 0x54
 80019dc:	4620      	mov	r0, r4
 80019de:	f000 fa37 	bl	8001e50 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 80019e2:	f240 1001 	movw	r0, #257	; 0x101
 80019e6:	f000 fa5f 	bl	8001ea8 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80019ea:	22ee      	movs	r2, #238	; 0xee
 80019ec:	2160      	movs	r1, #96	; 0x60
 80019ee:	4620      	mov	r0, r4
 80019f0:	f000 fa2e 	bl	8001e50 <AUDIO_IO_Write>
 80019f4:	22c0      	movs	r2, #192	; 0xc0
 80019f6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80019fa:	4620      	mov	r0, r4
 80019fc:	f000 fa28 	bl	8001e50 <AUDIO_IO_Write>
 8001a00:	22c0      	movs	r2, #192	; 0xc0
 8001a02:	f240 6111 	movw	r1, #1553	; 0x611
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 fa22 	bl	8001e50 <AUDIO_IO_Write>
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001a12:	4620      	mov	r0, r4
 8001a14:	f000 fa1c 	bl	8001e50 <AUDIO_IO_Write>
 8001a18:	22c0      	movs	r2, #192	; 0xc0
 8001a1a:	f240 6112 	movw	r1, #1554	; 0x612
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f000 fa16 	bl	8001e50 <AUDIO_IO_Write>
 8001a24:	22c0      	movs	r2, #192	; 0xc0
 8001a26:	f240 6113 	movw	r1, #1555	; 0x613
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f000 fa10 	bl	8001e50 <AUDIO_IO_Write>
 8001a30:	2210      	movs	r2, #16
 8001a32:	f240 4122 	movw	r1, #1058	; 0x422
 8001a36:	4620      	mov	r0, r4
 8001a38:	f000 fa0a 	bl	8001e50 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	4648      	mov	r0, r9
 8001a40:	f7ff fd40 	bl	80014c4 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8001a44:	b1e5      	cbz	r5, 8001a80 <wm8994_Init+0x4b8>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001a46:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001a4a:	d002      	beq.n	8001a52 <wm8994_Init+0x48a>
 8001a4c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001a50:	d12a      	bne.n	8001aa8 <wm8994_Init+0x4e0>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a52:	f046 0213 	orr.w	r2, r6, #19
 8001a56:	2101      	movs	r1, #1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f000 f9f9 	bl	8001e50 <AUDIO_IO_Write>
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001a64:	4620      	mov	r0, r4
 8001a66:	f000 f9f3 	bl	8001e50 <AUDIO_IO_Write>
 8001a6a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a6e:	f240 4111 	movw	r1, #1041	; 0x411
 8001a72:	4620      	mov	r0, r4
 8001a74:	f000 f9ec 	bl	8001e50 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001a78:	4651      	mov	r1, sl
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	f7ff fd22 	bl	80014c4 <wm8994_SetVolume>
}
 8001a80:	4638      	mov	r0, r7
 8001a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a86:	2233      	movs	r2, #51	; 0x33
 8001a88:	e70d      	b.n	80018a6 <wm8994_Init+0x2de>
 8001a8a:	2263      	movs	r2, #99	; 0x63
 8001a8c:	e70b      	b.n	80018a6 <wm8994_Init+0x2de>
 8001a8e:	22a3      	movs	r2, #163	; 0xa3
 8001a90:	e709      	b.n	80018a6 <wm8994_Init+0x2de>
 8001a92:	2213      	movs	r2, #19
 8001a94:	e707      	b.n	80018a6 <wm8994_Init+0x2de>
 8001a96:	4620      	mov	r0, r4
 8001a98:	f248 1208 	movw	r2, #33032	; 0x8108
 8001a9c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001aa0:	f000 f9d6 	bl	8001e50 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8001aa4:	2032      	movs	r0, #50	; 0x32
 8001aa6:	e742      	b.n	800192e <wm8994_Init+0x366>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001aa8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001aac:	d115      	bne.n	8001ada <wm8994_Init+0x512>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001aae:	f046 0213 	orr.w	r2, r6, #19
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f000 f9cb 	bl	8001e50 <AUDIO_IO_Write>
 8001aba:	2202      	movs	r2, #2
 8001abc:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 f9c5 	bl	8001e50 <AUDIO_IO_Write>
 8001ac6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001aca:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f000 f9be 	bl	8001e50 <AUDIO_IO_Write>
 8001ad4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001ad8:	e7c9      	b.n	8001a6e <wm8994_Init+0x4a6>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001ada:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8001ade:	d002      	beq.n	8001ae6 <wm8994_Init+0x51e>
 8001ae0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001ae4:	d1c8      	bne.n	8001a78 <wm8994_Init+0x4b0>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001ae6:	220b      	movs	r2, #11
 8001ae8:	2118      	movs	r1, #24
 8001aea:	4620      	mov	r0, r4
 8001aec:	f000 f9b0 	bl	8001e50 <AUDIO_IO_Write>
 8001af0:	220b      	movs	r2, #11
 8001af2:	211a      	movs	r1, #26
 8001af4:	4620      	mov	r0, r4
 8001af6:	f000 f9ab 	bl	8001e50 <AUDIO_IO_Write>
 8001afa:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001afe:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001b02:	e7b6      	b.n	8001a72 <wm8994_Init+0x4aa>
 8001b04:	00017700 	.word	0x00017700
 8001b08:	20000028 	.word	0x20000028
 8001b0c:	200007a4 	.word	0x200007a4

08001b10 <wm8994_Stop>:
{
 8001b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8001b12:	4f19      	ldr	r7, [pc, #100]	; (8001b78 <wm8994_Stop+0x68>)
{
 8001b14:	4604      	mov	r4, r0
 8001b16:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8001b18:	683d      	ldr	r5, [r7, #0]
 8001b1a:	b355      	cbz	r5, 8001b72 <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	f7ff fc99 	bl	8001454 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001b22:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001b24:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001b26:	d024      	beq.n	8001b72 <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001b28:	b2e0      	uxtb	r0, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001b32:	9001      	str	r0, [sp, #4]
 8001b34:	f000 f98c 	bl	8001e50 <AUDIO_IO_Write>
 8001b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3c:	f240 4122 	movw	r1, #1058	; 0x422
 8001b40:	9801      	ldr	r0, [sp, #4]
 8001b42:	f000 f985 	bl	8001e50 <AUDIO_IO_Write>
 8001b46:	2200      	movs	r2, #0
 8001b48:	212d      	movs	r1, #45	; 0x2d
 8001b4a:	9801      	ldr	r0, [sp, #4]
 8001b4c:	f000 f980 	bl	8001e50 <AUDIO_IO_Write>
 8001b50:	2200      	movs	r2, #0
 8001b52:	212e      	movs	r1, #46	; 0x2e
 8001b54:	9801      	ldr	r0, [sp, #4]
 8001b56:	f000 f97b 	bl	8001e50 <AUDIO_IO_Write>
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	9801      	ldr	r0, [sp, #4]
 8001b60:	f000 f976 	bl	8001e50 <AUDIO_IO_Write>
 8001b64:	2200      	movs	r2, #0
 8001b66:	9801      	ldr	r0, [sp, #4]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	f000 f971 	bl	8001e50 <AUDIO_IO_Write>
      outputEnabled = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
}
 8001b72:	4628      	mov	r0, r5
 8001b74:	b003      	add	sp, #12
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b78:	200007a4 	.word	0x200007a4

08001b7c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001b82:	f003 fe9c 	bl	80058be <HAL_I2C_GetState>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	f040 8096 	bne.w	8001cb8 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001b8e:	2600      	movs	r6, #0
 8001b90:	4c4b      	ldr	r4, [pc, #300]	; (8001cc0 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001b92:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001b94:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001b96:	bf0c      	ite	eq
 8001b98:	4a4a      	ldreq	r2, [pc, #296]	; (8001cc4 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001b9a:	4a4b      	ldrne	r2, [pc, #300]	; (8001cc8 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001b9c:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001b9e:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	; (8001ccc <I2Cx_Init+0x150>)
 8001ba2:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ba6:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001baa:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001bae:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001bb4:	d143      	bne.n	8001c3e <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bba:	2080      	movs	r0, #128	; 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001bbc:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bc0:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001bc6:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001bd6:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bd8:	483d      	ldr	r0, [pc, #244]	; (8001cd0 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001bda:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bde:	f003 f8c3 	bl	8004d68 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001be2:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001be6:	a905      	add	r1, sp, #20
 8001be8:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001bea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bec:	f003 f8bc 	bl	8004d68 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001bf2:	4632      	mov	r2, r6
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bfc:	6423      	str	r3, [r4, #64]	; 0x40
 8001bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001c08:	6a23      	ldr	r3, [r4, #32]
 8001c0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c0e:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001c10:	6a23      	ldr	r3, [r4, #32]
 8001c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c16:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001c18:	f002 fc16 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001c1c:	2048      	movs	r0, #72	; 0x48
 8001c1e:	f002 fc45 	bl	80044ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001c22:	2049      	movs	r0, #73	; 0x49
 8001c24:	4632      	mov	r2, r6
 8001c26:	210f      	movs	r1, #15
 8001c28:	f002 fc0e 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001c2c:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001c2e:	f002 fc3d 	bl	80044ac <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8001c32:	4628      	mov	r0, r5
  }
}
 8001c34:	b00a      	add	sp, #40	; 0x28
 8001c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 8001c3a:	f003 bbc5 	b.w	80053c8 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001c46:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c48:	4822      	ldr	r0, [pc, #136]	; (8001cd4 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001c4e:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c64:	a905      	add	r1, sp, #20
 8001c66:	f003 f87f 	bl	8004d68 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c6e:	a905      	add	r1, sp, #20
 8001c70:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001c72:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c74:	f003 f878 	bl	8004d68 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001c7a:	4632      	mov	r2, r6
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c84:	6423      	str	r3, [r4, #64]	; 0x40
 8001c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	9304      	str	r3, [sp, #16]
 8001c8e:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001c90:	6a23      	ldr	r3, [r4, #32]
 8001c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c96:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001c98:	6a23      	ldr	r3, [r4, #32]
 8001c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c9e:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001ca0:	f002 fbd2 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001ca4:	201f      	movs	r0, #31
 8001ca6:	f002 fc01 	bl	80044ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001caa:	2020      	movs	r0, #32
 8001cac:	4632      	mov	r2, r6
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f002 fbca 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001cb4:	2020      	movs	r0, #32
 8001cb6:	e7ba      	b.n	8001c2e <I2Cx_Init+0xb2>
}
 8001cb8:	b00a      	add	sp, #40	; 0x28
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
 8001cbc:	200007ac 	.word	0x200007ac
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40005c00 	.word	0x40005c00
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	40912732 	.word	0x40912732
 8001cd0:	40021c00 	.word	0x40021c00
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001cd8:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001cda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8001cde:	b085      	sub	sp, #20
 8001ce0:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ce2:	9402      	str	r4, [sp, #8]
 8001ce4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001ce8:	9401      	str	r4, [sp, #4]
 8001cea:	9c08      	ldr	r4, [sp, #32]
 8001cec:	9400      	str	r4, [sp, #0]
 8001cee:	f003 fbd6 	bl	800549e <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	b128      	cbz	r0, 8001d02 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f003 fbb8 	bl	800546c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f7ff ff3d 	bl	8001b7c <I2Cx_Init>
}
 8001d02:	4620      	mov	r0, r4
 8001d04:	b005      	add	sp, #20
 8001d06:	bd30      	pop	{r4, r5, pc}

08001d08 <I2Cx_ReadMultiple>:
{
 8001d08:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d0a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8001d0e:	b085      	sub	sp, #20
 8001d10:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d12:	9402      	str	r4, [sp, #8]
 8001d14:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001d18:	9401      	str	r4, [sp, #4]
 8001d1a:	9c08      	ldr	r4, [sp, #32]
 8001d1c:	9400      	str	r4, [sp, #0]
 8001d1e:	f003 fc75 	bl	800560c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001d22:	4604      	mov	r4, r0
 8001d24:	b128      	cbz	r0, 8001d32 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8001d26:	4628      	mov	r0, r5
 8001d28:	f003 fba0 	bl	800546c <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7ff ff25 	bl	8001b7c <I2Cx_Init>
}
 8001d32:	4620      	mov	r0, r4
 8001d34:	b005      	add	sp, #20
 8001d36:	bd30      	pop	{r4, r5, pc}

08001d38 <BSP_LED_Init>:
{
 8001d38:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8001d3a:	4604      	mov	r4, r0
{
 8001d3c:	b087      	sub	sp, #28
  if (Led == LED1)
 8001d3e:	b9c8      	cbnz	r0, 8001d74 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001d44:	a901      	add	r1, sp, #4
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001d60:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001d66:	f002 ffff 	bl	8004d68 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <BSP_LED_Init+0x44>)
 8001d70:	f003 f986 	bl	8005080 <HAL_GPIO_WritePin>
}
 8001d74:	b007      	add	sp, #28
 8001d76:	bd30      	pop	{r4, r5, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40022000 	.word	0x40022000

08001d80 <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <BSP_PB_Init+0x98>)
 8001d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001d8c:	b08a      	sub	sp, #40	; 0x28
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4604      	mov	r4, r0
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	b990      	cbnz	r0, 8001dbe <BSP_PB_Init+0x3e>
 8001d98:	9302      	str	r3, [sp, #8]
 8001d9a:	9b02      	ldr	r3, [sp, #8]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001d9c:	b9b9      	cbnz	r1, 8001dce <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001da0:	9107      	str	r1, [sp, #28]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001da2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001da6:	e9cd 3105 	strd	r3, r1, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001daa:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dac:	a905      	add	r1, sp, #20
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dae:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <BSP_PB_Init+0xa0>)
 8001db2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001db6:	f002 ffd7 	bl	8004d68 <HAL_GPIO_Init>
}
 8001dba:	b00a      	add	sp, #40	; 0x28
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001dbe:	2801      	cmp	r0, #1
 8001dc0:	d102      	bne.n	8001dc8 <BSP_PB_Init+0x48>
 8001dc2:	9303      	str	r3, [sp, #12]
 8001dc4:	9b03      	ldr	r3, [sp, #12]
 8001dc6:	e7e9      	b.n	8001d9c <BSP_PB_Init+0x1c>
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9b04      	ldr	r3, [sp, #16]
 8001dcc:	e7e6      	b.n	8001d9c <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001dce:	2901      	cmp	r1, #1
 8001dd0:	d1f3      	bne.n	8001dba <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001dd2:	4d12      	ldr	r5, [pc, #72]	; (8001e1c <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dd4:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dd6:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001dd8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001ddc:	42b4      	cmp	r4, r6
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001dde:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001de0:	f04f 0302 	mov.w	r3, #2
 8001de4:	e9cd 6307 	strd	r6, r3, [sp, #28]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001de8:	bf0c      	ite	eq
 8001dea:	f44f 1388 	moveq.w	r3, #1114112	; 0x110000
 8001dee:	f44f 1304 	movne.w	r3, #2162688	; 0x210000
 8001df2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <BSP_PB_Init+0xa0>)
 8001df6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001dfa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dfe:	f002 ffb3 	bl	8004d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001e02:	4632      	mov	r2, r6
 8001e04:	f994 0006 	ldrsb.w	r0, [r4, #6]
 8001e08:	210f      	movs	r1, #15
 8001e0a:	9001      	str	r0, [sp, #4]
 8001e0c:	f002 fb1c 	bl	8004448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001e10:	9801      	ldr	r0, [sp, #4]
 8001e12:	f002 fb4b 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 8001e16:	e7d0      	b.n	8001dba <BSP_PB_Init+0x3a>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08014158 	.word	0x08014158
 8001e20:	2000005c 	.word	0x2000005c

08001e24 <BSP_PB_GetState>:
{
 8001e24:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <BSP_PB_GetState+0x14>)
 8001e28:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <BSP_PB_GetState+0x18>)
 8001e2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001e32:	f003 f91f 	bl	8005074 <HAL_GPIO_ReadPin>
}
 8001e36:	bd08      	pop	{r3, pc}
 8001e38:	08014158 	.word	0x08014158
 8001e3c:	2000005c 	.word	0x2000005c

08001e40 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8001e40:	4801      	ldr	r0, [pc, #4]	; (8001e48 <AUDIO_IO_Init+0x8>)
 8001e42:	f7ff be9b 	b.w	8001b7c <I2Cx_Init>
 8001e46:	bf00      	nop
 8001e48:	200007ac 	.word	0x200007ac

08001e4c <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8001e4c:	4770      	bx	lr
	...

08001e50 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001e52:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001e54:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001e56:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001e5a:	f10d 020e 	add.w	r2, sp, #14
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	460a      	mov	r2, r1
 8001e64:	4601      	mov	r1, r0
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <AUDIO_IO_Write+0x24>)
 8001e68:	f7ff ff36 	bl	8001cd8 <I2Cx_WriteMultiple>
}
 8001e6c:	b005      	add	sp, #20
 8001e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e72:	bf00      	nop
 8001e74:	200007ac 	.word	0x200007ac

08001e78 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001e7a:	2300      	movs	r3, #0
{
 8001e7c:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001e7e:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 8001e82:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001e86:	2302      	movs	r3, #2
 8001e88:	9100      	str	r1, [sp, #0]
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <AUDIO_IO_Read+0x2c>)
 8001e90:	f7ff ff3a 	bl	8001d08 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001e94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001e98:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8001e9a:	b280      	uxth	r0, r0
 8001e9c:	b005      	add	sp, #20
 8001e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea2:	bf00      	nop
 8001ea4:	200007ac 	.word	0x200007ac

08001ea8 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001ea8:	f002 baaa 	b.w	8004400 <HAL_Delay>

08001eac <CAMERA_IO_Init>:
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
  I2Cx_Init(&hI2cExtHandler);
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <CAMERA_IO_Init+0x8>)
 8001eae:	f7ff be65 	b.w	8001b7c <I2Cx_Init>
 8001eb2:	bf00      	nop
 8001eb4:	200007f8 	.word	0x200007f8

08001eb8 <EEPROM_IO_Init>:
 8001eb8:	f7ff bff8 	b.w	8001eac <CAMERA_IO_Init>

08001ebc <EEPROM_IO_WriteData>:
  * @param  BufferSize: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_WriteData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001ebc:	b29b      	uxth	r3, r3
{
 8001ebe:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	b2c1      	uxtb	r1, r0
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <EEPROM_IO_WriteData+0x1c>)
 8001ecc:	f7ff ff04 	bl	8001cd8 <I2Cx_WriteMultiple>
}
 8001ed0:	b003      	add	sp, #12
 8001ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed6:	bf00      	nop
 8001ed8:	200007f8 	.word	0x200007f8

08001edc <EEPROM_IO_ReadData>:
  * @param  BufferSize: Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_ReadData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001edc:	b29b      	uxth	r3, r3
{
 8001ede:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001ee0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	b2c1      	uxtb	r1, r0
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <EEPROM_IO_ReadData+0x1c>)
 8001eec:	f7ff ff0c 	bl	8001d08 <I2Cx_ReadMultiple>
}
 8001ef0:	b003      	add	sp, #12
 8001ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ef6:	bf00      	nop
 8001ef8:	200007f8 	.word	0x200007f8

08001efc <EEPROM_IO_IsDeviceReady>:
  * @param  DevAddress: Target device address
  * @param  Trials: Number of trials
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_IsDeviceReady(uint16_t DevAddress, uint32_t Trials)
{ 
 8001efc:	460a      	mov	r2, r1
  return (HAL_I2C_IsDeviceReady(i2c_handler, DevAddress, Trials, 1000));
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	4601      	mov	r1, r0
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <EEPROM_IO_IsDeviceReady+0x10>)
 8001f06:	f003 bc3d 	b.w	8005784 <HAL_I2C_IsDeviceReady>
 8001f0a:	bf00      	nop
 8001f0c:	200007f8 	.word	0x200007f8

08001f10 <TS_IO_Init>:
 8001f10:	f7ff bf96 	b.w	8001e40 <AUDIO_IO_Init>

08001f14 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f16:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f1a:	f10d 020f 	add.w	r2, sp, #15
 8001f1e:	2301      	movs	r3, #1
 8001f20:	9200      	str	r2, [sp, #0]
 8001f22:	460a      	mov	r2, r1
 8001f24:	4601      	mov	r1, r0
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TS_IO_Write+0x20>)
 8001f2a:	f7ff fed5 	bl	8001cd8 <I2Cx_WriteMultiple>
}
 8001f2e:	b005      	add	sp, #20
 8001f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f34:	200007ac 	.word	0x200007ac

08001f38 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8001f3a:	2300      	movs	r3, #0
{
 8001f3c:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f3e:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 8001f42:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f46:	2301      	movs	r3, #1
 8001f48:	9100      	str	r1, [sp, #0]
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	4804      	ldr	r0, [pc, #16]	; (8001f60 <TS_IO_Read+0x28>)
 8001f50:	f7ff feda 	bl	8001d08 <I2Cx_ReadMultiple>

  return read_value;
}
 8001f54:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001f58:	b005      	add	sp, #20
 8001f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f5e:	bf00      	nop
 8001f60:	200007ac 	.word	0x200007ac

08001f64 <TS_IO_Delay>:
 8001f64:	f002 ba4c 	b.w	8004400 <HAL_Delay>

08001f68 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <SAIx_Out_DeInit+0x1c>)
 8001f6e:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001f70:	6853      	ldr	r3, [r2, #4]
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001f78:	f005 b82d 	b.w	8006fd6 <HAL_SAI_DeInit>
 8001f7c:	40015c04 	.word	0x40015c04
 8001f80:	40015c00 	.word	0x40015c00
 8001f84:	20000844 	.word	0x20000844

08001f88 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001f8a:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <SAIx_In_DeInit+0x20>)
 8001f8e:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001f92:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f98:	6253      	str	r3, [r2, #36]	; 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8001f9a:	f005 b81c 	b.w	8006fd6 <HAL_SAI_DeInit>
 8001f9e:	bf00      	nop
 8001fa0:	40015c24 	.word	0x40015c24
 8001fa4:	40015c00 	.word	0x40015c00
 8001fa8:	20000844 	.word	0x20000844

08001fac <SAIx_In_Init>:
{
 8001fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fb0:	4b35      	ldr	r3, [pc, #212]	; (8002088 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001fb2:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fb4:	4c35      	ldr	r4, [pc, #212]	; (800208c <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001fb6:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fb8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002094 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001fbc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fc0:	6023      	str	r3, [r4, #0]
{
 8001fc2:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001fc8:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001fcc:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001fd8:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001fda:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001fdc:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001fde:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8001fe0:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001fe2:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001fe4:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001fe6:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001fe8:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001fea:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001fec:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fee:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ff0:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff8:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001ffa:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001ffc:	e9c4 9117 	strd	r9, r1, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002000:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002004:	e9c4 b512 	strd	fp, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002008:	e9c4 a514 	strd	sl, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
 800200c:	f004 ff02 	bl	8006e14 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002010:	481f      	ldr	r0, [pc, #124]	; (8002090 <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002012:	2380      	movs	r3, #128	; 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002014:	2240      	movs	r2, #64	; 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002016:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800201a:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800201e:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002020:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002024:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002028:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800202a:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 800202e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  HAL_SAI_Init(&haudio_in_sai);
 8002032:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002036:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800203a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800203e:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002042:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002046:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800204a:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800204e:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002052:	e9c4 352e 	strd	r3, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002056:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002058:	e9c4 b533 	strd	fp, r5, [r4, #204]	; 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800205c:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002060:	e9c4 a535 	strd	sl, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002064:	e9c4 5937 	strd	r5, r9, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8002068:	f004 fed4 	bl	8006e14 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800206c:	6822      	ldr	r2, [r4, #0]
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	ea43 030b 	orr.w	r3, r3, fp
 8002074:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002076:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	ea43 030b 	orr.w	r3, r3, fp
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	b003      	add	sp, #12
 8002084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002088:	40015c04 	.word	0x40015c04
 800208c:	20000844 	.word	0x20000844
 8002090:	40015c24 	.word	0x40015c24
 8002094:	40015c00 	.word	0x40015c00

08002098 <BSP_AUDIO_OUT_Play>:
{
 8002098:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <BSP_AUDIO_OUT_Play+0x38>)
{
 800209c:	4605      	mov	r5, r0
 800209e:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80020a0:	b28a      	uxth	r2, r1
 80020a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020a6:	4601      	mov	r1, r0
 80020a8:	2034      	movs	r0, #52	; 0x34
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4798      	blx	r3
 80020ae:	b960      	cbnz	r0, 80020ca <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80020b0:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 80020b4:	4629      	mov	r1, r5
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <BSP_AUDIO_OUT_Play+0x38>)
 80020b8:	bf34      	ite	cc
 80020ba:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 80020be:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 80020c2:	f005 f819 	bl	80070f8 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 80020c6:	2000      	movs	r0, #0
}
 80020c8:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80020ca:	2001      	movs	r0, #1
 80020cc:	e7fc      	b.n	80020c8 <BSP_AUDIO_OUT_Play+0x30>
 80020ce:	bf00      	nop
 80020d0:	20000844 	.word	0x20000844

080020d4 <BSP_AUDIO_OUT_Pause>:
{    
 80020d4:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80020d6:	4d07      	ldr	r5, [pc, #28]	; (80020f4 <BSP_AUDIO_OUT_Pause+0x20>)
 80020d8:	2034      	movs	r0, #52	; 0x34
 80020da:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4798      	blx	r3
 80020e2:	4604      	mov	r4, r0
 80020e4:	b920      	cbnz	r0, 80020f0 <BSP_AUDIO_OUT_Pause+0x1c>
    HAL_SAI_DMAPause(&haudio_out_sai);
 80020e6:	4628      	mov	r0, r5
 80020e8:	f004 ff94 	bl	8007014 <HAL_SAI_DMAPause>
    return AUDIO_OK;
 80020ec:	4620      	mov	r0, r4
}
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e7fc      	b.n	80020ee <BSP_AUDIO_OUT_Pause+0x1a>
 80020f4:	20000844 	.word	0x20000844

080020f8 <BSP_AUDIO_OUT_Resume>:
{    
 80020f8:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80020fa:	4d07      	ldr	r5, [pc, #28]	; (8002118 <BSP_AUDIO_OUT_Resume+0x20>)
 80020fc:	2034      	movs	r0, #52	; 0x34
 80020fe:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4798      	blx	r3
 8002106:	4604      	mov	r4, r0
 8002108:	b920      	cbnz	r0, 8002114 <BSP_AUDIO_OUT_Resume+0x1c>
    HAL_SAI_DMAResume(&haudio_out_sai);
 800210a:	4628      	mov	r0, r5
 800210c:	f004 ff92 	bl	8007034 <HAL_SAI_DMAResume>
    return AUDIO_OK;
 8002110:	4620      	mov	r0, r4
}
 8002112:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7fc      	b.n	8002112 <BSP_AUDIO_OUT_Resume+0x1a>
 8002118:	20000844 	.word	0x20000844

0800211c <BSP_AUDIO_OUT_Stop>:
{
 800211c:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 800211e:	4c0b      	ldr	r4, [pc, #44]	; (800214c <BSP_AUDIO_OUT_Stop+0x30>)
{
 8002120:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8002122:	4620      	mov	r0, r4
 8002124:	f004 ff9d 	bl	8007062 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8002128:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800212c:	4629      	mov	r1, r5
 800212e:	2034      	movs	r0, #52	; 0x34
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	4798      	blx	r3
 8002134:	4604      	mov	r4, r0
 8002136:	b930      	cbnz	r0, 8002146 <BSP_AUDIO_OUT_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 8002138:	2d01      	cmp	r5, #1
 800213a:	d102      	bne.n	8002142 <BSP_AUDIO_OUT_Stop+0x26>
      HAL_Delay(1);
 800213c:	4628      	mov	r0, r5
 800213e:	f002 f95f 	bl	8004400 <HAL_Delay>
    return AUDIO_OK;
 8002142:	4620      	mov	r0, r4
 8002144:	e000      	b.n	8002148 <BSP_AUDIO_OUT_Stop+0x2c>
    return AUDIO_ERROR;
 8002146:	2001      	movs	r0, #1
}
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	bf00      	nop
 800214c:	20000844 	.word	0x20000844

08002150 <BSP_AUDIO_OUT_SetVolume>:
{
 8002150:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 8002154:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8002156:	2034      	movs	r0, #52	; 0x34
 8002158:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4798      	blx	r3
}
 8002160:	3800      	subs	r0, #0
 8002162:	bf18      	it	ne
 8002164:	2001      	movne	r0, #1
 8002166:	bd08      	pop	{r3, pc}
 8002168:	20000844 	.word	0x20000844

0800216c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 800216c:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800216e:	4c08      	ldr	r4, [pc, #32]	; (8002190 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800217a:	6620      	str	r0, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800217c:	4620      	mov	r0, r4
 800217e:	f004 fe49 	bl	8006e14 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bd10      	pop	{r4, pc}
 800218e:	bf00      	nop
 8002190:	20000844 	.word	0x20000844

08002194 <HAL_SAI_TxCpltCallback>:
{
 8002194:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002196:	f007 fc75 	bl	8009a84 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800219a:	bd08      	pop	{r3, pc}

0800219c <HAL_SAI_TxHalfCpltCallback>:
{
 800219c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800219e:	f007 fc7d 	bl	8009a9c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80021a2:	bd08      	pop	{r3, pc}

080021a4 <BSP_AUDIO_OUT_MspInit>:
{ 
 80021a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80021a8:	4c4d      	ldr	r4, [pc, #308]	; (80022e0 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 80021aa:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80021ac:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021b0:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80021b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80021b4:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80021b6:	f04f 080a 	mov.w	r8, #10
{ 
 80021ba:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80021bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80021c0:	a905      	add	r1, sp, #20
 80021c2:	4848      	ldr	r0, [pc, #288]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80021c4:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80021c8:	6463      	str	r3, [r4, #68]	; 0x44
 80021ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80021d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6323      	str	r3, [r4, #48]	; 0x30
 80021dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80021e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6323      	str	r3, [r4, #48]	; 0x30
 80021ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	9302      	str	r3, [sp, #8]
 80021f6:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80021f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002200:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002202:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800220e:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002210:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002214:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002218:	f002 fda6 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800221c:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800221e:	a905      	add	r1, sp, #20
 8002220:	4830      	ldr	r0, [pc, #192]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002222:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002226:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800222a:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800222e:	f002 fd9b 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002232:	a905      	add	r1, sp, #20
 8002234:	482b      	ldr	r0, [pc, #172]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002236:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800223a:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800223e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002242:	f002 fd91 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002246:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002248:	a905      	add	r1, sp, #20
 800224a:	4826      	ldr	r0, [pc, #152]	; (80022e4 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800224c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002250:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002254:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002258:	f002 fd86 	bl	8004d68 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800225c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800225e:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002264:	6323      	str	r3, [r4, #48]	; 0x30
 8002266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226c:	9304      	str	r3, [sp, #16]
 800226e:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <BSP_AUDIO_OUT_MspInit+0x144>)
 8002272:	429a      	cmp	r2, r3
 8002274:	d129      	bne.n	80022ca <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <BSP_AUDIO_OUT_MspInit+0x148>)
 8002278:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002280:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002284:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002288:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800228c:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002290:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002294:	e9c3 2a44 	strd	r2, sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800229c:	e9c3 1247 	strd	r1, r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80022a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a4:	e9c3 0249 	strd	r0, r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80022a8:	2204      	movs	r2, #4
 80022aa:	e9c3 424b 	strd	r4, r2, [r3, #300]	; 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80022ae:	f503 7486 	add.w	r4, r3, #268	; 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 80022b4:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80022b6:	66f4      	str	r4, [r6, #108]	; 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80022b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80022bc:	e9c3 754d 	strd	r7, r5, [r3, #308]	; 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 80022c0:	f002 fa0a 	bl	80046d8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 80022c4:	4620      	mov	r0, r4
 80022c6:	f002 f987 	bl	80045d8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	210e      	movs	r1, #14
 80022ce:	203c      	movs	r0, #60	; 0x3c
 80022d0:	f002 f8ba 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80022d4:	203c      	movs	r0, #60	; 0x3c
 80022d6:	f002 f8e9 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 80022da:	b00a      	add	sp, #40	; 0x28
 80022dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40015c04 	.word	0x40015c04
 80022ec:	20000844 	.word	0x20000844
 80022f0:	40026470 	.word	0x40026470

080022f4 <BSP_AUDIO_OUT_MspDeInit>:
{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80022f8:	203c      	movs	r0, #60	; 0x3c
 80022fa:	f002 f8e5 	bl	80044c8 <HAL_NVIC_DisableIRQ>
    if(hsai->Instance == AUDIO_OUT_SAIx)
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <BSP_AUDIO_OUT_MspDeInit+0x50>)
 8002300:	6822      	ldr	r2, [r4, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d102      	bne.n	800230c <BSP_AUDIO_OUT_MspDeInit+0x18>
      HAL_DMA_DeInit(hsai->hdmatx);
 8002306:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002308:	f002 f9e6 	bl	80046d8 <HAL_DMA_DeInit>
    __HAL_SAI_DISABLE(hsai);  
 800230c:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <BSP_AUDIO_OUT_MspDeInit+0x54>)
    __HAL_SAI_DISABLE(hsai);  
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 800231a:	f002 fe09 	bl	8004f30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 800231e:	2120      	movs	r1, #32
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 8002322:	f002 fe05 	bl	8004f30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 800232a:	f002 fe01 	bl	8004f30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 800232e:	2110      	movs	r1, #16
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <BSP_AUDIO_OUT_MspDeInit+0x54>)
 8002332:	f002 fdfd 	bl	8004f30 <HAL_GPIO_DeInit>
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <BSP_AUDIO_OUT_MspDeInit+0x58>)
 8002338:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800233a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800233e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002340:	bd10      	pop	{r4, pc}
 8002342:	bf00      	nop
 8002344:	40015c04 	.word	0x40015c04
 8002348:	40022000 	.word	0x40022000
 800234c:	40023800 	.word	0x40023800

08002350 <BSP_AUDIO_OUT_DeInit>:
{
 8002350:	b508      	push	{r3, lr}
  SAIx_Out_DeInit();
 8002352:	f7ff fe09 	bl	8001f68 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 8002356:	2100      	movs	r1, #0
 8002358:	4801      	ldr	r0, [pc, #4]	; (8002360 <BSP_AUDIO_OUT_DeInit+0x10>)
 800235a:	f7ff ffcb 	bl	80022f4 <BSP_AUDIO_OUT_MspDeInit>
}
 800235e:	bd08      	pop	{r3, pc}
 8002360:	20000844 	.word	0x20000844

08002364 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8002364:	b510      	push	{r4, lr}
 8002366:	b0a2      	sub	sp, #136	; 0x88
 8002368:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800236a:	a801      	add	r0, sp, #4
 800236c:	f004 fc0e 	bl	8006b8c <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8002370:	f642 3311 	movw	r3, #11025	; 0x2b11
 8002374:	429c      	cmp	r4, r3
 8002376:	d007      	beq.n	8002388 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8002378:	f245 6322 	movw	r3, #22050	; 0x5622
 800237c:	429c      	cmp	r4, r3
 800237e:	d003      	beq.n	8002388 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8002380:	f64a 4344 	movw	r3, #44100	; 0xac44
 8002384:	429c      	cmp	r4, r3
 8002386:	d111      	bne.n	80023ac <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800238c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800238e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002392:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002394:	f240 13ad 	movw	r3, #429	; 0x1ad
 8002398:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800239a:	2302      	movs	r3, #2
 800239c:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800239e:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80023a0:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80023a2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80023a4:	f004 f96a 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
}
 80023a8:	b022      	add	sp, #136	; 0x88
 80023aa:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80023ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b0:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80023b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023b6:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80023b8:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80023bc:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80023be:	2307      	movs	r3, #7
 80023c0:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e7ec      	b.n	80023a0 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

080023c8 <BSP_AUDIO_OUT_Init>:
{ 
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80023ce:	4c2f      	ldr	r4, [pc, #188]	; (800248c <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 80023d0:	4681      	mov	r9, r0
 80023d2:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80023d4:	4d2e      	ldr	r5, [pc, #184]	; (8002490 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 80023d6:	f7ff fdc7 	bl	8001f68 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80023da:	4639      	mov	r1, r7
 80023dc:	2200      	movs	r2, #0
 80023de:	4620      	mov	r0, r4
 80023e0:	f7ff ffc0 	bl	8002364 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80023e4:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80023e6:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80023e8:	f004 ffa6 	bl	8007338 <HAL_SAI_GetState>
 80023ec:	4601      	mov	r1, r0
 80023ee:	b910      	cbnz	r0, 80023f6 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fed7 	bl	80021a4 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80023f6:	4a27      	ldr	r2, [pc, #156]	; (8002494 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80023f8:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80023fa:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80023fc:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80023fe:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002400:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 8002402:	4822      	ldr	r0, [pc, #136]	; (800248c <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002408:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002498 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800240c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800240e:	2380      	movs	r3, #128	; 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002410:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002412:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8002414:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002416:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002418:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800241a:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800241c:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800241e:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002420:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002422:	e9c4 350d 	strd	r3, r5, [r4, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242a:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800242c:	2320      	movs	r3, #32
 800242e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002436:	e9c4 3512 	strd	r3, r5, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800243a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800243e:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8002442:	230f      	movs	r3, #15
 8002444:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8002448:	f004 fce4 	bl	8006e14 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800244c:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800244e:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002458:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800245c:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 800245e:	f648 1394 	movw	r3, #35220	; 0x8994
 8002462:	4298      	cmp	r0, r3
 8002464:	d10f      	bne.n	8002486 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002466:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800246a:	2034      	movs	r0, #52	; 0x34
 800246c:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800246e:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8002472:	463b      	mov	r3, r7
 8002474:	f8d8 4000 	ldr.w	r4, [r8]
 8002478:	4652      	mov	r2, sl
 800247a:	4649      	mov	r1, r9
 800247c:	2034      	movs	r0, #52	; 0x34
 800247e:	47a0      	blx	r4
    ret = AUDIO_OK;
 8002480:	4628      	mov	r0, r5
}
 8002482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 8002486:	4630      	mov	r0, r6
 8002488:	e7fb      	b.n	8002482 <BSP_AUDIO_OUT_Init+0xba>
 800248a:	bf00      	nop
 800248c:	20000844 	.word	0x20000844
 8002490:	40015c04 	.word	0x40015c04
 8002494:	40015c00 	.word	0x40015c00
 8002498:	2000002c 	.word	0x2000002c

0800249c <BSP_AUDIO_OUT_SetFrequency>:
{ 
 800249c:	b538      	push	{r3, r4, r5, lr}
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800249e:	4c0b      	ldr	r4, [pc, #44]	; (80024cc <BSP_AUDIO_OUT_SetFrequency+0x30>)
 80024a0:	4601      	mov	r1, r0
{ 
 80024a2:	4605      	mov	r5, r0
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80024a4:	2200      	movs	r2, #0
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ff5c 	bl	8002364 <BSP_AUDIO_OUT_ClockConfig>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80024ac:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_Init(&haudio_out_sai);
 80024ae:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80024b8:	61e5      	str	r5, [r4, #28]
  HAL_SAI_Init(&haudio_out_sai);
 80024ba:	f004 fcab 	bl	8006e14 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80024be:	6822      	ldr	r2, [r4, #0]
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bd38      	pop	{r3, r4, r5, pc}
 80024ca:	bf00      	nop
 80024cc:	20000844 	.word	0x20000844

080024d0 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80024d0:	b28a      	uxth	r2, r1
 80024d2:	4601      	mov	r1, r0
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <BSP_AUDIO_IN_Record+0x10>)
{
 80024d6:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80024d8:	f004 fe7c 	bl	80071d4 <HAL_SAI_Receive_DMA>
}
 80024dc:	2000      	movs	r0, #0
 80024de:	bd08      	pop	{r3, pc}
 80024e0:	200008c8 	.word	0x200008c8

080024e4 <BSP_AUDIO_IN_Stop>:
{
 80024e4:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
 80024e6:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <BSP_AUDIO_IN_Stop+0x30>)
{
 80024e8:	4605      	mov	r5, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 80024ea:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80024ee:	f004 fdb8 	bl	8007062 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80024f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80024f6:	4629      	mov	r1, r5
 80024f8:	2034      	movs	r0, #52	; 0x34
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4798      	blx	r3
 80024fe:	4604      	mov	r4, r0
 8002500:	b930      	cbnz	r0, 8002510 <BSP_AUDIO_IN_Stop+0x2c>
    if(Option == CODEC_PDWN_HW)
 8002502:	2d01      	cmp	r5, #1
 8002504:	d102      	bne.n	800250c <BSP_AUDIO_IN_Stop+0x28>
      HAL_Delay(1);
 8002506:	4628      	mov	r0, r5
 8002508:	f001 ff7a 	bl	8004400 <HAL_Delay>
    return AUDIO_OK;
 800250c:	4620      	mov	r0, r4
 800250e:	e000      	b.n	8002512 <BSP_AUDIO_IN_Stop+0x2e>
    return AUDIO_ERROR;
 8002510:	2001      	movs	r0, #1
}
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	20000844 	.word	0x20000844

08002518 <HAL_SAI_RxCpltCallback>:
{
 8002518:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800251a:	f007 fbc1 	bl	8009ca0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800251e:	bd08      	pop	{r3, pc}

08002520 <HAL_SAI_RxHalfCpltCallback>:
{
 8002520:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002522:	f007 fbc3 	bl	8009cac <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002526:	bd08      	pop	{r3, pc}

08002528 <HAL_SAI_ErrorCallback>:
{
 8002528:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800252a:	480a      	ldr	r0, [pc, #40]	; (8002554 <HAL_SAI_ErrorCallback+0x2c>)
 800252c:	f004 ff04 	bl	8007338 <HAL_SAI_GetState>
 8002530:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002532:	4809      	ldr	r0, [pc, #36]	; (8002558 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002534:	f005 05ef 	and.w	r5, r5, #239	; 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002538:	f004 fefe 	bl	8007338 <HAL_SAI_GetState>
 800253c:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800253e:	2d02      	cmp	r5, #2
 8002540:	d101      	bne.n	8002546 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 8002542:	f007 fab9 	bl	8009ab8 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002546:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800254a:	2c02      	cmp	r4, #2
 800254c:	d101      	bne.n	8002552 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 800254e:	f007 fbb3 	bl	8009cb8 <BSP_AUDIO_IN_Error_CallBack>
}
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000844 	.word	0x20000844
 8002558:	200008c8 	.word	0x200008c8

0800255c <BSP_AUDIO_IN_MspInit>:
{
 800255c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002560:	4c3d      	ldr	r4, [pc, #244]	; (8002658 <BSP_AUDIO_IN_MspInit+0xfc>)
{
 8002562:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002564:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002566:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002568:	6c63      	ldr	r3, [r4, #68]	; 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800256a:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
 800256e:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002570:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002576:	4839      	ldr	r0, [pc, #228]	; (800265c <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002578:	6463      	str	r3, [r4, #68]	; 0x44
 800257a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800257c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8002584:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258a:	6323      	str	r3, [r4, #48]	; 0x30
 800258c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002596:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002598:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800259c:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800259e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80025a2:	f002 fbe1 	bl	8004d68 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 80025a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80025a8:	a905      	add	r1, sp, #20
 80025aa:	482d      	ldr	r0, [pc, #180]	; (8002660 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 80025ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b0:	6323      	str	r3, [r4, #48]	; 0x30
 80025b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	9303      	str	r3, [sp, #12]
 80025ba:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80025bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025c0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80025c8:	f002 fbce 	bl	8004d68 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80025cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 80025ce:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80025d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d4:	6323      	str	r3, [r4, #48]	; 0x30
 80025d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	9304      	str	r3, [sp, #16]
 80025de:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <BSP_AUDIO_IN_MspInit+0x108>)
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d125      	bne.n	8002632 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80025e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80025f0:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80025f4:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80025f8:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80025fc:	f8c3 519c 	str.w	r5, [r3, #412]	; 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002600:	6734      	str	r4, [r6, #112]	; 0x70
 8002602:	f8c3 61a4 	str.w	r6, [r3, #420]	; 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002606:	e9c3 1260 	strd	r1, r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800260a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800260e:	e9c3 0262 	strd	r0, r2, [r3, #392]	; 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002612:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002614:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002616:	e9c3 2565 	strd	r2, r5, [r3, #404]	; 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800261c:	e9c3 555c 	strd	r5, r5, [r3, #368]	; 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002620:	e9c3 585e 	strd	r5, r8, [r3, #376]	; 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002624:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002628:	f002 f856 	bl	80046d8 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800262c:	4620      	mov	r0, r4
 800262e:	f001 ffd3 	bl	80045d8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	2046      	movs	r0, #70	; 0x46
 8002638:	f001 ff06 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800263c:	2046      	movs	r0, #70	; 0x46
 800263e:	f001 ff35 	bl	80044ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	210f      	movs	r1, #15
 8002646:	2028      	movs	r0, #40	; 0x28
 8002648:	f001 fefe 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800264c:	2028      	movs	r0, #40	; 0x28
 800264e:	f001 ff2d 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 8002652:	b00a      	add	sp, #40	; 0x28
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40021800 	.word	0x40021800
 8002660:	40021c00 	.word	0x40021c00
 8002664:	40015c24 	.word	0x40015c24
 8002668:	20000844 	.word	0x20000844
 800266c:	400264b8 	.word	0x400264b8

08002670 <BSP_AUDIO_IN_InitEx.part.0>:
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
 8002670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002672:	460c      	mov	r4, r1
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002674:	4d1e      	ldr	r5, [pc, #120]	; (80026f0 <BSP_AUDIO_IN_InitEx.part.0+0x80>)
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
 8002676:	4606      	mov	r6, r0
    SAIx_In_DeInit();
 8002678:	f7ff fc86 	bl	8001f88 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800267c:	4621      	mov	r1, r4
 800267e:	2200      	movs	r2, #0
 8002680:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8002684:	f7ff fe6e 	bl	8002364 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002688:	4628      	mov	r0, r5
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <BSP_AUDIO_IN_InitEx.part.0+0x84>)
 800268c:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002690:	f004 fe52 	bl	8007338 <HAL_SAI_GetState>
 8002694:	4601      	mov	r1, r0
 8002696:	b948      	cbnz	r0, 80026ac <BSP_AUDIO_IN_InitEx.part.0+0x3c>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8002698:	9001      	str	r0, [sp, #4]
 800269a:	f105 0084 	add.w	r0, r5, #132	; 0x84
 800269e:	f7ff fd81 	bl	80021a4 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80026a2:	9901      	ldr	r1, [sp, #4]
 80026a4:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80026a8:	f7ff ff58 	bl	800255c <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80026ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80026b0:	4f11      	ldr	r7, [pc, #68]	; (80026f8 <BSP_AUDIO_IN_InitEx.part.0+0x88>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80026b2:	4622      	mov	r2, r4
 80026b4:	f04f 0001 	mov.w	r0, #1
 80026b8:	bf0c      	ite	eq
 80026ba:	210a      	moveq	r1, #10
 80026bc:	2105      	movne	r1, #5
 80026be:	f7ff fc75 	bl	8001fac <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2034      	movs	r0, #52	; 0x34
 80026c6:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 80026c8:	f648 1394 	movw	r3, #35220	; 0x8994
 80026cc:	4298      	cmp	r0, r3
 80026ce:	d10d      	bne.n	80026ec <BSP_AUDIO_IN_InitEx.part.0+0x7c>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	2034      	movs	r0, #52	; 0x34
 80026d4:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 80026d6:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80026da:	4623      	mov	r3, r4
 80026dc:	683d      	ldr	r5, [r7, #0]
 80026de:	2264      	movs	r2, #100	; 0x64
 80026e0:	4631      	mov	r1, r6
 80026e2:	2034      	movs	r0, #52	; 0x34
 80026e4:	47a8      	blx	r5
      ret = AUDIO_OK;
 80026e6:	2000      	movs	r0, #0
}
 80026e8:	b003      	add	sp, #12
 80026ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = AUDIO_ERROR;
 80026ec:	2001      	movs	r0, #1
 80026ee:	e7fb      	b.n	80026e8 <BSP_AUDIO_IN_InitEx.part.0+0x78>
 80026f0:	20000844 	.word	0x20000844
 80026f4:	40015c24 	.word	0x40015c24
 80026f8:	2000002c 	.word	0x2000002c

080026fc <BSP_AUDIO_IN_InitEx>:
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026fc:	f420 7380 	bic.w	r3, r0, #256	; 0x100
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d101      	bne.n	800270a <BSP_AUDIO_IN_InitEx+0xe>
 8002706:	f7ff bfb3 	b.w	8002670 <BSP_AUDIO_IN_InitEx.part.0>
}
 800270a:	2001      	movs	r0, #1
 800270c:	4770      	bx	lr
	...

08002710 <BSP_AUDIO_IN_OUT_Init>:
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8002710:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
{
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	460f      	mov	r7, r1
 8002718:	4614      	mov	r4, r2
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 800271a:	d001      	beq.n	8002720 <BSP_AUDIO_IN_OUT_Init+0x10>
    ret = AUDIO_ERROR;
 800271c:	2001      	movs	r0, #1
}
 800271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002720:	4d1d      	ldr	r5, [pc, #116]	; (8002798 <BSP_AUDIO_IN_OUT_Init+0x88>)
    SAIx_In_DeInit();
 8002722:	f7ff fc31 	bl	8001f88 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8002726:	f7ff fc1f 	bl	8001f68 <SAIx_Out_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800272a:	4621      	mov	r1, r4
 800272c:	2200      	movs	r2, #0
 800272e:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8002732:	f7ff fe17 	bl	8002364 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002736:	4628      	mov	r0, r5
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <BSP_AUDIO_IN_OUT_Init+0x8c>)
 800273a:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800273e:	f004 fdfb 	bl	8007338 <HAL_SAI_GetState>
 8002742:	4601      	mov	r1, r0
 8002744:	b918      	cbnz	r0, 800274e <BSP_AUDIO_IN_OUT_Init+0x3e>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002746:	f105 0084 	add.w	r0, r5, #132	; 0x84
 800274a:	f7ff ff07 	bl	800255c <BSP_AUDIO_IN_MspInit>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <BSP_AUDIO_IN_OUT_Init+0x90>)
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002750:	4811      	ldr	r0, [pc, #68]	; (8002798 <BSP_AUDIO_IN_OUT_Init+0x88>)
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002752:	602b      	str	r3, [r5, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002754:	f004 fdf0 	bl	8007338 <HAL_SAI_GetState>
 8002758:	4601      	mov	r1, r0
 800275a:	b910      	cbnz	r0, 8002762 <BSP_AUDIO_IN_OUT_Init+0x52>
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800275c:	480e      	ldr	r0, [pc, #56]	; (8002798 <BSP_AUDIO_IN_OUT_Init+0x88>)
 800275e:	f7ff fd21 	bl	80021a4 <BSP_AUDIO_OUT_MspInit>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002762:	4e10      	ldr	r6, [pc, #64]	; (80027a4 <BSP_AUDIO_IN_OUT_Init+0x94>)
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002764:	4622      	mov	r2, r4
 8002766:	210a      	movs	r1, #10
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fc1f 	bl	8001fac <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800276e:	68b3      	ldr	r3, [r6, #8]
 8002770:	2034      	movs	r0, #52	; 0x34
 8002772:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 8002774:	f648 1394 	movw	r3, #35220	; 0x8994
 8002778:	4298      	cmp	r0, r3
 800277a:	d1cf      	bne.n	800271c <BSP_AUDIO_IN_OUT_Init+0xc>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800277c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800277e:	2034      	movs	r0, #52	; 0x34
 8002780:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8002782:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8002786:	4623      	mov	r3, r4
 8002788:	6835      	ldr	r5, [r6, #0]
 800278a:	2264      	movs	r2, #100	; 0x64
 800278c:	f447 7100 	orr.w	r1, r7, #512	; 0x200
 8002790:	2034      	movs	r0, #52	; 0x34
 8002792:	47a8      	blx	r5
      ret = AUDIO_OK;
 8002794:	2000      	movs	r0, #0
 8002796:	e7c2      	b.n	800271e <BSP_AUDIO_IN_OUT_Init+0xe>
 8002798:	20000844 	.word	0x20000844
 800279c:	40015c24 	.word	0x40015c24
 80027a0:	40015c04 	.word	0x40015c04
 80027a4:	2000002c 	.word	0x2000002c

080027a8 <BSP_EEPROM_Init>:
  *             and if problem, check the 2nd one (EEPROM_I2C_ADDRESS_A02)
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0)
  */
uint32_t BSP_EEPROM_Init(void)
{ 
 80027a8:	b510      	push	{r4, lr}
  /* I2C Initialization */
  EEPROM_IO_Init();
 80027aa:	f7ff fb85 	bl	8001eb8 <EEPROM_IO_Init>
  
  /* Select the EEPROM address for A01 and check if OK */
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 80027ae:	4c0b      	ldr	r4, [pc, #44]	; (80027dc <BSP_EEPROM_Init+0x34>)
 80027b0:	23a0      	movs	r3, #160	; 0xa0
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 80027b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 80027b6:	8023      	strh	r3, [r4, #0]
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 80027b8:	8820      	ldrh	r0, [r4, #0]
 80027ba:	b280      	uxth	r0, r0
 80027bc:	f7ff fb9e 	bl	8001efc <EEPROM_IO_IsDeviceReady>
 80027c0:	b150      	cbz	r0, 80027d8 <BSP_EEPROM_Init+0x30>
  {
    /* Select the EEPROM address for A02 and check if OK */
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 80027c2:	23a6      	movs	r3, #166	; 0xa6
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 80027c4:	f640 31b8 	movw	r1, #3000	; 0xbb8
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 80027c8:	8023      	strh	r3, [r4, #0]
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 80027ca:	8820      	ldrh	r0, [r4, #0]
 80027cc:	b280      	uxth	r0, r0
 80027ce:	f7ff fb95 	bl	8001efc <EEPROM_IO_IsDeviceReady>
 80027d2:	3800      	subs	r0, #0
 80027d4:	bf18      	it	ne
 80027d6:	2001      	movne	r0, #1
    {
      return EEPROM_FAIL;
    }
  }
  return EEPROM_OK;
}
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	bf00      	nop
 80027dc:	20000abc 	.word	0x20000abc

080027e0 <BSP_EEPROM_ReadBuffer>:
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{  
  uint32_t buffersize = *NumByteToRead;
 80027e0:	8813      	ldrh	r3, [r2, #0]
  
  /* Set the pointer to the Number of data to be read. This pointer will be used 
     by the DMA Transfer Completer interrupt Handler in order to reset the 
     variable to 0. User should check on this variable in order to know if the 
     DMA transfer has been complete or not. */
  EEPROMDataRead = *NumByteToRead;
 80027e2:	4a06      	ldr	r2, [pc, #24]	; (80027fc <BSP_EEPROM_ReadBuffer+0x1c>)
{  
 80027e4:	b510      	push	{r4, lr}
  EEPROMDataRead = *NumByteToRead;
 80027e6:	8053      	strh	r3, [r2, #2]
  
  if(EEPROM_IO_ReadData(EEPROMAddress, ReadAddr, pBuffer, buffersize) != HAL_OK)
 80027e8:	8814      	ldrh	r4, [r2, #0]
 80027ea:	4602      	mov	r2, r0
 80027ec:	b2a0      	uxth	r0, r4
 80027ee:	f7ff fb75 	bl	8001edc <EEPROM_IO_ReadData>
 80027f2:	b110      	cbz	r0, 80027fa <BSP_EEPROM_ReadBuffer+0x1a>
  {
    BSP_EEPROM_TIMEOUT_UserCallback();
 80027f4:	f007 fcaa 	bl	800a14c <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_FAIL;
 80027f8:	2001      	movs	r0, #1
  }

  /* If all operations OK, return EEPROM_OK (0) */
  return EEPROM_OK;
}
 80027fa:	bd10      	pop	{r4, pc}
 80027fc:	20000abc 	.word	0x20000abc

08002800 <BSP_EEPROM_WaitEepromStandbyState>:
  * 
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_WaitEepromStandbyState(void)      
{
 8002800:	b508      	push	{r3, lr}
  /* Check if the maximum allowed number of trials has bee reached */
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <BSP_EEPROM_WaitEepromStandbyState+0x1c>)
 8002804:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002808:	8818      	ldrh	r0, [r3, #0]
 800280a:	b280      	uxth	r0, r0
 800280c:	f7ff fb76 	bl	8001efc <EEPROM_IO_IsDeviceReady>
 8002810:	b110      	cbz	r0, 8002818 <BSP_EEPROM_WaitEepromStandbyState+0x18>
  {
    /* If the maximum number of trials has been reached, exit the function */
    BSP_EEPROM_TIMEOUT_UserCallback();
 8002812:	f007 fc9b 	bl	800a14c <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_TIMEOUT;
 8002816:	2002      	movs	r0, #2
  }
  return EEPROM_OK;
}
 8002818:	bd08      	pop	{r3, pc}
 800281a:	bf00      	nop
 800281c:	20000abc 	.word	0x20000abc

08002820 <BSP_EEPROM_WritePage>:
{ 
 8002820:	b510      	push	{r4, lr}
  uint32_t buffersize = *NumByteToWrite;
 8002822:	7813      	ldrb	r3, [r2, #0]
  EEPROMDataWrite = *NumByteToWrite;  
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <BSP_EEPROM_WritePage+0x2c>)
 8002826:	7113      	strb	r3, [r2, #4]
  if(EEPROM_IO_WriteData(EEPROMAddress, WriteAddr, pBuffer, buffersize) != HAL_OK)
 8002828:	8814      	ldrh	r4, [r2, #0]
 800282a:	4602      	mov	r2, r0
 800282c:	b2a0      	uxth	r0, r4
 800282e:	f7ff fb45 	bl	8001ebc <EEPROM_IO_WriteData>
 8002832:	b148      	cbz	r0, 8002848 <BSP_EEPROM_WritePage+0x28>
    status = EEPROM_FAIL;
 8002834:	2401      	movs	r4, #1
    BSP_EEPROM_TIMEOUT_UserCallback();
 8002836:	f007 fc89 	bl	800a14c <BSP_EEPROM_TIMEOUT_UserCallback>
  if(BSP_EEPROM_WaitEepromStandbyState() != EEPROM_OK) 
 800283a:	f7ff ffe1 	bl	8002800 <BSP_EEPROM_WaitEepromStandbyState>
    return EEPROM_FAIL;
 800283e:	2800      	cmp	r0, #0
}
 8002840:	bf0c      	ite	eq
 8002842:	4620      	moveq	r0, r4
 8002844:	2001      	movne	r0, #1
 8002846:	bd10      	pop	{r4, pc}
  uint32_t status = EEPROM_OK;
 8002848:	4604      	mov	r4, r0
 800284a:	e7f6      	b.n	800283a <BSP_EEPROM_WritePage+0x1a>
 800284c:	20000abc 	.word	0x20000abc

08002850 <BSP_EEPROM_WriteBuffer>:
{
 8002850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(addr == 0) 
 8002854:	f011 0903 	ands.w	r9, r1, #3
{
 8002858:	4607      	mov	r7, r0
 800285a:	460c      	mov	r4, r1
 800285c:	4615      	mov	r5, r2
  numofsingle = NumByteToWrite % EEPROM_PAGESIZE;
 800285e:	f002 0803 	and.w	r8, r2, #3
  if(addr == 0) 
 8002862:	d126      	bne.n	80028b2 <BSP_EEPROM_WriteBuffer+0x62>
    if(numofpage == 0) 
 8002864:	2a03      	cmp	r2, #3
 8002866:	d93f      	bls.n	80028e8 <BSP_EEPROM_WriteBuffer+0x98>
  numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8002868:	0895      	lsrs	r5, r2, #2
        dataindex = EEPROM_PAGESIZE;        
 800286a:	2604      	movs	r6, #4
 800286c:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8002870:	b2ad      	uxth	r5, r5
      while(numofpage--)
 8002872:	42ac      	cmp	r4, r5
 8002874:	d106      	bne.n	8002884 <BSP_EEPROM_WriteBuffer+0x34>
      if(numofsingle!=0)
 8002876:	f1b8 0f00 	cmp.w	r8, #0
 800287a:	d111      	bne.n	80028a0 <BSP_EEPROM_WriteBuffer+0x50>
  return EEPROM_OK;
 800287c:	2000      	movs	r0, #0
}
 800287e:	b003      	add	sp, #12
 8002880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8002884:	f10d 0207 	add.w	r2, sp, #7
 8002888:	4621      	mov	r1, r4
 800288a:	4638      	mov	r0, r7
        dataindex = EEPROM_PAGESIZE;        
 800288c:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8002890:	f7ff ffc6 	bl	8002820 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8002894:	2800      	cmp	r0, #0
 8002896:	d1f2      	bne.n	800287e <BSP_EEPROM_WriteBuffer+0x2e>
        WriteAddr +=  EEPROM_PAGESIZE;
 8002898:	3404      	adds	r4, #4
        pBuffer += EEPROM_PAGESIZE;
 800289a:	3704      	adds	r7, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 800289c:	b2a4      	uxth	r4, r4
        pBuffer += EEPROM_PAGESIZE;
 800289e:	e7e8      	b.n	8002872 <BSP_EEPROM_WriteBuffer+0x22>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028a0:	f10d 0207 	add.w	r2, sp, #7
 80028a4:	4621      	mov	r1, r4
 80028a6:	4638      	mov	r0, r7
        dataindex = numofsingle;          
 80028a8:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028ac:	f7ff ffb8 	bl	8002820 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 80028b0:	e7e5      	b.n	800287e <BSP_EEPROM_WriteBuffer+0x2e>
  count = EEPROM_PAGESIZE - addr;
 80028b2:	f1c9 0604 	rsb	r6, r9, #4
    if(numofpage== 0) 
 80028b6:	2a03      	cmp	r2, #3
  count = EEPROM_PAGESIZE - addr;
 80028b8:	b2b6      	uxth	r6, r6
    if(numofpage== 0) 
 80028ba:	d81a      	bhi.n	80028f2 <BSP_EEPROM_WriteBuffer+0xa2>
      if(NumByteToWrite > count)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d213      	bcs.n	80028e8 <BSP_EEPROM_WriteBuffer+0x98>
        dataindex = count;        
 80028c0:	fa5f f886 	uxtb.w	r8, r6
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028c4:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;        
 80028c8:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028cc:	f7ff ffa8 	bl	8002820 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1d4      	bne.n	800287e <BSP_EEPROM_WriteBuffer+0x2e>
        dataindex = (NumByteToWrite - count);          
 80028d4:	eba5 0508 	sub.w	r5, r5, r8
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 80028d8:	19a1      	adds	r1, r4, r6
 80028da:	f10d 0207 	add.w	r2, sp, #7
 80028de:	19b8      	adds	r0, r7, r6
 80028e0:	b289      	uxth	r1, r1
        dataindex = (NumByteToWrite - count);          
 80028e2:	f88d 5007 	strb.w	r5, [sp, #7]
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 80028e6:	e7e1      	b.n	80028ac <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028e8:	f10d 0207 	add.w	r2, sp, #7
        dataindex = numofsingle;         
 80028ec:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028f0:	e7dc      	b.n	80028ac <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028f2:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;         
 80028f6:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 80028fa:	f7ff ff91 	bl	8002820 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 80028fe:	2800      	cmp	r0, #0
 8002900:	d1bd      	bne.n	800287e <BSP_EEPROM_WriteBuffer+0x2e>
 8002902:	3d04      	subs	r5, #4
        WriteAddr += count;
 8002904:	4434      	add	r4, r6
        pBuffer += count;
 8002906:	443e      	add	r6, r7
      NumByteToWrite -= count;
 8002908:	fa19 f585 	uxtah	r5, r9, r5
        WriteAddr += count;
 800290c:	fa1f f984 	uxth.w	r9, r4
      NumByteToWrite -= count;
 8002910:	fa1f f885 	uxth.w	r8, r5
      numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8002914:	f3c5 058d 	ubfx	r5, r5, #2, #14
 8002918:	eb04 0485 	add.w	r4, r4, r5, lsl #2
        dataindex = EEPROM_PAGESIZE;          
 800291c:	2504      	movs	r5, #4
 800291e:	b2a4      	uxth	r4, r4
      while(numofpage--)
 8002920:	45a1      	cmp	r9, r4
 8002922:	d109      	bne.n	8002938 <BSP_EEPROM_WriteBuffer+0xe8>
      if(numofsingle != 0)
 8002924:	f018 0803 	ands.w	r8, r8, #3
 8002928:	d0a8      	beq.n	800287c <BSP_EEPROM_WriteBuffer+0x2c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 800292a:	f10d 0207 	add.w	r2, sp, #7
 800292e:	4649      	mov	r1, r9
 8002930:	4630      	mov	r0, r6
        dataindex = numofsingle;           
 8002932:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8002936:	e7b9      	b.n	80028ac <BSP_EEPROM_WriteBuffer+0x5c>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8002938:	f10d 0207 	add.w	r2, sp, #7
 800293c:	4649      	mov	r1, r9
 800293e:	4630      	mov	r0, r6
        dataindex = EEPROM_PAGESIZE;          
 8002940:	f88d 5007 	strb.w	r5, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8002944:	f7ff ff6c 	bl	8002820 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8002948:	2800      	cmp	r0, #0
 800294a:	d198      	bne.n	800287e <BSP_EEPROM_WriteBuffer+0x2e>
        WriteAddr +=  EEPROM_PAGESIZE;
 800294c:	f109 0904 	add.w	r9, r9, #4
        pBuffer += EEPROM_PAGESIZE;  
 8002950:	3604      	adds	r6, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 8002952:	fa1f f989 	uxth.w	r9, r9
        pBuffer += EEPROM_PAGESIZE;  
 8002956:	e7e3      	b.n	8002920 <BSP_EEPROM_WriteBuffer+0xd0>

08002958 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002958:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800295c:	4c1a      	ldr	r4, [pc, #104]	; (80029c8 <LL_FillBuffer+0x70>)
{
 800295e:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002960:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8002964:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002966:	2234      	movs	r2, #52	; 0x34
{
 8002968:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800296a:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800296c:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800296e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
 8002972:	460e      	mov	r6, r1
 8002974:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002978:	fb02 4303 	mla	r3, r2, r3, r4
 800297c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002982:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002984:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002986:	bf18      	it	ne
 8002988:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <LL_FillBuffer+0x74>)
 800298c:	60a5      	str	r5, [r4, #8]
 800298e:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002990:	f002 f84e 	bl	8004a30 <HAL_DMA2D_Init>
 8002994:	b9a0      	cbnz	r0, 80029c0 <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002996:	4649      	mov	r1, r9
 8002998:	4620      	mov	r0, r4
 800299a:	f002 f99d 	bl	8004cd8 <HAL_DMA2D_ConfigLayer>
 800299e:	b978      	cbnz	r0, 80029c0 <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029a0:	463b      	mov	r3, r7
 80029a2:	4632      	mov	r2, r6
 80029a4:	4651      	mov	r1, sl
 80029a6:	4620      	mov	r0, r4
 80029a8:	f8cd 8000 	str.w	r8, [sp]
 80029ac:	f002 f86c 	bl	8004a88 <HAL_DMA2D_Start>
 80029b0:	b930      	cbnz	r0, 80029c0 <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029b2:	210a      	movs	r1, #10
 80029b4:	4620      	mov	r0, r4
      }
    }
  } 
}
 80029b6:	b002      	add	sp, #8
 80029b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029bc:	f002 b87e 	b.w	8004abc <HAL_DMA2D_PollForTransfer>
}
 80029c0:	b002      	add	sp, #8
 80029c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c6:	bf00      	nop
 80029c8:	20000ac4 	.word	0x20000ac4
 80029cc:	4002b000 	.word	0x4002b000

080029d0 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <BSP_LCD_GetXSize+0x14>)
 80029d2:	2134      	movs	r1, #52	; 0x34
 80029d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80029d8:	fb01 3302 	mla	r3, r1, r2, r3
}
 80029dc:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000ac4 	.word	0x20000ac4

080029e8 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <BSP_LCD_GetYSize+0x14>)
 80029ea:	2134      	movs	r1, #52	; 0x34
 80029ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80029f0:	fb01 3302 	mla	r3, r1, r2, r3
}
 80029f4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000ac4 	.word	0x20000ac4

08002a00 <BSP_LCD_LayerDefaultInit>:
{     
 8002a00:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8002a02:	2400      	movs	r4, #0
{     
 8002a04:	b08e      	sub	sp, #56	; 0x38
 8002a06:	460e      	mov	r6, r1
 8002a08:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8002a0a:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002a0c:	f7ff ffe0 	bl	80029d0 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8002a10:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002a14:	f7ff ffe8 	bl	80029e8 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8002a18:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
 8002a1e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 8002a22:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8002a26:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
 8002a28:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a2c:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a30:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a32:	4c0f      	ldr	r4, [pc, #60]	; (8002a70 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a34:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002a38:	f7ff ffca 	bl	80029d0 <BSP_LCD_GetXSize>
 8002a3c:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002a3e:	f7ff ffd3 	bl	80029e8 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a42:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002a44:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a46:	a901      	add	r1, sp, #4
 8002a48:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002a4c:	f003 f82e 	bl	8005aac <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a50:	200c      	movs	r0, #12
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	fb00 4005 	mla	r0, r0, r5, r4
 8002a5a:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <BSP_LCD_LayerDefaultInit+0x74>)
 8002a60:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a64:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002a68:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 8002a6c:	b00e      	add	sp, #56	; 0x38
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	20000ac4 	.word	0x20000ac4
 8002a74:	20000074 	.word	0x20000074

08002a78 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002a78:	4b01      	ldr	r3, [pc, #4]	; (8002a80 <BSP_LCD_SelectLayer+0x8>)
 8002a7a:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
 8002a7e:	4770      	bx	lr
 8002a80:	20000ac4 	.word	0x20000ac4

08002a84 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <BSP_LCD_SetTextColor+0x14>)
 8002a86:	210c      	movs	r1, #12
 8002a88:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002a8c:	fb01 3302 	mla	r3, r1, r2, r3
 8002a90:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000ac4 	.word	0x20000ac4

08002a9c <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <BSP_LCD_SetBackColor+0x14>)
 8002a9e:	210c      	movs	r1, #12
 8002aa0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002aa4:	fb01 3302 	mla	r3, r1, r2, r3
 8002aa8:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000ac4 	.word	0x20000ac4

08002ab4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <BSP_LCD_SetFont+0x14>)
 8002ab6:	210c      	movs	r1, #12
 8002ab8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002abc:	fb01 3302 	mla	r3, r1, r2, r3
 8002ac0:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000ac4 	.word	0x20000ac4

08002acc <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <BSP_LCD_GetFont+0x14>)
 8002ace:	210c      	movs	r1, #12
 8002ad0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002ad4:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002ad8:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000ac4 	.word	0x20000ac4

08002ae4 <BSP_LCD_Clear>:
{ 
 8002ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ae6:	4c0c      	ldr	r4, [pc, #48]	; (8002b18 <BSP_LCD_Clear+0x34>)
{ 
 8002ae8:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002aea:	f7ff ff71 	bl	80029d0 <BSP_LCD_GetXSize>
 8002aee:	9003      	str	r0, [sp, #12]
 8002af0:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
 8002af4:	f7ff ff78 	bl	80029e8 <BSP_LCD_GetYSize>
 8002af8:	2134      	movs	r1, #52	; 0x34
 8002afa:	4603      	mov	r3, r0
 8002afc:	9501      	str	r5, [sp, #4]
 8002afe:	4630      	mov	r0, r6
 8002b00:	fb01 4406 	mla	r4, r1, r6, r4
 8002b04:	2100      	movs	r1, #0
 8002b06:	9a03      	ldr	r2, [sp, #12]
 8002b08:	9100      	str	r1, [sp, #0]
 8002b0a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002b0e:	f7ff ff23 	bl	8002958 <LL_FillBuffer>
}
 8002b12:	b004      	add	sp, #16
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
 8002b16:	bf00      	nop
 8002b18:	20000ac4 	.word	0x20000ac4

08002b1c <BSP_LCD_DrawHLine>:
{
 8002b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b20:	4e14      	ldr	r6, [pc, #80]	; (8002b74 <BSP_LCD_DrawHLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b22:	2734      	movs	r7, #52	; 0x34
{
 8002b24:	b085      	sub	sp, #20
 8002b26:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b28:	f8d6 80e8 	ldr.w	r8, [r6, #232]	; 0xe8
{
 8002b2c:	4689      	mov	r9, r1
 8002b2e:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b30:	f7ff ff4e 	bl	80029d0 <BSP_LCD_GetXSize>
 8002b34:	fb07 6708 	mla	r7, r7, r8, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b38:	9a03      	ldr	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b3a:	fb00 5109 	mla	r1, r0, r9, r5
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b3e:	4640      	mov	r0, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b44:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b48:	2b02      	cmp	r3, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b4a:	f04f 030c 	mov.w	r3, #12
 8002b4e:	fb03 6308 	mla	r3, r3, r8, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b52:	bf0c      	ite	eq
 8002b54:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b58:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	f7ff fef6 	bl	8002958 <LL_FillBuffer>
}
 8002b6c:	b005      	add	sp, #20
 8002b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b72:	bf00      	nop
 8002b74:	20000ac4 	.word	0x20000ac4

08002b78 <BSP_LCD_DrawVLine>:
{
 8002b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b7c:	4d14      	ldr	r5, [pc, #80]	; (8002bd0 <BSP_LCD_DrawVLine+0x58>)
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b7e:	f04f 0834 	mov.w	r8, #52	; 0x34
{
 8002b82:	b085      	sub	sp, #20
 8002b84:	4607      	mov	r7, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b86:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
 8002b8a:	4689      	mov	r9, r1
 8002b8c:	9203      	str	r2, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b8e:	f7ff ff1f 	bl	80029d0 <BSP_LCD_GetXSize>
 8002b92:	fb08 5806 	mla	r8, r8, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b96:	9b03      	ldr	r3, [sp, #12]
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b98:	fb00 7109 	mla	r1, r0, r9, r7
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002b9c:	3801      	subs	r0, #1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b9e:	f8d8 2088 	ldr.w	r2, [r8, #136]	; 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ba2:	f8d8 409c 	ldr.w	r4, [r8, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ba6:	2a02      	cmp	r2, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002ba8:	f04f 020c 	mov.w	r2, #12
 8002bac:	fb02 5506 	mla	r5, r2, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bb0:	bf0c      	ite	eq
 8002bb2:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bb6:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002bba:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
 8002bbe:	9000      	str	r0, [sp, #0]
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f7ff fec7 	bl	8002958 <LL_FillBuffer>
}
 8002bca:	b005      	add	sp, #20
 8002bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bd0:	20000ac4 	.word	0x20000ac4

08002bd4 <BSP_LCD_DrawRect>:
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	461e      	mov	r6, r3
 8002bd8:	460d      	mov	r5, r1
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002bde:	f7ff ff9d 	bl	8002b1c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002be2:	19a9      	adds	r1, r5, r6
 8002be4:	463a      	mov	r2, r7
 8002be6:	4620      	mov	r0, r4
 8002be8:	b289      	uxth	r1, r1
 8002bea:	f7ff ff97 	bl	8002b1c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002bee:	4632      	mov	r2, r6
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ffc0 	bl	8002b78 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002bf8:	19e0      	adds	r0, r4, r7
 8002bfa:	4632      	mov	r2, r6
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	b280      	uxth	r0, r0
}
 8002c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002c04:	f7ff bfb8 	b.w	8002b78 <BSP_LCD_DrawVLine>

08002c08 <BSP_LCD_DrawPixel>:
{
 8002c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c0c:	4d0d      	ldr	r5, [pc, #52]	; (8002c44 <BSP_LCD_DrawPixel+0x3c>)
{
 8002c0e:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002c10:	2234      	movs	r2, #52	; 0x34
{
 8002c12:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c14:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 8002c18:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002c1a:	fb02 5503 	mla	r5, r2, r3, r5
 8002c1e:	f7ff fed7 	bl	80029d0 <BSP_LCD_GetXSize>
 8002c22:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c26:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002c2a:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d104      	bne.n	8002c3c <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002c32:	b2a4      	uxth	r4, r4
 8002c34:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
 8002c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c3c:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
 8002c40:	e7fa      	b.n	8002c38 <BSP_LCD_DrawPixel+0x30>
 8002c42:	bf00      	nop
 8002c44:	20000ac4 	.word	0x20000ac4

08002c48 <BSP_LCD_DisplayChar>:
{
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c4e:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8002c50:	f04f 0800 	mov.w	r8, #0
{
 8002c54:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c58:	4929      	ldr	r1, [pc, #164]	; (8002d00 <BSP_LCD_DisplayChar+0xb8>)
 8002c5a:	200c      	movs	r0, #12
 8002c5c:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	; 0xe8
 8002c60:	fb00 110b 	mla	r1, r0, fp, r1
 8002c64:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c68:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8002c6c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002c70:	f109 0607 	add.w	r6, r9, #7
 8002c74:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c76:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c7a:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8002c7c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8002c80:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8002c84:	f109 32ff 	add.w	r2, r9, #4294967295
 8002c88:	fa52 f380 	uxtab	r3, r2, r0
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8002c90:	45d0      	cmp	r8, sl
 8002c92:	eb03 0108 	add.w	r1, r3, r8
 8002c96:	b289      	uxth	r1, r1
 8002c98:	d302      	bcc.n	8002ca0 <BSP_LCD_DisplayChar+0x58>
}
 8002c9a:	b005      	add	sp, #20
 8002c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8002ca0:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8002ca2:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8002ca4:	d004      	beq.n	8002cb0 <BSP_LCD_DisplayChar+0x68>
 8002ca6:	2e02      	cmp	r6, #2
 8002ca8:	d109      	bne.n	8002cbe <BSP_LCD_DisplayChar+0x76>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002caa:	882c      	ldrh	r4, [r5, #0]
 8002cac:	ba64      	rev16	r4, r4
 8002cae:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8002cb0:	2700      	movs	r7, #0
 8002cb2:	45b9      	cmp	r9, r7
 8002cb4:	d80a      	bhi.n	8002ccc <BSP_LCD_DisplayChar+0x84>
  for(i = 0; i < height; i++)
 8002cb6:	f108 0801 	add.w	r8, r8, #1
 8002cba:	4435      	add	r5, r6
 8002cbc:	e7e7      	b.n	8002c8e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002cbe:	786a      	ldrb	r2, [r5, #1]
 8002cc0:	0424      	lsls	r4, r4, #16
 8002cc2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002cc6:	78aa      	ldrb	r2, [r5, #2]
 8002cc8:	4314      	orrs	r4, r2
      break;
 8002cca:	e7f1      	b.n	8002cb0 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8002ccc:	9b00      	ldr	r3, [sp, #0]
 8002cce:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002cd0:	9103      	str	r1, [sp, #12]
 8002cd2:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8002cd4:	9b02      	ldr	r3, [sp, #8]
 8002cd6:	eba3 0c07 	sub.w	ip, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <BSP_LCD_DisplayChar+0xb8>)
 8002cdc:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8002cde:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8002ce0:	fa02 f20c 	lsl.w	r2, r2, ip
 8002ce4:	4222      	tst	r2, r4
 8002ce6:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002cea:	fb02 320b 	mla	r2, r2, fp, r3
 8002cee:	bf14      	ite	ne
 8002cf0:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002cf4:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 8002cf8:	f7ff ff86 	bl	8002c08 <BSP_LCD_DrawPixel>
 8002cfc:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8002cfe:	e7d8      	b.n	8002cb2 <BSP_LCD_DisplayChar+0x6a>
 8002d00:	20000ac4 	.word	0x20000ac4

08002d04 <BSP_LCD_DisplayStringAt>:
{
 8002d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	460f      	mov	r7, r1
 8002d0e:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 8002d10:	4613      	mov	r3, r2
 8002d12:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8002d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d1fa      	bne.n	8002d12 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002d1c:	f7ff fe58 	bl	80029d0 <BSP_LCD_GetXSize>
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <BSP_LCD_DisplayStringAt+0xa4>)
 8002d22:	210c      	movs	r1, #12
  switch (Mode)
 8002d24:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002d28:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d2c:	fb01 3302 	mla	r3, r1, r2, r3
 8002d30:	f8d3 80f4 	ldr.w	r8, [r3, #244]	; 0xf4
 8002d34:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8002d38:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 8002d3c:	d01d      	beq.n	8002d7a <BSP_LCD_DisplayStringAt+0x76>
 8002d3e:	f1b9 0f02 	cmp.w	r9, #2
 8002d42:	d021      	beq.n	8002d88 <BSP_LCD_DisplayStringAt+0x84>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002d44:	b22b      	sxth	r3, r5
    ref_column = 1;
 8002d46:	2400      	movs	r4, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfd8      	it	le
 8002d4c:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d4e:	f7ff fe3f 	bl	80029d0 <BSP_LCD_GetXSize>
 8002d52:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8002d56:	b2a2      	uxth	r2, r4
 8002d58:	f816 9004 	ldrb.w	r9, [r6, r4]
 8002d5c:	3401      	adds	r4, #1
 8002d5e:	fb03 0012 	mls	r0, r3, r2, r0
 8002d62:	b280      	uxth	r0, r0
 8002d64:	4298      	cmp	r0, r3
 8002d66:	bf34      	ite	cc
 8002d68:	2000      	movcc	r0, #0
 8002d6a:	2001      	movcs	r0, #1
 8002d6c:	f1b9 0f00 	cmp.w	r9, #0
 8002d70:	bf08      	it	eq
 8002d72:	2000      	moveq	r0, #0
 8002d74:	b970      	cbnz	r0, 8002d94 <BSP_LCD_DisplayStringAt+0x90>
}
 8002d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002d7a:	1b34      	subs	r4, r6, r4
 8002d7c:	4420      	add	r0, r4
 8002d7e:	4358      	muls	r0, r3
 8002d80:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002d84:	b285      	uxth	r5, r0
      break;
 8002d86:	e7dd      	b.n	8002d44 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002d88:	1b34      	subs	r4, r6, r4
 8002d8a:	4404      	add	r4, r0
 8002d8c:	fb14 f403 	smulbb	r4, r4, r3
 8002d90:	1b60      	subs	r0, r4, r5
 8002d92:	e7f7      	b.n	8002d84 <BSP_LCD_DisplayStringAt+0x80>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002d94:	4628      	mov	r0, r5
 8002d96:	464a      	mov	r2, r9
 8002d98:	4639      	mov	r1, r7
 8002d9a:	f7ff ff55 	bl	8002c48 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002d9e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8002da2:	4428      	add	r0, r5
 8002da4:	b285      	uxth	r5, r0
    i++;
 8002da6:	e7d2      	b.n	8002d4e <BSP_LCD_DisplayStringAt+0x4a>
 8002da8:	20000ac4 	.word	0x20000ac4

08002dac <BSP_LCD_DisplayStringAtLine>:
{  
 8002dac:	b513      	push	{r0, r1, r4, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002db2:	f7ff fe8b 	bl	8002acc <BSP_LCD_GetFont>
 8002db6:	88c3      	ldrh	r3, [r0, #6]
 8002db8:	9a01      	ldr	r2, [sp, #4]
 8002dba:	2000      	movs	r0, #0
 8002dbc:	fb13 f104 	smulbb	r1, r3, r4
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	b289      	uxth	r1, r1
}
 8002dc4:	b002      	add	sp, #8
 8002dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002dca:	f7ff bf9b 	b.w	8002d04 <BSP_LCD_DisplayStringAt>
	...

08002dd0 <BSP_LCD_DrawLine>:
{
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002dd4:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002dd6:	1a5e      	subs	r6, r3, r1
{
 8002dd8:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 8002dda:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002dde:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 8002de0:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002de4:	bfb8      	it	lt
 8002de6:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002de8:	2e00      	cmp	r6, #0
 8002dea:	bfb8      	it	lt
 8002dec:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002dee:	b224      	sxth	r4, r4
    xinc1 = -1;
 8002df0:	4282      	cmp	r2, r0
 8002df2:	bf2c      	ite	cs
 8002df4:	2701      	movcs	r7, #1
 8002df6:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002dfa:	428b      	cmp	r3, r1
 8002dfc:	bf2c      	ite	cs
 8002dfe:	f04f 0801 	movcs.w	r8, #1
 8002e02:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002e06:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002e08:	42b4      	cmp	r4, r6
 8002e0a:	db0f      	blt.n	8002e2c <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
 8002e0c:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002e10:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002e12:	2700      	movs	r7, #0
    num = deltax / 2;
 8002e14:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002e16:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002e18:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002e1e:	fa0f f28b 	sxth.w	r2, fp
 8002e22:	4294      	cmp	r4, r2
 8002e24:	da10      	bge.n	8002e48 <BSP_LCD_DrawLine+0x78>
}
 8002e26:	b005      	add	sp, #20
 8002e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002e2c:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002e30:	4623      	mov	r3, r4
 8002e32:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002e36:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002e3a:	4634      	mov	r4, r6
 8002e3c:	f345 054f 	sbfx	r5, r5, #1, #16
 8002e40:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002e42:	f8cd 8000 	str.w	r8, [sp]
 8002e46:	e7e7      	b.n	8002e18 <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002e48:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002e4c:	f04f 0c0c 	mov.w	ip, #12
 8002e50:	fa1f f089 	uxth.w	r0, r9
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002e54:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002e56:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e5a:	fa1f f18a 	uxth.w	r1, sl
 8002e5e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002e62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e66:	f7ff fecf 	bl	8002c08 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <BSP_LCD_DrawLine+0xd0>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002e6c:	b2aa      	uxth	r2, r5
 8002e6e:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 8002e70:	42ac      	cmp	r4, r5
 8002e72:	dc09      	bgt.n	8002e88 <BSP_LCD_DrawLine+0xb8>
      x += xinc1;                             /* Change the x as appropriate */
 8002e74:	9802      	ldr	r0, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
 8002e76:	1b15      	subs	r5, r2, r4
      y += yinc1;                             /* Change the y as appropriate */
 8002e78:	9903      	ldr	r1, [sp, #12]
      x += xinc1;                             /* Change the x as appropriate */
 8002e7a:	4438      	add	r0, r7
      num -= den;                             /* Calculate the new numerator value */
 8002e7c:	b22d      	sxth	r5, r5
      y += yinc1;                             /* Change the y as appropriate */
 8002e7e:	4441      	add	r1, r8
      x += xinc1;                             /* Change the x as appropriate */
 8002e80:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 8002e84:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 8002e88:	9a00      	ldr	r2, [sp, #0]
 8002e8a:	f10b 0b01 	add.w	fp, fp, #1
 8002e8e:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8002e90:	9a01      	ldr	r2, [sp, #4]
 8002e92:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002e94:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002e98:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002e9c:	e7bf      	b.n	8002e1e <BSP_LCD_DrawLine+0x4e>
 8002e9e:	bf00      	nop
 8002ea0:	20000ac4 	.word	0x20000ac4

08002ea4 <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 8002ea4:	2901      	cmp	r1, #1
{
 8002ea6:	b538      	push	{r3, r4, r5, lr}
 8002ea8:	460d      	mov	r5, r1
  if(PointCount < 2)
 8002eaa:	d911      	bls.n	8002ed0 <BSP_LCD_DrawPolygon+0x2c>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002eac:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	8841      	ldrh	r1, [r0, #2]
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002eba:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8002ebe:	f834 0b04 	ldrh.w	r0, [r4], #4
 8002ec2:	885b      	ldrh	r3, [r3, #2]
  while(--PointCount)
 8002ec4:	3d01      	subs	r5, #1
 8002ec6:	3404      	adds	r4, #4
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002ec8:	f7ff ff82 	bl	8002dd0 <BSP_LCD_DrawLine>
  while(--PointCount)
 8002ecc:	b2ad      	uxth	r5, r5
 8002ece:	b905      	cbnz	r5, 8002ed2 <BSP_LCD_DrawPolygon+0x2e>
}
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002ed2:	f834 3c02 	ldrh.w	r3, [r4, #-2]
 8002ed6:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8002eda:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 8002ede:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 8002ee2:	e7ef      	b.n	8002ec4 <BSP_LCD_DrawPolygon+0x20>

08002ee4 <FillTriangle>:
{ 
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	4698      	mov	r8, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002eec:	1a0c      	subs	r4, r1, r0
  x = x1;                       /* Start x off at the first pixel */
 8002eee:	fa0f f980 	sxth.w	r9, r0
{ 
 8002ef2:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
  y = y1;                       /* Start y off at the first pixel */
 8002ef6:	fa0f fa88 	sxth.w	sl, r8
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002efa:	2c00      	cmp	r4, #0
{ 
 8002efc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002f00:	eba5 0608 	sub.w	r6, r5, r8
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002f04:	bfb8      	it	lt
 8002f06:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002f08:	2e00      	cmp	r6, #0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002f0a:	b224      	sxth	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002f0c:	bfb8      	it	lt
 8002f0e:	4276      	neglt	r6, r6
    xinc1 = -1;
 8002f10:	4281      	cmp	r1, r0
 8002f12:	bf2c      	ite	cs
 8002f14:	2701      	movcs	r7, #1
 8002f16:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002f1a:	4545      	cmp	r5, r8
 8002f1c:	bf2c      	ite	cs
 8002f1e:	f04f 0801 	movcs.w	r8, #1
 8002f22:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002f26:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002f28:	42b4      	cmp	r4, r6
 8002f2a:	db0e      	blt.n	8002f4a <FillTriangle+0x66>
    num = deltax / 2;
 8002f2c:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002f30:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002f32:	2700      	movs	r7, #0
    num = deltax / 2;
 8002f34:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002f36:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002f38:	f04f 0b00 	mov.w	fp, #0
 8002f3c:	fa0f f18b 	sxth.w	r1, fp
 8002f40:	428c      	cmp	r4, r1
 8002f42:	da10      	bge.n	8002f66 <FillTriangle+0x82>
}
 8002f44:	b007      	add	sp, #28
 8002f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002f4a:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002f4e:	4621      	mov	r1, r4
 8002f50:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002f54:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002f58:	4634      	mov	r4, r6
 8002f5a:	f345 054f 	sbfx	r5, r5, #1, #16
 8002f5e:	460e      	mov	r6, r1
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002f60:	f8cd 8000 	str.w	r8, [sp]
 8002f64:	e7e8      	b.n	8002f38 <FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, x3, y3);
 8002f66:	fa1f f089 	uxth.w	r0, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8002f6a:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
 8002f6c:	fa1f f18a 	uxth.w	r1, sl
 8002f70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f78:	f7ff ff2a 	bl	8002dd0 <BSP_LCD_DrawLine>
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8002f7c:	fa1f fc85 	uxth.w	ip, r5
 8002f80:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 8002f82:	42ac      	cmp	r4, r5
 8002f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f88:	dc0a      	bgt.n	8002fa0 <FillTriangle+0xbc>
      x += xinc1;               /* Change the x as appropriate */
 8002f8a:	9802      	ldr	r0, [sp, #8]
      num -= den;               /* Calculate the new numerator value */
 8002f8c:	ebac 0504 	sub.w	r5, ip, r4
      y += yinc1;               /* Change the y as appropriate */
 8002f90:	9903      	ldr	r1, [sp, #12]
      x += xinc1;               /* Change the x as appropriate */
 8002f92:	4438      	add	r0, r7
      num -= den;               /* Calculate the new numerator value */
 8002f94:	b22d      	sxth	r5, r5
      y += yinc1;               /* Change the y as appropriate */
 8002f96:	4441      	add	r1, r8
      x += xinc1;               /* Change the x as appropriate */
 8002f98:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 8002f9c:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 8002fa0:	9900      	ldr	r1, [sp, #0]
 8002fa2:	f10b 0b01 	add.w	fp, fp, #1
 8002fa6:	4489      	add	r9, r1
    y += yinc2;                 /* Change the y as appropriate */
 8002fa8:	9901      	ldr	r1, [sp, #4]
 8002faa:	448a      	add	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 8002fac:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 8002fb0:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002fb4:	e7c2      	b.n	8002f3c <FillTriangle+0x58>
	...

08002fb8 <BSP_LCD_DrawCircle>:
{
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8002fbc:	0054      	lsls	r4, r2, #1
{
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	4688      	mov	r8, r1
  current_y = Radius;
 8002fc2:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
 8002fc4:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 8002fc8:	2700      	movs	r7, #0
{
 8002fca:	9001      	str	r0, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002fcc:	4836      	ldr	r0, [pc, #216]	; (80030a8 <BSP_LCD_DrawCircle+0xf0>)
 8002fce:	f04f 0c0c 	mov.w	ip, #12
 8002fd2:	9b01      	ldr	r3, [sp, #4]
 8002fd4:	b2ae      	uxth	r6, r5
 8002fd6:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 8002fda:	fa1f f987 	uxth.w	r9, r7
 8002fde:	fa13 f387 	uxtah	r3, r3, r7
 8002fe2:	eba8 0106 	sub.w	r1, r8, r6
 8002fe6:	fb0c 0202 	mla	r2, ip, r2, r0
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b289      	uxth	r1, r1
 8002fee:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8002ffa:	f7ff fe05 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ffe:	9b01      	ldr	r3, [sp, #4]
 8003000:	f8cd 9008 	str.w	r9, [sp, #8]
 8003004:	eba3 0b09 	sub.w	fp, r3, r9
 8003008:	fa1f fb8b 	uxth.w	fp, fp
 800300c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8003010:	4658      	mov	r0, fp
 8003012:	f7ff fdf9 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003016:	9b01      	ldr	r3, [sp, #4]
 8003018:	9a03      	ldr	r2, [sp, #12]
 800301a:	eb06 0a03 	add.w	sl, r6, r3
 800301e:	9b02      	ldr	r3, [sp, #8]
 8003020:	eba8 0103 	sub.w	r1, r8, r3
 8003024:	fa1f fa8a 	uxth.w	sl, sl
 8003028:	b289      	uxth	r1, r1
 800302a:	4650      	mov	r0, sl
 800302c:	9104      	str	r1, [sp, #16]
 800302e:	f7ff fdeb 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003032:	9b01      	ldr	r3, [sp, #4]
 8003034:	eba3 0906 	sub.w	r9, r3, r6
 8003038:	fa1f f989 	uxth.w	r9, r9
 800303c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8003040:	4648      	mov	r0, r9
 8003042:	f7ff fde1 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003046:	eb06 0108 	add.w	r1, r6, r8
 800304a:	9b05      	ldr	r3, [sp, #20]
 800304c:	b289      	uxth	r1, r1
 800304e:	9a03      	ldr	r2, [sp, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	9104      	str	r1, [sp, #16]
 8003054:	f7ff fdd8 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003058:	4658      	mov	r0, fp
 800305a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800305e:	f7ff fdd3 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	9a03      	ldr	r2, [sp, #12]
 8003066:	4650      	mov	r0, sl
 8003068:	eb03 0108 	add.w	r1, r3, r8
 800306c:	b289      	uxth	r1, r1
 800306e:	9102      	str	r1, [sp, #8]
 8003070:	f7ff fdca 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003074:	4648      	mov	r0, r9
 8003076:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800307a:	f7ff fdc5 	bl	8002c08 <BSP_LCD_DrawPixel>
    if (decision < 0)
 800307e:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 8003080:	bfb1      	iteee	lt
 8003082:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 8003084:	1b7b      	subge	r3, r7, r5
 8003086:	340a      	addge	r4, #10
      current_y--;
 8003088:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 800308c:	bfb8      	it	lt
 800308e:	eb04 0487 	addlt.w	r4, r4, r7, lsl #2
    current_x++;
 8003092:	f107 0701 	add.w	r7, r7, #1
      decision += ((current_x - current_y) << 2) + 10;
 8003096:	bfa8      	it	ge
 8003098:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 800309c:	42bd      	cmp	r5, r7
 800309e:	d295      	bcs.n	8002fcc <BSP_LCD_DrawCircle+0x14>
}
 80030a0:	b007      	add	sp, #28
 80030a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a6:	bf00      	nop
 80030a8:	20000ac4 	.word	0x20000ac4

080030ac <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 80030b4:	ee07 2a90 	vmov	s15, r2
 80030b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80030bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  k = (float)(rad2/rad1);  
 80030c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80030c4:	f1c2 0501 	rsb	r5, r2, #1
{
 80030c8:	b085      	sub	sp, #20
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80030ca:	425e      	negs	r6, r3
 80030cc:	006d      	lsls	r5, r5, #1
 80030ce:	2700      	movs	r7, #0
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80030d0:	fa1f f880 	uxth.w	r8, r0
 80030d4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8003180 <BSP_LCD_DrawEllipse+0xd4>
 80030d8:	fa1f f981 	uxth.w	r9, r1
 80030dc:	ee07 7a90 	vmov	s15, r7
 80030e0:	f8db 20e8 	ldr.w	r2, [fp, #232]	; 0xe8
 80030e4:	200c      	movs	r0, #12
 80030e6:	fa19 f186 	uxtah	r1, r9, r6
 80030ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ee:	fb00 b202 	mla	r2, r0, r2, fp
 80030f2:	b289      	uxth	r1, r1
 80030f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030f8:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 80030fc:	e9cd 2100 	strd	r2, r1, [sp]
 8003100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003104:	ee17 3a90 	vmov	r3, s15
 8003108:	b29c      	uxth	r4, r3
 800310a:	b2b3      	uxth	r3, r6
 800310c:	eba8 0a04 	sub.w	sl, r8, r4
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	fa1f fa8a 	uxth.w	sl, sl
 8003116:	4650      	mov	r0, sl
 8003118:	f7ff fd76 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 800311c:	eb08 0004 	add.w	r0, r8, r4
 8003120:	b280      	uxth	r0, r0
 8003122:	e9dd 2100 	ldrd	r2, r1, [sp]
 8003126:	9002      	str	r0, [sp, #8]
 8003128:	f7ff fd6e 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 800312c:	9b03      	ldr	r3, [sp, #12]
 800312e:	9a00      	ldr	r2, [sp, #0]
 8003130:	eba9 0103 	sub.w	r1, r9, r3
 8003134:	9802      	ldr	r0, [sp, #8]
 8003136:	b289      	uxth	r1, r1
 8003138:	e9cd 1200 	strd	r1, r2, [sp]
 800313c:	f7ff fd64 	bl	8002c08 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 8003140:	4650      	mov	r0, sl
 8003142:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003146:	f7ff fd5f 	bl	8002c08 <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 800314a:	42af      	cmp	r7, r5
 800314c:	db14      	blt.n	8003178 <BSP_LCD_DrawEllipse+0xcc>
      err += ++x*2+1;
 800314e:	3701      	adds	r7, #1
 8003150:	eb05 0347 	add.w	r3, r5, r7, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8003154:	42f7      	cmn	r7, r6
      err += ++x*2+1;
 8003156:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 800315a:	d102      	bne.n	8003162 <BSP_LCD_DrawEllipse+0xb6>
 800315c:	42ae      	cmp	r6, r5
 800315e:	db02      	blt.n	8003166 <BSP_LCD_DrawEllipse+0xba>
 8003160:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;     
 8003162:	42ae      	cmp	r6, r5
 8003164:	da0a      	bge.n	800317c <BSP_LCD_DrawEllipse+0xd0>
 8003166:	3601      	adds	r6, #1
 8003168:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800316c:	1c5d      	adds	r5, r3, #1
  while (y <= 0);
 800316e:	2e00      	cmp	r6, #0
 8003170:	ddb4      	ble.n	80030dc <BSP_LCD_DrawEllipse+0x30>
}
 8003172:	b005      	add	sp, #20
 8003174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003178:	462b      	mov	r3, r5
 800317a:	e7f2      	b.n	8003162 <BSP_LCD_DrawEllipse+0xb6>
 800317c:	461d      	mov	r5, r3
 800317e:	e7f6      	b.n	800316e <BSP_LCD_DrawEllipse+0xc2>
 8003180:	20000ac4 	.word	0x20000ac4

08003184 <BSP_LCD_FillRect>:
{
 8003184:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003188:	4d1b      	ldr	r5, [pc, #108]	; (80031f8 <BSP_LCD_FillRect+0x74>)
{
 800318a:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800318c:	230c      	movs	r3, #12
{
 800318e:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003190:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
{
 8003194:	4617      	mov	r7, r2
 8003196:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003198:	fb03 5306 	mla	r3, r3, r6, r5
 800319c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80031a0:	f7ff fc70 	bl	8002a84 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031a4:	2334      	movs	r3, #52	; 0x34
 80031a6:	fb03 5306 	mla	r3, r3, r6, r5
 80031aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80031ae:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
 80031b2:	2a02      	cmp	r2, #2
 80031b4:	d118      	bne.n	80031e8 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031b6:	f7ff fc0b 	bl	80029d0 <BSP_LCD_GetXSize>
 80031ba:	fb00 4009 	mla	r0, r0, r9, r4
 80031be:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80031c2:	f7ff fc05 	bl	80029d0 <BSP_LCD_GetXSize>
 80031c6:	210c      	movs	r1, #12
 80031c8:	1bc0      	subs	r0, r0, r7
 80031ca:	463a      	mov	r2, r7
 80031cc:	fb01 5106 	mla	r1, r1, r6, r5
 80031d0:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
 80031d4:	4651      	mov	r1, sl
 80031d6:	9000      	str	r0, [sp, #0]
 80031d8:	4630      	mov	r0, r6
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	4643      	mov	r3, r8
 80031de:	f7ff fbbb 	bl	8002958 <LL_FillBuffer>
}
 80031e2:	b002      	add	sp, #8
 80031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031e8:	f7ff fbf2 	bl	80029d0 <BSP_LCD_GetXSize>
 80031ec:	fb00 4009 	mla	r0, r0, r9, r4
 80031f0:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 80031f4:	e7e5      	b.n	80031c2 <BSP_LCD_FillRect+0x3e>
 80031f6:	bf00      	nop
 80031f8:	20000ac4 	.word	0x20000ac4

080031fc <BSP_LCD_ClearStringLine>:
{
 80031fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 80031fe:	4c12      	ldr	r4, [pc, #72]	; (8003248 <BSP_LCD_ClearStringLine+0x4c>)
 8003200:	260c      	movs	r6, #12
 8003202:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8003206:	fb06 4303 	mla	r3, r6, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 800320a:	e9d3 523b 	ldrd	r5, r2, [r3, #236]	; 0xec
 800320e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003216:	88df      	ldrh	r7, [r3, #6]
 8003218:	fb10 f007 	smulbb	r0, r0, r7
 800321c:	b281      	uxth	r1, r0
 800321e:	9101      	str	r1, [sp, #4]
 8003220:	f7ff fbd6 	bl	80029d0 <BSP_LCD_GetXSize>
 8003224:	463b      	mov	r3, r7
 8003226:	b282      	uxth	r2, r0
 8003228:	9901      	ldr	r1, [sp, #4]
 800322a:	2000      	movs	r0, #0
 800322c:	f7ff ffaa 	bl	8003184 <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 8003230:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8003234:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].TextColor = color_backup;
 8003236:	fb06 4403 	mla	r4, r6, r3, r4
 800323a:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 800323e:	b003      	add	sp, #12
 8003240:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8003244:	f7ff bc1e 	b.w	8002a84 <BSP_LCD_SetTextColor>
 8003248:	20000ac4 	.word	0x20000ac4

0800324c <BSP_LCD_FillCircle>:
{
 800324c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003318 <BSP_LCD_FillCircle+0xcc>
  decision = 3 - (Radius << 1);
 8003254:	0054      	lsls	r4, r2, #1
{
 8003256:	4691      	mov	r9, r2
  current_y = Radius;
 8003258:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800325a:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
 800325e:	220c      	movs	r2, #12
  decision = 3 - (Radius << 1);
 8003260:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 8003264:	2500      	movs	r5, #0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003266:	fb02 a303 	mla	r3, r2, r3, sl
{
 800326a:	4680      	mov	r8, r0
 800326c:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800326e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003272:	f7ff fc07 	bl	8002a84 <BSP_LCD_SetTextColor>
    if(current_y > 0) 
 8003276:	b1af      	cbz	r7, 80032a4 <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003278:	b2ba      	uxth	r2, r7
 800327a:	fa16 f185 	uxtah	r1, r6, r5
 800327e:	fa1f fb85 	uxth.w	fp, r5
 8003282:	eba8 0002 	sub.w	r0, r8, r2
 8003286:	0052      	lsls	r2, r2, #1
 8003288:	b289      	uxth	r1, r1
 800328a:	b280      	uxth	r0, r0
 800328c:	b292      	uxth	r2, r2
 800328e:	9000      	str	r0, [sp, #0]
 8003290:	9201      	str	r2, [sp, #4]
 8003292:	f7ff fc43 	bl	8002b1c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003296:	eba6 010b 	sub.w	r1, r6, fp
 800329a:	9a01      	ldr	r2, [sp, #4]
 800329c:	9800      	ldr	r0, [sp, #0]
 800329e:	b289      	uxth	r1, r1
 80032a0:	f7ff fc3c 	bl	8002b1c <BSP_LCD_DrawHLine>
    if(current_x > 0) 
 80032a4:	b1ad      	cbz	r5, 80032d2 <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80032a6:	b2aa      	uxth	r2, r5
 80032a8:	fa1f fb87 	uxth.w	fp, r7
 80032ac:	eba8 0002 	sub.w	r0, r8, r2
 80032b0:	0052      	lsls	r2, r2, #1
 80032b2:	eba6 010b 	sub.w	r1, r6, fp
 80032b6:	b280      	uxth	r0, r0
 80032b8:	b292      	uxth	r2, r2
 80032ba:	b289      	uxth	r1, r1
 80032bc:	9000      	str	r0, [sp, #0]
 80032be:	9201      	str	r2, [sp, #4]
 80032c0:	f7ff fc2c 	bl	8002b1c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80032c4:	eb0b 0106 	add.w	r1, fp, r6
 80032c8:	9a01      	ldr	r2, [sp, #4]
 80032ca:	9800      	ldr	r0, [sp, #0]
 80032cc:	b289      	uxth	r1, r1
 80032ce:	f7ff fc25 	bl	8002b1c <BSP_LCD_DrawHLine>
    if (decision < 0)
 80032d2:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 80032d4:	bfb1      	iteee	lt
 80032d6:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 80032d8:	1beb      	subge	r3, r5, r7
 80032da:	340a      	addge	r4, #10
      current_y--;
 80032dc:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
 80032e0:	bfb8      	it	lt
 80032e2:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
 80032e6:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 80032ea:	bfa8      	it	ge
 80032ec:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 80032f0:	42af      	cmp	r7, r5
 80032f2:	d2c0      	bcs.n	8003276 <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80032f4:	f8da 30e8 	ldr.w	r3, [sl, #232]	; 0xe8
 80032f8:	220c      	movs	r2, #12
 80032fa:	fb02 aa03 	mla	sl, r2, r3, sl
 80032fe:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
 8003302:	f7ff fbbf 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003306:	464a      	mov	r2, r9
 8003308:	4631      	mov	r1, r6
 800330a:	4640      	mov	r0, r8
}
 800330c:	b003      	add	sp, #12
 800330e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003312:	f7ff be51 	b.w	8002fb8 <BSP_LCD_DrawCircle>
 8003316:	bf00      	nop
 8003318:	20000ac4 	.word	0x20000ac4

0800331c <BSP_LCD_FillPolygon>:
{
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
 8003320:	f8b0 8000 	ldrh.w	r8, [r0]
{
 8003324:	460f      	mov	r7, r1
  image_top= image_bottom = Points->Y;
 8003326:	f8b0 9002 	ldrh.w	r9, [r0, #2]
{
 800332a:	b087      	sub	sp, #28
  image_left = image_right = Points->X;
 800332c:	4644      	mov	r4, r8
 800332e:	4645      	mov	r5, r8
  image_top= image_bottom = Points->Y;
 8003330:	464e      	mov	r6, r9
 8003332:	4649      	mov	r1, r9
  for(counter = 1; counter < PointCount; counter++)
 8003334:	2301      	movs	r3, #1
 8003336:	42bb      	cmp	r3, r7
 8003338:	db2f      	blt.n	800339a <BSP_LCD_FillPolygon+0x7e>
  if(PointCount < 2)
 800333a:	2f01      	cmp	r7, #1
 800333c:	d92a      	bls.n	8003394 <BSP_LCD_FillPolygon+0x78>
  X_center = (image_left + image_right)/2;
 800333e:	4425      	add	r5, r4
  Y_center = (image_bottom + image_top)/2;
 8003340:	440e      	add	r6, r1
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003342:	f04f 0b00 	mov.w	fp, #0
 8003346:	1d04      	adds	r4, r0, #4
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003348:	f3c5 054f 	ubfx	r5, r5, #1, #16
 800334c:	f3c6 064f 	ubfx	r6, r6, #1, #16
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003350:	f8cd b00c 	str.w	fp, [sp, #12]
  while(--PointCount)
 8003354:	3f01      	subs	r7, #1
 8003356:	3404      	adds	r4, #4
 8003358:	b2bf      	uxth	r7, r7
 800335a:	bb9f      	cbnz	r7, 80033c4 <BSP_LCD_FillPolygon+0xa8>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800335c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8003360:	fa1f f48b 	uxth.w	r4, fp
 8003364:	464b      	mov	r3, r9
 8003366:	462a      	mov	r2, r5
 8003368:	4639      	mov	r1, r7
 800336a:	4640      	mov	r0, r8
 800336c:	e9cd 4600 	strd	r4, r6, [sp]
 8003370:	f7ff fdb8 	bl	8002ee4 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8003374:	464b      	mov	r3, r9
 8003376:	463a      	mov	r2, r7
 8003378:	4629      	mov	r1, r5
 800337a:	4640      	mov	r0, r8
 800337c:	e9cd 6400 	strd	r6, r4, [sp]
 8003380:	f7ff fdb0 	bl	8002ee4 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8003384:	4633      	mov	r3, r6
 8003386:	4642      	mov	r2, r8
 8003388:	4639      	mov	r1, r7
 800338a:	4628      	mov	r0, r5
 800338c:	e9cd 4900 	strd	r4, r9, [sp]
 8003390:	f7ff fda8 	bl	8002ee4 <FillTriangle>
}
 8003394:	b007      	add	sp, #28
 8003396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
 800339a:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 800339e:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 80033a2:	3301      	adds	r3, #1
    if(pixelX < image_left)
 80033a4:	42aa      	cmp	r2, r5
      image_left = pixelX;
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	bfb8      	it	lt
 80033aa:	b295      	uxthlt	r5, r2
    if(pixelX > image_right)
 80033ac:	42a2      	cmp	r2, r4
      image_right = pixelX;
 80033ae:	bfc8      	it	gt
 80033b0:	b294      	uxthgt	r4, r2
    pixelY = POLY_Y(counter);
 80033b2:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
 80033b6:	428a      	cmp	r2, r1
      image_top = pixelY;
 80033b8:	bfb8      	it	lt
 80033ba:	b291      	uxthlt	r1, r2
    if(pixelY > image_bottom)
 80033bc:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
 80033be:	bfc8      	it	gt
 80033c0:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 80033c2:	e7b8      	b.n	8003336 <BSP_LCD_FillPolygon+0x1a>
    X2 = Points->X;
 80033c4:	f934 3c04 	ldrsh.w	r3, [r4, #-4]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80033c8:	f834 ac04 	ldrh.w	sl, [r4, #-4]
 80033cc:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80033d0:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 80033d4:	4651      	mov	r1, sl
    X2 = Points->X;
 80033d6:	9303      	str	r3, [sp, #12]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80033d8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
    Y2 = Points->Y;    
 80033dc:	f934 bc02 	ldrsh.w	fp, [r4, #-2]
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	9305      	str	r3, [sp, #20]
 80033e4:	9004      	str	r0, [sp, #16]
 80033e6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80033ea:	462a      	mov	r2, r5
 80033ec:	f7ff fd7a 	bl	8002ee4 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80033f0:	9b02      	ldr	r3, [sp, #8]
 80033f2:	4652      	mov	r2, sl
 80033f4:	4629      	mov	r1, r5
 80033f6:	9804      	ldr	r0, [sp, #16]
 80033f8:	e9cd 6300 	strd	r6, r3, [sp]
 80033fc:	9b05      	ldr	r3, [sp, #20]
 80033fe:	f7ff fd71 	bl	8002ee4 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8003402:	9b05      	ldr	r3, [sp, #20]
 8003404:	9804      	ldr	r0, [sp, #16]
 8003406:	4651      	mov	r1, sl
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	9b02      	ldr	r3, [sp, #8]
 800340c:	4602      	mov	r2, r0
 800340e:	4628      	mov	r0, r5
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4633      	mov	r3, r6
 8003414:	f7ff fd66 	bl	8002ee4 <FillTriangle>
 8003418:	e79c      	b.n	8003354 <BSP_LCD_FillPolygon+0x38>

0800341a <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 8003422:	ee07 2a90 	vmov	s15, r2
 8003426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800342a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800342e:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 8003432:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 8003436:	f1c2 0401 	rsb	r4, r2, #1
{
 800343a:	b083      	sub	sp, #12
 800343c:	4680      	mov	r8, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800343e:	425d      	negs	r5, r3
 8003440:	0064      	lsls	r4, r4, #1
 8003442:	2600      	movs	r6, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos+y), (2*(uint16_t)(x/k) + 1));
 8003444:	b28f      	uxth	r7, r1
 8003446:	ee07 6a90 	vmov	s15, r6
 800344a:	fa17 f185 	uxtah	r1, r7, r5
 800344e:	fa1f f985 	uxth.w	r9, r5
 8003452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003456:	b289      	uxth	r1, r1
 8003458:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800345c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	b29a      	uxth	r2, r3
 8003466:	eba8 0002 	sub.w	r0, r8, r2
 800346a:	0052      	lsls	r2, r2, #1
 800346c:	3201      	adds	r2, #1
 800346e:	b280      	uxth	r0, r0
 8003470:	b292      	uxth	r2, r2
 8003472:	9000      	str	r0, [sp, #0]
 8003474:	9201      	str	r2, [sp, #4]
 8003476:	f7ff fb51 	bl	8002b1c <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos-y), (2*(uint16_t)(x/k) + 1));
 800347a:	eba7 0109 	sub.w	r1, r7, r9
 800347e:	9a01      	ldr	r2, [sp, #4]
 8003480:	9800      	ldr	r0, [sp, #0]
 8003482:	b289      	uxth	r1, r1
 8003484:	f7ff fb4a 	bl	8002b1c <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 8003488:	42a6      	cmp	r6, r4
 800348a:	db16      	blt.n	80034ba <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 800348c:	3601      	adds	r6, #1
 800348e:	eb04 0346 	add.w	r3, r4, r6, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 8003492:	42ee      	cmn	r6, r5
      err += ++x*2+1;
 8003494:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8003498:	d102      	bne.n	80034a0 <BSP_LCD_FillEllipse+0x86>
 800349a:	42a5      	cmp	r5, r4
 800349c:	db02      	blt.n	80034a4 <BSP_LCD_FillEllipse+0x8a>
 800349e:	2400      	movs	r4, #0
    if (e2 > y) err += ++y*2+1;
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	da0c      	bge.n	80034be <BSP_LCD_FillEllipse+0xa4>
 80034a4:	3501      	adds	r5, #1
 80034a6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80034aa:	1c5c      	adds	r4, r3, #1
  while (y <= 0);
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	ddca      	ble.n	8003446 <BSP_LCD_FillEllipse+0x2c>
}
 80034b0:	b003      	add	sp, #12
 80034b2:	ecbd 8b02 	vpop	{d8}
 80034b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034ba:	4623      	mov	r3, r4
 80034bc:	e7f0      	b.n	80034a0 <BSP_LCD_FillEllipse+0x86>
 80034be:	461c      	mov	r4, r3
 80034c0:	e7f4      	b.n	80034ac <BSP_LCD_FillEllipse+0x92>
	...

080034c4 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034c6:	484c      	ldr	r0, [pc, #304]	; (80035f8 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80034ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
{
 80034d2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034d6:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80034d8:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034da:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034dc:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80034e0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80034e4:	4e45      	ldr	r6, [pc, #276]	; (80035fc <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
 80034f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80034f8:	9201      	str	r2, [sp, #4]
 80034fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fe:	f042 0210 	orr.w	r2, r2, #16
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	f002 0210 	and.w	r2, r2, #16
 800350a:	9202      	str	r2, [sp, #8]
 800350c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800350e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
 8003516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003518:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800351c:	9203      	str	r2, [sp, #12]
 800351e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800352e:	9204      	str	r2, [sp, #16]
 8003530:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
 800353a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003540:	9205      	str	r2, [sp, #20]
 8003542:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
 800354c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003552:	9206      	str	r2, [sp, #24]
 8003554:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
 800355e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003560:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003564:	9207      	str	r2, [sp, #28]
 8003566:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003572:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	9308      	str	r3, [sp, #32]
 800357a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800357c:	2310      	movs	r3, #16
 800357e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003584:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003588:	f001 fbee 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800358c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800358e:	a909      	add	r1, sp, #36	; 0x24
 8003590:	481b      	ldr	r0, [pc, #108]	; (8003600 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003592:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003594:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003598:	f001 fbe6 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800359c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80035a0:	a909      	add	r1, sp, #36	; 0x24
 80035a2:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035a4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035a6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80035aa:	f001 fbdd 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80035ae:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80035b2:	a909      	add	r1, sp, #36	; 0x24
 80035b4:	4813      	ldr	r0, [pc, #76]	; (8003604 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035b6:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035b8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80035bc:	f001 fbd4 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80035c0:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80035c2:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80035c4:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035c6:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035c8:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80035cc:	4c0e      	ldr	r4, [pc, #56]	; (8003608 <BSP_LCD_MspInit+0x144>)
 80035ce:	4620      	mov	r0, r4
 80035d0:	f001 fbca 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80035d4:	a909      	add	r1, sp, #36	; 0x24
 80035d6:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80035d8:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035da:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80035dc:	f001 fbc4 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80035e0:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80035e2:	a909      	add	r1, sp, #36	; 0x24
 80035e4:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80035e6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80035ea:	f001 fbbd 	bl	8004d68 <HAL_GPIO_Init>
}
 80035ee:	b00f      	add	sp, #60	; 0x3c
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40022000 	.word	0x40022000
 8003600:	40021800 	.word	0x40021800
 8003604:	40022400 	.word	0x40022400
 8003608:	40022800 	.word	0x40022800

0800360c <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800360c:	4807      	ldr	r0, [pc, #28]	; (800362c <BSP_LCD_ClockConfig+0x20>)
 800360e:	2308      	movs	r3, #8
 8003610:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003614:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003616:	f500 7082 	add.w	r0, r0, #260	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800361a:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800361c:	2305      	movs	r3, #5
 800361e:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003624:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003626:	f003 b829 	b.w	800667c <HAL_RCCEx_PeriphCLKConfig>
 800362a:	bf00      	nop
 800362c:	20000ac4 	.word	0x20000ac4

08003630 <BSP_LCD_Init>:
{    
 8003630:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003632:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003634:	4c24      	ldr	r4, [pc, #144]	; (80036c8 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003636:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003638:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800363a:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800363e:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003642:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003646:	230b      	movs	r3, #11
 8003648:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800364c:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003650:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003652:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003656:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800365a:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800365e:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003662:	f7ff ffd3 	bl	800360c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003666:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 800366a:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 800366e:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003670:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 800367a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800367e:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003682:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <BSP_LCD_Init+0x9c>)
 8003688:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800368c:	f002 fa3b 	bl	8005b06 <HAL_LTDC_GetState>
 8003690:	4601      	mov	r1, r0
 8003692:	b918      	cbnz	r0, 800369c <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003694:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003698:	f7ff ff14 	bl	80034c4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <BSP_LCD_Init+0xa0>)
 800369e:	f002 f999 	bl	80059d4 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <BSP_LCD_Init+0xa4>)
 80036aa:	f001 fce9 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80036ae:	2201      	movs	r2, #1
 80036b0:	2108      	movs	r1, #8
 80036b2:	4809      	ldr	r0, [pc, #36]	; (80036d8 <BSP_LCD_Init+0xa8>)
 80036b4:	f001 fce4 	bl	8005080 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80036b8:	f000 fcfc 	bl	80040b4 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036bc:	4807      	ldr	r0, [pc, #28]	; (80036dc <BSP_LCD_Init+0xac>)
 80036be:	f7ff f9f9 	bl	8002ab4 <BSP_LCD_SetFont>
}
 80036c2:	2000      	movs	r0, #0
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	bf00      	nop
 80036c8:	20000ac4 	.word	0x20000ac4
 80036cc:	40016800 	.word	0x40016800
 80036d0:	20000b04 	.word	0x20000b04
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40022800 	.word	0x40022800
 80036dc:	20000074 	.word	0x20000074

080036e0 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80036e0:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036e2:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80036e6:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80036e8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80036ec:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80036ee:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80036f0:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80036f2:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80036f4:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80036f6:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80036f8:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80036fa:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80036fc:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80036fe:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8003700:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003702:	480b      	ldr	r0, [pc, #44]	; (8003730 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8003704:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003708:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800370c:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8003710:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8003712:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8003714:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003716:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800371a:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800371c:	466a      	mov	r2, sp
 800371e:	f002 fbb0 	bl	8005e82 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8003722:	3800      	subs	r0, #0
 8003724:	bf18      	it	ne
 8003726:	2001      	movne	r0, #1
 8003728:	b015      	add	sp, #84	; 0x54
 800372a:	f85d fb04 	ldr.w	pc, [sp], #4
 800372e:	bf00      	nop
 8003730:	20000c4c 	.word	0x20000c4c

08003734 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8003734:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800373a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4817      	ldr	r0, [pc, #92]	; (80037a0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003742:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003744:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003746:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8003748:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800374a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800374c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8003750:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8003752:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003754:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003756:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800375a:	f002 fb4f 	bl	8005dfc <HAL_QSPI_Command>
 800375e:	b9e0      	cbnz	r0, 800379a <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8003760:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8003762:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003764:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003768:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800376a:	480d      	ldr	r0, [pc, #52]	; (80037a0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800376c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8003770:	2310      	movs	r3, #16
 8003772:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003776:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003778:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800377a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800377e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003782:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003784:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003786:	f241 3388 	movw	r3, #5000	; 0x1388
 800378a:	f002 fb7a 	bl	8005e82 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 800378e:	3800      	subs	r0, #0
 8003790:	bf18      	it	ne
 8003792:	2001      	movne	r0, #1
}
 8003794:	b015      	add	sp, #84	; 0x54
 8003796:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800379a:	2001      	movs	r0, #1
 800379c:	e7fa      	b.n	8003794 <QSPI_WriteEnable.constprop.0+0x60>
 800379e:	bf00      	nop
 80037a0:	20000c4c 	.word	0x20000c4c

080037a4 <BSP_QSPI_Read>:
{
 80037a4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037a6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80037aa:	b08f      	sub	sp, #60	; 0x3c
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037ac:	4c1b      	ldr	r4, [pc, #108]	; (800381c <BSP_QSPI_Read+0x78>)
{
 80037ae:	4605      	mov	r5, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037b0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80037b2:	23eb      	movs	r3, #235	; 0xeb
  s_command.Address           = ReadAddr;
 80037b4:	9101      	str	r1, [sp, #4]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037b6:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80037ba:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80037bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037c0:	4620      	mov	r0, r4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80037c2:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80037c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c8:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e9cd 3108 	strd	r3, r1, [sp, #32]
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80037d0:	210a      	movs	r1, #10
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80037d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80037d6:	9105      	str	r1, [sp, #20]
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4669      	mov	r1, sp
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80037de:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037e2:	f002 fb0b 	bl	8005dfc <HAL_QSPI_Command>
 80037e6:	b110      	cbz	r0, 80037ee <BSP_QSPI_Read+0x4a>
    return QSPI_ERROR;
 80037e8:	2001      	movs	r0, #1
}
 80037ea:	b00f      	add	sp, #60	; 0x3c
 80037ec:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 80037ee:	6822      	ldr	r2, [r4, #0]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037f0:	4629      	mov	r1, r5
 80037f2:	4620      	mov	r0, r4
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 80037f4:	6853      	ldr	r3, [r2, #4]
 80037f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fe:	6053      	str	r3, [r2, #4]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	f002 fc2c 	bl	8006060 <HAL_QSPI_Receive>
 8003808:	2800      	cmp	r0, #0
 800380a:	d1ed      	bne.n	80037e8 <BSP_QSPI_Read+0x44>
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6853      	ldr	r3, [r2, #4]
 8003810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003814:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8003818:	6053      	str	r3, [r2, #4]
  return QSPI_OK;
 800381a:	e7e6      	b.n	80037ea <BSP_QSPI_Read+0x46>
 800381c:	20000c4c 	.word	0x20000c4c

08003820 <BSP_QSPI_Write>:
{
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003824:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8003828:	b08e      	sub	sp, #56	; 0x38
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 800382a:	b2cd      	uxtb	r5, r1
  end_addr = WriteAddr + Size;
 800382c:	188e      	adds	r6, r1, r2
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800382e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8003830:	2312      	movs	r3, #18
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8003832:	f5c5 7580 	rsb	r5, r5, #256	; 0x100
{
 8003836:	4607      	mov	r7, r0
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8003838:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800383a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800383e:	4295      	cmp	r5, r2
{
 8003840:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003842:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003848:	bf28      	it	cs
 800384a:	4615      	movcs	r5, r2
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800384c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80038b4 <BSP_QSPI_Write+0x94>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003850:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8003854:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003856:	2300      	movs	r3, #0
 8003858:	e9cd 3208 	strd	r3, r2, [sp, #32]
  s_command.DummyCycles       = 0;
 800385c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800385e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003860:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    s_command.Address = current_addr;
 8003864:	9401      	str	r4, [sp, #4]
    s_command.NbData  = current_size;
 8003866:	950a      	str	r5, [sp, #40]	; 0x28
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003868:	f7ff ff64 	bl	8003734 <QSPI_WriteEnable.constprop.0>
 800386c:	bb00      	cbnz	r0, 80038b0 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4669      	mov	r1, sp
 8003874:	480f      	ldr	r0, [pc, #60]	; (80038b4 <BSP_QSPI_Write+0x94>)
 8003876:	f002 fac1 	bl	8005dfc <HAL_QSPI_Command>
 800387a:	b9c8      	cbnz	r0, 80038b0 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4639      	mov	r1, r7
 8003882:	4640      	mov	r0, r8
 8003884:	f002 fb90 	bl	8005fa8 <HAL_QSPI_Transmit>
 8003888:	b990      	cbnz	r0, 80038b0 <BSP_QSPI_Write+0x90>
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800388a:	f241 3088 	movw	r0, #5000	; 0x1388
 800388e:	f7ff ff27 	bl	80036e0 <QSPI_AutoPollingMemReady.constprop.0>
 8003892:	b968      	cbnz	r0, 80038b0 <BSP_QSPI_Write+0x90>
    current_addr += current_size;
 8003894:	442c      	add	r4, r5
    pData += current_size;
 8003896:	442f      	add	r7, r5
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8003898:	f504 7380 	add.w	r3, r4, #256	; 0x100
 800389c:	42b3      	cmp	r3, r6
 800389e:	bf8c      	ite	hi
 80038a0:	1b35      	subhi	r5, r6, r4
 80038a2:	f44f 7580 	movls.w	r5, #256	; 0x100
  } while (current_addr < end_addr);
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d8dc      	bhi.n	8003864 <BSP_QSPI_Write+0x44>
}
 80038aa:	b00e      	add	sp, #56	; 0x38
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return QSPI_ERROR;
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7fa      	b.n	80038aa <BSP_QSPI_Write+0x8a>
 80038b4:	20000c4c 	.word	0x20000c4c

080038b8 <BSP_QSPI_Erase_Block>:
{
 80038b8:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80038ba:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80038be:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80038c0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 80038c2:	2320      	movs	r3, #32
  s_command.Address           = BlockAddress;
 80038c4:	9001      	str	r0, [sp, #4]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 80038c6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80038c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038cc:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80038ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d2:	9303      	str	r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80038d4:	2300      	movs	r3, #0
  s_command.DataMode          = QSPI_DATA_NONE;
 80038d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DummyCycles       = 0;
 80038da:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038dc:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80038de:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80038e2:	f7ff ff27 	bl	8003734 <QSPI_WriteEnable.constprop.0>
 80038e6:	b118      	cbz	r0, 80038f0 <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 80038e8:	2001      	movs	r0, #1
}
 80038ea:	b00f      	add	sp, #60	; 0x3c
 80038ec:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4669      	mov	r1, sp
 80038f6:	4806      	ldr	r0, [pc, #24]	; (8003910 <BSP_QSPI_Erase_Block+0x58>)
 80038f8:	f002 fa80 	bl	8005dfc <HAL_QSPI_Command>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d1f3      	bne.n	80038e8 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8003900:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003904:	f7ff feec 	bl	80036e0 <QSPI_AutoPollingMemReady.constprop.0>
    return QSPI_ERROR;
 8003908:	3800      	subs	r0, #0
 800390a:	bf18      	it	ne
 800390c:	2001      	movne	r0, #1
 800390e:	e7ec      	b.n	80038ea <BSP_QSPI_Erase_Block+0x32>
 8003910:	20000c4c 	.word	0x20000c4c

08003914 <BSP_QSPI_GetInfo>:
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8003914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 800391c:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8003920:	6083      	str	r3, [r0, #8]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8003922:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8003926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392a:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
 800392e:	2000      	movs	r0, #0
 8003930:	4770      	bx	lr
	...

08003934 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003936:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8003938:	4845      	ldr	r0, [pc, #276]	; (8003a50 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 800393a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393c:	f042 0202 	orr.w	r2, r2, #2
{
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
{
 8003944:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8003946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003948:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800394a:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800394c:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 800394e:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003952:	4d40      	ldr	r5, [pc, #256]	; (8003a54 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	f042 0202 	orr.w	r2, r2, #2
 800395e:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	f022 0202 	bic.w	r2, r2, #2
 8003966:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8003968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396a:	f042 0202 	orr.w	r2, r2, #2
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	f002 0202 	and.w	r2, r2, #2
 8003976:	9201      	str	r2, [sp, #4]
 8003978:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	f042 0202 	orr.w	r2, r2, #2
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
 8003982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003984:	f002 0202 	and.w	r2, r2, #2
 8003988:	9202      	str	r2, [sp, #8]
 800398a:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 800398c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	f002 0208 	and.w	r2, r2, #8
 800399a:	9203      	str	r2, [sp, #12]
 800399c:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a0:	f042 0208 	orr.w	r2, r2, #8
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
 80039a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a8:	f002 0208 	and.w	r2, r2, #8
 80039ac:	9204      	str	r2, [sp, #16]
 80039ae:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80039b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b2:	f042 0210 	orr.w	r2, r2, #16
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	f002 0210 	and.w	r2, r2, #16
 80039be:	9205      	str	r2, [sp, #20]
 80039c0:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	f042 0208 	orr.w	r2, r2, #8
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039ca:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	9306      	str	r3, [sp, #24]
 80039d4:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80039dc:	2303      	movs	r3, #3
 80039de:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80039e2:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80039e4:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80039e6:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80039e8:	f001 f9be 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80039ec:	a907      	add	r1, sp, #28
 80039ee:	4818      	ldr	r0, [pc, #96]	; (8003a50 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80039f0:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039f2:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80039f4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80039f6:	f001 f9b7 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80039fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80039fe:	a907      	add	r1, sp, #28
 8003a00:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003a02:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8003a04:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003a06:	f001 f9af 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003a0e:	a907      	add	r1, sp, #28
 8003a10:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003a12:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8003a14:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003a16:	f001 f9a7 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003a1a:	a907      	add	r1, sp, #28
 8003a1c:	480e      	ldr	r0, [pc, #56]	; (8003a58 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8003a1e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003a20:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8003a22:	f001 f9a1 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003a2a:	a907      	add	r1, sp, #28
 8003a2c:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003a2e:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003a30:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003a32:	f001 f999 	bl	8004d68 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003a36:	4632      	mov	r2, r6
 8003a38:	210f      	movs	r1, #15
 8003a3a:	205c      	movs	r0, #92	; 0x5c
 8003a3c:	f000 fd04 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003a40:	205c      	movs	r0, #92	; 0x5c
 8003a42:	f000 fd33 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 8003a46:	b00d      	add	sp, #52	; 0x34
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40021000 	.word	0x40021000

08003a5c <BSP_QSPI_Init>:
{ 
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8003a5e:	4c49      	ldr	r4, [pc, #292]	; (8003b84 <BSP_QSPI_Init+0x128>)
{ 
 8003a60:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003a64:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8003a66:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8003a68:	f002 f9b5 	bl	8005dd6 <HAL_QSPI_DeInit>
 8003a6c:	4605      	mov	r5, r0
 8003a6e:	b110      	cbz	r0, 8003a76 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8003a70:	2001      	movs	r0, #1
}
 8003a72:	b011      	add	sp, #68	; 0x44
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8003a76:	4601      	mov	r1, r0
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff ff5b 	bl	8003934 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8003a7e:	2601      	movs	r6, #1
 8003a80:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8003a86:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	60e3      	str	r3, [r4, #12]
 8003a8e:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a92:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003a96:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003a9c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003aa0:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003aa4:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8003aa8:	f002 f940 	bl	8005d2c <HAL_QSPI_Init>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d1df      	bne.n	8003a70 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ab0:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003ab4:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8003ab6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8003abc:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003abe:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003ac0:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003ac2:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003ac4:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003ac6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003aca:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f002 f994 	bl	8005dfc <HAL_QSPI_Command>
 8003ad4:	b108      	cbz	r0, 8003ada <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8003ad6:	2004      	movs	r0, #4
 8003ad8:	e7cb      	b.n	8003a72 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8003ada:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	a902      	add	r1, sp, #8
 8003ae2:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003ae4:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003ae6:	f002 f989 	bl	8005dfc <HAL_QSPI_Command>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1f3      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003aee:	f241 3088 	movw	r0, #5000	; 0x1388
 8003af2:	f7ff fdf5 	bl	80036e0 <QSPI_AutoPollingMemReady.constprop.0>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1ed      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003afa:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8003afc:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003b04:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003b06:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003b08:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003b0a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003b0e:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003b12:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b16:	4620      	mov	r0, r4
 8003b18:	f002 f970 	bl	8005dfc <HAL_QSPI_Command>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d1da      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	f10d 0107 	add.w	r1, sp, #7
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f002 fa99 	bl	8006060 <HAL_QSPI_Receive>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1d1      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003b32:	f7ff fdff 	bl	8003734 <QSPI_WriteEnable.constprop.0>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d1cd      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003b3a:	2381      	movs	r3, #129	; 0x81
 8003b3c:	22f0      	movs	r2, #240	; 0xf0
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003b44:	210a      	movs	r1, #10
 8003b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b4a:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b4e:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b58:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003b5a:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003b60:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b64:	f002 f94a 	bl	8005dfc <HAL_QSPI_Command>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d1b4      	bne.n	8003ad6 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	f10d 0107 	add.w	r1, sp, #7
 8003b74:	4620      	mov	r0, r4
 8003b76:	f002 fa17 	bl	8005fa8 <HAL_QSPI_Transmit>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f43f af79 	beq.w	8003a72 <BSP_QSPI_Init+0x16>
 8003b80:	e7a9      	b.n	8003ad6 <BSP_QSPI_Init+0x7a>
 8003b82:	bf00      	nop
 8003b84:	20000c4c 	.word	0x20000c4c
 8003b88:	a0001000 	.word	0xa0001000

08003b8c <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8003b8c:	2301      	movs	r3, #1
{
 8003b8e:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b94:	4807      	ldr	r0, [pc, #28]	; (8003bb4 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 8003b96:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003b9a:	f001 fa6b 	bl	8005074 <HAL_GPIO_ReadPin>
 8003b9e:	2801      	cmp	r0, #1
 8003ba0:	d102      	bne.n	8003ba8 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8003ba8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003bac:	b003      	add	sp, #12
 8003bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bb2:	bf00      	nop
 8003bb4:	40020800 	.word	0x40020800

08003bb8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003bb8:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	4601      	mov	r1, r0
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <BSP_SD_ReadBlocks+0x1c>)
 8003bc4:	f003 fc22 	bl	800740c <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8003bc8:	3800      	subs	r0, #0
 8003bca:	bf18      	it	ne
 8003bcc:	2001      	movne	r0, #1
 8003bce:	b003      	add	sp, #12
 8003bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd4:	20000c98 	.word	0x20000c98

08003bd8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003bd8:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	460a      	mov	r2, r1
 8003be0:	4601      	mov	r1, r0
 8003be2:	4804      	ldr	r0, [pc, #16]	; (8003bf4 <BSP_SD_WriteBlocks+0x1c>)
 8003be4:	f003 fd0e 	bl	8007604 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8003be8:	3800      	subs	r0, #0
 8003bea:	bf18      	it	ne
 8003bec:	2001      	movne	r0, #1
 8003bee:	b003      	add	sp, #12
 8003bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf4:	20000c98 	.word	0x20000c98

08003bf8 <BSP_SD_Erase>:
  * @param  StartAddr: Start byte address
  * @param  EndAddr: End byte address
  * @retval SD status
  */
uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
{
 8003bf8:	460a      	mov	r2, r1
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	4803      	ldr	r0, [pc, #12]	; (8003c0c <BSP_SD_Erase+0x14>)
{
 8003bfe:	b508      	push	{r3, lr}
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 8003c00:	f003 fdcc 	bl	800779c <HAL_SD_Erase>
  }
  else
  {
    return MSD_OK;
  }
}
 8003c04:	3800      	subs	r0, #0
 8003c06:	bf18      	it	ne
 8003c08:	2001      	movne	r0, #1
 8003c0a:	bd08      	pop	{r3, pc}
 8003c0c:	20000c98 	.word	0x20000c98

08003c10 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c10:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <BSP_SD_MspInit+0x164>)
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
{
 8003c1e:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003c22:	f04f 0803 	mov.w	r8, #3
{
 8003c26:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003c28:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c30:	a905      	add	r1, sp, #20
 8003c32:	4851      	ldr	r0, [pc, #324]	; (8003d78 <BSP_SD_MspInit+0x168>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003c34:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c36:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003c38:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c3c:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003c3e:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 8003c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003c44:	4c4d      	ldr	r4, [pc, #308]	; (8003d7c <BSP_SD_MspInit+0x16c>)
  __DMAx_TxRx_CLK_ENABLE();
 8003c46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003c4a:	4627      	mov	r7, r4
  __DMAx_TxRx_CLK_ENABLE();
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c50:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003c54:	9202      	str	r2, [sp, #8]
 8003c56:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5a:	f042 0204 	orr.w	r2, r2, #4
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c62:	f002 0204 	and.w	r2, r2, #4
 8003c66:	9203      	str	r2, [sp, #12]
 8003c68:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c6c:	f042 0208 	orr.w	r2, r2, #8
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c72:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003c84:	230c      	movs	r3, #12
 8003c86:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003c8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c8e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003c90:	f001 f86a 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c94:	a905      	add	r1, sp, #20
 8003c96:	483a      	ldr	r0, [pc, #232]	; (8003d80 <BSP_SD_MspInit+0x170>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003c98:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c9c:	f001 f864 	bl	8004d68 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	210e      	movs	r1, #14
 8003ca4:	2031      	movs	r0, #49	; 0x31
 8003ca6:	f000 fbcf 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003caa:	2031      	movs	r0, #49	; 0x31
 8003cac:	f000 fbfe 	bl	80044ac <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003cb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003cbc:	4831      	ldr	r0, [pc, #196]	; (8003d84 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003cbe:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003cc2:	f847 0f84 	str.w	r0, [r7, #132]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8003cc6:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003cc8:	642f      	str	r7, [r5, #64]	; 0x40
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003cca:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003cce:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cd2:	e9c4 2325 	strd	r2, r3, [r4, #148]	; 0x94
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003cd6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003cda:	e9c4 1622 	strd	r1, r6, [r4, #136]	; 0x88
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003cde:	e9c4 3929 	strd	r3, r9, [r4, #164]	; 0xa4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003ce2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003ce6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003cea:	e9c4 ba27 	strd	fp, sl, [r4, #156]	; 0x9c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003cee:	e9c4 132c 	strd	r1, r3, [r4, #176]	; 0xb0
  HAL_DMA_DeInit(&dma_rx_handle);
 8003cf2:	f000 fcf1 	bl	80046d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f000 fc6e 	bl	80045d8 <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003d04:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003d0e:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d12:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003d16:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d1a:	e9c4 233d 	strd	r2, r3, [r4, #244]	; 0xf4
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003d1e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003d22:	e9c4 3941 	strd	r3, r9, [r4, #260]	; 0x104
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003d26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d2a:	e9c4 7344 	strd	r7, r3, [r4, #272]	; 0x110
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <BSP_SD_MspInit+0x178>)
 8003d30:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003d32:	e9c4 013a 	strd	r0, r1, [r4, #232]	; 0xe8
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003d36:	f847 3fe4 	str.w	r3, [r7, #228]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003d3a:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003d3c:	63ef      	str	r7, [r5, #60]	; 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003d3e:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	; 0xfc
  HAL_DMA_DeInit(&dma_tx_handle);
 8003d42:	f000 fcc9 	bl	80046d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8003d46:	4638      	mov	r0, r7
 8003d48:	f000 fc46 	bl	80045d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	210f      	movs	r1, #15
 8003d50:	203b      	movs	r0, #59	; 0x3b
 8003d52:	f000 fb79 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003d56:	203b      	movs	r0, #59	; 0x3b
 8003d58:	f000 fba8 	bl	80044ac <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	210f      	movs	r1, #15
 8003d60:	2045      	movs	r0, #69	; 0x45
 8003d62:	f000 fb71 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003d66:	2045      	movs	r0, #69	; 0x45
 8003d68:	f000 fba0 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 8003d6c:	b00b      	add	sp, #44	; 0x2c
 8003d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020800 	.word	0x40020800
 8003d7c:	20000c98 	.word	0x20000c98
 8003d80:	40020c00 	.word	0x40020c00
 8003d84:	40026458 	.word	0x40026458
 8003d88:	400264a0 	.word	0x400264a0

08003d8c <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003d90:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003d92:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	f042 0204 	orr.w	r2, r2, #4
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003db6:	a901      	add	r1, sp, #4
 8003db8:	f000 ffd6 	bl	8004d68 <HAL_GPIO_Init>
}
 8003dbc:	b007      	add	sp, #28
 8003dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020800 	.word	0x40020800

08003dcc <BSP_SD_Init>:
{ 
 8003dcc:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 8003dce:	4c13      	ldr	r4, [pc, #76]	; (8003e1c <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8003dd8:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003dda:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003dde:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003de2:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003de6:	f7ff ffd1 	bl	8003d8c <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8003dea:	f7ff fecf 	bl	8003b8c <BSP_SD_IsDetected>
 8003dee:	2801      	cmp	r0, #1
 8003df0:	4605      	mov	r5, r0
 8003df2:	d111      	bne.n	8003e18 <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003df4:	4620      	mov	r0, r4
 8003df6:	4631      	mov	r1, r6
 8003df8:	f7ff ff0a 	bl	8003c10 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f003 fee7 	bl	8007bd0 <HAL_SD_Init>
 8003e02:	b938      	cbnz	r0, 8003e14 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f003 fefd 	bl	8007c08 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8003e0e:	1b85      	subs	r5, r0, r6
 8003e10:	bf18      	it	ne
 8003e12:	2501      	movne	r5, #1
}
 8003e14:	4628      	mov	r0, r5
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8003e18:	2502      	movs	r5, #2
 8003e1a:	e7fb      	b.n	8003e14 <BSP_SD_Init+0x48>
 8003e1c:	20000c98 	.word	0x20000c98
 8003e20:	40012c00 	.word	0x40012c00

08003e24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003e24:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003e26:	4803      	ldr	r0, [pc, #12]	; (8003e34 <BSP_SD_GetCardState+0x10>)
 8003e28:	f003 ff78 	bl	8007d1c <HAL_SD_GetCardState>
}
 8003e2c:	3804      	subs	r0, #4
 8003e2e:	bf18      	it	ne
 8003e30:	2001      	movne	r0, #1
 8003e32:	bd08      	pop	{r3, pc}
 8003e34:	20000c98 	.word	0x20000c98

08003e38 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e3c:	4c21      	ldr	r4, [pc, #132]	; (8003ec4 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e3e:	2710      	movs	r7, #16
 8003e40:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8003e42:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e46:	19e5      	adds	r5, r4, r7
 8003e48:	4621      	mov	r1, r4
{
 8003e4a:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e50:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003e52:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e56:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003e5a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e5e:	f004 f85b 	bl	8007f18 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 facc 	bl	8004400 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003e68:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e70:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e72:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003e76:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e7a:	f004 f84d 	bl	8007f18 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e7e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e80:	4621      	mov	r1, r4
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e88:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003e8c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003e8e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e92:	f004 f841 	bl	8007f18 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e96:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003ea0:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003ea2:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003ea4:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003ea6:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ea8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003eac:	9b01      	ldr	r3, [sp, #4]
 8003eae:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003eb0:	f004 f832 	bl	8007f18 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4628      	mov	r0, r5
}
 8003eb8:	b003      	add	sp, #12
 8003eba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ebe:	f004 b84a 	b.w	8007f56 <HAL_SDRAM_ProgramRefreshRate>
 8003ec2:	bf00      	nop
 8003ec4:	20000e9c 	.word	0x20000e9c

08003ec8 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8003ec8:	b508      	push	{r3, lr}
 8003eca:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003ecc:	460a      	mov	r2, r1
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <BSP_SDRAM_ReadData+0x18>)
 8003ed2:	f003 ff7e 	bl	8007dd2 <HAL_SDRAM_Read_32b>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 8003ed6:	3800      	subs	r0, #0
 8003ed8:	bf18      	it	ne
 8003eda:	2001      	movne	r0, #1
 8003edc:	bd08      	pop	{r3, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000eac 	.word	0x20000eac

08003ee4 <BSP_SDRAM_ReadData_DMA>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8003ee4:	b508      	push	{r3, lr}
 8003ee6:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003ee8:	460a      	mov	r2, r1
 8003eea:	4601      	mov	r1, r0
 8003eec:	4803      	ldr	r0, [pc, #12]	; (8003efc <BSP_SDRAM_ReadData_DMA+0x18>)
 8003eee:	f003 ffb7 	bl	8007e60 <HAL_SDRAM_Read_DMA>
  }
  else
  {
    return SDRAM_OK;
  }     
}
 8003ef2:	3800      	subs	r0, #0
 8003ef4:	bf18      	it	ne
 8003ef6:	2001      	movne	r0, #1
 8003ef8:	bd08      	pop	{r3, pc}
 8003efa:	bf00      	nop
 8003efc:	20000eac 	.word	0x20000eac

08003f00 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8003f00:	b508      	push	{r3, lr}
 8003f02:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003f04:	460a      	mov	r2, r1
 8003f06:	4601      	mov	r1, r0
 8003f08:	4803      	ldr	r0, [pc, #12]	; (8003f18 <BSP_SDRAM_WriteData+0x18>)
 8003f0a:	f003 ff86 	bl	8007e1a <HAL_SDRAM_Write_32b>
  }
  else
  {
    return SDRAM_OK;
  }
}
 8003f0e:	3800      	subs	r0, #0
 8003f10:	bf18      	it	ne
 8003f12:	2001      	movne	r0, #1
 8003f14:	bd08      	pop	{r3, pc}
 8003f16:	bf00      	nop
 8003f18:	20000eac 	.word	0x20000eac

08003f1c <BSP_SDRAM_WriteData_DMA>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8003f1c:	b508      	push	{r3, lr}
 8003f1e:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003f20:	460a      	mov	r2, r1
 8003f22:	4601      	mov	r1, r0
 8003f24:	4803      	ldr	r0, [pc, #12]	; (8003f34 <BSP_SDRAM_WriteData_DMA+0x18>)
 8003f26:	f003 ffcb 	bl	8007ec0 <HAL_SDRAM_Write_DMA>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 8003f2a:	3800      	subs	r0, #0
 8003f2c:	bf18      	it	ne
 8003f2e:	2001      	movne	r0, #1
 8003f30:	bd08      	pop	{r3, pc}
 8003f32:	bf00      	nop
 8003f34:	20000eac 	.word	0x20000eac

08003f38 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f38:	4b55      	ldr	r3, [pc, #340]	; (8004090 <BSP_SDRAM_MspInit+0x158>)
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
{  
 8003f40:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8003f44:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8003f48:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003f4a:	a909      	add	r1, sp, #36	; 0x24
 8003f4c:	4851      	ldr	r0, [pc, #324]	; (8004094 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f4e:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f52:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f54:	9201      	str	r2, [sp, #4]
 8003f56:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003f66:	9202      	str	r2, [sp, #8]
 8003f68:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6c:	f042 0204 	orr.w	r2, r2, #4
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
 8003f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f74:	f002 0204 	and.w	r2, r2, #4
 8003f78:	9203      	str	r2, [sp, #12]
 8003f7a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	f042 0208 	orr.w	r2, r2, #8
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
 8003f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f86:	f002 0208 	and.w	r2, r2, #8
 8003f8a:	9204      	str	r2, [sp, #16]
 8003f8c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f90:	f042 0210 	orr.w	r2, r2, #16
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
 8003f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f98:	f002 0210 	and.w	r2, r2, #16
 8003f9c:	9205      	str	r2, [sp, #20]
 8003f9e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003faa:	f002 0220 	and.w	r2, r2, #32
 8003fae:	9206      	str	r2, [sp, #24]
 8003fb0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003fcc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	9308      	str	r3, [sp, #32]
 8003fd6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003fde:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003fe8:	f000 febe 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003fec:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003ff0:	a909      	add	r1, sp, #36	; 0x24
 8003ff2:	4829      	ldr	r0, [pc, #164]	; (8004098 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003ff4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003ff6:	f000 feb7 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003ffa:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003ffe:	a909      	add	r1, sp, #36	; 0x24
 8004000:	4826      	ldr	r0, [pc, #152]	; (800409c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004002:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004004:	f000 feb0 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004008:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800400c:	a909      	add	r1, sp, #36	; 0x24
 800400e:	4824      	ldr	r0, [pc, #144]	; (80040a0 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004010:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004012:	f000 fea9 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004016:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800401a:	a909      	add	r1, sp, #36	; 0x24
 800401c:	4821      	ldr	r0, [pc, #132]	; (80040a4 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800401e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004020:	f000 fea2 	bl	8004d68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004024:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004026:	a909      	add	r1, sp, #36	; 0x24
 8004028:	481f      	ldr	r0, [pc, #124]	; (80040a8 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800402c:	f000 fe9c 	bl	8004d68 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004032:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004034:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004038:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800403c:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800403e:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004040:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004042:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800404a:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800404e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004052:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800405a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800405e:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004060:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <BSP_SDRAM_MspInit+0x178>)
 8004066:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800406a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800406c:	6335      	str	r5, [r6, #48]	; 0x30
 800406e:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8004070:	f000 fb32 	bl	80046d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004074:	4628      	mov	r0, r5
 8004076:	f000 faaf 	bl	80045d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800407a:	4622      	mov	r2, r4
 800407c:	210f      	movs	r1, #15
 800407e:	2038      	movs	r0, #56	; 0x38
 8004080:	f000 f9e2 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004084:	2038      	movs	r0, #56	; 0x38
 8004086:	f000 fa11 	bl	80044ac <HAL_NVIC_EnableIRQ>
}
 800408a:	b00e      	add	sp, #56	; 0x38
 800408c:	bd70      	pop	{r4, r5, r6, pc}
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	40020800 	.word	0x40020800
 8004098:	40020c00 	.word	0x40020c00
 800409c:	40021000 	.word	0x40021000
 80040a0:	40021400 	.word	0x40021400
 80040a4:	40021800 	.word	0x40021800
 80040a8:	40021c00 	.word	0x40021c00
 80040ac:	20000e9c 	.word	0x20000e9c
 80040b0:	40026410 	.word	0x40026410

080040b4 <BSP_SDRAM_Init>:
{ 
 80040b4:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 80040b8:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80040ba:	4c1b      	ldr	r4, [pc, #108]	; (8004128 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 80040bc:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040be:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040c0:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80040c4:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 80040c6:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80040c8:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 80040ca:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 80040ce:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 80040d2:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040d6:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 80040d8:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040dc:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80040e0:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80040e6:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80040ea:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80040ec:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80040f4:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040f8:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80040fc:	f7ff ff1c 	bl	8003f38 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004100:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8004104:	4c09      	ldr	r4, [pc, #36]	; (800412c <BSP_SDRAM_Init+0x78>)
 8004106:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 800410a:	f003 fe1b 	bl	8007d44 <HAL_SDRAM_Init>
 800410e:	3800      	subs	r0, #0
 8004110:	bf18      	it	ne
 8004112:	2001      	movne	r0, #1
 8004114:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004116:	f240 6003 	movw	r0, #1539	; 0x603
 800411a:	f7ff fe8d 	bl	8003e38 <BSP_SDRAM_Initialization_sequence>
}
 800411e:	7820      	ldrb	r0, [r4, #0]
 8004120:	bd10      	pop	{r4, pc}
 8004122:	bf00      	nop
 8004124:	a0000140 	.word	0xa0000140
 8004128:	20000e9c 	.word	0x20000e9c
 800412c:	2000009c 	.word	0x2000009c

08004130 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004130:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8004132:	4c0b      	ldr	r4, [pc, #44]	; (8004160 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004134:	4d0b      	ldr	r5, [pc, #44]	; (8004164 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 8004136:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004138:	2070      	movs	r0, #112	; 0x70
 800413a:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 800413c:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800413e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004140:	686b      	ldr	r3, [r5, #4]
 8004142:	2070      	movs	r0, #112	; 0x70
 8004144:	4798      	blx	r3
 8004146:	2851      	cmp	r0, #81	; 0x51
 8004148:	d108      	bne.n	800415c <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 800414a:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 800414c:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 800414e:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 8004150:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004152:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 8004154:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 8004156:	4798      	blx	r3
  uint8_t status = TS_OK;
 8004158:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 800415a:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 800415c:	2003      	movs	r0, #3
 800415e:	e7fc      	b.n	800415a <BSP_TS_Init+0x2a>
 8004160:	20000fbc 	.word	0x20000fbc
 8004164:	20000000 	.word	0x20000000

08004168 <BSP_TS_Get_GestureId>:
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <BSP_TS_Get_GestureId+0x58>)
{
 800416a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
 800416c:	2400      	movs	r4, #0
{
 800416e:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004170:	a901      	add	r1, sp, #4
 8004172:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
 8004174:	9401      	str	r4, [sp, #4]
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004176:	f7fd f881 	bl	800127c <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800417a:	9801      	ldr	r0, [sp, #4]
 800417c:	2818      	cmp	r0, #24
 800417e:	d019      	beq.n	80041b4 <BSP_TS_Get_GestureId+0x4c>
 8004180:	d808      	bhi.n	8004194 <BSP_TS_Get_GestureId+0x2c>
 8004182:	2810      	cmp	r0, #16
 8004184:	d011      	beq.n	80041aa <BSP_TS_Get_GestureId+0x42>
 8004186:	2814      	cmp	r0, #20
 8004188:	d012      	beq.n	80041b0 <BSP_TS_Get_GestureId+0x48>
 800418a:	b158      	cbz	r0, 80041a4 <BSP_TS_Get_GestureId+0x3c>
 800418c:	2401      	movs	r4, #1
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 800418e:	4620      	mov	r0, r4
 8004190:	b003      	add	sp, #12
 8004192:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8004194:	2840      	cmp	r0, #64	; 0x40
 8004196:	d00f      	beq.n	80041b8 <BSP_TS_Get_GestureId+0x50>
 8004198:	2849      	cmp	r0, #73	; 0x49
 800419a:	d00f      	beq.n	80041bc <BSP_TS_Get_GestureId+0x54>
 800419c:	281c      	cmp	r0, #28
 800419e:	d1f5      	bne.n	800418c <BSP_TS_Get_GestureId+0x24>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80041a0:	2304      	movs	r3, #4
 80041a2:	e003      	b.n	80041ac <BSP_TS_Get_GestureId+0x44>
  uint8_t  ts_status = TS_OK;
 80041a4:	4604      	mov	r4, r0
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80041a6:	62a8      	str	r0, [r5, #40]	; 0x28
      break;
 80041a8:	e7f1      	b.n	800418e <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80041aa:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80041ac:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 80041ae:	e7ee      	b.n	800418e <BSP_TS_Get_GestureId+0x26>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80041b0:	2302      	movs	r3, #2
 80041b2:	e7fb      	b.n	80041ac <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e7f9      	b.n	80041ac <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80041b8:	2305      	movs	r3, #5
 80041ba:	e7f7      	b.n	80041ac <BSP_TS_Get_GestureId+0x44>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80041bc:	2306      	movs	r3, #6
 80041be:	e7f5      	b.n	80041ac <BSP_TS_Get_GestureId+0x44>
 80041c0:	20000fbc 	.word	0x20000fbc

080041c4 <BSP_TS_GetState>:
{
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80041c8:	4c56      	ldr	r4, [pc, #344]	; (8004324 <BSP_TS_GetState+0x160>)
{
 80041ca:	b097      	sub	sp, #92	; 0x5c
  uint32_t weight = 0;
 80041cc:	2300      	movs	r3, #0
{
 80041ce:	4605      	mov	r5, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	7a20      	ldrb	r0, [r4, #8]
 80041d4:	6912      	ldr	r2, [r2, #16]
  uint32_t event = 0;
 80041d6:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t area = 0;
 80041d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80041dc:	4790      	blx	r2
 80041de:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 80041e0:	b1b8      	cbz	r0, 8004212 <BSP_TS_GetState+0x4e>
 80041e2:	ab0d      	add	r3, sp, #52	; 0x34
 80041e4:	f105 0616 	add.w	r6, r5, #22
 80041e8:	f105 0802 	add.w	r8, r5, #2
 80041ec:	f104 0a0c 	add.w	sl, r4, #12
 80041f0:	9304      	str	r3, [sp, #16]
 80041f2:	ab0a      	add	r3, sp, #40	; 0x28
 80041f4:	f104 0b20 	add.w	fp, r4, #32
 80041f8:	af10      	add	r7, sp, #64	; 0x40
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
    for(index=0; index < TS_State->touchDetected; index++)
 8004200:	2300      	movs	r3, #0
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	782b      	ldrb	r3, [r5, #0]
 8004206:	9a05      	ldr	r2, [sp, #20]
 8004208:	4293      	cmp	r3, r2
 800420a:	d805      	bhi.n	8004218 <BSP_TS_GetState+0x54>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff ffab 	bl	8004168 <BSP_TS_Get_GestureId>
}
 8004212:	b017      	add	sp, #92	; 0x5c
 8004214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	464a      	mov	r2, r9
 800421c:	4639      	mov	r1, r7
 800421e:	7a20      	ldrb	r0, [r4, #8]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8004224:	7a63      	ldrb	r3, [r4, #9]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d14a      	bne.n	80042c0 <BSP_TS_GetState+0xfc>
        x[index] = brute_x[index];
 800422a:	883a      	ldrh	r2, [r7, #0]
 800422c:	9903      	ldr	r1, [sp, #12]
 800422e:	800a      	strh	r2, [r1, #0]
        y[index] = brute_y[index];
 8004230:	f8b9 2000 	ldrh.w	r2, [r9]
        y[index] = 4096 - brute_y[index];
 8004234:	9904      	ldr	r1, [sp, #16]
 8004236:	800a      	strh	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	d506      	bpl.n	800424a <BSP_TS_GetState+0x86>
        y[index] = brute_x[index];
 800423c:	883b      	ldrh	r3, [r7, #0]
 800423e:	9a04      	ldr	r2, [sp, #16]
 8004240:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
 8004242:	f8b9 3000 	ldrh.w	r3, [r9]
 8004246:	9a03      	ldr	r2, [sp, #12]
 8004248:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800424a:	9b03      	ldr	r3, [sp, #12]
 800424c:	f8da 2000 	ldr.w	r2, [sl]
 8004250:	f833 cb02 	ldrh.w	ip, [r3], #2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004254:	f8db 0000 	ldr.w	r0, [fp]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004258:	4594      	cmp	ip, r2
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	b293      	uxth	r3, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800425e:	9a04      	ldr	r2, [sp, #16]
 8004260:	f832 1b02 	ldrh.w	r1, [r2], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004264:	bf8c      	ite	hi
 8004266:	ebac 0303 	subhi.w	r3, ip, r3
 800426a:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800426e:	9204      	str	r2, [sp, #16]
 8004270:	4281      	cmp	r1, r0
 8004272:	b282      	uxth	r2, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004274:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004276:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004278:	bf8c      	ite	hi
 800427a:	1a8a      	subhi	r2, r1, r2
 800427c:	1a52      	subls	r2, r2, r1
 800427e:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8004280:	4413      	add	r3, r2
 8004282:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 8004284:	bfc4      	itt	gt
 8004286:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 800428a:	f8cb 1000 	strgt.w	r1, [fp]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800428e:	2870      	cmp	r0, #112	; 0x70
 8004290:	d124      	bne.n	80042dc <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
 8004292:	f8a8 c000 	strh.w	ip, [r8]
        TS_State->touchY[index] = y[index];
 8004296:	f8a8 100a 	strh.w	r1, [r8, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800429a:	ab09      	add	r3, sp, #36	; 0x24
 800429c:	aa07      	add	r2, sp, #28
 800429e:	9905      	ldr	r1, [sp, #20]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	ab08      	add	r3, sp, #32
 80042a4:	f7fc fffa 	bl	800129c <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80042a8:	9b07      	ldr	r3, [sp, #28]
 80042aa:	f806 3b01 	strb.w	r3, [r6], #1
      TS_State->touchArea[index]   = area;
 80042ae:	9b08      	ldr	r3, [sp, #32]
 80042b0:	7273      	strb	r3, [r6, #9]
      switch(event)
 80042b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d822      	bhi.n	80042fe <BSP_TS_GetState+0x13a>
 80042b8:	e8df f003 	tbb	[pc, r3]
 80042bc:	32302e1f 	.word	0x32302e1f
      if(tsOrientation & TS_SWAP_X)
 80042c0:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
 80042c2:	bf41      	itttt	mi
 80042c4:	883a      	ldrhmi	r2, [r7, #0]
 80042c6:	9903      	ldrmi	r1, [sp, #12]
 80042c8:	f5c2 5280 	rsbmi	r2, r2, #4096	; 0x1000
 80042cc:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_Y)
 80042ce:	075a      	lsls	r2, r3, #29
 80042d0:	d5b2      	bpl.n	8004238 <BSP_TS_GetState+0x74>
        y[index] = 4096 - brute_y[index];
 80042d2:	f8b9 2000 	ldrh.w	r2, [r9]
 80042d6:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80042da:	e7ab      	b.n	8004234 <BSP_TS_GetState+0x70>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80042dc:	f8da 2000 	ldr.w	r2, [sl]
 80042e0:	8823      	ldrh	r3, [r4, #0]
 80042e2:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80042e4:	f8db 2000 	ldr.w	r2, [fp]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80042e8:	0b1b      	lsrs	r3, r3, #12
 80042ea:	f8a8 3000 	strh.w	r3, [r8]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80042ee:	8863      	ldrh	r3, [r4, #2]
 80042f0:	4353      	muls	r3, r2
 80042f2:	0b1b      	lsrs	r3, r3, #12
 80042f4:	f8a8 300a 	strh.w	r3, [r8, #10]
 80042f8:	e7cf      	b.n	800429a <BSP_TS_GetState+0xd6>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80042fa:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80042fc:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 80042fe:	9b05      	ldr	r3, [sp, #20]
 8004300:	f108 0802 	add.w	r8, r8, #2
 8004304:	f10a 0a04 	add.w	sl, sl, #4
 8004308:	f10b 0b04 	add.w	fp, fp, #4
 800430c:	3301      	adds	r3, #1
 800430e:	3702      	adds	r7, #2
 8004310:	f109 0902 	add.w	r9, r9, #2
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	e775      	b.n	8004204 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004318:	2302      	movs	r3, #2
 800431a:	e7ef      	b.n	80042fc <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800431c:	2303      	movs	r3, #3
 800431e:	e7ed      	b.n	80042fc <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004320:	2300      	movs	r3, #0
 8004322:	e7eb      	b.n	80042fc <BSP_TS_GetState+0x138>
 8004324:	20000fbc 	.word	0x20000fbc

08004328 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004328:	490f      	ldr	r1, [pc, #60]	; (8004368 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800432a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800432c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <SystemInit+0x44>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004342:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800434a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800434e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004350:	4a07      	ldr	r2, [pc, #28]	; (8004370 <SystemInit+0x48>)
 8004352:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800435a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800435c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800435e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004362:	608b      	str	r3, [r1, #8]
#endif
}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000ed00 	.word	0xe000ed00
 800436c:	40023800 	.word	0x40023800
 8004370:	24003010 	.word	0x24003010

08004374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004374:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004376:	4e0e      	ldr	r6, [pc, #56]	; (80043b0 <HAL_InitTick+0x3c>)
{
 8004378:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800437a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437e:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <HAL_InitTick+0x40>)
 8004380:	7830      	ldrb	r0, [r6, #0]
 8004382:	fbb3 f3f0 	udiv	r3, r3, r0
 8004386:	6810      	ldr	r0, [r2, #0]
 8004388:	fbb0 f0f3 	udiv	r0, r0, r3
 800438c:	f000 f8b0 	bl	80044f0 <HAL_SYSTICK_Config>
 8004390:	4604      	mov	r4, r0
 8004392:	b950      	cbnz	r0, 80043aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004394:	2d0f      	cmp	r5, #15
 8004396:	d808      	bhi.n	80043aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004398:	4602      	mov	r2, r0
 800439a:	4629      	mov	r1, r5
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	f000 f852 	bl	8004448 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a4:	4620      	mov	r0, r4
 80043a6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e7fc      	b.n	80043a8 <HAL_InitTick+0x34>
 80043ae:	bf00      	nop
 80043b0:	200000a4 	.word	0x200000a4
 80043b4:	200000a0 	.word	0x200000a0

080043b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ba:	2003      	movs	r0, #3
{
 80043bc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c6:	f000 f82d 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ca:	200f      	movs	r0, #15
 80043cc:	f7ff ffd2 	bl	8004374 <HAL_InitTick>
  HAL_MspInit();
 80043d0:	f007 fb8e 	bl	800baf0 <HAL_MspInit>
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	bd08      	pop	{r3, pc}
 80043d8:	40023c00 	.word	0x40023c00

080043dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <HAL_IncTick+0x10>)
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HAL_IncTick+0x14>)
 80043e0:	6811      	ldr	r1, [r2, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	440b      	add	r3, r1
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000ff0 	.word	0x20000ff0
 80043f0:	200000a4 	.word	0x200000a4

080043f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80043f4:	4b01      	ldr	r3, [pc, #4]	; (80043fc <HAL_GetTick+0x8>)
 80043f6:	6818      	ldr	r0, [r3, #0]
}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000ff0 	.word	0x20000ff0

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff fff6 	bl	80043f4 <HAL_GetTick>
 8004408:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800440c:	bf1e      	ittt	ne
 800440e:	4b04      	ldrne	r3, [pc, #16]	; (8004420 <HAL_Delay+0x20>)
 8004410:	781b      	ldrbne	r3, [r3, #0]
 8004412:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004414:	f7ff ffee 	bl	80043f4 <HAL_GetTick>
 8004418:	1b43      	subs	r3, r0, r5
 800441a:	42a3      	cmp	r3, r4
 800441c:	d3fa      	bcc.n	8004414 <HAL_Delay+0x14>
  {
  }
}
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	200000a4 	.word	0x200000a4

08004424 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004426:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004428:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800442a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	0412      	lsls	r2, r2, #16
 8004434:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004440:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004442:	4770      	bx	lr
 8004444:	e000ed00 	.word	0xe000ed00

08004448 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444a:	b530      	push	{r4, r5, lr}
 800444c:	68dc      	ldr	r4, [r3, #12]
 800444e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004452:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004456:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004458:	2d04      	cmp	r5, #4
 800445a:	bf28      	it	cs
 800445c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004464:	bf8c      	ite	hi
 8004466:	3c03      	subhi	r4, #3
 8004468:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800446a:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800446e:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004474:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004478:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	fa01 f104 	lsl.w	r1, r1, r4
 8004480:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004488:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800448a:	db06      	blt.n	800449a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004490:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004494:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004498:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	f000 000f 	and.w	r0, r0, #15
 800449e:	4a02      	ldr	r2, [pc, #8]	; (80044a8 <HAL_NVIC_SetPriority+0x60>)
 80044a0:	5413      	strb	r3, [r2, r0]
 80044a2:	e7f9      	b.n	8004498 <HAL_NVIC_SetPriority+0x50>
 80044a4:	e000ed00 	.word	0xe000ed00
 80044a8:	e000ed14 	.word	0xe000ed14

080044ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044ac:	2800      	cmp	r0, #0
 80044ae:	db08      	blt.n	80044c2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b0:	0942      	lsrs	r2, r0, #5
 80044b2:	2301      	movs	r3, #1
 80044b4:	f000 001f 	and.w	r0, r0, #31
 80044b8:	fa03 f000 	lsl.w	r0, r3, r0
 80044bc:	4b01      	ldr	r3, [pc, #4]	; (80044c4 <HAL_NVIC_EnableIRQ+0x18>)
 80044be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044c2:	4770      	bx	lr
 80044c4:	e000e100 	.word	0xe000e100

080044c8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044c8:	2800      	cmp	r0, #0
 80044ca:	db0d      	blt.n	80044e8 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044cc:	0943      	lsrs	r3, r0, #5
 80044ce:	2201      	movs	r2, #1
 80044d0:	f000 001f 	and.w	r0, r0, #31
 80044d4:	3320      	adds	r3, #32
 80044d6:	fa02 f000 	lsl.w	r0, r2, r0
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_NVIC_DisableIRQ+0x24>)
 80044dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80044e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044e4:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f0:	3801      	subs	r0, #1
 80044f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80044f6:	d20b      	bcs.n	8004510 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	4a05      	ldr	r2, [pc, #20]	; (8004514 <HAL_SYSTICK_Config+0x24>)
 80044fe:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004500:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004502:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004508:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800450a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800450c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800450e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004510:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004518:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800451c:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_MPU_Disable+0x18>)
 800451e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004524:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_MPU_Enable+0x1c>)
 8004536:	f040 0001 	orr.w	r0, r0, #1
 800453a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004540:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004546:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800454a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004554:	7843      	ldrb	r3, [r0, #1]
 8004556:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <HAL_MPU_ConfigRegion+0x54>)
{
 8004558:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800455a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800455e:	7801      	ldrb	r1, [r0, #0]
 8004560:	b1e9      	cbz	r1, 800459e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004562:	6843      	ldr	r3, [r0, #4]
 8004564:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004568:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800456a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800456c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800456e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004572:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004574:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004576:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800457a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800457c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004580:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004582:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004586:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800458c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800458e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004592:	7a01      	ldrb	r1, [r0, #8]
 8004594:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004598:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800459c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800459e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80045a2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80045a6:	e7f9      	b.n	800459c <HAL_MPU_ConfigRegion+0x48>
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045ac:	6803      	ldr	r3, [r0, #0]
{
 80045ae:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045b0:	2018      	movs	r0, #24
 80045b2:	b2d9      	uxtb	r1, r3
 80045b4:	3910      	subs	r1, #16
 80045b6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80045ba:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045bc:	4c05      	ldr	r4, [pc, #20]	; (80045d4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80045be:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045c0:	5c20      	ldrb	r0, [r4, r0]
 80045c2:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045c4:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80045c8:	f020 0003 	bic.w	r0, r0, #3
 80045cc:	bf88      	it	hi
 80045ce:	3004      	addhi	r0, #4
 80045d0:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	08017e64 	.word	0x08017e64

080045d8 <HAL_DMA_Init>:
{
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff ff0a 	bl	80043f4 <HAL_GetTick>
 80045e0:	4605      	mov	r5, r0
  if(hdma == NULL)
 80045e2:	2c00      	cmp	r4, #0
 80045e4:	d073      	beq.n	80046ce <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 80045e6:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 80045e8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80045ee:	2300      	movs	r3, #0
 80045f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045fc:	6821      	ldr	r1, [r4, #0]
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	07d8      	lsls	r0, r3, #31
 8004602:	d42f      	bmi.n	8004664 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8004604:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004606:	4d33      	ldr	r5, [pc, #204]	; (80046d4 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004608:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800460a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004610:	4313      	orrs	r3, r2
 8004612:	68e2      	ldr	r2, [r4, #12]
 8004614:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	6922      	ldr	r2, [r4, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	6962      	ldr	r2, [r4, #20]
 800461c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800461e:	69e2      	ldr	r2, [r4, #28]
 8004620:	4303      	orrs	r3, r0
 8004622:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004624:	6a22      	ldr	r2, [r4, #32]
 8004626:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004628:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800462a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800462c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004630:	bf02      	ittt	eq
 8004632:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004636:	4335      	orreq	r5, r6
 8004638:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800463c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800463e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004640:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004644:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004648:	d133      	bne.n	80046b2 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800464a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800464c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800464e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004650:	b37d      	cbz	r5, 80046b2 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004652:	b990      	cbnz	r0, 800467a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8004654:	2a01      	cmp	r2, #1
 8004656:	d021      	beq.n	800469c <HAL_DMA_Init+0xc4>
 8004658:	f032 0202 	bics.w	r2, r2, #2
 800465c:	d129      	bne.n	80046b2 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465e:	01ea      	lsls	r2, r5, #7
 8004660:	d527      	bpl.n	80046b2 <HAL_DMA_Init+0xda>
 8004662:	e01e      	b.n	80046a2 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004664:	f7ff fec6 	bl	80043f4 <HAL_GetTick>
 8004668:	1b40      	subs	r0, r0, r5
 800466a:	2805      	cmp	r0, #5
 800466c:	d9c6      	bls.n	80045fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800466e:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004670:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004672:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004674:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004678:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800467a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800467e:	d114      	bne.n	80046aa <HAL_DMA_Init+0xd2>
    switch (tmp)
 8004680:	2a03      	cmp	r2, #3
 8004682:	d816      	bhi.n	80046b2 <HAL_DMA_Init+0xda>
 8004684:	a001      	add	r0, pc, #4	; (adr r0, 800468c <HAL_DMA_Init+0xb4>)
 8004686:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046a3 	.word	0x080046a3
 8004690:	0800465f 	.word	0x0800465f
 8004694:	080046a3 	.word	0x080046a3
 8004698:	0800469d 	.word	0x0800469d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800469c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80046a0:	d107      	bne.n	80046b2 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80046a4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80046a8:	e7e4      	b.n	8004674 <HAL_DMA_Init+0x9c>
    switch (tmp)
 80046aa:	2a02      	cmp	r2, #2
 80046ac:	d9f9      	bls.n	80046a2 <HAL_DMA_Init+0xca>
 80046ae:	2a03      	cmp	r2, #3
 80046b0:	d0d5      	beq.n	800465e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80046b2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff ff79 	bl	80045ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80046bc:	233f      	movs	r3, #63	; 0x3f
 80046be:	4093      	lsls	r3, r2
 80046c0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80046c4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80046c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80046cc:	e7d4      	b.n	8004678 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
 80046d0:	e7d2      	b.n	8004678 <HAL_DMA_Init+0xa0>
 80046d2:	bf00      	nop
 80046d4:	f010803f 	.word	0xf010803f

080046d8 <HAL_DMA_DeInit>:
{
 80046d8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80046da:	4605      	mov	r5, r0
 80046dc:	b320      	cbz	r0, 8004728 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046de:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	b2dc      	uxtb	r4, r3
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80046e8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80046ea:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80046f4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80046f6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80046f8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80046fa:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80046fc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80046fe:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004700:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004702:	f7ff ff53 	bl	80045ac <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004706:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8004708:	233f      	movs	r3, #63	; 0x3f
 800470a:	4093      	lsls	r3, r2
 800470c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004710:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8004714:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8004718:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800471c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8004720:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8004724:	4620      	mov	r0, r4
 8004726:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004728:	2401      	movs	r4, #1
 800472a:	e7fb      	b.n	8004724 <HAL_DMA_DeInit+0x4c>

0800472c <HAL_DMA_Start_IT>:
{
 800472c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800472e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004732:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004734:	2c01      	cmp	r4, #1
 8004736:	d034      	beq.n	80047a2 <HAL_DMA_Start_IT+0x76>
 8004738:	2401      	movs	r4, #1
 800473a:	2500      	movs	r5, #0
 800473c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004740:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004744:	2c01      	cmp	r4, #1
 8004746:	f04f 0402 	mov.w	r4, #2
 800474a:	d128      	bne.n	800479e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800474c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004750:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004752:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004754:	6825      	ldr	r5, [r4, #0]
 8004756:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800475a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800475c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800475e:	6883      	ldr	r3, [r0, #8]
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d119      	bne.n	8004798 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8004764:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004766:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800476a:	233f      	movs	r3, #63	; 0x3f
 800476c:	4093      	lsls	r3, r2
 800476e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f043 0316 	orr.w	r3, r3, #22
 8004776:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004778:	6963      	ldr	r3, [r4, #20]
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004780:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004782:	b11b      	cbz	r3, 800478c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f043 0308 	orr.w	r3, r3, #8
 800478a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800478c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6023      	str	r3, [r4, #0]
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8004798:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800479a:	60e2      	str	r2, [r4, #12]
 800479c:	e7e4      	b.n	8004768 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800479e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80047a2:	2002      	movs	r0, #2
 80047a4:	e7f7      	b.n	8004796 <HAL_DMA_Start_IT+0x6a>

080047a6 <HAL_DMA_Abort>:
{
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047aa:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff fe22 	bl	80043f4 <HAL_GetTick>
 80047b0:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d006      	beq.n	80047c8 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ba:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 80047bc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047be:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80047c0:	2300      	movs	r3, #0
 80047c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f022 0216 	bic.w	r2, r2, #22
 80047d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047dc:	b90a      	cbnz	r2, 80047e2 <HAL_DMA_Abort+0x3c>
 80047de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80047e0:	b11a      	cbz	r2, 80047ea <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f013 0301 	ands.w	r3, r3, #1
 80047fa:	d10a      	bne.n	8004812 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80047fe:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004800:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004802:	408a      	lsls	r2, r1
 8004804:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004806:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004808:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800480c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004810:	e7d9      	b.n	80047c6 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004812:	f7ff fdef 	bl	80043f4 <HAL_GetTick>
 8004816:	1b40      	subs	r0, r0, r5
 8004818:	2805      	cmp	r0, #5
 800481a:	d9ea      	bls.n	80047f2 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800481c:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800481e:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004820:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004822:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004824:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004828:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800482c:	e7cb      	b.n	80047c6 <HAL_DMA_Abort+0x20>
	...

08004830 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8004830:	2300      	movs	r3, #0
{
 8004832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8004834:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <HAL_DMA_IRQHandler+0x178>)
{
 800483a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800483e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004840:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004842:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004844:	409a      	lsls	r2, r3
 8004846:	4232      	tst	r2, r6
 8004848:	d00c      	beq.n	8004864 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800484a:	6801      	ldr	r1, [r0, #0]
 800484c:	6808      	ldr	r0, [r1, #0]
 800484e:	0740      	lsls	r0, r0, #29
 8004850:	d508      	bpl.n	8004864 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004852:	6808      	ldr	r0, [r1, #0]
 8004854:	f020 0004 	bic.w	r0, r0, #4
 8004858:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800485a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800485c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	4232      	tst	r2, r6
 800486a:	d008      	beq.n	800487e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	6949      	ldr	r1, [r1, #20]
 8004870:	0609      	lsls	r1, r1, #24
 8004872:	d504      	bpl.n	800487e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004874:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004876:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004878:	f042 0202 	orr.w	r2, r2, #2
 800487c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800487e:	2204      	movs	r2, #4
 8004880:	409a      	lsls	r2, r3
 8004882:	4232      	tst	r2, r6
 8004884:	d008      	beq.n	8004898 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004886:	6821      	ldr	r1, [r4, #0]
 8004888:	6809      	ldr	r1, [r1, #0]
 800488a:	0788      	lsls	r0, r1, #30
 800488c:	d504      	bpl.n	8004898 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800488e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004890:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004892:	f042 0204 	orr.w	r2, r2, #4
 8004896:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004898:	2210      	movs	r2, #16
 800489a:	409a      	lsls	r2, r3
 800489c:	4232      	tst	r2, r6
 800489e:	d010      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	0709      	lsls	r1, r1, #28
 80048a6:	d50c      	bpl.n	80048c2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048a8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	0350      	lsls	r0, r2, #13
 80048ae:	d537      	bpl.n	8004920 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	0319      	lsls	r1, r3, #12
 80048b4:	d401      	bmi.n	80048ba <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80048b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048b8:	e000      	b.n	80048bc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	b10b      	cbz	r3, 80048c2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80048be:	4620      	mov	r0, r4
 80048c0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048c4:	2220      	movs	r2, #32
 80048c6:	408a      	lsls	r2, r1
 80048c8:	4232      	tst	r2, r6
 80048ca:	d03a      	beq.n	8004942 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	06c6      	lsls	r6, r0, #27
 80048d2:	d536      	bpl.n	8004942 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048d4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048d6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80048da:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048dc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048de:	d127      	bne.n	8004930 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048e0:	f022 0216 	bic.w	r2, r2, #22
 80048e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ec:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048f0:	b90a      	cbnz	r2, 80048f6 <HAL_DMA_IRQHandler+0xc6>
 80048f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80048f4:	b11a      	cbz	r2, 80048fe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	f022 0208 	bic.w	r2, r2, #8
 80048fc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048fe:	233f      	movs	r3, #63	; 0x3f
 8004900:	408b      	lsls	r3, r1
 8004902:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004904:	2301      	movs	r3, #1
 8004906:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800490a:	2300      	movs	r3, #0
 800490c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8004910:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8004912:	2b00      	cmp	r3, #0
 8004914:	d045      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8004916:	4620      	mov	r0, r4
}
 8004918:	b003      	add	sp, #12
 800491a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800491e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	05d2      	lsls	r2, r2, #23
 8004924:	d4c7      	bmi.n	80048b6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	f022 0208 	bic.w	r2, r2, #8
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e7c2      	b.n	80048b6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004930:	0350      	lsls	r0, r2, #13
 8004932:	d527      	bpl.n	8004984 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	0319      	lsls	r1, r3, #12
 8004938:	d431      	bmi.n	800499e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800493a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800493c:	b10b      	cbz	r3, 8004942 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800493e:	4620      	mov	r0, r4
 8004940:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004942:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004944:	b36b      	cbz	r3, 80049a2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004946:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004948:	07da      	lsls	r2, r3, #31
 800494a:	d519      	bpl.n	8004980 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800494c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8004950:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8004952:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8004956:	2305      	movs	r3, #5
 8004958:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800495c:	6813      	ldr	r3, [r2, #0]
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	3301      	adds	r3, #1
 8004968:	42bb      	cmp	r3, r7
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	d802      	bhi.n	8004974 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	07db      	lsls	r3, r3, #31
 8004972:	d4f7      	bmi.n	8004964 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8004974:	2301      	movs	r3, #1
 8004976:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800497a:	2300      	movs	r3, #0
 800497c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004980:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004982:	e7c6      	b.n	8004912 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800498a:	d108      	bne.n	800499e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	f021 0110 	bic.w	r1, r1, #16
 8004992:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004994:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004996:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800499a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800499e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049a0:	e7cc      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
}
 80049a2:	b003      	add	sp, #12
 80049a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200000a0 	.word	0x200000a0

080049ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80049ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80049ae:	6804      	ldr	r4, [r0, #0]
 80049b0:	9d04      	ldr	r5, [sp, #16]
 80049b2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80049b4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80049b8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80049bc:	4333      	orrs	r3, r6
 80049be:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80049c0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80049c2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80049c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049c8:	d130      	bne.n	8004a2c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80049ca:	6886      	ldr	r6, [r0, #8]
 80049cc:	b11e      	cbz	r6, 80049d6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80049ce:	2e01      	cmp	r6, #1
 80049d0:	d103      	bne.n	80049da <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80049d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80049d6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049da:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80049dc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80049e0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80049e4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80049e6:	d107      	bne.n	80049f8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80049e8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80049ea:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80049ec:	02db      	lsls	r3, r3, #11
 80049ee:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80049f2:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 80049f6:	e7ee      	b.n	80049d6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80049f8:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80049fa:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80049fe:	d10a      	bne.n	8004a16 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8004a00:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8004a02:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a04:	0289      	lsls	r1, r1, #10
      tmp1 = (tmp1 >> 31U);
 8004a06:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004a08:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8004a0c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8004a10:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8004a14:	e7df      	b.n	80049d6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8004a16:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8004a18:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a1a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8004a1c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004a1e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8004a22:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8004a26:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8004a2a:	e7d4      	b.n	80049d6 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004a2c:	60e1      	str	r1, [r4, #12]
}
 8004a2e:	e7d3      	b.n	80049d8 <DMA2D_SetConfig+0x2c>

08004a30 <HAL_DMA2D_Init>:
{
 8004a30:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8004a32:	4604      	mov	r4, r0
 8004a34:	b330      	cbz	r0, 8004a84 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a36:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004a3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a3e:	b91b      	cbnz	r3, 8004a48 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8004a40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004a44:	f005 f958 	bl	8009cf8 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a48:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a4a:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a4c:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a4e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a5a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a5c:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a5e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a68:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004a6a:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a7a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004a7c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004a7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a84:	2001      	movs	r0, #1
 8004a86:	e7fc      	b.n	8004a82 <HAL_DMA2D_Init+0x52>

08004a88 <HAL_DMA2D_Start>:
{
 8004a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004a8a:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8004a8e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8004a90:	2d01      	cmp	r5, #1
 8004a92:	f04f 0502 	mov.w	r5, #2
 8004a96:	d00f      	beq.n	8004ab8 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a98:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004a9c:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a9e:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8004aa0:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004aa4:	9500      	str	r5, [sp, #0]
 8004aa6:	f7ff ff81 	bl	80049ac <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004aaa:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8004aac:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	4333      	orrs	r3, r6
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8004ab8:	4628      	mov	r0, r5
 8004aba:	e7fb      	b.n	8004ab4 <HAL_DMA2D_Start+0x2c>

08004abc <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8004abc:	2300      	movs	r3, #0
{
 8004abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004ac0:	9301      	str	r3, [sp, #4]
{
 8004ac2:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ac4:	6803      	ldr	r3, [r0, #0]
{
 8004ac6:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	07db      	lsls	r3, r3, #31
 8004acc:	d417      	bmi.n	8004afe <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ad4:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8004ad6:	069e      	lsls	r6, r3, #26
 8004ad8:	d506      	bpl.n	8004ae8 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8004ada:	f7ff fc8b 	bl	80043f4 <HAL_GetTick>
 8004ade:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	06d2      	lsls	r2, r2, #27
 8004ae6:	d543      	bpl.n	8004b70 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8004aec:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004aee:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004af0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8004af2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004af6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004afa:	b002      	add	sp, #8
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8004afe:	f7ff fc79 	bl	80043f4 <HAL_GetTick>
 8004b02:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	0792      	lsls	r2, r2, #30
 8004b0a:	d4e0      	bmi.n	8004ace <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004b10:	9a01      	ldr	r2, [sp, #4]
 8004b12:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004b16:	d017      	beq.n	8004b48 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b18:	9a01      	ldr	r2, [sp, #4]
 8004b1a:	0695      	lsls	r5, r2, #26
 8004b1c:	d503      	bpl.n	8004b26 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b20:	f042 0202 	orr.w	r2, r2, #2
 8004b24:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b26:	9a01      	ldr	r2, [sp, #4]
 8004b28:	07d0      	lsls	r0, r2, #31
 8004b2a:	d503      	bpl.n	8004b34 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b34:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b36:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b38:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004b3a:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8004b40:	2300      	movs	r3, #0
 8004b42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8004b46:	e7d8      	b.n	8004afa <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8004b48:	1c69      	adds	r1, r5, #1
 8004b4a:	d0dc      	beq.n	8004b06 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b4c:	f7ff fc52 	bl	80043f4 <HAL_GetTick>
 8004b50:	1b80      	subs	r0, r0, r6
 8004b52:	42a8      	cmp	r0, r5
 8004b54:	d801      	bhi.n	8004b5a <HAL_DMA2D_PollForTransfer+0x9e>
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	d1d4      	bne.n	8004b04 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b5c:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8004b64:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b66:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8004b6a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8004b6e:	e7c4      	b.n	8004afa <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004b74:	9a01      	ldr	r2, [sp, #4]
 8004b76:	f012 0f29 	tst.w	r2, #41	; 0x29
 8004b7a:	d016      	beq.n	8004baa <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b7c:	9a01      	ldr	r2, [sp, #4]
 8004b7e:	0716      	lsls	r6, r2, #28
 8004b80:	d503      	bpl.n	8004b8a <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b84:	f042 0204 	orr.w	r2, r2, #4
 8004b88:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b8a:	9a01      	ldr	r2, [sp, #4]
 8004b8c:	0695      	lsls	r5, r2, #26
 8004b8e:	d503      	bpl.n	8004b98 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004b92:	f042 0202 	orr.w	r2, r2, #2
 8004b96:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b98:	9a01      	ldr	r2, [sp, #4]
 8004b9a:	07d0      	lsls	r0, r2, #31
 8004b9c:	d503      	bpl.n	8004ba6 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004ba6:	2229      	movs	r2, #41	; 0x29
 8004ba8:	e7c5      	b.n	8004b36 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8004baa:	1c69      	adds	r1, r5, #1
 8004bac:	d099      	beq.n	8004ae2 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7ff fc21 	bl	80043f4 <HAL_GetTick>
 8004bb2:	1b80      	subs	r0, r0, r6
 8004bb4:	42a8      	cmp	r0, r5
 8004bb6:	d8d0      	bhi.n	8004b5a <HAL_DMA2D_PollForTransfer+0x9e>
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	d191      	bne.n	8004ae0 <HAL_DMA2D_PollForTransfer+0x24>
 8004bbc:	e7cd      	b.n	8004b5a <HAL_DMA2D_PollForTransfer+0x9e>

08004bbe <HAL_DMA2D_LineEventCallback>:
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bc2:	6803      	ldr	r3, [r0, #0]
{
 8004bc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bc6:	685e      	ldr	r6, [r3, #4]
{
 8004bc8:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004bca:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004bcc:	07f2      	lsls	r2, r6, #31
 8004bce:	d514      	bpl.n	8004bfa <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004bd0:	05e9      	lsls	r1, r5, #23
 8004bd2:	d512      	bpl.n	8004bfa <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bda:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004bdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004be4:	2201      	movs	r2, #1
 8004be6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004be8:	2304      	movs	r3, #4
 8004bea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004bf4:	6943      	ldr	r3, [r0, #20]
 8004bf6:	b103      	cbz	r3, 8004bfa <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004bf8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004bfa:	06b2      	lsls	r2, r6, #26
 8004bfc:	d516      	bpl.n	8004c2c <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004bfe:	04ab      	lsls	r3, r5, #18
 8004c00:	d514      	bpl.n	8004c2c <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004c24:	6963      	ldr	r3, [r4, #20]
 8004c26:	b10b      	cbz	r3, 8004c2c <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004c2c:	0730      	lsls	r0, r6, #28
 8004c2e:	d516      	bpl.n	8004c5e <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004c30:	0529      	lsls	r1, r5, #20
 8004c32:	d514      	bpl.n	8004c5e <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004c3e:	2208      	movs	r2, #8
 8004c40:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c44:	f043 0304 	orr.w	r3, r3, #4
 8004c48:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c50:	2300      	movs	r3, #0
 8004c52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004c56:	6963      	ldr	r3, [r4, #20]
 8004c58:	b10b      	cbz	r3, 8004c5e <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004c5e:	0772      	lsls	r2, r6, #29
 8004c60:	d50b      	bpl.n	8004c7a <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004c62:	056b      	lsls	r3, r5, #21
 8004c64:	d509      	bpl.n	8004c7a <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c66:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c68:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c72:	2204      	movs	r2, #4
 8004c74:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c76:	f7ff ffa2 	bl	8004bbe <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c7a:	07b0      	lsls	r0, r6, #30
 8004c7c:	d514      	bpl.n	8004ca8 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c7e:	05a9      	lsls	r1, r5, #22
 8004c80:	d512      	bpl.n	8004ca8 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c92:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	b10b      	cbz	r3, 8004ca8 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004ca8:	06f2      	lsls	r2, r6, #27
 8004caa:	d513      	bpl.n	8004cd4 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004cac:	04eb      	lsls	r3, r5, #19
 8004cae:	d511      	bpl.n	8004cd4 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004cb0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004cb2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004cc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cc2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004cd0:	f7ff ff76 	bl	8004bc0 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cd8 <HAL_DMA2D_ConfigLayer>:
{
 8004cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004cda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	f04f 0302 	mov.w	r3, #2
 8004ce4:	d02b      	beq.n	8004d3e <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ce6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004cea:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004cec:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004cf0:	4f1c      	ldr	r7, [pc, #112]	; (8004d64 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004cf2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004cf6:	010e      	lsls	r6, r1, #4
 8004cf8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004cfa:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004cfe:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d02:	3c09      	subs	r4, #9
 8004d04:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d06:	bf96      	itet	ls
 8004d08:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d0c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d10:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d12:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d14:	b9a9      	cbnz	r1, 8004d42 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d16:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d18:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d1a:	ea01 0107 	and.w	r1, r1, r7
 8004d1e:	ea42 0201 	orr.w	r2, r2, r1
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004d24:	6982      	ldr	r2, [r0, #24]
 8004d26:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d28:	d803      	bhi.n	8004d32 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004d2a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004d2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004d3e:	4618      	mov	r0, r3
}
 8004d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d42:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d44:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004d46:	ea01 0107 	and.w	r1, r1, r7
 8004d4a:	ea42 0201 	orr.w	r2, r2, r1
 8004d4e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004d50:	eb00 0206 	add.w	r2, r0, r6
 8004d54:	6992      	ldr	r2, [r2, #24]
 8004d56:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d58:	d8eb      	bhi.n	8004d32 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004d5a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004d5e:	621d      	str	r5, [r3, #32]
 8004d60:	e7e7      	b.n	8004d32 <HAL_DMA2D_ConfigLayer+0x5a>
 8004d62:	bf00      	nop
 8004d64:	00fcfff0 	.word	0x00fcfff0

08004d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d6c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d6e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004f2c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d72:	4a6c      	ldr	r2, [pc, #432]	; (8004f24 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004d74:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d76:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004d78:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d7a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004d7e:	43ac      	bics	r4, r5
 8004d80:	f040 80b6 	bne.w	8004ef0 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d84:	684d      	ldr	r5, [r1, #4]
 8004d86:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d8a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d8c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d90:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d94:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d96:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d98:	2f01      	cmp	r7, #1
 8004d9a:	d834      	bhi.n	8004e06 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004d9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d9e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004da2:	68cf      	ldr	r7, [r1, #12]
 8004da4:	fa07 f708 	lsl.w	r7, r7, r8
 8004da8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004dac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004dae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db0:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004db8:	409f      	lsls	r7, r3
 8004dba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004dbe:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004dc0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dc4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004dc8:	688f      	ldr	r7, [r1, #8]
 8004dca:	fa07 f708 	lsl.w	r7, r7, r8
 8004dce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004dd2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd4:	d119      	bne.n	8004e0a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004dd6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dda:	f003 0b07 	and.w	fp, r3, #7
 8004dde:	f04f 0e0f 	mov.w	lr, #15
 8004de2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004de6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004dea:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dee:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004df2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004df6:	690f      	ldr	r7, [r1, #16]
 8004df8:	fa07 f70b 	lsl.w	r7, r7, fp
 8004dfc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004e00:	f8ca 7020 	str.w	r7, [sl, #32]
 8004e04:	e001      	b.n	8004e0a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e06:	2c03      	cmp	r4, #3
 8004e08:	d1da      	bne.n	8004dc0 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004e0a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e0c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e10:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e14:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e18:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004e1c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e1e:	d067      	beq.n	8004ef0 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e20:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004e24:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e28:	f003 0703 	and.w	r7, r3, #3
 8004e2c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004e34:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e38:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004e3e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004e42:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004e46:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004e4a:	9401      	str	r4, [sp, #4]
 8004e4c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e4e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004e52:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e56:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e5a:	4c33      	ldr	r4, [pc, #204]	; (8004f28 <HAL_GPIO_Init+0x1c0>)
 8004e5c:	42a0      	cmp	r0, r4
 8004e5e:	d04e      	beq.n	8004efe <HAL_GPIO_Init+0x196>
 8004e60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d04c      	beq.n	8004f02 <HAL_GPIO_Init+0x19a>
 8004e68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d04a      	beq.n	8004f06 <HAL_GPIO_Init+0x19e>
 8004e70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d048      	beq.n	8004f0a <HAL_GPIO_Init+0x1a2>
 8004e78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d046      	beq.n	8004f0e <HAL_GPIO_Init+0x1a6>
 8004e80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d044      	beq.n	8004f12 <HAL_GPIO_Init+0x1aa>
 8004e88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d042      	beq.n	8004f16 <HAL_GPIO_Init+0x1ae>
 8004e90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d040      	beq.n	8004f1a <HAL_GPIO_Init+0x1b2>
 8004e98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d03e      	beq.n	8004f1e <HAL_GPIO_Init+0x1b6>
 8004ea0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ea4:	42a0      	cmp	r0, r4
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2409      	moveq	r4, #9
 8004eaa:	240a      	movne	r4, #10
 8004eac:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004eae:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004eb0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004eb4:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004eba:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004ebc:	bf54      	ite	pl
 8004ebe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004ec0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ec4:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004ec6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004ec8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004eca:	bf54      	ite	pl
 8004ecc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004ece:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ed2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004ed4:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004ed6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004ed8:	bf54      	ite	pl
 8004eda:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004edc:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ee0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004ee2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004ee4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004ee6:	bf54      	ite	pl
 8004ee8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004eea:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004eee:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	f47f af3e 	bne.w	8004d74 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004ef8:	b003      	add	sp, #12
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004efe:	2400      	movs	r4, #0
 8004f00:	e7d4      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f02:	2401      	movs	r4, #1
 8004f04:	e7d2      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f06:	2402      	movs	r4, #2
 8004f08:	e7d0      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f0a:	2403      	movs	r4, #3
 8004f0c:	e7ce      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f0e:	2404      	movs	r4, #4
 8004f10:	e7cc      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f12:	2405      	movs	r4, #5
 8004f14:	e7ca      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f16:	2406      	movs	r4, #6
 8004f18:	e7c8      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f1a:	2407      	movs	r4, #7
 8004f1c:	e7c6      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f1e:	2408      	movs	r4, #8
 8004f20:	e7c4      	b.n	8004eac <HAL_GPIO_Init+0x144>
 8004f22:	bf00      	nop
 8004f24:	40013c00 	.word	0x40013c00
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f34:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f36:	4c4a      	ldr	r4, [pc, #296]	; (8005060 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f38:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8005068 <HAL_GPIO_DeInit+0x138>
 8004f3c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800506c <HAL_GPIO_DeInit+0x13c>
 8004f40:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005070 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8004f44:	2301      	movs	r3, #1
 8004f46:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004f4a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004f4e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004f52:	d16e      	bne.n	8005032 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f54:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f58:	f002 0c03 	and.w	ip, r2, #3
 8004f5c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_GPIO_DeInit+0x134>)
 8004f60:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f6e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f72:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f76:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f7a:	d05f      	beq.n	800503c <HAL_GPIO_DeInit+0x10c>
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f80:	4298      	cmp	r0, r3
 8004f82:	d05d      	beq.n	8005040 <HAL_GPIO_DeInit+0x110>
 8004f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	d05b      	beq.n	8005044 <HAL_GPIO_DeInit+0x114>
 8004f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f90:	4298      	cmp	r0, r3
 8004f92:	d059      	beq.n	8005048 <HAL_GPIO_DeInit+0x118>
 8004f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f98:	4298      	cmp	r0, r3
 8004f9a:	d057      	beq.n	800504c <HAL_GPIO_DeInit+0x11c>
 8004f9c:	4548      	cmp	r0, r9
 8004f9e:	d057      	beq.n	8005050 <HAL_GPIO_DeInit+0x120>
 8004fa0:	4550      	cmp	r0, sl
 8004fa2:	d057      	beq.n	8005054 <HAL_GPIO_DeInit+0x124>
 8004fa4:	4558      	cmp	r0, fp
 8004fa6:	d057      	beq.n	8005058 <HAL_GPIO_DeInit+0x128>
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fac:	4298      	cmp	r0, r3
 8004fae:	d055      	beq.n	800505c <HAL_GPIO_DeInit+0x12c>
 8004fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2309      	moveq	r3, #9
 8004fba:	230a      	movne	r3, #10
 8004fbc:	fa03 f30c 	lsl.w	r3, r3, ip
 8004fc0:	4543      	cmp	r3, r8
 8004fc2:	d113      	bne.n	8004fec <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	ea23 0307 	bic.w	r3, r3, r7
 8004fca:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	ea23 0307 	bic.w	r3, r3, r7
 8004fd2:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004fd4:	68e3      	ldr	r3, [r4, #12]
 8004fd6:	ea23 0307 	bic.w	r3, r3, r7
 8004fda:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	ea23 0307 	bic.w	r3, r3, r7
 8004fe2:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004fe4:	68ab      	ldr	r3, [r5, #8]
 8004fe6:	ea23 0306 	bic.w	r3, r3, r6
 8004fea:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fec:	2603      	movs	r6, #3
 8004fee:	0053      	lsls	r3, r2, #1
 8004ff0:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ff2:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ff6:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ffa:	270f      	movs	r7, #15
 8004ffc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005000:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005004:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005008:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800500a:	fa22 f506 	lsr.w	r5, r2, r6
 800500e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005012:	6a2e      	ldr	r6, [r5, #32]
 8005014:	ea26 0707 	bic.w	r7, r6, r7
 8005018:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800501a:	68c5      	ldr	r5, [r0, #12]
 800501c:	ea25 0503 	bic.w	r5, r5, r3
 8005020:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005022:	6845      	ldr	r5, [r0, #4]
 8005024:	ea25 050e 	bic.w	r5, r5, lr
 8005028:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800502a:	6885      	ldr	r5, [r0, #8]
 800502c:	ea25 0303 	bic.w	r3, r5, r3
 8005030:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005032:	3201      	adds	r2, #1
 8005034:	2a10      	cmp	r2, #16
 8005036:	d185      	bne.n	8004f44 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800503c:	2300      	movs	r3, #0
 800503e:	e7bd      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005040:	2301      	movs	r3, #1
 8005042:	e7bb      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005044:	2302      	movs	r3, #2
 8005046:	e7b9      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005048:	2303      	movs	r3, #3
 800504a:	e7b7      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 800504c:	2304      	movs	r3, #4
 800504e:	e7b5      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005050:	2305      	movs	r3, #5
 8005052:	e7b3      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005054:	2306      	movs	r3, #6
 8005056:	e7b1      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005058:	2307      	movs	r3, #7
 800505a:	e7af      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 800505c:	2308      	movs	r3, #8
 800505e:	e7ad      	b.n	8004fbc <HAL_GPIO_DeInit+0x8c>
 8005060:	40013c00 	.word	0x40013c00
 8005064:	40020000 	.word	0x40020000
 8005068:	40021400 	.word	0x40021400
 800506c:	40021800 	.word	0x40021800
 8005070:	40021c00 	.word	0x40021c00

08005074 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005074:	6903      	ldr	r3, [r0, #16]
 8005076:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005078:	bf14      	ite	ne
 800507a:	2001      	movne	r0, #1
 800507c:	2000      	moveq	r0, #0
 800507e:	4770      	bx	lr

08005080 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005080:	b10a      	cbz	r2, 8005086 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005082:	6181      	str	r1, [r0, #24]
  }
}
 8005084:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005086:	0409      	lsls	r1, r1, #16
 8005088:	e7fb      	b.n	8005082 <HAL_GPIO_WritePin+0x2>
	...

0800508c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800508e:	6951      	ldr	r1, [r2, #20]
 8005090:	4201      	tst	r1, r0
{
 8005092:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005094:	d002      	beq.n	800509c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005096:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005098:	f006 f838 	bl	800b10c <HAL_GPIO_EXTI_Callback>
  }
}
 800509c:	bd08      	pop	{r3, pc}
 800509e:	bf00      	nop
 80050a0:	40013c00 	.word	0x40013c00

080050a4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050a4:	6803      	ldr	r3, [r0, #0]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	0791      	lsls	r1, r2, #30
 80050aa:	d501      	bpl.n	80050b0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ac:	2200      	movs	r2, #0
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	07d2      	lsls	r2, r2, #31
 80050b4:	d403      	bmi.n	80050be <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050b6:	699a      	ldr	r2, [r3, #24]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	619a      	str	r2, [r3, #24]
  }
}
 80050be:	4770      	bx	lr

080050c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050c0:	b530      	push	{r4, r5, lr}
 80050c2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050c8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ca:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80050cc:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050d4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80050d6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80050de:	ea20 0002 	bic.w	r0, r0, r2
 80050e2:	4303      	orrs	r3, r0
 80050e4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050e6:	bd30      	pop	{r4, r5, pc}
 80050e8:	03ff63ff 	.word	0x03ff63ff

080050ec <I2C_IsErrorOccurred>:
{
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80050f0:	6803      	ldr	r3, [r0, #0]
{
 80050f2:	4605      	mov	r5, r0
 80050f4:	4688      	mov	r8, r1
 80050f6:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80050f8:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050fa:	f014 0410 	ands.w	r4, r4, #16
 80050fe:	d079      	beq.n	80051f4 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005104:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	0694      	lsls	r4, r2, #26
 8005110:	d436      	bmi.n	8005180 <I2C_IsErrorOccurred+0x94>
 8005112:	b10e      	cbz	r6, 8005118 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005114:	2404      	movs	r4, #4
 8005116:	e039      	b.n	800518c <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005118:	f1b8 3fff 	cmp.w	r8, #4294967295
 800511c:	d0f6      	beq.n	800510c <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7ff f969 	bl	80043f4 <HAL_GetTick>
 8005122:	1bc0      	subs	r0, r0, r7
 8005124:	4540      	cmp	r0, r8
 8005126:	d802      	bhi.n	800512e <I2C_IsErrorOccurred+0x42>
 8005128:	f1b8 0f00 	cmp.w	r8, #0
 800512c:	d1ed      	bne.n	800510a <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800512e:	682b      	ldr	r3, [r5, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005132:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005136:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005138:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800513a:	0400      	lsls	r0, r0, #16
 800513c:	d50a      	bpl.n	8005154 <I2C_IsErrorOccurred+0x68>
 800513e:	0449      	lsls	r1, r1, #17
 8005140:	d408      	bmi.n	8005154 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8005142:	2a20      	cmp	r2, #32
 8005144:	d006      	beq.n	8005154 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800514c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800514e:	f7ff f951 	bl	80043f4 <HAL_GetTick>
 8005152:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	699c      	ldr	r4, [r3, #24]
 8005158:	f014 0420 	ands.w	r4, r4, #32
 800515c:	d1d5      	bne.n	800510a <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800515e:	f7ff f949 	bl	80043f4 <HAL_GetTick>
 8005162:	1bc0      	subs	r0, r0, r7
 8005164:	2819      	cmp	r0, #25
 8005166:	d9f5      	bls.n	8005154 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 800516a:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 800516c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005170:	f043 0320 	orr.w	r3, r3, #32
 8005174:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005176:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800517e:	e7e9      	b.n	8005154 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8005180:	2e00      	cmp	r6, #0
 8005182:	d1c7      	bne.n	8005114 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005184:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005186:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8005188:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005190:	05d0      	lsls	r0, r2, #23
 8005192:	d505      	bpl.n	80051a0 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005194:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005198:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800519c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800519e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051a0:	0551      	lsls	r1, r2, #21
 80051a2:	d505      	bpl.n	80051b0 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80051a8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80051ac:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051ae:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051b0:	0592      	lsls	r2, r2, #22
 80051b2:	d521      	bpl.n	80051f8 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80051b8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051bc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80051be:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 80051c0:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80051c2:	f7ff ff6f 	bl	80050a4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80051c6:	682a      	ldr	r2, [r5, #0]
 80051c8:	6853      	ldr	r3, [r2, #4]
 80051ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80051d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80051dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80051de:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80051e0:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80051e2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80051ee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80051f2:	e003      	b.n	80051fc <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	4626      	mov	r6, r4
 80051f6:	e7c9      	b.n	800518c <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	d1e0      	bne.n	80051be <I2C_IsErrorOccurred+0xd2>
}
 80051fc:	4630      	mov	r0, r6
 80051fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005202 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005202:	b570      	push	{r4, r5, r6, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	460d      	mov	r5, r1
 8005208:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	d501      	bpl.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005212:	2000      	movs	r0, #0
}
 8005214:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005216:	4632      	mov	r2, r6
 8005218:	4629      	mov	r1, r5
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff ff66 	bl	80050ec <I2C_IsErrorOccurred>
 8005220:	b9a0      	cbnz	r0, 800524c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005222:	1c6a      	adds	r2, r5, #1
 8005224:	d0f1      	beq.n	800520a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7ff f8e5 	bl	80043f4 <HAL_GetTick>
 800522a:	1b80      	subs	r0, r0, r6
 800522c:	42a8      	cmp	r0, r5
 800522e:	d801      	bhi.n	8005234 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005230:	2d00      	cmp	r5, #0
 8005232:	d1ea      	bne.n	800520a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005234:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005236:	f043 0320 	orr.w	r3, r3, #32
 800523a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800523c:	2320      	movs	r3, #32
 800523e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	2300      	movs	r3, #0
 8005244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800524c:	2001      	movs	r0, #1
 800524e:	e7e1      	b.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005250 <I2C_WaitOnFlagUntilTimeout>:
{
 8005250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005254:	9f06      	ldr	r7, [sp, #24]
 8005256:	4604      	mov	r4, r0
 8005258:	4688      	mov	r8, r1
 800525a:	4616      	mov	r6, r2
 800525c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	6993      	ldr	r3, [r2, #24]
 8005262:	ea38 0303 	bics.w	r3, r8, r3
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	42b3      	cmp	r3, r6
 800526e:	d001      	beq.n	8005274 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005270:	2000      	movs	r0, #0
 8005272:	e015      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005274:	1c6b      	adds	r3, r5, #1
 8005276:	d0f3      	beq.n	8005260 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7ff f8bc 	bl	80043f4 <HAL_GetTick>
 800527c:	1bc0      	subs	r0, r0, r7
 800527e:	42a8      	cmp	r0, r5
 8005280:	d801      	bhi.n	8005286 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005282:	2d00      	cmp	r5, #0
 8005284:	d1eb      	bne.n	800525e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005288:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005290:	2320      	movs	r3, #32
 8005292:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800529c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80052a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052a4 <I2C_RequestMemoryWrite>:
{
 80052a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052a8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <I2C_RequestMemoryWrite+0x68>)
{
 80052ac:	4605      	mov	r5, r0
 80052ae:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	b2f2      	uxtb	r2, r6
 80052b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80052b8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052bc:	f7ff ff00 	bl	80050c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c0:	4628      	mov	r0, r5
 80052c2:	4642      	mov	r2, r8
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7ff ff9c 	bl	8005202 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ca:	b118      	cbz	r0, 80052d4 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
}
 80052ce:	b002      	add	sp, #8
 80052d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052d4:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d6:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052d8:	d10d      	bne.n	80052f6 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052da:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052e4:	463b      	mov	r3, r7
 80052e6:	f8cd 8000 	str.w	r8, [sp]
 80052ea:	f7ff ffb1 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80052ee:	3800      	subs	r0, #0
 80052f0:	bf18      	it	ne
 80052f2:	2001      	movne	r0, #1
 80052f4:	e7eb      	b.n	80052ce <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052f6:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f8:	4639      	mov	r1, r7
 80052fa:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fe:	4642      	mov	r2, r8
 8005300:	f7ff ff7f 	bl	8005202 <I2C_WaitOnTXISFlagUntilTimeout>
 8005304:	2800      	cmp	r0, #0
 8005306:	d1e1      	bne.n	80052cc <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	e7e6      	b.n	80052da <I2C_RequestMemoryWrite+0x36>
 800530c:	80002000 	.word	0x80002000

08005310 <I2C_RequestMemoryRead>:
{
 8005310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005314:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <I2C_RequestMemoryRead+0x68>)
{
 8005318:	4605      	mov	r5, r0
 800531a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	b2f2      	uxtb	r2, r6
 8005320:	2300      	movs	r3, #0
{
 8005322:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005326:	f7ff fecb 	bl	80050c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532a:	4628      	mov	r0, r5
 800532c:	4642      	mov	r2, r8
 800532e:	4639      	mov	r1, r7
 8005330:	f7ff ff67 	bl	8005202 <I2C_WaitOnTXISFlagUntilTimeout>
 8005334:	b118      	cbz	r0, 800533e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005336:	2001      	movs	r0, #1
}
 8005338:	b002      	add	sp, #8
 800533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533e:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005340:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005342:	d10d      	bne.n	8005360 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005346:	2200      	movs	r2, #0
 8005348:	2140      	movs	r1, #64	; 0x40
 800534a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800534c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800534e:	463b      	mov	r3, r7
 8005350:	f8cd 8000 	str.w	r8, [sp]
 8005354:	f7ff ff7c 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005358:	3800      	subs	r0, #0
 800535a:	bf18      	it	ne
 800535c:	2001      	movne	r0, #1
 800535e:	e7eb      	b.n	8005338 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005360:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005362:	4639      	mov	r1, r7
 8005364:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005368:	4642      	mov	r2, r8
 800536a:	f7ff ff4a 	bl	8005202 <I2C_WaitOnTXISFlagUntilTimeout>
 800536e:	2800      	cmp	r0, #0
 8005370:	d1e1      	bne.n	8005336 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	e7e6      	b.n	8005344 <I2C_RequestMemoryRead+0x34>
 8005376:	bf00      	nop
 8005378:	80002000 	.word	0x80002000

0800537c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	460d      	mov	r5, r1
 8005382:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	069b      	lsls	r3, r3, #26
 800538a:	d501      	bpl.n	8005390 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800538c:	2000      	movs	r0, #0
}
 800538e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005390:	4632      	mov	r2, r6
 8005392:	4629      	mov	r1, r5
 8005394:	4620      	mov	r0, r4
 8005396:	f7ff fea9 	bl	80050ec <I2C_IsErrorOccurred>
 800539a:	b990      	cbnz	r0, 80053c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539c:	f7ff f82a 	bl	80043f4 <HAL_GetTick>
 80053a0:	1b80      	subs	r0, r0, r6
 80053a2:	42a8      	cmp	r0, r5
 80053a4:	d801      	bhi.n	80053aa <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d1ec      	bne.n	8005384 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	2320      	movs	r3, #32
 80053b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80053be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80053c2:	2001      	movs	r0, #1
 80053c4:	e7e3      	b.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080053c6 <HAL_I2C_MspInit>:
}
 80053c6:	4770      	bx	lr

080053c8 <HAL_I2C_Init>:
{
 80053c8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80053ca:	4604      	mov	r4, r0
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d04a      	beq.n	8005466 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80053d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053d8:	b91b      	cbnz	r3, 80053e2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80053da:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80053de:	f7ff fff2 	bl	80053c6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e2:	2324      	movs	r3, #36	; 0x24
 80053e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053f8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005400:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005402:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005406:	2901      	cmp	r1, #1
 8005408:	d124      	bne.n	8005454 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800540a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800540e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005410:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005412:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005414:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005424:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005426:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800542a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800542c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800542e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005432:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005434:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005444:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005446:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005448:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800544c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800544e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005452:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005454:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005458:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800545a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800545c:	d1d8      	bne.n	8005410 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800545e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	e7d4      	b.n	8005410 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005466:	2001      	movs	r0, #1
 8005468:	e7f3      	b.n	8005452 <HAL_I2C_Init+0x8a>

0800546a <HAL_I2C_MspDeInit>:
 800546a:	4770      	bx	lr

0800546c <HAL_I2C_DeInit>:
{
 800546c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800546e:	4604      	mov	r4, r0
 8005470:	b198      	cbz	r0, 800549a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005472:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005474:	2324      	movs	r3, #36	; 0x24
 8005476:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005482:	f7ff fff2 	bl	800546a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005486:	2000      	movs	r0, #0
 8005488:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800548a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800548e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005492:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005498:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
 800549c:	e7fc      	b.n	8005498 <HAL_I2C_DeInit+0x2c>

0800549e <HAL_I2C_Mem_Write>:
{
 800549e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	469b      	mov	fp, r3
 80054a6:	4604      	mov	r4, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80054ae:	4692      	mov	sl, r2
 80054b0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80054b4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	f040 80a3 	bne.w	8005606 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80054c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c2:	b10b      	cbz	r3, 80054c8 <HAL_I2C_Mem_Write+0x2a>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	b933      	cbnz	r3, 80054d6 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054cc:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80054ce:	2001      	movs	r0, #1
}
 80054d0:	b005      	add	sp, #20
 80054d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80054d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80054da:	2b01      	cmp	r3, #1
 80054dc:	f000 8093 	beq.w	8005606 <HAL_I2C_Mem_Write+0x168>
 80054e0:	2501      	movs	r5, #1
 80054e2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80054e6:	f7fe ff85 	bl	80043f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054ea:	2319      	movs	r3, #25
 80054ec:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80054ee:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054f0:	462a      	mov	r2, r5
 80054f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff feaa 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4680      	mov	r8, r0
 80054fe:	2800      	cmp	r0, #0
 8005500:	d1e5      	bne.n	80054ce <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005502:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005504:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005506:	4652      	mov	r2, sl
 8005508:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800550a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005516:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005518:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800551a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800551c:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800551e:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005522:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005524:	465b      	mov	r3, fp
 8005526:	f7ff febd 	bl	80052a4 <I2C_RequestMemoryWrite>
 800552a:	b110      	cbz	r0, 8005532 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800552c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005530:	e7cd      	b.n	80054ce <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2bff      	cmp	r3, #255	; 0xff
 8005538:	d955      	bls.n	80055e6 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800553a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800553c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005540:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005542:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005544:	4639      	mov	r1, r7
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff fdba 	bl	80050c0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554c:	4632      	mov	r2, r6
 800554e:	4649      	mov	r1, r9
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff fe56 	bl	8005202 <I2C_WaitOnTXISFlagUntilTimeout>
 8005556:	2800      	cmp	r0, #0
 8005558:	d1b9      	bne.n	80054ce <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800555a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005562:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005564:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005568:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800556a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800556c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800556e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005570:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005572:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005574:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005576:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005578:	b29b      	uxth	r3, r3
 800557a:	b1ab      	cbz	r3, 80055a8 <HAL_I2C_Mem_Write+0x10a>
 800557c:	b9a2      	cbnz	r2, 80055a8 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800557e:	464b      	mov	r3, r9
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	4620      	mov	r0, r4
 8005584:	9600      	str	r6, [sp, #0]
 8005586:	f7ff fe63 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800558a:	2800      	cmp	r0, #0
 800558c:	d19f      	bne.n	80054ce <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2bff      	cmp	r3, #255	; 0xff
 8005594:	d92f      	bls.n	80055f6 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005596:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800559c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800559e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055a0:	4639      	mov	r1, r7
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7ff fd8c 	bl	80050c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80055a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1cd      	bne.n	800554c <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b0:	4632      	mov	r2, r6
 80055b2:	4649      	mov	r1, r9
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fee1 	bl	800537c <I2C_WaitOnSTOPFlagUntilTimeout>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d187      	bne.n	80054ce <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	2120      	movs	r1, #32
 80055c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80055ca:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80055ce:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80055dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055e0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80055e4:	e774      	b.n	80054d0 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80055e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ec:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80055ee:	b292      	uxth	r2, r2
 80055f0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	e7a6      	b.n	8005544 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80055f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055fc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80055fe:	b292      	uxth	r2, r2
 8005600:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	e7cc      	b.n	80055a0 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005606:	2002      	movs	r0, #2
 8005608:	e762      	b.n	80054d0 <HAL_I2C_Mem_Write+0x32>
	...

0800560c <HAL_I2C_Mem_Read>:
{
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	b085      	sub	sp, #20
 8005612:	469b      	mov	fp, r3
 8005614:	4604      	mov	r4, r0
 8005616:	460f      	mov	r7, r1
 8005618:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800561c:	4692      	mov	sl, r2
 800561e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005622:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005624:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005628:	2b20      	cmp	r3, #32
 800562a:	f040 80a7 	bne.w	800577c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800562e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005630:	b10b      	cbz	r3, 8005636 <HAL_I2C_Mem_Read+0x2a>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	b933      	cbnz	r3, 8005644 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800563a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800563c:	2001      	movs	r0, #1
}
 800563e:	b005      	add	sp, #20
 8005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005644:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005648:	2b01      	cmp	r3, #1
 800564a:	f000 8097 	beq.w	800577c <HAL_I2C_Mem_Read+0x170>
 800564e:	2501      	movs	r5, #1
 8005650:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005654:	f7fe fece 	bl	80043f4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005658:	2319      	movs	r3, #25
 800565a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800565c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800565e:	462a      	mov	r2, r5
 8005660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005664:	4620      	mov	r0, r4
 8005666:	f7ff fdf3 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800566a:	4680      	mov	r8, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	d1e5      	bne.n	800563c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005670:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005672:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005674:	4652      	mov	r2, sl
 8005676:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005678:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005686:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005688:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800568a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800568c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005690:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005692:	465b      	mov	r3, fp
 8005694:	f7ff fe3c 	bl	8005310 <I2C_RequestMemoryRead>
 8005698:	b110      	cbz	r0, 80056a0 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800569a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800569e:	e7cd      	b.n	800563c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2bff      	cmp	r3, #255	; 0xff
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_I2C_Mem_Read+0x174>)
 80056a8:	d958      	bls.n	800575c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056aa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056b4:	4639      	mov	r1, r7
 80056b6:	4620      	mov	r0, r4
 80056b8:	f7ff fd02 	bl	80050c0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056bc:	464b      	mov	r3, r9
 80056be:	2200      	movs	r2, #0
 80056c0:	2104      	movs	r1, #4
 80056c2:	4620      	mov	r0, r4
 80056c4:	9600      	str	r6, [sp, #0]
 80056c6:	f7ff fdc3 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d1b6      	bne.n	800563c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80056d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80056d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80056da:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80056dc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80056de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80056e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056e2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80056e4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80056e6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	b1ab      	cbz	r3, 800571e <HAL_I2C_Mem_Read+0x112>
 80056f2:	b9a2      	cbnz	r2, 800571e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056f4:	464b      	mov	r3, r9
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	4620      	mov	r0, r4
 80056fa:	9600      	str	r6, [sp, #0]
 80056fc:	f7ff fda8 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8005700:	2800      	cmp	r0, #0
 8005702:	d19b      	bne.n	800563c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005706:	b29b      	uxth	r3, r3
 8005708:	2bff      	cmp	r3, #255	; 0xff
 800570a:	d92f      	bls.n	800576c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800570c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800570e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005712:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005714:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005716:	4639      	mov	r1, r7
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff fcd1 	bl	80050c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800571e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ca      	bne.n	80056bc <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005726:	4632      	mov	r2, r6
 8005728:	4649      	mov	r1, r9
 800572a:	4620      	mov	r0, r4
 800572c:	f7ff fe26 	bl	800537c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005730:	2800      	cmp	r0, #0
 8005732:	d183      	bne.n	800563c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	2120      	movs	r1, #32
 8005738:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005740:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005744:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800574e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005752:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005756:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800575a:	e770      	b.n	800563e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800575c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005764:	b292      	uxth	r2, r2
 8005766:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	e7a3      	b.n	80056b4 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800576c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800576e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005772:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005774:	b292      	uxth	r2, r2
 8005776:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	e7cc      	b.n	8005716 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 800577c:	2002      	movs	r0, #2
 800577e:	e75e      	b.n	800563e <HAL_I2C_Mem_Read+0x32>
 8005780:	80002400 	.word	0x80002400

08005784 <HAL_I2C_IsDeviceReady>:
{
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	461e      	mov	r6, r3
 800578a:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 800578c:	2300      	movs	r3, #0
{
 800578e:	4604      	mov	r4, r0
 8005790:	4691      	mov	r9, r2
  __IO uint32_t I2C_Trials = 0UL;
 8005792:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005794:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005798:	2b20      	cmp	r3, #32
 800579a:	f040 808e 	bne.w	80058ba <HAL_I2C_IsDeviceReady+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800579e:	6803      	ldr	r3, [r0, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 80057a6:	f040 8088 	bne.w	80058ba <HAL_I2C_IsDeviceReady+0x136>
    __HAL_LOCK(hi2c);
 80057aa:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80057ae:	2a01      	cmp	r2, #1
 80057b0:	f000 8083 	beq.w	80058ba <HAL_I2C_IsDeviceReady+0x136>
 80057b4:	f3c1 0709 	ubfx	r7, r1, #0, #10
 80057b8:	2201      	movs	r2, #1
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057ba:	f047 7a00 	orr.w	sl, r7, #33554432	; 0x2000000
    __HAL_LOCK(hi2c);
 80057be:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057c2:	2224      	movs	r2, #36	; 0x24
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057c4:	f44a 5a00 	orr.w	sl, sl, #8192	; 0x2000
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057c8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	bf0c      	ite	eq
 80057d6:	4653      	moveq	r3, sl
 80057d8:	f447 5320 	orrne.w	r3, r7, #10240	; 0x2800
 80057dc:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 80057de:	f7fe fe09 	bl	80043f4 <HAL_GetTick>
 80057e2:	4680      	mov	r8, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057e8:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ea:	f3c5 1540 	ubfx	r5, r5, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80057f2:	431d      	orrs	r5, r3
 80057f4:	d015      	beq.n	8005822 <HAL_I2C_IsDeviceReady+0x9e>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057fa:	4633      	mov	r3, r6
 80057fc:	f8cd 8000 	str.w	r8, [sp]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005800:	f012 0210 	ands.w	r2, r2, #16
 8005804:	d126      	bne.n	8005854 <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005806:	2120      	movs	r1, #32
 8005808:	4620      	mov	r0, r4
 800580a:	f7ff fd21 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800580e:	b9e8      	cbnz	r0, 800584c <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005810:	2320      	movs	r3, #32
 8005812:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8005814:	4605      	mov	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005816:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8005818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800581c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
        return HAL_OK;
 8005820:	e014      	b.n	800584c <HAL_I2C_IsDeviceReady+0xc8>
        if (Timeout != HAL_MAX_DELAY)
 8005822:	1c73      	adds	r3, r6, #1
 8005824:	d0de      	beq.n	80057e4 <HAL_I2C_IsDeviceReady+0x60>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fe fde5 	bl	80043f4 <HAL_GetTick>
 800582a:	eba0 0008 	sub.w	r0, r0, r8
 800582e:	42b0      	cmp	r0, r6
 8005830:	d801      	bhi.n	8005836 <HAL_I2C_IsDeviceReady+0xb2>
 8005832:	2e00      	cmp	r6, #0
 8005834:	d1d6      	bne.n	80057e4 <HAL_I2C_IsDeviceReady+0x60>
            hi2c->State = HAL_I2C_STATE_READY;
 8005836:	2320      	movs	r3, #32
            return HAL_ERROR;
 8005838:	2501      	movs	r5, #1
            hi2c->State = HAL_I2C_STATE_READY;
 800583a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800583e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005840:	f043 0320 	orr.w	r3, r3, #32
 8005844:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8005846:	2300      	movs	r3, #0
 8005848:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800584c:	4628      	mov	r0, r5
 800584e:	b005      	add	sp, #20
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005854:	2200      	movs	r2, #0
 8005856:	2120      	movs	r1, #32
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff fcf9 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800585e:	2800      	cmp	r0, #0
 8005860:	d1f4      	bne.n	800584c <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	2210      	movs	r2, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005866:	f04f 0b20 	mov.w	fp, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800586a:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800586c:	f8c3 b01c 	str.w	fp, [r3, #28]
      if (I2C_Trials == Trials)
 8005870:	9a03      	ldr	r2, [sp, #12]
 8005872:	454a      	cmp	r2, r9
 8005874:	d110      	bne.n	8005898 <HAL_I2C_IsDeviceReady+0x114>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005876:	685a      	ldr	r2, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005878:	4659      	mov	r1, fp
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800587a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587e:	605a      	str	r2, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005880:	4602      	mov	r2, r0
 8005882:	4633      	mov	r3, r6
 8005884:	4620      	mov	r0, r4
 8005886:	f8cd 8000 	str.w	r8, [sp]
 800588a:	f7ff fce1 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800588e:	2800      	cmp	r0, #0
 8005890:	d1dc      	bne.n	800584c <HAL_I2C_IsDeviceReady+0xc8>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	f8c3 b01c 	str.w	fp, [r3, #28]
      I2C_Trials++;
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	454b      	cmp	r3, r9
 80058a2:	d394      	bcc.n	80057ce <HAL_I2C_IsDeviceReady+0x4a>
    hi2c->State = HAL_I2C_STATE_READY;
 80058a4:	2320      	movs	r3, #32
 80058a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058ac:	f043 0320 	orr.w	r3, r3, #32
 80058b0:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80058b8:	e7c8      	b.n	800584c <HAL_I2C_IsDeviceReady+0xc8>
    return HAL_BUSY;
 80058ba:	2502      	movs	r5, #2
 80058bc:	e7c6      	b.n	800584c <HAL_I2C_IsDeviceReady+0xc8>

080058be <HAL_I2C_GetState>:
  return hi2c->State;
 80058be:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80058c2:	4770      	bx	lr

080058c4 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058c4:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058c6:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058c8:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058cc:	3284      	adds	r2, #132	; 0x84
 80058ce:	1883      	adds	r3, r0, r2
{
 80058d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058d4:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058d6:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058da:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80058dc:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058e0:	684c      	ldr	r4, [r1, #4]
 80058e2:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058e6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80058ea:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058ee:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058f0:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058f2:	68c5      	ldr	r5, [r0, #12]
 80058f4:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80058f8:	443d      	add	r5, r7
 80058fa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80058fe:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005900:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005902:	68c5      	ldr	r5, [r0, #12]
 8005904:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8005908:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800590a:	689d      	ldr	r5, [r3, #8]
 800590c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005910:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005912:	688d      	ldr	r5, [r1, #8]
 8005914:	68c7      	ldr	r7, [r0, #12]
 8005916:	3501      	adds	r5, #1
 8005918:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800591c:	443d      	add	r5, r7
 800591e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005922:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005924:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005926:	691d      	ldr	r5, [r3, #16]
 8005928:	f025 0507 	bic.w	r5, r5, #7
 800592c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800592e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005930:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005932:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005936:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800593a:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800593e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005942:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005946:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800594a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800594e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005950:	695d      	ldr	r5, [r3, #20]
 8005952:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005956:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005958:	694d      	ldr	r5, [r1, #20]
 800595a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800595c:	69dd      	ldr	r5, [r3, #28]
 800595e:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005962:	f025 0507 	bic.w	r5, r5, #7
 8005966:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005968:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800596c:	433d      	orrs	r5, r7
 800596e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005970:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005972:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005974:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005978:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800597a:	b31e      	cbz	r6, 80059c4 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800597c:	2e01      	cmp	r6, #1
 800597e:	d023      	beq.n	80059c8 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005980:	1eb5      	subs	r5, r6, #2
 8005982:	2d02      	cmp	r5, #2
 8005984:	d922      	bls.n	80059cc <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005986:	2e07      	cmp	r6, #7
 8005988:	bf0c      	ite	eq
 800598a:	2502      	moveq	r5, #2
 800598c:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800598e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005990:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005994:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005998:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800599a:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800599c:	3403      	adds	r4, #3
 800599e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80059a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059a2:	436e      	muls	r6, r5
 80059a4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80059a8:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80059aa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059ac:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80059b0:	f024 0407 	bic.w	r4, r4, #7
 80059b4:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80059b6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80059b8:	5883      	ldr	r3, [r0, r2]
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	5083      	str	r3, [r0, r2]
}
 80059c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80059c4:	2504      	movs	r5, #4
 80059c6:	e7e2      	b.n	800598e <LTDC_SetConfig+0xca>
    tmp = 3U;
 80059c8:	2503      	movs	r5, #3
 80059ca:	e7e0      	b.n	800598e <LTDC_SetConfig+0xca>
    tmp = 2U;
 80059cc:	2502      	movs	r5, #2
 80059ce:	e7de      	b.n	800598e <LTDC_SetConfig+0xca>

080059d0 <HAL_LTDC_MspInit>:
}
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_LTDC_Init>:
{
 80059d4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80059d6:	4604      	mov	r4, r0
 80059d8:	2800      	cmp	r0, #0
 80059da:	d063      	beq.n	8005aa4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80059dc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80059e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059e4:	b91b      	cbnz	r3, 80059ee <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80059e6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80059ea:	f7ff fff1 	bl	80059d0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059ee:	2302      	movs	r3, #2
 80059f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80059fc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059fe:	6999      	ldr	r1, [r3, #24]
 8005a00:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005a04:	4302      	orrs	r2, r0
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a0a:	6920      	ldr	r0, [r4, #16]
 8005a0c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a0e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a10:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a12:	4925      	ldr	r1, [pc, #148]	; (8005aa8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a14:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	400a      	ands	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005a22:	69a0      	ldr	r0, [r4, #24]
 8005a24:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a26:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a28:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005a36:	6a20      	ldr	r0, [r4, #32]
 8005a38:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a3c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	400a      	ands	r2, r1
 8005a42:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005a4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005a4c:	4302      	orrs	r2, r0
 8005a4e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	4011      	ands	r1, r2
 8005a54:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005a5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a60:	430a      	orrs	r2, r1
 8005a62:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a66:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a6a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a6e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a72:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a76:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005a80:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a84:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8a:	f042 0206 	orr.w	r2, r2, #6
 8005a8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a98:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a9a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a9e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005aa2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	e7fc      	b.n	8005aa2 <HAL_LTDC_Init+0xce>
 8005aa8:	f000f800 	.word	0xf000f800

08005aac <HAL_LTDC_ConfigLayer>:
{
 8005aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005ab0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	f04f 0002 	mov.w	r0, #2
 8005ac0:	d01f      	beq.n	8005b02 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ac2:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005ac4:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ac8:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aca:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ace:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005ad2:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ad6:	3438      	adds	r4, #56	; 0x38
 8005ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ae4:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4662      	mov	r2, ip
 8005aea:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005aec:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005aee:	f7ff fee9 	bl	80058c4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005af2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005af4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005af6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005afa:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005afe:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b06 <HAL_LTDC_GetState>:
  return hltdc->State;
 8005b06:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8005b0a:	4770      	bx	lr

08005b0c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b12:	4c19      	ldr	r4, [pc, #100]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b2c:	f7fe fc62 	bl	80043f4 <HAL_GetTick>
 8005b30:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	03da      	lsls	r2, r3, #15
 8005b36:	d50c      	bpl.n	8005b52 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b38:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b3a:	4d0f      	ldr	r5, [pc, #60]	; (8005b78 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b40:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005b42:	f7fe fc57 	bl	80043f4 <HAL_GetTick>
 8005b46:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b48:	686b      	ldr	r3, [r5, #4]
 8005b4a:	039b      	lsls	r3, r3, #14
 8005b4c:	d50a      	bpl.n	8005b64 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e006      	b.n	8005b60 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b52:	f7fe fc4f 	bl	80043f4 <HAL_GetTick>
 8005b56:	1b40      	subs	r0, r0, r5
 8005b58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005b5c:	d9e9      	bls.n	8005b32 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005b5e:	2003      	movs	r0, #3
}
 8005b60:	b003      	add	sp, #12
 8005b62:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b64:	f7fe fc46 	bl	80043f4 <HAL_GetTick>
 8005b68:	1b00      	subs	r0, r0, r4
 8005b6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005b6e:	d9eb      	bls.n	8005b48 <HAL_PWREx_EnableOverDrive+0x3c>
 8005b70:	e7f5      	b.n	8005b5e <HAL_PWREx_EnableOverDrive+0x52>
 8005b72:	bf00      	nop
 8005b74:	40023800 	.word	0x40023800
 8005b78:	40007000 	.word	0x40007000

08005b7c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005b80:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005b82:	b136      	cbz	r6, 8005b92 <QSPI_Config+0x16>
 8005b84:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005b88:	d003      	beq.n	8005b92 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005b8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005b8c:	6804      	ldr	r4, [r0, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b92:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b96:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005b9a:	f1b9 0f00 	cmp.w	r9, #0
 8005b9e:	d04f      	beq.n	8005c40 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ba0:	694b      	ldr	r3, [r1, #20]
 8005ba2:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005ba6:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ba8:	f8d1 a000 	ldr.w	sl, [r1]
 8005bac:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005bb0:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8005bb4:	ea49 0902 	orr.w	r9, r9, r2
 8005bb8:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005bbc:	b335      	cbz	r5, 8005c0c <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005bbe:	688b      	ldr	r3, [r1, #8]
 8005bc0:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bc4:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005bc6:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005bc8:	b19f      	cbz	r7, 8005bf2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bca:	ea4a 0307 	orr.w	r3, sl, r7
 8005bce:	4323      	orrs	r3, r4
 8005bd0:	68cc      	ldr	r4, [r1, #12]
 8005bd2:	ea43 0308 	orr.w	r3, r3, r8
 8005bd6:	ea43 030e 	orr.w	r3, r3, lr
 8005bda:	4333      	orrs	r3, r6
 8005bdc:	4323      	orrs	r3, r4
 8005bde:	ea43 030c 	orr.w	r3, r3, ip
 8005be2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005be4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005be8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bea:	d00d      	beq.n	8005c08 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005bec:	684b      	ldr	r3, [r1, #4]
 8005bee:	6183      	str	r3, [r0, #24]
 8005bf0:	e00a      	b.n	8005c08 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bf2:	ea4a 0304 	orr.w	r3, sl, r4
 8005bf6:	ea43 0308 	orr.w	r3, r3, r8
 8005bfa:	ea43 030e 	orr.w	r3, r3, lr
 8005bfe:	4333      	orrs	r3, r6
 8005c00:	ea43 030c 	orr.w	r3, r3, ip
 8005c04:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c06:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c0c:	b16f      	cbz	r7, 8005c2a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c0e:	ea4a 0307 	orr.w	r3, sl, r7
 8005c12:	4323      	orrs	r3, r4
 8005c14:	68cc      	ldr	r4, [r1, #12]
 8005c16:	ea43 0308 	orr.w	r3, r3, r8
 8005c1a:	ea43 030e 	orr.w	r3, r3, lr
 8005c1e:	4323      	orrs	r3, r4
 8005c20:	ea43 030c 	orr.w	r3, r3, ip
 8005c24:	ea43 0309 	orr.w	r3, r3, r9
 8005c28:	e7dc      	b.n	8005be4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c2a:	ea4a 0304 	orr.w	r3, sl, r4
 8005c2e:	ea43 0308 	orr.w	r3, r3, r8
 8005c32:	ea43 030e 	orr.w	r3, r3, lr
 8005c36:	ea43 030c 	orr.w	r3, r3, ip
 8005c3a:	ea43 0309 	orr.w	r3, r3, r9
 8005c3e:	e7e2      	b.n	8005c06 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005c40:	b365      	cbz	r5, 8005c9c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005c42:	6804      	ldr	r4, [r0, #0]
 8005c44:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c46:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005c48:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c4a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c4e:	694e      	ldr	r6, [r1, #20]
 8005c50:	ea43 0502 	orr.w	r5, r3, r2
 8005c54:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005c58:	04b6      	lsls	r6, r6, #18
 8005c5a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c5e:	b1a7      	cbz	r7, 8005c8a <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c60:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c62:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c66:	ea40 0008 	orr.w	r0, r0, r8
 8005c6a:	ea43 0300 	orr.w	r3, r3, r0
 8005c6e:	68c8      	ldr	r0, [r1, #12]
 8005c70:	ea43 030c 	orr.w	r3, r3, ip
 8005c74:	ea43 0300 	orr.w	r3, r3, r0
 8005c78:	ea43 0306 	orr.w	r3, r3, r6
 8005c7c:	ea43 0305 	orr.w	r3, r3, r5
 8005c80:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c82:	d0c1      	beq.n	8005c08 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c84:	684b      	ldr	r3, [r1, #4]
 8005c86:	61a3      	str	r3, [r4, #24]
 8005c88:	e7be      	b.n	8005c08 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c8a:	ea40 0008 	orr.w	r0, r0, r8
 8005c8e:	4303      	orrs	r3, r0
 8005c90:	ea43 030c 	orr.w	r3, r3, ip
 8005c94:	4333      	orrs	r3, r6
 8005c96:	432b      	orrs	r3, r5
 8005c98:	6163      	str	r3, [r4, #20]
 8005c9a:	e7b5      	b.n	8005c08 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c9c:	b17f      	cbz	r7, 8005cbe <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c9e:	ea46 0307 	orr.w	r3, r6, r7
 8005ca2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	4323      	orrs	r3, r4
 8005caa:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005cac:	4323      	orrs	r3, r4
 8005cae:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005cb0:	4323      	orrs	r3, r4
 8005cb2:	68cc      	ldr	r4, [r1, #12]
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	694c      	ldr	r4, [r1, #20]
 8005cb8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005cbc:	e792      	b.n	8005be4 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005cbe:	2e00      	cmp	r6, #0
 8005cc0:	d0a2      	beq.n	8005c08 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cc2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005cc4:	6800      	ldr	r0, [r0, #0]
 8005cc6:	4333      	orrs	r3, r6
 8005cc8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	694b      	ldr	r3, [r1, #20]
 8005cce:	4332      	orrs	r2, r6
 8005cd0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005cd2:	4332      	orrs	r2, r6
 8005cd4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005cd8:	6142      	str	r2, [r0, #20]
}
 8005cda:	e795      	b.n	8005c08 <QSPI_Config+0x8c>

08005cdc <QSPI_WaitFlagStateUntilTimeout>:
{
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	4615      	mov	r5, r2
 8005cea:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	6893      	ldr	r3, [r2, #8]
 8005cf0:	4233      	tst	r3, r6
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	d101      	bne.n	8005d00 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e012      	b.n	8005d26 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005d00:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d04:	d0f3      	beq.n	8005cee <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d06:	f7fe fb75 	bl	80043f4 <HAL_GetTick>
 8005d0a:	1bc0      	subs	r0, r0, r7
 8005d0c:	4540      	cmp	r0, r8
 8005d0e:	d802      	bhi.n	8005d16 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005d10:	f1b8 0f00 	cmp.w	r8, #0
 8005d14:	d1ea      	bne.n	8005cec <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005d16:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005d18:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005d1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005d1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d2a <HAL_QSPI_MspInit>:
}
 8005d2a:	4770      	bx	lr

08005d2c <HAL_QSPI_Init>:
{
 8005d2c:	b530      	push	{r4, r5, lr}
 8005d2e:	4604      	mov	r4, r0
 8005d30:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005d32:	f7fe fb5f 	bl	80043f4 <HAL_GetTick>
 8005d36:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	d047      	beq.n	8005dcc <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d3c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d40:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005d44:	b94a      	cbnz	r2, 8005d5a <HAL_QSPI_Init+0x2e>
 8005d46:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005d48:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005d4a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005d4e:	f7ff ffec 	bl	8005d2a <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005d5a:	6820      	ldr	r0, [r4, #0]
 8005d5c:	68a1      	ldr	r1, [r4, #8]
 8005d5e:	6802      	ldr	r2, [r0, #0]
 8005d60:	3901      	subs	r1, #1
 8005d62:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005d66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d6a:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005d6c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d6e:	4620      	mov	r0, r4
 8005d70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005d72:	9200      	str	r2, [sp, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f7ff ffb1 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005d7a:	bb10      	cbnz	r0, 8005dc2 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	69e5      	ldr	r5, [r4, #28]
 8005d80:	68e3      	ldr	r3, [r4, #12]
 8005d82:	6811      	ldr	r1, [r2, #0]
 8005d84:	432b      	orrs	r3, r5
 8005d86:	6a25      	ldr	r5, [r4, #32]
 8005d88:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005d8c:	432b      	orrs	r3, r5
 8005d8e:	6865      	ldr	r5, [r4, #4]
 8005d90:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005d94:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d9c:	6855      	ldr	r5, [r2, #4]
 8005d9e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005da2:	430b      	orrs	r3, r1
 8005da4:	6921      	ldr	r1, [r4, #16]
 8005da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005daa:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <HAL_QSPI_Init+0xa4>)
 8005dac:	4029      	ands	r1, r5
 8005dae:	430b      	orrs	r3, r1
 8005db0:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005dba:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dbc:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005dbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005dc8:	b005      	add	sp, #20
 8005dca:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005dcc:	2001      	movs	r0, #1
 8005dce:	e7fb      	b.n	8005dc8 <HAL_QSPI_Init+0x9c>
 8005dd0:	ffe0f8fe 	.word	0xffe0f8fe

08005dd4 <HAL_QSPI_MspDeInit>:
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_QSPI_DeInit>:
{
 8005dd6:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	b168      	cbz	r0, 8005df8 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005ddc:	6802      	ldr	r2, [r0, #0]
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005de6:	f7ff fff5 	bl	8005dd4 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005dea:	2000      	movs	r0, #0
 8005dec:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005dee:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005df2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005df6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005df8:	2001      	movs	r0, #1
 8005dfa:	e7fc      	b.n	8005df6 <HAL_QSPI_DeInit+0x20>

08005dfc <HAL_QSPI_Command>:
{
 8005dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	b085      	sub	sp, #20
 8005e04:	4617      	mov	r7, r2
 8005e06:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005e08:	f7fe faf4 	bl	80043f4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005e0c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005e10:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005e12:	2a01      	cmp	r2, #1
 8005e14:	d033      	beq.n	8005e7e <HAL_QSPI_Command+0x82>
 8005e16:	2201      	movs	r2, #1
 8005e18:	2602      	movs	r6, #2
 8005e1a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e1e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e22:	2a01      	cmp	r2, #1
 8005e24:	fa5f f882 	uxtb.w	r8, r2
 8005e28:	d127      	bne.n	8005e7a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e2a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e2c:	9003      	str	r0, [sp, #12]
 8005e2e:	2120      	movs	r1, #32
 8005e30:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e32:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e34:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005e36:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005e3a:	f7ff ff4f 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005e3e:	4605      	mov	r5, r0
 8005e40:	b9a0      	cbnz	r0, 8005e6c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005e42:	4602      	mov	r2, r0
 8005e44:	4649      	mov	r1, r9
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7ff fe98 	bl	8005b7c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005e4c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	b94a      	cbnz	r2, 8005e68 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e54:	4642      	mov	r2, r8
 8005e56:	4631      	mov	r1, r6
 8005e58:	4620      	mov	r0, r4
 8005e5a:	9700      	str	r7, [sp, #0]
 8005e5c:	f7ff ff3e 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005e60:	4605      	mov	r5, r0
 8005e62:	b918      	cbnz	r0, 8005e6c <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005e68:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005e72:	4628      	mov	r0, r5
 8005e74:	b005      	add	sp, #20
 8005e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005e7a:	4635      	mov	r5, r6
 8005e7c:	e7f6      	b.n	8005e6c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005e7e:	2502      	movs	r5, #2
 8005e80:	e7f7      	b.n	8005e72 <HAL_QSPI_Command+0x76>

08005e82 <HAL_QSPI_AutoPolling>:
{
 8005e82:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	4615      	mov	r5, r2
 8005e8a:	461e      	mov	r6, r3
 8005e8c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005e8e:	f7fe fab1 	bl	80043f4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005e92:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005e96:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005e98:	2a01      	cmp	r2, #1
 8005e9a:	d040      	beq.n	8005f1e <HAL_QSPI_AutoPolling+0x9c>
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ea2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	b2d7      	uxtb	r7, r2
 8005eaa:	d136      	bne.n	8005f1a <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005eac:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005eae:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005eb0:	9003      	str	r0, [sp, #12]
 8005eb2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005eb4:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005eb6:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005eb8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005ebc:	2120      	movs	r1, #32
 8005ebe:	f7ff ff0d 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005ec2:	bb20      	cbnz	r0, 8005f0e <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005ec4:	6821      	ldr	r1, [r4, #0]
 8005ec6:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ec8:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005eca:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005ecc:	686a      	ldr	r2, [r5, #4]
 8005ece:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005ed0:	68aa      	ldr	r2, [r5, #8]
 8005ed2:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ed4:	680a      	ldr	r2, [r1, #0]
 8005ed6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005eda:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005edc:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005ede:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ee2:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005ee4:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005ee6:	68ea      	ldr	r2, [r5, #12]
 8005ee8:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ef0:	f7ff fe44 	bl	8005b7c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	2108      	movs	r1, #8
 8005efa:	4620      	mov	r0, r4
 8005efc:	9600      	str	r6, [sp, #0]
 8005efe:	f7ff feed 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005f02:	b920      	cbnz	r0, 8005f0e <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	2208      	movs	r2, #8
 8005f08:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f0a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005f14:	b004      	add	sp, #16
 8005f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005f1a:	2002      	movs	r0, #2
 8005f1c:	e7f7      	b.n	8005f0e <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005f1e:	2002      	movs	r0, #2
 8005f20:	e7f8      	b.n	8005f14 <HAL_QSPI_AutoPolling+0x92>

08005f22 <HAL_QSPI_Abort>:
{
 8005f22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f24:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f26:	f7fe fa65 	bl	80043f4 <HAL_GetTick>
 8005f2a:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005f2c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f30:	f012 0002 	ands.w	r0, r2, #2
 8005f34:	d036      	beq.n	8005fa4 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8005f36:	2200      	movs	r2, #0
 8005f38:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	6811      	ldr	r1, [r2, #0]
 8005f40:	0749      	lsls	r1, r1, #29
 8005f42:	d50d      	bpl.n	8005f60 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f44:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f48:	f021 0104 	bic.w	r1, r1, #4
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005f50:	f7fe fc29 	bl	80047a6 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	b118      	cbz	r0, 8005f60 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f58:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f5a:	f042 0204 	orr.w	r2, r2, #4
 8005f5e:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f60:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f62:	4620      	mov	r0, r4
 8005f64:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005f66:	680a      	ldr	r2, [r1, #0]
 8005f68:	f042 0202 	orr.w	r2, r2, #2
 8005f6c:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005f6e:	2102      	movs	r1, #2
 8005f70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f72:	9200      	str	r2, [sp, #0]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f7ff feb1 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	b990      	cbnz	r0, 8005fa4 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	2102      	movs	r1, #2
 8005f82:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f84:	2120      	movs	r1, #32
 8005f86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f88:	9200      	str	r2, [sp, #0]
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fea5 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005f92:	b938      	cbnz	r0, 8005fa4 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	6953      	ldr	r3, [r2, #20]
 8005f98:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005f9c:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <HAL_QSPI_Transmit>:
{
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	4604      	mov	r4, r0
 8005fac:	b085      	sub	sp, #20
 8005fae:	4616      	mov	r6, r2
 8005fb0:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005fb2:	f7fe fa1f 	bl	80043f4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005fb6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005fba:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005fbc:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005fbe:	2a01      	cmp	r2, #1
 8005fc0:	d04c      	beq.n	800605c <HAL_QSPI_Transmit+0xb4>
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fc8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005fcc:	2a01      	cmp	r2, #1
 8005fce:	b2d0      	uxtb	r0, r2
 8005fd0:	d142      	bne.n	8006058 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	d039      	beq.n	800604e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005fda:	2212      	movs	r2, #18
 8005fdc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fe0:	692a      	ldr	r2, [r5, #16]
 8005fe2:	3201      	adds	r2, #1
 8005fe4:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fe6:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005fe8:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005fea:	3201      	adds	r2, #1
 8005fec:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005fee:	696a      	ldr	r2, [r5, #20]
 8005ff0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005ff4:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005ff6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ff8:	b9a2      	cbnz	r2, 8006024 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	2102      	movs	r1, #2
 8005ffe:	4620      	mov	r0, r4
 8006000:	9600      	str	r6, [sp, #0]
 8006002:	f7ff fe6b 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006006:	b928      	cbnz	r0, 8006014 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800600c:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800600e:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8006010:	f7ff ff87 	bl	8005f22 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006014:	2301      	movs	r3, #1
 8006016:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800601a:	2300      	movs	r3, #0
 800601c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006020:	b005      	add	sp, #20
 8006022:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006024:	2201      	movs	r2, #1
 8006026:	2104      	movs	r1, #4
 8006028:	4620      	mov	r0, r4
 800602a:	9600      	str	r6, [sp, #0]
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	f7ff fe55 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006032:	2800      	cmp	r0, #0
 8006034:	d1ee      	bne.n	8006014 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006036:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006038:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800603a:	7812      	ldrb	r2, [r2, #0]
 800603c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8006040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006042:	3201      	adds	r2, #1
 8006044:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006046:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006048:	3a01      	subs	r2, #1
 800604a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800604c:	e7d3      	b.n	8005ff6 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800604e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006050:	f043 0308 	orr.w	r3, r3, #8
 8006054:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006056:	e7e0      	b.n	800601a <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006058:	2002      	movs	r0, #2
 800605a:	e7de      	b.n	800601a <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800605c:	2002      	movs	r0, #2
 800605e:	e7df      	b.n	8006020 <HAL_QSPI_Transmit+0x78>

08006060 <HAL_QSPI_Receive>:
{
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	b085      	sub	sp, #20
 8006066:	4616      	mov	r6, r2
 8006068:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800606a:	f7fe f9c3 	bl	80043f4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800606e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006070:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006072:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8006076:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800607a:	2a01      	cmp	r2, #1
 800607c:	d050      	beq.n	8006120 <HAL_QSPI_Receive+0xc0>
 800607e:	2201      	movs	r2, #1
 8006080:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006084:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006088:	2a01      	cmp	r2, #1
 800608a:	b2d0      	uxtb	r0, r2
 800608c:	d146      	bne.n	800611c <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800608e:	2200      	movs	r2, #0
 8006090:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8006092:	2f00      	cmp	r7, #0
 8006094:	d03d      	beq.n	8006112 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006096:	2222      	movs	r2, #34	; 0x22
 8006098:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800609c:	692a      	ldr	r2, [r5, #16]
 800609e:	3201      	adds	r2, #1
 80060a0:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060a2:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80060a4:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060a6:	3201      	adds	r2, #1
 80060a8:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80060aa:	6969      	ldr	r1, [r5, #20]
 80060ac:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80060b0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80060b4:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80060b6:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80060ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060bc:	b9a2      	cbnz	r2, 80060e8 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80060be:	2201      	movs	r2, #1
 80060c0:	2102      	movs	r1, #2
 80060c2:	4620      	mov	r0, r4
 80060c4:	9600      	str	r6, [sp, #0]
 80060c6:	f7ff fe09 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80060ca:	b928      	cbnz	r0, 80060d8 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80060d0:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80060d2:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80060d4:	f7ff ff25 	bl	8005f22 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80060d8:	2301      	movs	r3, #1
 80060da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80060de:	2300      	movs	r3, #0
 80060e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80060e4:	b005      	add	sp, #20
 80060e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80060e8:	2201      	movs	r2, #1
 80060ea:	2106      	movs	r1, #6
 80060ec:	4620      	mov	r0, r4
 80060ee:	9600      	str	r6, [sp, #0]
 80060f0:	9303      	str	r3, [sp, #12]
 80060f2:	f7ff fdf3 	bl	8005cdc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d1ee      	bne.n	80060d8 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80060fa:	f895 1020 	ldrb.w	r1, [r5, #32]
 80060fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8006100:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006102:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8006104:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006106:	3201      	adds	r2, #1
 8006108:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800610a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800610c:	3a01      	subs	r2, #1
 800610e:	63a2      	str	r2, [r4, #56]	; 0x38
 8006110:	e7d3      	b.n	80060ba <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800611a:	e7e0      	b.n	80060de <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 800611c:	2002      	movs	r0, #2
 800611e:	e7de      	b.n	80060de <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8006120:	2002      	movs	r0, #2
 8006122:	e7df      	b.n	80060e4 <HAL_QSPI_Receive+0x84>

08006124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006128:	4604      	mov	r4, r0
 800612a:	b340      	cbz	r0, 800617e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612c:	6803      	ldr	r3, [r0, #0]
 800612e:	07db      	lsls	r3, r3, #31
 8006130:	d410      	bmi.n	8006154 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	079f      	lsls	r7, r3, #30
 8006136:	d464      	bmi.n	8006202 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	0719      	lsls	r1, r3, #28
 800613c:	f100 80aa 	bmi.w	8006294 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	075a      	lsls	r2, r3, #29
 8006144:	f100 80cb 	bmi.w	80062de <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006148:	69a2      	ldr	r2, [r4, #24]
 800614a:	2a00      	cmp	r2, #0
 800614c:	f040 8134 	bne.w	80063b8 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006150:	2000      	movs	r0, #0
 8006152:	e02b      	b.n	80061ac <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006154:	4b96      	ldr	r3, [pc, #600]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	f002 020c 	and.w	r2, r2, #12
 800615c:	2a04      	cmp	r2, #4
 800615e:	d007      	beq.n	8006170 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	f002 020c 	and.w	r2, r2, #12
 8006166:	2a08      	cmp	r2, #8
 8006168:	d10b      	bne.n	8006182 <HAL_RCC_OscConfig+0x5e>
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	0256      	lsls	r6, r2, #9
 800616e:	d508      	bpl.n	8006182 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006170:	4b8f      	ldr	r3, [pc, #572]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	039d      	lsls	r5, r3, #14
 8006176:	d5dc      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
 8006178:	6863      	ldr	r3, [r4, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1d9      	bne.n	8006132 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800617e:	2001      	movs	r0, #1
 8006180:	e014      	b.n	80061ac <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006182:	6862      	ldr	r2, [r4, #4]
 8006184:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006188:	d113      	bne.n	80061b2 <HAL_RCC_OscConfig+0x8e>
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006190:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006192:	f7fe f92f 	bl	80043f4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	4e86      	ldr	r6, [pc, #536]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006198:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	6833      	ldr	r3, [r6, #0]
 800619c:	0398      	lsls	r0, r3, #14
 800619e:	d4c8      	bmi.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fe f928 	bl	80043f4 <HAL_GetTick>
 80061a4:	1b40      	subs	r0, r0, r5
 80061a6:	2864      	cmp	r0, #100	; 0x64
 80061a8:	d9f7      	bls.n	800619a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80061aa:	2003      	movs	r0, #3
}
 80061ac:	b002      	add	sp, #8
 80061ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061b2:	4d7f      	ldr	r5, [pc, #508]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b992      	cbnz	r2, 80061de <HAL_RCC_OscConfig+0xba>
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061bc:	602b      	str	r3, [r5, #0]
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061c6:	f7fe f915 	bl	80043f4 <HAL_GetTick>
 80061ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	0399      	lsls	r1, r3, #14
 80061d0:	d5af      	bpl.n	8006132 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061d2:	f7fe f90f 	bl	80043f4 <HAL_GetTick>
 80061d6:	1b80      	subs	r0, r0, r6
 80061d8:	2864      	cmp	r0, #100	; 0x64
 80061da:	d9f7      	bls.n	80061cc <HAL_RCC_OscConfig+0xa8>
 80061dc:	e7e5      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061de:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0xd0>
 80061e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	e7ce      	b.n	8006192 <HAL_RCC_OscConfig+0x6e>
 80061f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006200:	e7f6      	b.n	80061f0 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006202:	4b6b      	ldr	r3, [pc, #428]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	f012 0f0c 	tst.w	r2, #12
 800620a:	d007      	beq.n	800621c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	f002 020c 	and.w	r2, r2, #12
 8006212:	2a08      	cmp	r2, #8
 8006214:	d111      	bne.n	800623a <HAL_RCC_OscConfig+0x116>
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	0252      	lsls	r2, r2, #9
 800621a:	d40e      	bmi.n	800623a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621c:	4a64      	ldr	r2, [pc, #400]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	079b      	lsls	r3, r3, #30
 8006222:	d502      	bpl.n	800622a <HAL_RCC_OscConfig+0x106>
 8006224:	68e3      	ldr	r3, [r4, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d1a9      	bne.n	800617e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	6921      	ldr	r1, [r4, #16]
 800622e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006236:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006238:	e77e      	b.n	8006138 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800623a:	68e2      	ldr	r2, [r4, #12]
 800623c:	b1c2      	cbz	r2, 8006270 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800623e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006240:	4d5b      	ldr	r5, [pc, #364]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006248:	f7fe f8d4 	bl	80043f4 <HAL_GetTick>
 800624c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	079f      	lsls	r7, r3, #30
 8006252:	d507      	bpl.n	8006264 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	6922      	ldr	r2, [r4, #16]
 8006258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800625c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	e769      	b.n	8006138 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006264:	f7fe f8c6 	bl	80043f4 <HAL_GetTick>
 8006268:	1b80      	subs	r0, r0, r6
 800626a:	2802      	cmp	r0, #2
 800626c:	d9ef      	bls.n	800624e <HAL_RCC_OscConfig+0x12a>
 800626e:	e79c      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006270:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006272:	4e4f      	ldr	r6, [pc, #316]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800627a:	f7fe f8bb 	bl	80043f4 <HAL_GetTick>
 800627e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	0798      	lsls	r0, r3, #30
 8006284:	f57f af58 	bpl.w	8006138 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006288:	f7fe f8b4 	bl	80043f4 <HAL_GetTick>
 800628c:	1b40      	subs	r0, r0, r5
 800628e:	2802      	cmp	r0, #2
 8006290:	d9f6      	bls.n	8006280 <HAL_RCC_OscConfig+0x15c>
 8006292:	e78a      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006294:	6963      	ldr	r3, [r4, #20]
 8006296:	4d46      	ldr	r5, [pc, #280]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 8006298:	b183      	cbz	r3, 80062bc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800629a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80062a2:	f7fe f8a7 	bl	80043f4 <HAL_GetTick>
 80062a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062aa:	079b      	lsls	r3, r3, #30
 80062ac:	f53f af48 	bmi.w	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b0:	f7fe f8a0 	bl	80043f4 <HAL_GetTick>
 80062b4:	1b80      	subs	r0, r0, r6
 80062b6:	2802      	cmp	r0, #2
 80062b8:	d9f6      	bls.n	80062a8 <HAL_RCC_OscConfig+0x184>
 80062ba:	e776      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80062bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80062c4:	f7fe f896 	bl	80043f4 <HAL_GetTick>
 80062c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80062cc:	079f      	lsls	r7, r3, #30
 80062ce:	f57f af37 	bpl.w	8006140 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d2:	f7fe f88f 	bl	80043f4 <HAL_GetTick>
 80062d6:	1b80      	subs	r0, r0, r6
 80062d8:	2802      	cmp	r0, #2
 80062da:	d9f6      	bls.n	80062ca <HAL_RCC_OscConfig+0x1a6>
 80062dc:	e765      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 80062e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e2:	00d0      	lsls	r0, r2, #3
 80062e4:	d427      	bmi.n	8006336 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80062e8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062fa:	4d2e      	ldr	r5, [pc, #184]	; (80063b4 <HAL_RCC_OscConfig+0x290>)
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	05d9      	lsls	r1, r3, #23
 8006300:	d51b      	bpl.n	800633a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006302:	68a3      	ldr	r3, [r4, #8]
 8006304:	4d2a      	ldr	r5, [pc, #168]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 8006306:	2b01      	cmp	r3, #1
 8006308:	d127      	bne.n	800635a <HAL_RCC_OscConfig+0x236>
 800630a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006316:	f7fe f86d 	bl	80043f4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	4e25      	ldr	r6, [pc, #148]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800631c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006320:	079b      	lsls	r3, r3, #30
 8006322:	d53f      	bpl.n	80063a4 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8006324:	2f00      	cmp	r7, #0
 8006326:	f43f af0f 	beq.w	8006148 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_RCC_OscConfig+0x28c>)
 800632c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800632e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006332:	6413      	str	r3, [r2, #64]	; 0x40
 8006334:	e708      	b.n	8006148 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8006336:	2700      	movs	r7, #0
 8006338:	e7df      	b.n	80062fa <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006340:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006342:	f7fe f857 	bl	80043f4 <HAL_GetTick>
 8006346:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	05da      	lsls	r2, r3, #23
 800634c:	d4d9      	bmi.n	8006302 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634e:	f7fe f851 	bl	80043f4 <HAL_GetTick>
 8006352:	1b80      	subs	r0, r0, r6
 8006354:	2864      	cmp	r0, #100	; 0x64
 8006356:	d9f7      	bls.n	8006348 <HAL_RCC_OscConfig+0x224>
 8006358:	e727      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800635a:	b9ab      	cbnz	r3, 8006388 <HAL_RCC_OscConfig+0x264>
 800635c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	672b      	str	r3, [r5, #112]	; 0x70
 8006368:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800636a:	f023 0304 	bic.w	r3, r3, #4
 800636e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006370:	f7fe f840 	bl	80043f4 <HAL_GetTick>
 8006374:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006376:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006378:	0798      	lsls	r0, r3, #30
 800637a:	d5d3      	bpl.n	8006324 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800637c:	f7fe f83a 	bl	80043f4 <HAL_GetTick>
 8006380:	1b80      	subs	r0, r0, r6
 8006382:	4540      	cmp	r0, r8
 8006384:	d9f7      	bls.n	8006376 <HAL_RCC_OscConfig+0x252>
 8006386:	e710      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006388:	2b05      	cmp	r3, #5
 800638a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800638c:	d103      	bne.n	8006396 <HAL_RCC_OscConfig+0x272>
 800638e:	f043 0304 	orr.w	r3, r3, #4
 8006392:	672b      	str	r3, [r5, #112]	; 0x70
 8006394:	e7b9      	b.n	800630a <HAL_RCC_OscConfig+0x1e6>
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	672b      	str	r3, [r5, #112]	; 0x70
 800639c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800639e:	f023 0304 	bic.w	r3, r3, #4
 80063a2:	e7b5      	b.n	8006310 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a4:	f7fe f826 	bl	80043f4 <HAL_GetTick>
 80063a8:	1b40      	subs	r0, r0, r5
 80063aa:	4540      	cmp	r0, r8
 80063ac:	d9b7      	bls.n	800631e <HAL_RCC_OscConfig+0x1fa>
 80063ae:	e6fc      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b8:	4d38      	ldr	r5, [pc, #224]	; (800649c <HAL_RCC_OscConfig+0x378>)
 80063ba:	68ab      	ldr	r3, [r5, #8]
 80063bc:	f003 030c 	and.w	r3, r3, #12
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d041      	beq.n	8006448 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80063c4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80063c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063cc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ce:	d12e      	bne.n	800642e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80063d0:	f7fe f810 	bl	80043f4 <HAL_GetTick>
 80063d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d6:	682b      	ldr	r3, [r5, #0]
 80063d8:	0199      	lsls	r1, r3, #6
 80063da:	d422      	bmi.n	8006422 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	1e5a      	subs	r2, r3, #1
 80063e2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80063e6:	430b      	orrs	r3, r1
 80063e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80063f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80063f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006404:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006406:	f7fd fff5 	bl	80043f4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640a:	4d24      	ldr	r5, [pc, #144]	; (800649c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 800640c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640e:	682b      	ldr	r3, [r5, #0]
 8006410:	019a      	lsls	r2, r3, #6
 8006412:	f53f ae9d 	bmi.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006416:	f7fd ffed 	bl	80043f4 <HAL_GetTick>
 800641a:	1b00      	subs	r0, r0, r4
 800641c:	2802      	cmp	r0, #2
 800641e:	d9f6      	bls.n	800640e <HAL_RCC_OscConfig+0x2ea>
 8006420:	e6c3      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006422:	f7fd ffe7 	bl	80043f4 <HAL_GetTick>
 8006426:	1b80      	subs	r0, r0, r6
 8006428:	2802      	cmp	r0, #2
 800642a:	d9d4      	bls.n	80063d6 <HAL_RCC_OscConfig+0x2b2>
 800642c:	e6bd      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800642e:	f7fd ffe1 	bl	80043f4 <HAL_GetTick>
 8006432:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	019b      	lsls	r3, r3, #6
 8006438:	f57f ae8a 	bpl.w	8006150 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fd ffda 	bl	80043f4 <HAL_GetTick>
 8006440:	1b00      	subs	r0, r0, r4
 8006442:	2802      	cmp	r0, #2
 8006444:	d9f6      	bls.n	8006434 <HAL_RCC_OscConfig+0x310>
 8006446:	e6b0      	b.n	80061aa <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006448:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800644a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644c:	f43f ae97 	beq.w	800617e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006454:	69e1      	ldr	r1, [r4, #28]
 8006456:	428a      	cmp	r2, r1
 8006458:	f47f ae91 	bne.w	800617e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800645c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006460:	6a21      	ldr	r1, [r4, #32]
 8006462:	428a      	cmp	r2, r1
 8006464:	f47f ae8b 	bne.w	800617e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006468:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800646c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800646e:	401a      	ands	r2, r3
 8006470:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006474:	f47f ae83 	bne.w	800617e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006478:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800647a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800647e:	0852      	lsrs	r2, r2, #1
 8006480:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006482:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006486:	f47f ae7a 	bne.w	800617e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800648a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800648e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006490:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006494:	f43f ae5c 	beq.w	8006150 <HAL_RCC_OscConfig+0x2c>
 8006498:	e671      	b.n	800617e <HAL_RCC_OscConfig+0x5a>
 800649a:	bf00      	nop
 800649c:	40023800 	.word	0x40023800

080064a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a0:	4913      	ldr	r1, [pc, #76]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80064a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a4:	688b      	ldr	r3, [r1, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d01b      	beq.n	80064e6 <HAL_RCC_GetSysClockFreq+0x46>
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d11b      	bne.n	80064ea <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064b4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064b6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80064c4:	bf1a      	itte	ne
 80064c6:	480b      	ldrne	r0, [pc, #44]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x54>)
 80064c8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ca:	480b      	ldreq	r0, [pc, #44]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80064cc:	fba1 0100 	umull	r0, r1, r1, r0
 80064d0:	f7fa fc5a 	bl	8000d88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80064dc:	3301      	adds	r3, #1
 80064de:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80064e0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80064e4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064e6:	4803      	ldr	r0, [pc, #12]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x54>)
 80064e8:	e7fc      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80064ea:	4803      	ldr	r0, [pc, #12]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80064ec:	e7fa      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x44>
 80064ee:	bf00      	nop
 80064f0:	40023800 	.word	0x40023800
 80064f4:	017d7840 	.word	0x017d7840
 80064f8:	00f42400 	.word	0x00f42400

080064fc <HAL_RCC_ClockConfig>:
{
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006502:	4604      	mov	r4, r0
 8006504:	b910      	cbnz	r0, 800650c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006506:	2001      	movs	r0, #1
}
 8006508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800650c:	4a46      	ldr	r2, [pc, #280]	; (8006628 <HAL_RCC_ClockConfig+0x12c>)
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	428b      	cmp	r3, r1
 8006516:	d328      	bcc.n	800656a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	0797      	lsls	r7, r2, #30
 800651c:	d430      	bmi.n	8006580 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800651e:	07d0      	lsls	r0, r2, #31
 8006520:	d444      	bmi.n	80065ac <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006522:	4a41      	ldr	r2, [pc, #260]	; (8006628 <HAL_RCC_ClockConfig+0x12c>)
 8006524:	6813      	ldr	r3, [r2, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	42ab      	cmp	r3, r5
 800652c:	d867      	bhi.n	80065fe <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	0751      	lsls	r1, r2, #29
 8006532:	d470      	bmi.n	8006616 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006534:	0713      	lsls	r3, r2, #28
 8006536:	d507      	bpl.n	8006548 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006538:	4a3c      	ldr	r2, [pc, #240]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 800653a:	6921      	ldr	r1, [r4, #16]
 800653c:	6893      	ldr	r3, [r2, #8]
 800653e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006542:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006546:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006548:	f7ff ffaa 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
 800654c:	4b37      	ldr	r3, [pc, #220]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 800654e:	4a38      	ldr	r2, [pc, #224]	; (8006630 <HAL_RCC_ClockConfig+0x134>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	40d8      	lsrs	r0, r3
 800655a:	4b36      	ldr	r3, [pc, #216]	; (8006634 <HAL_RCC_ClockConfig+0x138>)
 800655c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800655e:	4b36      	ldr	r3, [pc, #216]	; (8006638 <HAL_RCC_ClockConfig+0x13c>)
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	f7fd ff07 	bl	8004374 <HAL_InitTick>
  return HAL_OK;
 8006566:	2000      	movs	r0, #0
 8006568:	e7ce      	b.n	8006508 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	f023 030f 	bic.w	r3, r3, #15
 8006570:	430b      	orrs	r3, r1
 8006572:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	428b      	cmp	r3, r1
 800657c:	d1c3      	bne.n	8006506 <HAL_RCC_ClockConfig+0xa>
 800657e:	e7cb      	b.n	8006518 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006580:	f012 0f04 	tst.w	r2, #4
 8006584:	4b29      	ldr	r3, [pc, #164]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 8006586:	d003      	beq.n	8006590 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006588:	6899      	ldr	r1, [r3, #8]
 800658a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800658e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	0716      	lsls	r6, r2, #28
 8006592:	d503      	bpl.n	800659c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006594:	6899      	ldr	r1, [r3, #8]
 8006596:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800659a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800659c:	4923      	ldr	r1, [pc, #140]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 800659e:	68a0      	ldr	r0, [r4, #8]
 80065a0:	688b      	ldr	r3, [r1, #8]
 80065a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a6:	4303      	orrs	r3, r0
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	e7b8      	b.n	800651e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ac:	6861      	ldr	r1, [r4, #4]
 80065ae:	4b1f      	ldr	r3, [pc, #124]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 80065b0:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b2:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b4:	d11b      	bne.n	80065ee <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ba:	d0a4      	beq.n	8006506 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065bc:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065be:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4f1a      	ldr	r7, [pc, #104]	; (800662c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c4:	f022 0203 	bic.w	r2, r2, #3
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80065cc:	f7fd ff12 	bl	80043f4 <HAL_GetTick>
 80065d0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6862      	ldr	r2, [r4, #4]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80065de:	d0a0      	beq.n	8006522 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fd ff08 	bl	80043f4 <HAL_GetTick>
 80065e4:	1b80      	subs	r0, r0, r6
 80065e6:	4540      	cmp	r0, r8
 80065e8:	d9f3      	bls.n	80065d2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80065ea:	2003      	movs	r0, #3
 80065ec:	e78c      	b.n	8006508 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ee:	2902      	cmp	r1, #2
 80065f0:	d102      	bne.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80065f6:	e7e0      	b.n	80065ba <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f8:	f012 0f02 	tst.w	r2, #2
 80065fc:	e7dd      	b.n	80065ba <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	6813      	ldr	r3, [r2, #0]
 8006600:	f023 030f 	bic.w	r3, r3, #15
 8006604:	432b      	orrs	r3, r5
 8006606:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	42ab      	cmp	r3, r5
 8006610:	f47f af79 	bne.w	8006506 <HAL_RCC_ClockConfig+0xa>
 8006614:	e78b      	b.n	800652e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006616:	4905      	ldr	r1, [pc, #20]	; (800662c <HAL_RCC_ClockConfig+0x130>)
 8006618:	68e0      	ldr	r0, [r4, #12]
 800661a:	688b      	ldr	r3, [r1, #8]
 800661c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006620:	4303      	orrs	r3, r0
 8006622:	608b      	str	r3, [r1, #8]
 8006624:	e786      	b.n	8006534 <HAL_RCC_ClockConfig+0x38>
 8006626:	bf00      	nop
 8006628:	40023c00 	.word	0x40023c00
 800662c:	40023800 	.word	0x40023800
 8006630:	08017e4c 	.word	0x08017e4c
 8006634:	200000a0 	.word	0x200000a0
 8006638:	200000a8 	.word	0x200000a8

0800663c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800663c:	4b04      	ldr	r3, [pc, #16]	; (8006650 <HAL_RCC_GetPCLK1Freq+0x14>)
 800663e:	4a05      	ldr	r2, [pc, #20]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006646:	5cd3      	ldrb	r3, [r2, r3]
 8006648:	4a03      	ldr	r2, [pc, #12]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800664a:	6810      	ldr	r0, [r2, #0]
}
 800664c:	40d8      	lsrs	r0, r3
 800664e:	4770      	bx	lr
 8006650:	40023800 	.word	0x40023800
 8006654:	08017e5c 	.word	0x08017e5c
 8006658:	200000a0 	.word	0x200000a0

0800665c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x14>)
 800665e:	4a05      	ldr	r2, [pc, #20]	; (8006674 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006666:	5cd3      	ldrb	r3, [r2, r3]
 8006668:	4a03      	ldr	r2, [pc, #12]	; (8006678 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800666a:	6810      	ldr	r0, [r2, #0]
}
 800666c:	40d8      	lsrs	r0, r3
 800666e:	4770      	bx	lr
 8006670:	40023800 	.word	0x40023800
 8006674:	08017e5c 	.word	0x08017e5c
 8006678:	200000a0 	.word	0x200000a0

0800667c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800667c:	6803      	ldr	r3, [r0, #0]
{
 800667e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006682:	f013 0601 	ands.w	r6, r3, #1
{
 8006686:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006688:	d00b      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800668a:	4aaa      	ldr	r2, [pc, #680]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800668c:	6891      	ldr	r1, [r2, #8]
 800668e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006692:	6091      	str	r1, [r2, #8]
 8006694:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006696:	6891      	ldr	r1, [r2, #8]
 8006698:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800669a:	fab6 f686 	clz	r6, r6
 800669e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80066a0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80066a2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80066a6:	d012      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a8:	49a2      	ldr	r1, [pc, #648]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066aa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80066ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80066b0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80066b8:	bf08      	it	eq
 80066ba:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066bc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066c0:	bf16      	itet	ne
 80066c2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80066c6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80066c8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066ca:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80066ce:	02d8      	lsls	r0, r3, #11
 80066d0:	d510      	bpl.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066d2:	4898      	ldr	r0, [pc, #608]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80066d6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066da:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066de:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80066e2:	ea42 0201 	orr.w	r2, r2, r1
 80066e6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066ea:	f000 8184 	beq.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80066ee:	2900      	cmp	r1, #0
 80066f0:	bf08      	it	eq
 80066f2:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80066f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80066f8:	bf18      	it	ne
 80066fa:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	d531      	bpl.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006700:	4b8c      	ldr	r3, [pc, #560]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006702:	4f8d      	ldr	r7, [pc, #564]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006706:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fd fe69 	bl	80043f4 <HAL_GetTick>
 8006722:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	05da      	lsls	r2, r3, #23
 8006728:	f140 8167 	bpl.w	80069fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672c:	4f81      	ldr	r7, [pc, #516]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800672e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006730:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006734:	f040 816c 	bne.w	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800673a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800673e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006742:	4a7c      	ldr	r2, [pc, #496]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006744:	f040 818a 	bne.w	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006748:	6891      	ldr	r1, [r2, #8]
 800674a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800674e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006752:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006756:	4301      	orrs	r1, r0
 8006758:	6091      	str	r1, [r2, #8]
 800675a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006760:	430b      	orrs	r3, r1
 8006762:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	06d9      	lsls	r1, r3, #27
 8006768:	d50c      	bpl.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800676a:	4a72      	ldr	r2, [pc, #456]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800676c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006770:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006774:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006778:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800677c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800677e:	4301      	orrs	r1, r0
 8006780:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006784:	045a      	lsls	r2, r3, #17
 8006786:	d508      	bpl.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006788:	496a      	ldr	r1, [pc, #424]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800678a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800678c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006790:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006794:	4302      	orrs	r2, r0
 8006796:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800679a:	041f      	lsls	r7, r3, #16
 800679c:	d508      	bpl.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800679e:	4965      	ldr	r1, [pc, #404]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067a0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80067a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067a6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80067aa:	4302      	orrs	r2, r0
 80067ac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067b0:	03d8      	lsls	r0, r3, #15
 80067b2:	d508      	bpl.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067b4:	495f      	ldr	r1, [pc, #380]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80067b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067c0:	4302      	orrs	r2, r0
 80067c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067c6:	0399      	lsls	r1, r3, #14
 80067c8:	d508      	bpl.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067ca:	495a      	ldr	r1, [pc, #360]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80067ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067d2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80067d6:	4302      	orrs	r2, r0
 80067d8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067dc:	065a      	lsls	r2, r3, #25
 80067de:	d508      	bpl.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067e0:	4954      	ldr	r1, [pc, #336]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80067e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067e8:	f022 0203 	bic.w	r2, r2, #3
 80067ec:	4302      	orrs	r2, r0
 80067ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067f2:	061f      	lsls	r7, r3, #24
 80067f4:	d508      	bpl.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067f6:	494f      	ldr	r1, [pc, #316]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80067fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80067fe:	f022 020c 	bic.w	r2, r2, #12
 8006802:	4302      	orrs	r2, r0
 8006804:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006808:	05d8      	lsls	r0, r3, #23
 800680a:	d508      	bpl.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800680c:	4949      	ldr	r1, [pc, #292]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800680e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006810:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006814:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006818:	4302      	orrs	r2, r0
 800681a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800681e:	0599      	lsls	r1, r3, #22
 8006820:	d508      	bpl.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006822:	4944      	ldr	r1, [pc, #272]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006824:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006826:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800682a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800682e:	4302      	orrs	r2, r0
 8006830:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006834:	055a      	lsls	r2, r3, #21
 8006836:	d508      	bpl.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006838:	493e      	ldr	r1, [pc, #248]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800683a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800683c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006840:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006844:	4302      	orrs	r2, r0
 8006846:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800684a:	051f      	lsls	r7, r3, #20
 800684c:	d508      	bpl.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800684e:	4939      	ldr	r1, [pc, #228]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006852:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006856:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800685a:	4302      	orrs	r2, r0
 800685c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006860:	04d8      	lsls	r0, r3, #19
 8006862:	d508      	bpl.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006864:	4933      	ldr	r1, [pc, #204]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006866:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006868:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800686c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006870:	4302      	orrs	r2, r0
 8006872:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006876:	0499      	lsls	r1, r3, #18
 8006878:	d508      	bpl.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800687a:	492e      	ldr	r1, [pc, #184]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800687c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800687e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006882:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006886:	4302      	orrs	r2, r0
 8006888:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800688c:	025a      	lsls	r2, r3, #9
 800688e:	d508      	bpl.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006890:	4928      	ldr	r1, [pc, #160]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006892:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006894:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006898:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800689c:	4302      	orrs	r2, r0
 800689e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068a2:	029f      	lsls	r7, r3, #10
 80068a4:	d50c      	bpl.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068a6:	4823      	ldr	r0, [pc, #140]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068a8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80068aa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80068ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068b2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80068b6:	bf08      	it	eq
 80068b8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068ba:	430a      	orrs	r2, r1
 80068bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80068c0:	f013 0f08 	tst.w	r3, #8
 80068c4:	bf18      	it	ne
 80068c6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068c8:	0358      	lsls	r0, r3, #13
 80068ca:	d508      	bpl.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068cc:	4919      	ldr	r1, [pc, #100]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068ce:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80068d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80068d8:	4302      	orrs	r2, r0
 80068da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068de:	0219      	lsls	r1, r3, #8
 80068e0:	d509      	bpl.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068e2:	4914      	ldr	r1, [pc, #80]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068e4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80068e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80068ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068f0:	4302      	orrs	r2, r0
 80068f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068f6:	2e01      	cmp	r6, #1
 80068f8:	f000 80b4 	beq.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80068fc:	019a      	lsls	r2, r3, #6
 80068fe:	f100 80b1 	bmi.w	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006902:	2d01      	cmp	r5, #1
 8006904:	d175      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006906:	4d0b      	ldr	r5, [pc, #44]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006910:	f7fd fd70 	bl	80043f4 <HAL_GetTick>
 8006914:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	009f      	lsls	r7, r3, #2
 800691a:	f100 8127 	bmi.w	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	0316      	lsls	r6, r2, #12
 8006922:	d501      	bpl.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8006924:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006926:	b14b      	cbz	r3, 800693c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006928:	02d0      	lsls	r0, r2, #11
 800692a:	d522      	bpl.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800692c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800692e:	bb03      	cbnz	r3, 8006972 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006930:	e004      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006932:	bf00      	nop
 8006934:	40023800 	.word	0x40023800
 8006938:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800693c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006940:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006948:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800694c:	430b      	orrs	r3, r1
 800694e:	6961      	ldr	r1, [r4, #20]
 8006950:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006954:	69a1      	ldr	r1, [r4, #24]
 8006956:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800695a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800695e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8006962:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006964:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006968:	3901      	subs	r1, #1
 800696a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800696e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006972:	0291      	lsls	r1, r2, #10
 8006974:	d515      	bpl.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006976:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697c:	d111      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800697e:	4982      	ldr	r1, [pc, #520]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006980:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006984:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006988:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800698c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006990:	4303      	orrs	r3, r0
 8006992:	6960      	ldr	r0, [r4, #20]
 8006994:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006998:	6a20      	ldr	r0, [r4, #32]
 800699a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800699e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80069a2:	0712      	lsls	r2, r2, #28
 80069a4:	d519      	bpl.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80069a6:	4a78      	ldr	r2, [pc, #480]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069b0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80069b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069b8:	430b      	orrs	r3, r1
 80069ba:	6961      	ldr	r1, [r4, #20]
 80069bc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80069c0:	69e1      	ldr	r1, [r4, #28]
 80069c2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80069c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80069ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80069d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80069d4:	430b      	orrs	r3, r1
 80069d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069da:	4c6b      	ldr	r4, [pc, #428]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e4:	f7fd fd06 	bl	80043f4 <HAL_GetTick>
 80069e8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	f140 80c4 	bpl.w	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80069f2:	2000      	movs	r0, #0
 80069f4:	e009      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80069f6:	2601      	movs	r6, #1
 80069f8:	e67c      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fa:	f7fd fcfb 	bl	80043f4 <HAL_GetTick>
 80069fe:	eba0 0008 	sub.w	r0, r0, r8
 8006a02:	2864      	cmp	r0, #100	; 0x64
 8006a04:	f67f ae8e 	bls.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006a08:	2003      	movs	r0, #3
}
 8006a0a:	b003      	add	sp, #12
 8006a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a12:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006a16:	4293      	cmp	r3, r2
 8006a18:	f43f ae8e 	beq.w	8006738 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a28:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a30:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006a32:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a36:	07db      	lsls	r3, r3, #31
 8006a38:	f57f ae7e 	bpl.w	8006738 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8006a3c:	f7fd fcda 	bl	80043f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a40:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006a44:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a48:	0798      	lsls	r0, r3, #30
 8006a4a:	f53f ae75 	bmi.w	8006738 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a4e:	f7fd fcd1 	bl	80043f4 <HAL_GetTick>
 8006a52:	eba0 0008 	sub.w	r0, r0, r8
 8006a56:	4548      	cmp	r0, r9
 8006a58:	d9f5      	bls.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006a5a:	e7d5      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a5c:	6891      	ldr	r1, [r2, #8]
 8006a5e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a62:	e679      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006a64:	4e48      	ldr	r6, [pc, #288]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a6c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006a6e:	f7fd fcc1 	bl	80043f4 <HAL_GetTick>
 8006a72:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	d472      	bmi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	07d7      	lsls	r7, r2, #31
 8006a7e:	d512      	bpl.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a82:	b983      	cbnz	r3, 8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a84:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a88:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a90:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6861      	ldr	r1, [r4, #4]
 8006a98:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006a9c:	68a1      	ldr	r1, [r4, #8]
 8006a9e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006aa2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006aa6:	0316      	lsls	r6, r2, #12
 8006aa8:	d503      	bpl.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab0:	d005      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006ab2:	02d0      	lsls	r0, r2, #11
 8006ab4:	d51e      	bpl.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006abc:	d11a      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006abe:	4932      	ldr	r1, [pc, #200]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ac0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ac4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006acc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006ad0:	4303      	orrs	r3, r0
 8006ad2:	6860      	ldr	r0, [r4, #4]
 8006ad4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006ad8:	68e0      	ldr	r0, [r4, #12]
 8006ada:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ae2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae8:	f020 001f 	bic.w	r0, r0, #31
 8006aec:	3b01      	subs	r3, #1
 8006aee:	4303      	orrs	r3, r0
 8006af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006af4:	01d1      	lsls	r1, r2, #7
 8006af6:	d511      	bpl.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006af8:	4923      	ldr	r1, [pc, #140]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006afa:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006afe:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b02:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006b06:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006b0a:	4303      	orrs	r3, r0
 8006b0c:	6860      	ldr	r0, [r4, #4]
 8006b0e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006b12:	6920      	ldr	r0, [r4, #16]
 8006b14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b1c:	0192      	lsls	r2, r2, #6
 8006b1e:	d50d      	bpl.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	6862      	ldr	r2, [r4, #4]
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006b2a:	68e2      	ldr	r2, [r4, #12]
 8006b2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b30:	68a2      	ldr	r2, [r4, #8]
 8006b32:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006b36:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006b3c:	4e12      	ldr	r6, [pc, #72]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b3e:	6833      	ldr	r3, [r6, #0]
 8006b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b44:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006b46:	f7fd fc55 	bl	80043f4 <HAL_GetTick>
 8006b4a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	f53f aed7 	bmi.w	8006902 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b54:	f7fd fc4e 	bl	80043f4 <HAL_GetTick>
 8006b58:	1bc0      	subs	r0, r0, r7
 8006b5a:	2864      	cmp	r0, #100	; 0x64
 8006b5c:	d9f6      	bls.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006b5e:	e753      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b60:	f7fd fc48 	bl	80043f4 <HAL_GetTick>
 8006b64:	1bc0      	subs	r0, r0, r7
 8006b66:	2864      	cmp	r0, #100	; 0x64
 8006b68:	d984      	bls.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b6a:	e74d      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b6c:	f7fd fc42 	bl	80043f4 <HAL_GetTick>
 8006b70:	1b80      	subs	r0, r0, r6
 8006b72:	2864      	cmp	r0, #100	; 0x64
 8006b74:	f67f aecf 	bls.w	8006916 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006b78:	e746      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b7a:	f7fd fc3b 	bl	80043f4 <HAL_GetTick>
 8006b7e:	1b40      	subs	r0, r0, r5
 8006b80:	2864      	cmp	r0, #100	; 0x64
 8006b82:	f67f af32 	bls.w	80069ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006b86:	e73f      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006b88:	40023800 	.word	0x40023800

08006b8c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006b8c:	4b53      	ldr	r3, [pc, #332]	; (8006cdc <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 8006b8e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006b90:	4b53      	ldr	r3, [pc, #332]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8006b92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006b96:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006b9a:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006ba0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006ba4:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ba6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006baa:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006bae:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bb0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006bb4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006bb8:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bbe:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006bc2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bc8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006bcc:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bd2:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006bd6:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bdc:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006be0:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006be2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006be6:	f002 021f 	and.w	r2, r2, #31
 8006bea:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006bec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bf0:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8006bf4:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006bf6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bfa:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006bfe:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006c00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c04:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006c08:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8006c0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c0e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006c12:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006c1a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8006c1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c20:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8006c24:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006c26:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c2a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8006c2e:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006c30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c34:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006c38:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8006c3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c3e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006c42:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006c44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c48:	f002 0203 	and.w	r2, r2, #3
 8006c4c:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8006c4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c52:	f002 020c 	and.w	r2, r2, #12
 8006c56:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006c58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c5c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006c60:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006c62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c66:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006c6a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006c6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006c74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006c76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c7a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006c7e:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006c80:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c84:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006c88:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006c8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c8e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8006c92:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006c98:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8006c9c:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8006c9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ca2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8006ca6:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006ca8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cac:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006cb0:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006cb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cb6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006cba:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006cbe:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006cc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006cc2:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006cc6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8006cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cd6:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	00fffff1 	.word	0x00fffff1
 8006ce0:	40023800 	.word	0x40023800

08006ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ce4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006ce8:	d13e      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006cea:	4b2c      	ldr	r3, [pc, #176]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006cec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006cf0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8006cf4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006cf8:	d044      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8006cfa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8006cfe:	d049      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8006d00:	2a00      	cmp	r2, #0
 8006d02:	d149      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d04:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d06:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d08:	0251      	lsls	r1, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d0a:	4a24      	ldr	r2, [pc, #144]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d10:	bf54      	ite	pl
 8006d12:	4823      	ldrpl	r0, [pc, #140]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d14:	4823      	ldrmi	r0, [pc, #140]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d16:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d1a:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d1e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8006d22:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006d26:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d28:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d2c:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d30:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006d34:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8006d38:	e012      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d3a:	481a      	ldr	r0, [pc, #104]	; (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d3c:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d3e:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d42:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d46:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8006d4a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006d4e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d50:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006d54:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006d58:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8006d62:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8006d66:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006d68:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8006d6c:	d114      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    saiclocksource = RCC->DCKCFGR1;
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006d74:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8006d78:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006d7c:	d002      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8006d7e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006d82:	e7bc      	b.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d84:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d86:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d88:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d8e:	d4d4      	bmi.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d90:	4803      	ldr	r0, [pc, #12]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d92:	e7d3      	b.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d94:	4804      	ldr	r0, [pc, #16]	; (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8006d96:	4770      	bx	lr
    switch (saiclocksource)
 8006d98:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8006d9a:	4770      	bx	lr
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	00f42400 	.word	0x00f42400
 8006da4:	017d7840 	.word	0x017d7840
 8006da8:	00bb8000 	.word	0x00bb8000

08006dac <SAI_InterruptFlag>:
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
 8006dac:	2901      	cmp	r1, #1
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006dae:	6b01      	ldr	r1, [r0, #48]	; 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006db0:	6842      	ldr	r2, [r0, #4]
    tmpIT |= SAI_IT_FREQ;
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2309      	moveq	r3, #9
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006db8:	2908      	cmp	r1, #8
 8006dba:	d105      	bne.n	8006dc8 <SAI_InterruptFlag+0x1c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006dbc:	f022 0102 	bic.w	r1, r2, #2
 8006dc0:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8006dc2:	bf08      	it	eq
 8006dc4:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006dc8:	3a02      	subs	r2, #2
 8006dca:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006dcc:	bf94      	ite	ls
 8006dce:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006dd2:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8006dd6:	4770      	bx	lr

08006dd8 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <SAI_Disable.isra.0+0x34>)
 8006dda:	f641 3258 	movw	r2, #7000	; 0x1b58
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006de4:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006de6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006dee:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006df0:	3b01      	subs	r3, #1
 8006df2:	d206      	bcs.n	8006e02 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006df4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8006e00:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006e02:	6811      	ldr	r1, [r2, #0]
 8006e04:	03c9      	lsls	r1, r1, #15
 8006e06:	d4f3      	bmi.n	8006df0 <SAI_Disable.isra.0+0x18>

  return status;
}
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	200000a0 	.word	0x200000a0

08006e10 <HAL_SAI_MspInit>:
}
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_SAI_Init>:
{
 8006e14:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8006e16:	4604      	mov	r4, r0
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f000 80cc 	beq.w	8006fb6 <HAL_SAI_Init+0x1a2>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8006e1e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006e22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e26:	b91b      	cbnz	r3, 8006e30 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8006e28:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8006e2c:	f7ff fff0 	bl	8006e10 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e30:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8006e32:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8006e34:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8006e38:	f7ff ffce 	bl	8006dd8 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 8006e3c:	68e3      	ldr	r3, [r4, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	f000 80a7 	beq.w	8006f92 <HAL_SAI_Init+0x17e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	bf14      	ite	ne
 8006e48:	2300      	movne	r3, #0
 8006e4a:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8006e4c:	68a2      	ldr	r2, [r4, #8]
 8006e4e:	2a02      	cmp	r2, #2
 8006e50:	f000 80a3 	beq.w	8006f9a <HAL_SAI_Init+0x186>
 8006e54:	2a03      	cmp	r2, #3
 8006e56:	f000 809e 	beq.w	8006f96 <HAL_SAI_Init+0x182>
 8006e5a:	2a01      	cmp	r2, #1
 8006e5c:	bf14      	ite	ne
 8006e5e:	2500      	movne	r5, #0
 8006e60:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e64:	6822      	ldr	r2, [r4, #0]
 8006e66:	4955      	ldr	r1, [pc, #340]	; (8006fbc <HAL_SAI_Init+0x1a8>)
 8006e68:	4855      	ldr	r0, [pc, #340]	; (8006fc0 <HAL_SAI_Init+0x1ac>)
 8006e6a:	428a      	cmp	r2, r1
 8006e6c:	d003      	beq.n	8006e76 <HAL_SAI_Init+0x62>
 8006e6e:	4e55      	ldr	r6, [pc, #340]	; (8006fc4 <HAL_SAI_Init+0x1b0>)
 8006e70:	42b2      	cmp	r2, r6
 8006e72:	f040 8095 	bne.w	8006fa0 <HAL_SAI_Init+0x18c>
    SAI1->GCR = tmpregisterGCR;
 8006e76:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006e7a:	69e3      	ldr	r3, [r4, #28]
 8006e7c:	b343      	cbz	r3, 8006ed0 <HAL_SAI_Init+0xbc>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006e7e:	428a      	cmp	r2, r1
 8006e80:	d003      	beq.n	8006e8a <HAL_SAI_Init+0x76>
 8006e82:	4b50      	ldr	r3, [pc, #320]	; (8006fc4 <HAL_SAI_Init+0x1b0>)
 8006e84:	429a      	cmp	r2, r3
 8006e86:	f040 808e 	bne.w	8006fa6 <HAL_SAI_Init+0x192>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006e8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006e8e:	f7ff ff29 	bl	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4a4c      	ldr	r2, [pc, #304]	; (8006fc8 <HAL_SAI_Init+0x1b4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d002      	beq.n	8006ea0 <HAL_SAI_Init+0x8c>
 8006e9a:	3220      	adds	r2, #32
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d103      	bne.n	8006ea8 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006ea0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ea4:	f7ff ff1e 	bl	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	69e3      	ldr	r3, [r4, #28]
 8006eac:	4350      	muls	r0, r2
 8006eae:	025b      	lsls	r3, r3, #9
 8006eb0:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8006eb4:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 8006eb8:	fb02 0013 	mls	r0, r2, r3, r0
 8006ebc:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8006ebe:	bf08      	it	eq
 8006ec0:	3301      	addeq	r3, #1
 8006ec2:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ec6:	2b04      	cmp	r3, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006ec8:	bf02      	ittt	eq
 8006eca:	6a23      	ldreq	r3, [r4, #32]
 8006ecc:	085b      	lsreq	r3, r3, #1
 8006ece:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ed0:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006ed2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ed4:	f033 0102 	bics.w	r1, r3, #2
 8006ed8:	d167      	bne.n	8006faa <HAL_SAI_Init+0x196>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006eda:	2a01      	cmp	r2, #1
 8006edc:	bf18      	it	ne
 8006ede:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	4839      	ldr	r0, [pc, #228]	; (8006fcc <HAL_SAI_Init+0x1b8>)
 8006ee6:	6816      	ldr	r6, [r2, #0]
 8006ee8:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006eea:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006eec:	4333      	orrs	r3, r6
 8006eee:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006ef0:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ef2:	4333      	orrs	r3, r6
 8006ef4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006ef6:	6810      	ldr	r0, [r2, #0]
 8006ef8:	4333      	orrs	r3, r6
 8006efa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006efc:	4333      	orrs	r3, r6
 8006efe:	6926      	ldr	r6, [r4, #16]
 8006f00:	4333      	orrs	r3, r6
 8006f02:	6966      	ldr	r6, [r4, #20]
 8006f04:	4333      	orrs	r3, r6
 8006f06:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006f08:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f0a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006f0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006f10:	432b      	orrs	r3, r5
 8006f12:	430b      	orrs	r3, r1
 8006f14:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006f16:	6853      	ldr	r3, [r2, #4]
 8006f18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006f1c:	f023 030f 	bic.w	r3, r3, #15
 8006f20:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006f22:	69a3      	ldr	r3, [r4, #24]
 8006f24:	6851      	ldr	r1, [r2, #4]
 8006f26:	4303      	orrs	r3, r0
 8006f28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006f2a:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006f2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006f32:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <HAL_SAI_Init+0x1bc>)
 8006f34:	6891      	ldr	r1, [r2, #8]
 8006f36:	400b      	ands	r3, r1
 8006f38:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006f3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f3c:	6891      	ldr	r1, [r2, #8]
 8006f3e:	4303      	orrs	r3, r0
 8006f40:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f42:	4303      	orrs	r3, r0
 8006f44:	430b      	orrs	r3, r1
 8006f46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f48:	3901      	subs	r1, #1
 8006f4a:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006f4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f4e:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006f50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f54:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006f56:	68d3      	ldr	r3, [r2, #12]
 8006f58:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8006f5c:	f023 030f 	bic.w	r3, r3, #15
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f66:	68d1      	ldr	r1, [r2, #12]
 8006f68:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8006f6c:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f6e:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f70:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006f72:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006f78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f7a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f80:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8006f82:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f84:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8006f88:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8006f8c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8006f92:	2310      	movs	r3, #16
 8006f94:	e75a      	b.n	8006e4c <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006f96:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006f9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006f9e:	e761      	b.n	8006e64 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8006fa0:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 8006fa4:	e769      	b.n	8006e7a <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e773      	b.n	8006e92 <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	bf14      	ite	ne
 8006fae:	2100      	movne	r1, #0
 8006fb0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8006fb4:	e795      	b.n	8006ee2 <HAL_SAI_Init+0xce>
    return HAL_ERROR;
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	e7ea      	b.n	8006f90 <HAL_SAI_Init+0x17c>
 8006fba:	bf00      	nop
 8006fbc:	40015804 	.word	0x40015804
 8006fc0:	40015000 	.word	0x40015000
 8006fc4:	40015824 	.word	0x40015824
 8006fc8:	40015c04 	.word	0x40015c04
 8006fcc:	ff05c010 	.word	0xff05c010
 8006fd0:	fff88000 	.word	0xfff88000

08006fd4 <HAL_SAI_MspDeInit>:
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_SAI_DeInit>:
{
 8006fd6:	b538      	push	{r3, r4, r5, lr}
  if (hsai == NULL)
 8006fd8:	4604      	mov	r4, r0
 8006fda:	b1c8      	cbz	r0, 8007010 <HAL_SAI_DeInit+0x3a>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006fdc:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8006fde:	2500      	movs	r5, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006fe0:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 8006fe4:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8006fe8:	6803      	ldr	r3, [r0, #0]
 8006fea:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006fec:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8006fee:	f7ff fef3 	bl	8006dd8 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006ff2:	6802      	ldr	r2, [r0, #0]
 8006ff4:	6853      	ldr	r3, [r2, #4]
 8006ff6:	f043 0308 	orr.w	r3, r3, #8
 8006ffa:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8006ffc:	f7ff ffea 	bl	8006fd4 <HAL_SAI_MspDeInit>
  return HAL_OK;
 8007000:	4628      	mov	r0, r5
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007002:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8007006:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 800700a:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
}
 800700e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007010:	2001      	movs	r0, #1
 8007012:	e7fc      	b.n	800700e <HAL_SAI_DeInit+0x38>

08007014 <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 8007014:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d009      	beq.n	8007030 <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800701c:	6802      	ldr	r2, [r0, #0]
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007024:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hsai);
 8007026:	2300      	movs	r3, #0
 8007028:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800702c:	4618      	mov	r0, r3
 800702e:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8007030:	2002      	movs	r0, #2
}
 8007032:	4770      	bx	lr

08007034 <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 8007034:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d010      	beq.n	800705e <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800703c:	6803      	ldr	r3, [r0, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007044:	601a      	str	r2, [r3, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	03d2      	lsls	r2, r2, #15
 800704a:	d403      	bmi.n	8007054 <HAL_SAI_DMAResume+0x20>
    __HAL_SAI_ENABLE(hsai);
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007052:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hsai);
 8007054:	2300      	movs	r3, #0
 8007056:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 800705a:	4618      	mov	r0, r3
 800705c:	4770      	bx	lr
  __HAL_LOCK(hsai);
 800705e:	2002      	movs	r0, #2
}
 8007060:	4770      	bx	lr

08007062 <HAL_SAI_DMAStop>:
{
 8007062:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8007064:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8007068:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 800706a:	2b01      	cmp	r3, #1
 800706c:	d041      	beq.n	80070f2 <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800706e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8007070:	2501      	movs	r5, #1
 8007072:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007076:	6813      	ldr	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007078:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800707a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800707e:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007080:	bb20      	cbnz	r0, 80070cc <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007084:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007086:	b188      	cbz	r0, 80070ac <HAL_SAI_DMAStop+0x4a>
 8007088:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800708c:	2b22      	cmp	r3, #34	; 0x22
 800708e:	d10d      	bne.n	80070ac <HAL_SAI_DMAStop+0x4a>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007090:	f7fd fb89 	bl	80047a6 <HAL_DMA_Abort>
 8007094:	b150      	cbz	r0, 80070ac <HAL_SAI_DMAStop+0x4a>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007096:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	d006      	beq.n	80070ac <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800709e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80070a2:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80070a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7ff fe93 	bl	8006dd8 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	6853      	ldr	r3, [r2, #4]
 80070b6:	f043 0308 	orr.w	r3, r3, #8
 80070ba:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80070bc:	2301      	movs	r3, #1
 80070be:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80070c2:	2300      	movs	r3, #0
 80070c4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80070c8:	4628      	mov	r0, r5
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80070cc:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80070d0:	2b12      	cmp	r3, #18
 80070d2:	d1d6      	bne.n	8007082 <HAL_SAI_DMAStop+0x20>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80070d4:	f7fd fb67 	bl	80047a6 <HAL_DMA_Abort>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0d2      	beq.n	8007082 <HAL_SAI_DMAStop+0x20>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80070dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d0ce      	beq.n	8007082 <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80070e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80070f0:	e7c8      	b.n	8007084 <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 80070f2:	2502      	movs	r5, #2
 80070f4:	e7e8      	b.n	80070c8 <HAL_SAI_DMAStop+0x66>
	...

080070f8 <HAL_SAI_Transmit_DMA>:
{
 80070f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070fc:	460f      	mov	r7, r1
 80070fe:	4604      	mov	r4, r0
 8007100:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8007102:	f7fd f977 	bl	80043f4 <HAL_GetTick>
 8007106:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0))
 8007108:	2f00      	cmp	r7, #0
 800710a:	d059      	beq.n	80071c0 <HAL_SAI_Transmit_DMA+0xc8>
 800710c:	2e00      	cmp	r6, #0
 800710e:	d057      	beq.n	80071c0 <HAL_SAI_Transmit_DMA+0xc8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8007110:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8007114:	2b01      	cmp	r3, #1
 8007116:	b2dd      	uxtb	r5, r3
 8007118:	d154      	bne.n	80071c4 <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
 800711a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d050      	beq.n	80071c4 <HAL_SAI_Transmit_DMA+0xcc>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007122:	f04f 0900 	mov.w	r9, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007126:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007128:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800712a:	4639      	mov	r1, r7
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800712c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007130:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <HAL_SAI_Transmit_DMA+0xd0>)
    __HAL_LOCK(hsai);
 8007136:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 800713a:	6667      	str	r7, [r4, #100]	; 0x64
    hsai->XferSize = Size;
 800713c:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
    hsai->XferCount = Size;
 8007140:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007144:	6403      	str	r3, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007148:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800714a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800714c:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <HAL_SAI_Transmit_DMA+0xd8>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800714e:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8007150:	e9c0 3913 	strd	r3, r9, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007154:	4633      	mov	r3, r6
 8007156:	f7fd fae9 	bl	800472c <HAL_DMA_Start_IT>
 800715a:	4601      	mov	r1, r0
 800715c:	b120      	cbz	r0, 8007168 <HAL_SAI_Transmit_DMA+0x70>
      __HAL_UNLOCK(hsai);
 800715e:	f884 907c 	strb.w	r9, [r4, #124]	; 0x7c
}
 8007162:	4628      	mov	r0, r5
 8007164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fe1f 	bl	8006dac <SAI_InterruptFlag>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	691a      	ldr	r2, [r3, #16]
 8007172:	4310      	orrs	r0, r2
 8007174:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800717c:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	695d      	ldr	r5, [r3, #20]
 8007182:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8007186:	d00a      	beq.n	800719e <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	03d2      	lsls	r2, r2, #15
 800718c:	d403      	bmi.n	8007196 <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007194:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8007196:	2500      	movs	r5, #0
 8007198:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 800719c:	e7e1      	b.n	8007162 <HAL_SAI_Transmit_DMA+0x6a>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800719e:	f7fd f929 	bl	80043f4 <HAL_GetTick>
 80071a2:	eba0 0008 	sub.w	r0, r0, r8
 80071a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071aa:	d9e8      	bls.n	800717e <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(hsai);
 80071b0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 80071b4:	2503      	movs	r5, #3
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80071b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 80071be:	e7d0      	b.n	8007162 <HAL_SAI_Transmit_DMA+0x6a>
    return  HAL_ERROR;
 80071c0:	2501      	movs	r5, #1
 80071c2:	e7ce      	b.n	8007162 <HAL_SAI_Transmit_DMA+0x6a>
    return HAL_BUSY;
 80071c4:	2502      	movs	r5, #2
 80071c6:	e7cc      	b.n	8007162 <HAL_SAI_Transmit_DMA+0x6a>
 80071c8:	080072ad 	.word	0x080072ad
 80071cc:	08007275 	.word	0x08007275
 80071d0:	080072f9 	.word	0x080072f9

080071d4 <HAL_SAI_Receive_DMA>:
{
 80071d4:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 80071d6:	460a      	mov	r2, r1
{
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 80071dc:	2900      	cmp	r1, #0
 80071de:	d03f      	beq.n	8007260 <HAL_SAI_Receive_DMA+0x8c>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d03d      	beq.n	8007260 <HAL_SAI_Receive_DMA+0x8c>
  if (hsai->State == HAL_SAI_STATE_READY)
 80071e4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
 80071e8:	2901      	cmp	r1, #1
 80071ea:	b2cd      	uxtb	r5, r1
 80071ec:	d13a      	bne.n	8007264 <HAL_SAI_Receive_DMA+0x90>
    __HAL_LOCK(hsai);
 80071ee:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 80071f2:	2901      	cmp	r1, #1
 80071f4:	d036      	beq.n	8007264 <HAL_SAI_Receive_DMA+0x90>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80071f6:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80071f8:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 80071fa:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80071fe:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 8007202:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007204:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 8007208:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800720c:	4916      	ldr	r1, [pc, #88]	; (8007268 <HAL_SAI_Receive_DMA+0x94>)
    hsai->XferCount = Size;
 800720e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007212:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8007214:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007216:	4915      	ldr	r1, [pc, #84]	; (800726c <HAL_SAI_Receive_DMA+0x98>)
 8007218:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800721a:	4915      	ldr	r1, [pc, #84]	; (8007270 <HAL_SAI_Receive_DMA+0x9c>)
    hsai->hdmarx->XferAbortCallback = NULL;
 800721c:	e9c0 1613 	strd	r1, r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007220:	6821      	ldr	r1, [r4, #0]
 8007222:	311c      	adds	r1, #28
 8007224:	f7fd fa82 	bl	800472c <HAL_DMA_Start_IT>
 8007228:	4601      	mov	r1, r0
 800722a:	b118      	cbz	r0, 8007234 <HAL_SAI_Receive_DMA+0x60>
      __HAL_UNLOCK(hsai);
 800722c:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
}
 8007230:	4628      	mov	r0, r5
 8007232:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007234:	4620      	mov	r0, r4
 8007236:	f7ff fdb9 	bl	8006dac <SAI_InterruptFlag>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	4310      	orrs	r0, r2
 8007240:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007248:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	03d2      	lsls	r2, r2, #15
 800724e:	d403      	bmi.n	8007258 <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007256:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8007258:	2500      	movs	r5, #0
 800725a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    return HAL_OK;
 800725e:	e7e7      	b.n	8007230 <HAL_SAI_Receive_DMA+0x5c>
    return  HAL_ERROR;
 8007260:	2501      	movs	r5, #1
 8007262:	e7e5      	b.n	8007230 <HAL_SAI_Receive_DMA+0x5c>
    return HAL_BUSY;
 8007264:	2502      	movs	r5, #2
 8007266:	e7e3      	b.n	8007230 <HAL_SAI_Receive_DMA+0x5c>
 8007268:	080072ef 	.word	0x080072ef
 800726c:	080072b7 	.word	0x080072b7
 8007270:	080072f9 	.word	0x080072f9

08007274 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007274:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007276:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007278:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800727a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727e:	d011      	beq.n	80072a4 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007280:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8007282:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007284:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007286:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8007288:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800728c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007290:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007292:	f7ff fd8b 	bl	8006dac <SAI_InterruptFlag>
 8007296:	692b      	ldr	r3, [r5, #16]
 8007298:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 800729c:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800729e:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80072a0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7fa ff75 	bl	8002194 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80072aa:	bd38      	pop	{r3, r4, r5, pc}

080072ac <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80072ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80072ae:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 80072b0:	f7fa ff74 	bl	800219c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80072b4:	bd08      	pop	{r3, pc}

080072b6 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80072b6:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80072b8:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80072bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c0:	d011      	beq.n	80072e6 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80072c2:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 80072c4:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072c6:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072ce:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 80072d0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072d4:	f7ff fd6a 	bl	8006dac <SAI_InterruptFlag>
 80072d8:	692b      	ldr	r3, [r5, #16]
 80072da:	ea23 0000 	bic.w	r0, r3, r0

    hsai->State = HAL_SAI_STATE_READY;
 80072de:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80072e0:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80072e2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7fb f916 	bl	8002518 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80072ec:	bd38      	pop	{r3, r4, r5, pc}

080072ee <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80072ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80072f0:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 80072f2:	f7fb f915 	bl	8002520 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80072f6:	bd08      	pop	{r3, pc}

080072f8 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80072fa:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80072fc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8007300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007304:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007308:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730c:	2b01      	cmp	r3, #1
 800730e:	d003      	beq.n	8007318 <SAI_DMAError+0x20>
 8007310:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10c      	bne.n	8007332 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007320:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007322:	f7ff fd59 	bl	8006dd8 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007326:	2301      	movs	r3, #1
 8007328:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007332:	f7fb f8f9 	bl	8002528 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007336:	bd08      	pop	{r3, pc}

08007338 <HAL_SAI_GetState>:
  return hsai->State;
 8007338:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 800733c:	4770      	bx	lr

0800733e <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800733e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007340:	4605      	mov	r5, r0
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007346:	f7fd f855 	bl	80043f4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 800734a:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800734c:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800734e:	2108      	movs	r1, #8
 8007350:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8007352:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007356:	f001 fac9 	bl	80088ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800735a:	4604      	mov	r4, r0
 800735c:	b9d8      	cbnz	r0, 8007396 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800735e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8007360:	6828      	ldr	r0, [r5, #0]
 8007362:	0409      	lsls	r1, r1, #16
 8007364:	f001 fbb4 	bl	8008ad0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007368:	4604      	mov	r4, r0
 800736a:	b9a0      	cbnz	r0, 8007396 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007372:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007374:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007376:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8007378:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800737c:	2302      	movs	r3, #2
 800737e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007382:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007384:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007386:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007388:	f001 f9e6 	bl	8008758 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800738c:	6828      	ldr	r0, [r5, #0]
 800738e:	f001 fbcf 	bl	8008b30 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007392:	4604      	mov	r4, r0
 8007394:	b190      	cbz	r0, 80073bc <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8007396:	4620      	mov	r0, r4
 8007398:	b009      	add	sp, #36	; 0x24
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800739c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800739e:	0293      	lsls	r3, r2, #10
 80073a0:	d512      	bpl.n	80073c8 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80073a2:	f001 f9b3 	bl	800870c <SDMMC_ReadFIFO>
 80073a6:	ab08      	add	r3, sp, #32
 80073a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 80073ac:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80073ae:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073b2:	f7fd f81f 	bl	80043f4 <HAL_GetTick>
 80073b6:	1bc0      	subs	r0, r0, r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	d023      	beq.n	8007404 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80073bc:	6828      	ldr	r0, [r5, #0]
 80073be:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073c0:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80073c4:	d0ea      	beq.n	800739c <SD_FindSCR+0x5e>
 80073c6:	e002      	b.n	80073ce <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80073c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073ca:	0491      	lsls	r1, r2, #18
 80073cc:	d4f1      	bmi.n	80073b2 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80073ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073d0:	0712      	lsls	r2, r2, #28
 80073d2:	d502      	bpl.n	80073da <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80073d4:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80073d6:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80073d8:	e7dd      	b.n	8007396 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073dc:	0793      	lsls	r3, r2, #30
 80073de:	d501      	bpl.n	80073e4 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80073e0:	2402      	movs	r4, #2
 80073e2:	e7f8      	b.n	80073d6 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80073e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80073e6:	f014 0420 	ands.w	r4, r4, #32
 80073ea:	d001      	beq.n	80073f0 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80073ec:	2420      	movs	r4, #32
 80073ee:	e7f2      	b.n	80073d6 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80073f6:	ba1b      	rev	r3, r3
 80073f8:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80073fa:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80073fc:	9b00      	ldr	r3, [sp, #0]
 80073fe:	ba1b      	rev	r3, r3
 8007400:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8007402:	e7c8      	b.n	8007396 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8007404:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007408:	e7c5      	b.n	8007396 <SD_FindSCR+0x58>

0800740a <HAL_SD_MspInit>:
}
 800740a:	4770      	bx	lr

0800740c <HAL_SD_ReadBlocks>:
{
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	460d      	mov	r5, r1
 8007412:	b087      	sub	sp, #28
 8007414:	4604      	mov	r4, r0
 8007416:	4616      	mov	r6, r2
 8007418:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 800741a:	f7fc ffeb 	bl	80043f4 <HAL_GetTick>
 800741e:	4680      	mov	r8, r0
  if(NULL == pData)
 8007420:	b92d      	cbnz	r5, 800742e <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8007428:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800742a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800742c:	e010      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 800742e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8007432:	2b01      	cmp	r3, #1
 8007434:	b2df      	uxtb	r7, r3
 8007436:	f040 80df 	bne.w	80075f8 <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800743a:	eb06 030a 	add.w	r3, r6, sl
 800743e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007440:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007442:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007444:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007446:	d907      	bls.n	8007458 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800744a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800744e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007450:	4638      	mov	r0, r7
 8007452:	b007      	add	sp, #28
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8007458:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 800745a:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800745c:	2200      	movs	r2, #0
 800745e:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8007462:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007466:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800746a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800746c:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800746e:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007470:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007478:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 800747c:	bf18      	it	ne
 800747e:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007480:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007482:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007484:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007488:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800748c:	f001 f964 	bl	8008758 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8007490:	45da      	cmp	sl, fp
 8007492:	d912      	bls.n	80074ba <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007494:	4631      	mov	r1, r6
 8007496:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007498:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800749c:	f001 fa56 	bl	800894c <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80074a0:	b190      	cbz	r0, 80074c8 <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	4a56      	ldr	r2, [pc, #344]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80074a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074aa:	4318      	orrs	r0, r3
 80074ac:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80074ae:	2301      	movs	r3, #1
 80074b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80074b8:	e7ca      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074ba:	4631      	mov	r1, r6
 80074bc:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80074be:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074c2:	f001 fa2b 	bl	800891c <SDMMC_CmdReadSingleBlock>
 80074c6:	e7eb      	b.n	80074a0 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 80074c8:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80074ca:	6820      	ldr	r0, [r4, #0]
 80074cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80074ce:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80074d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80074d4:	d017      	beq.n	8007506 <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	d509      	bpl.n	80074ee <HAL_SD_ReadBlocks+0xe2>
 80074da:	f1ba 0f01 	cmp.w	sl, #1
 80074de:	d906      	bls.n	80074ee <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80074e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d003      	beq.n	80074ee <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074e6:	f001 fac1 	bl	8008a6c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d1d9      	bne.n	80074a2 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074f2:	f011 0108 	ands.w	r1, r1, #8
 80074f6:	d036      	beq.n	8007566 <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074f8:	4a41      	ldr	r2, [pc, #260]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80074fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074fe:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007502:	63a3      	str	r3, [r4, #56]	; 0x38
 8007504:	e7d3      	b.n	80074ae <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007506:	041a      	lsls	r2, r3, #16
 8007508:	d518      	bpl.n	800753c <HAL_SD_ReadBlocks+0x130>
 800750a:	b1be      	cbz	r6, 800753c <HAL_SD_ReadBlocks+0x130>
 800750c:	f105 0b04 	add.w	fp, r5, #4
 8007510:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007514:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007516:	f10b 0b04 	add.w	fp, fp, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800751a:	f001 f8f7 	bl	800870c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800751e:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007522:	0a02      	lsrs	r2, r0, #8
 8007524:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007528:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800752a:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800752c:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007530:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 8007534:	45d9      	cmp	r9, fp
 8007536:	d1ed      	bne.n	8007514 <HAL_SD_ReadBlocks+0x108>
          tempbuff++;
 8007538:	3520      	adds	r5, #32
          dataremaining--;
 800753a:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800753c:	f7fc ff5a 	bl	80043f4 <HAL_GetTick>
 8007540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007542:	eba0 0008 	sub.w	r0, r0, r8
 8007546:	4298      	cmp	r0, r3
 8007548:	d3bf      	bcc.n	80074ca <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800754a:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800754c:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800754e:	4a2c      	ldr	r2, [pc, #176]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007558:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800755a:	2301      	movs	r3, #1
 800755c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007560:	2300      	movs	r3, #0
 8007562:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8007564:	e774      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007568:	f012 0202 	ands.w	r2, r2, #2
 800756c:	d00a      	beq.n	8007584 <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800756e:	4a24      	ldr	r2, [pc, #144]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800757a:	2301      	movs	r3, #1
 800757c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007580:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8007582:	e765      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007584:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007586:	0689      	lsls	r1, r1, #26
 8007588:	d527      	bpl.n	80075da <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800758a:	491d      	ldr	r1, [pc, #116]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 800758c:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800758e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007590:	f043 0320 	orr.w	r3, r3, #32
 8007594:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007596:	2301      	movs	r3, #1
 8007598:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800759c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800759e:	e757      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075a0:	f001 f8b4 	bl	800870c <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80075a4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80075a8:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 80075aa:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075ac:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80075ae:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80075b2:	0c03      	lsrs	r3, r0, #16
 80075b4:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80075b8:	0e03      	lsrs	r3, r0, #24
 80075ba:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075be:	f7fc ff19 	bl	80043f4 <HAL_GetTick>
 80075c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075c4:	eba0 0008 	sub.w	r0, r0, r8
 80075c8:	4298      	cmp	r0, r3
 80075ca:	d307      	bcc.n	80075dc <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	4a0c      	ldr	r2, [pc, #48]	; (8007600 <HAL_SD_ReadBlocks+0x1f4>)
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075d8:	e793      	b.n	8007502 <HAL_SD_ReadBlocks+0xf6>
 80075da:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80075e0:	029b      	lsls	r3, r3, #10
 80075e2:	d501      	bpl.n	80075e8 <HAL_SD_ReadBlocks+0x1dc>
 80075e4:	2e00      	cmp	r6, #0
 80075e6:	d1db      	bne.n	80075a0 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075e8:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 80075ec:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075ee:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80075f6:	e72b      	b.n	8007450 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80075f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80075fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075fe:	e713      	b.n	8007428 <HAL_SD_ReadBlocks+0x1c>
 8007600:	004005ff 	.word	0x004005ff

08007604 <HAL_SD_WriteBlocks>:
{
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	460d      	mov	r5, r1
 800760a:	b089      	sub	sp, #36	; 0x24
 800760c:	4604      	mov	r4, r0
 800760e:	4692      	mov	sl, r2
 8007610:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8007612:	f7fc feef 	bl	80043f4 <HAL_GetTick>
 8007616:	4681      	mov	r9, r0
  if(NULL == pData)
 8007618:	b935      	cbnz	r5, 8007628 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800761a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800761c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8007620:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007624:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8007626:	e011      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8007628:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800762c:	2b01      	cmp	r3, #1
 800762e:	fa5f f883 	uxtb.w	r8, r3
 8007632:	f040 80ac 	bne.w	800778e <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007636:	eb0a 0307 	add.w	r3, sl, r7
 800763a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800763c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800763e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007640:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007642:	d907      	bls.n	8007654 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800764a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800764c:	4640      	mov	r0, r8
 800764e:	b009      	add	sp, #36	; 0x24
 8007650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8007654:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8007656:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8007658:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800765c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800765e:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007660:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007662:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007664:	f04f 33ff 	mov.w	r3, #4294967295
 8007668:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800766a:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 800766e:	bf18      	it	ne
 8007670:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007674:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007676:	2300      	movs	r3, #0
 8007678:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800767c:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800767e:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007680:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007682:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007684:	f001 f868 	bl	8008758 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8007688:	2f01      	cmp	r7, #1
 800768a:	d912      	bls.n	80076b2 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800768c:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800768e:	4651      	mov	r1, sl
 8007690:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007692:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007694:	f001 f98a 	bl	80089ac <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007698:	b190      	cbz	r0, 80076c0 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	4a3e      	ldr	r2, [pc, #248]	; (8007798 <HAL_SD_WriteBlocks+0x194>)
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80076a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076a2:	4318      	orrs	r0, r3
 80076a4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80076b0:	e7cc      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80076b2:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80076b4:	4651      	mov	r1, sl
 80076b6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80076b8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80076ba:	f001 f95f 	bl	800897c <SDMMC_CmdWriteSingleBlock>
 80076be:	e7eb      	b.n	8007698 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 80076c0:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80076c2:	6820      	ldr	r0, [r4, #0]
 80076c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80076c6:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80076ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80076cc:	d016      	beq.n	80076fc <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80076ce:	05db      	lsls	r3, r3, #23
 80076d0:	d508      	bpl.n	80076e4 <HAL_SD_WriteBlocks+0xe0>
 80076d2:	2f01      	cmp	r7, #1
 80076d4:	d906      	bls.n	80076e4 <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80076d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d003      	beq.n	80076e4 <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80076dc:	f001 f9c6 	bl	8008a6c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d1da      	bne.n	800769a <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076e8:	f010 0008 	ands.w	r0, r0, #8
 80076ec:	d029      	beq.n	8007742 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076ee:	4a2a      	ldr	r2, [pc, #168]	; (8007798 <HAL_SD_WriteBlocks+0x194>)
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80076f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80076fa:	e7d4      	b.n	80076a6 <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80076fc:	045a      	lsls	r2, r3, #17
 80076fe:	d50c      	bpl.n	800771a <HAL_SD_WriteBlocks+0x116>
 8007700:	b15e      	cbz	r6, 800771a <HAL_SD_WriteBlocks+0x116>
 8007702:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007706:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800770a:	a901      	add	r1, sp, #4
 800770c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800770e:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007710:	f000 ffff 	bl	8008712 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007714:	45ab      	cmp	fp, r5
 8007716:	d1f6      	bne.n	8007706 <HAL_SD_WriteBlocks+0x102>
          dataremaining--;
 8007718:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800771a:	f7fc fe6b 	bl	80043f4 <HAL_GetTick>
 800771e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007720:	eba0 0009 	sub.w	r0, r0, r9
 8007724:	4298      	cmp	r0, r3
 8007726:	d3cc      	bcc.n	80076c2 <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007728:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800772a:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800772e:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <HAL_SD_WriteBlocks+0x194>)
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007734:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007736:	2301      	movs	r3, #1
 8007738:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800773c:	2300      	movs	r3, #0
 800773e:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8007740:	e784      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007744:	f011 0102 	ands.w	r1, r1, #2
 8007748:	d00a      	beq.n	8007760 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800774a:	4a13      	ldr	r2, [pc, #76]	; (8007798 <HAL_SD_WriteBlocks+0x194>)
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800774e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007756:	2301      	movs	r3, #1
 8007758:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800775c:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 800775e:	e775      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007762:	f012 0210 	ands.w	r2, r2, #16
 8007766:	d00a      	beq.n	800777e <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007768:	4a0b      	ldr	r2, [pc, #44]	; (8007798 <HAL_SD_WriteBlocks+0x194>)
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800776c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800776e:	f043 0310 	orr.w	r3, r3, #16
 8007772:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007774:	2301      	movs	r3, #1
 8007776:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800777a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800777c:	e766      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800777e:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 8007782:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007784:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007786:	2301      	movs	r3, #1
 8007788:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800778c:	e75e      	b.n	800764c <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800778e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007794:	e744      	b.n	8007620 <HAL_SD_WriteBlocks+0x1c>
 8007796:	bf00      	nop
 8007798:	004005ff 	.word	0x004005ff

0800779c <HAL_SD_Erase>:
{
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsd->State == HAL_SD_STATE_READY)
 800779e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80077a2:	4604      	mov	r4, r0
 80077a4:	460e      	mov	r6, r1
 80077a6:	4615      	mov	r5, r2
  if(hsd->State == HAL_SD_STATE_READY)
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	b2df      	uxtb	r7, r3
 80077ac:	d151      	bne.n	8007852 <HAL_SD_Erase+0xb6>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ae:	2100      	movs	r1, #0
    if(end_add < start_add)
 80077b0:	4296      	cmp	r6, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077b2:	6381      	str	r1, [r0, #56]	; 0x38
    if(end_add < start_add)
 80077b4:	d905      	bls.n	80077c2 <HAL_SD_Erase+0x26>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077bc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80077be:	4638      	mov	r0, r7
 80077c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(end_add > (hsd->SdCard.LogBlockNbr))
 80077c2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d203      	bcs.n	80077d0 <HAL_SD_Erase+0x34>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80077ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077ce:	e7f5      	b.n	80077bc <HAL_SD_Erase+0x20>
    hsd->State = HAL_SD_STATE_BUSY;
 80077d0:	2303      	movs	r3, #3
 80077d2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 80077d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077d8:	6800      	ldr	r0, [r0, #0]
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 80077da:	069a      	lsls	r2, r3, #26
 80077dc:	d408      	bmi.n	80077f0 <HAL_SD_Erase+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077de:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <HAL_SD_Erase+0xbc>)
 80077e0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077e8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077ea:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      return HAL_ERROR;
 80077ee:	e7e6      	b.n	80077be <HAL_SD_Erase+0x22>
    if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077f0:	f000 ffaf 	bl	8008752 <SDMMC_GetResponse>
 80077f4:	0183      	lsls	r3, r0, #6
 80077f6:	d506      	bpl.n	8007806 <HAL_SD_Erase+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_SD_Erase+0xbc>)
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007800:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007804:	e7f0      	b.n	80077e8 <HAL_SD_Erase+0x4c>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007806:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007808:	2b01      	cmp	r3, #1
 800780a:	d003      	beq.n	8007814 <HAL_SD_Erase+0x78>
    if(hsd->SdCard.CardType != CARD_SECURED)
 800780c:	2b03      	cmp	r3, #3
 800780e:	d016      	beq.n	800783e <HAL_SD_Erase+0xa2>
      start_add *= 512U;
 8007810:	0276      	lsls	r6, r6, #9
      end_add   *= 512U;
 8007812:	026d      	lsls	r5, r5, #9
      errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, start_add);
 8007814:	4631      	mov	r1, r6
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	f001 f8e0 	bl	80089dc <SDMMC_CmdSDEraseStartAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 800781c:	b148      	cbz	r0, 8007832 <HAL_SD_Erase+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <HAL_SD_Erase+0xbc>)
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007826:	4318      	orrs	r0, r3
      hsd->State = HAL_SD_STATE_READY;
 8007828:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 800782a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800782c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8007830:	e7c5      	b.n	80077be <HAL_SD_Erase+0x22>
      errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, end_add);
 8007832:	4629      	mov	r1, r5
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	f001 f8e9 	bl	8008a0c <SDMMC_CmdSDEraseEndAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 800783a:	2800      	cmp	r0, #0
 800783c:	d1ef      	bne.n	800781e <HAL_SD_Erase+0x82>
    errorstate = SDMMC_CmdErase(hsd->Instance);
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	f001 f8fc 	bl	8008a3c <SDMMC_CmdErase>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007844:	2800      	cmp	r0, #0
 8007846:	d1ea      	bne.n	800781e <HAL_SD_Erase+0x82>
    hsd->State = HAL_SD_STATE_READY;
 8007848:	2301      	movs	r3, #1
    return HAL_OK;
 800784a:	4607      	mov	r7, r0
    hsd->State = HAL_SD_STATE_READY;
 800784c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8007850:	e7b5      	b.n	80077be <HAL_SD_Erase+0x22>
    return HAL_BUSY;
 8007852:	2702      	movs	r7, #2
 8007854:	e7b3      	b.n	80077be <HAL_SD_Erase+0x22>
 8007856:	bf00      	nop
 8007858:	004005ff 	.word	0x004005ff

0800785c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800785c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800785e:	0f9a      	lsrs	r2, r3, #30
 8007860:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007862:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8007866:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007868:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800786c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800786e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007872:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007874:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007878:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800787a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800787c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800787e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007880:	0d1a      	lsrs	r2, r3, #20
 8007882:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007884:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8007888:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800788a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800788e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007890:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8007894:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007896:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800789a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800789c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80078a0:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80078a2:	2200      	movs	r2, #0
 80078a4:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80078a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80078a8:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d16c      	bne.n	8007988 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80078ae:	f640 74fc 	movw	r4, #4092	; 0xffc
 80078b2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80078b4:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 80078b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80078bc:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80078be:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80078c2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80078c4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80078c8:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80078ca:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80078ce:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078d0:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078d4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80078d8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80078da:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078dc:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078de:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80078e0:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80078e2:	f002 0207 	and.w	r2, r2, #7
 80078e6:	3202      	adds	r2, #2
 80078e8:	fa03 f202 	lsl.w	r2, r3, r2
 80078ec:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80078ee:	7a0b      	ldrb	r3, [r1, #8]
 80078f0:	f003 040f 	and.w	r4, r3, #15
 80078f4:	2301      	movs	r3, #1
 80078f6:	40a3      	lsls	r3, r4
 80078f8:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078fa:	0a5b      	lsrs	r3, r3, #9
 80078fc:	4353      	muls	r3, r2
 80078fe:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007900:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007904:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007906:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007908:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800790c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800790e:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007916:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007918:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800791a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 800791c:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800791e:	0fda      	lsrs	r2, r3, #31
 8007920:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007922:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8007926:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007928:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800792c:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800792e:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8007932:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007934:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8007938:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800793c:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8007940:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007944:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007948:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800794c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007950:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8007954:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007958:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800795c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007960:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8007964:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007968:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800796c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007970:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007974:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007978:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800797c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007980:	2301      	movs	r3, #1
 8007982:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8007986:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007988:	2a01      	cmp	r2, #1
 800798a:	d10f      	bne.n	80079ac <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8007992:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007996:	4313      	orrs	r3, r2
 8007998:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800799a:	690b      	ldr	r3, [r1, #16]
 800799c:	3301      	adds	r3, #1
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80079a2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80079a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a8:	6583      	str	r3, [r0, #88]	; 0x58
 80079aa:	e7ab      	b.n	8007904 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079ac:	6803      	ldr	r3, [r0, #0]
 80079ae:	4a05      	ldr	r2, [pc, #20]	; (80079c4 <HAL_SD_GetCardCSD+0x168>)
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80079b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80079c0:	4618      	mov	r0, r3
 80079c2:	e7e0      	b.n	8007986 <HAL_SD_GetCardCSD+0x12a>
 80079c4:	004005ff 	.word	0x004005ff

080079c8 <HAL_SD_InitCard>:
{
 80079c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079cc:	2300      	movs	r3, #0
{
 80079ce:	b098      	sub	sp, #96	; 0x60
 80079d0:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079d2:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079d4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80079d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80079dc:	2376      	movs	r3, #118	; 0x76
 80079de:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 80079e0:	ab0a      	add	r3, sp, #40	; 0x28
 80079e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079e6:	ab07      	add	r3, sp, #28
 80079e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079f0:	f000 fe70 	bl	80086d4 <SDMMC_Init>
  if(status != HAL_OK)
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f040 80e3 	bne.w	8007bc2 <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	6843      	ldr	r3, [r0, #4]
 8007a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a04:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a06:	f000 fe89 	bl	800871c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8007a0a:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8007a0c:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8007a0e:	6853      	ldr	r3, [r2, #4]
 8007a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a14:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8007a16:	f7fc fcf3 	bl	8004400 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a1a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8007a1c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a1e:	f000 feaf 	bl	8008780 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a22:	4605      	mov	r5, r0
 8007a24:	b940      	cbnz	r0, 8007a38 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007a26:	6820      	ldr	r0, [r4, #0]
 8007a28:	f001 f9c2 	bl	8008db0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2c:	b170      	cbz	r0, 8007a4c <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a2e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a30:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a32:	f000 fea5 	bl	8008780 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a36:	b198      	cbz	r0, 8007a60 <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8007a38:	2501      	movs	r5, #1
 8007a3a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a40:	4303      	orrs	r3, r0
 8007a42:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8007a44:	4628      	mov	r0, r5
 8007a46:	b018      	add	sp, #96	; 0x60
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a50:	2100      	movs	r1, #0
 8007a52:	6820      	ldr	r0, [r4, #0]
 8007a54:	f001 f83c 	bl	8008ad0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a58:	b128      	cbz	r0, 8007a66 <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a5a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007a5e:	e7eb      	b.n	8007a38 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007a60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d0f4      	beq.n	8007a50 <HAL_SD_InitCard+0x88>
{
 8007a66:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007a68:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007a6c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8007bcc <HAL_SD_InitCard+0x204>
 8007a70:	e014      	b.n	8007a9c <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a72:	4631      	mov	r1, r6
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	f001 f82b 	bl	8008ad0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d1dc      	bne.n	8007a38 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007a7e:	4641      	mov	r1, r8
 8007a80:	6820      	ldr	r0, [r4, #0]
 8007a82:	f001 f8f7 	bl	8008c74 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d1e7      	bne.n	8007a5a <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	6820      	ldr	r0, [r4, #0]
 8007a8e:	f000 fe60 	bl	8008752 <SDMMC_GetResponse>
    count++;
 8007a92:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a94:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007a96:	0fc6      	lsrs	r6, r0, #31
    count++;
 8007a98:	3301      	adds	r3, #1
 8007a9a:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007a9c:	9b06      	ldr	r3, [sp, #24]
 8007a9e:	42bb      	cmp	r3, r7
 8007aa0:	d801      	bhi.n	8007aa6 <HAL_SD_InitCard+0xde>
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	d0e5      	beq.n	8007a72 <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007aa6:	9b06      	ldr	r3, [sp, #24]
 8007aa8:	42bb      	cmp	r3, r7
 8007aaa:	d80c      	bhi.n	8007ac6 <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007aac:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8007ab0:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8007ab6:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007aba:	f000 fe33 	bl	8008724 <SDMMC_GetPowerState>
 8007abe:	b928      	cbnz	r0, 8007acc <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ac0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007ac4:	e7b8      	b.n	8007a38 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ac6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8007aca:	e7b5      	b.n	8007a38 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007acc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d043      	beq.n	8007b5a <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	f001 f882 	bl	8008bdc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1ad      	bne.n	8007a38 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007adc:	4601      	mov	r1, r0
 8007ade:	6820      	ldr	r0, [r4, #0]
 8007ae0:	f000 fe37 	bl	8008752 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ae4:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ae6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	f000 fe32 	bl	8008752 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007aee:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007af0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007af2:	6820      	ldr	r0, [r4, #0]
 8007af4:	f000 fe2d 	bl	8008752 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007af8:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007afa:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	f000 fe28 	bl	8008752 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b04:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d026      	beq.n	8007b5a <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b0c:	f10d 0116 	add.w	r1, sp, #22
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	f001 f90b 	bl	8008d2c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d18e      	bne.n	8007a38 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b1c:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d01b      	beq.n	8007b5a <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b22:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8007b26:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b28:	0409      	lsls	r1, r1, #16
 8007b2a:	f001 f86c 	bl	8008c06 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d182      	bne.n	8007a38 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b32:	4601      	mov	r1, r0
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	f000 fe0c 	bl	8008752 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b3a:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b3c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	f000 fe07 	bl	8008752 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b44:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b46:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	f000 fe02 	bl	8008752 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b4e:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b50:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	f000 fdfd 	bl	8008752 <SDMMC_GetResponse>
 8007b58:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b5a:	2104      	movs	r1, #4
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	f000 fdf8 	bl	8008752 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b62:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b64:	0d00      	lsrs	r0, r0, #20
 8007b66:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7ff fe77 	bl	800785c <HAL_SD_GetCardCSD>
 8007b6e:	4605      	mov	r5, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	f47f af72 	bne.w	8007a5a <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b76:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007b78:	4603      	mov	r3, r0
 8007b7a:	6820      	ldr	r0, [r4, #0]
 8007b7c:	0412      	lsls	r2, r2, #16
 8007b7e:	f000 ff8f 	bl	8008aa0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f47f af58 	bne.w	8007a38 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007b88:	f104 0310 	add.w	r3, r4, #16
 8007b8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b90:	1d23      	adds	r3, r4, #4
 8007b92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b9a:	f000 fd9b 	bl	80086d4 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ba2:	6820      	ldr	r0, [r4, #0]
 8007ba4:	f000 fea2 	bl	80088ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	f43f af4b 	beq.w	8007a44 <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bae:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8007bb0:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bb2:	4a05      	ldr	r2, [pc, #20]	; (8007bc8 <HAL_SD_InitCard+0x200>)
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bb8:	4318      	orrs	r0, r3
 8007bba:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bbc:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8007bc0:	e740      	b.n	8007a44 <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8007bc2:	2501      	movs	r5, #1
 8007bc4:	e73e      	b.n	8007a44 <HAL_SD_InitCard+0x7c>
 8007bc6:	bf00      	nop
 8007bc8:	004005ff 	.word	0x004005ff
 8007bcc:	c1100000 	.word	0xc1100000

08007bd0 <HAL_SD_Init>:
{
 8007bd0:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	b908      	cbnz	r0, 8007bda <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8007bd6:	2001      	movs	r0, #1
}
 8007bd8:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8007bda:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8007bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007be2:	b913      	cbnz	r3, 8007bea <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8007be4:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8007be6:	f7ff fc10 	bl	800740a <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8007bea:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007bec:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8007bee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007bf2:	f7ff fee9 	bl	80079c8 <HAL_SD_InitCard>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d1ed      	bne.n	8007bd6 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8007bfa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bfc:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8007bfe:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8007c00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8007c04:	e7e8      	b.n	8007bd8 <HAL_SD_Init+0x8>
	...

08007c08 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8007c08:	2303      	movs	r3, #3
{
 8007c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8007c0c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8007c10:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c12:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d002      	beq.n	8007c22 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007c1c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007c20:	d103      	bne.n	8007c2a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c28:	e05d      	b.n	8007ce6 <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007c2a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c2e:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007c30:	d137      	bne.n	8007ca2 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8007c32:	2100      	movs	r1, #0
 8007c34:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c38:	f000 fd8b 	bl	8008752 <SDMMC_GetResponse>
 8007c3c:	0180      	lsls	r0, r0, #6
 8007c3e:	d449      	bmi.n	8007cd4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8007c40:	a904      	add	r1, sp, #16
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff fb7b 	bl	800733e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c48:	b960      	cbnz	r0, 8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	0359      	lsls	r1, r3, #13
 8007c4e:	d544      	bpl.n	8007cda <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007c52:	6820      	ldr	r0, [r4, #0]
 8007c54:	0409      	lsls	r1, r1, #16
 8007c56:	f000 ff3b 	bl	8008ad0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c5a:	b918      	cbnz	r0, 8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007c5c:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	f000 ff4e 	bl	8008b00 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007c64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c66:	4318      	orrs	r0, r3
 8007c68:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c6a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c6c:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	d03b      	beq.n	8007cea <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8007c74:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c76:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007c78:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c80:	6820      	ldr	r0, [r4, #0]
 8007c82:	f000 fe33 	bl	80088ec <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c86:	b130      	cbz	r0, 8007c96 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c88:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8007c8a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c8c:	4a22      	ldr	r2, [pc, #136]	; (8007d18 <HAL_SD_ConfigWideBusOperation+0x110>)
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007c90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c92:	4318      	orrs	r0, r3
 8007c94:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007c96:	2301      	movs	r3, #1
}
 8007c98:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8007c9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007c9e:	b00b      	add	sp, #44	; 0x2c
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007ca2:	b9e9      	cbnz	r1, 8007ce0 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8007ca4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ca8:	f000 fd53 	bl	8008752 <SDMMC_GetResponse>
 8007cac:	0182      	lsls	r2, r0, #6
 8007cae:	d411      	bmi.n	8007cd4 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8007cb0:	a904      	add	r1, sp, #16
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff fb43 	bl	800733e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1d3      	bne.n	8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007cbc:	9b05      	ldr	r3, [sp, #20]
 8007cbe:	03db      	lsls	r3, r3, #15
 8007cc0:	d50b      	bpl.n	8007cda <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cc2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	0409      	lsls	r1, r1, #16
 8007cc8:	f000 ff02 	bl	8008ad0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1c9      	bne.n	8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007cd0:	4601      	mov	r1, r0
 8007cd2:	e7c4      	b.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007cd8:	e7c4      	b.n	8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cda:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007cde:	e7c1      	b.n	8007c64 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ce6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007ce8:	e7bf      	b.n	8007c6a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007cf2:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8007cf4:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007cf8:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007cfc:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007cfe:	69a3      	ldr	r3, [r4, #24]
 8007d00:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8007d02:	ab0a      	add	r3, sp, #40	; 0x28
 8007d04:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007d08:	ab04      	add	r3, sp, #16
 8007d0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007d0e:	4638      	mov	r0, r7
 8007d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d12:	f000 fcdf 	bl	80086d4 <SDMMC_Init>
 8007d16:	e7b1      	b.n	8007c7c <HAL_SD_ConfigWideBusOperation+0x74>
 8007d18:	004005ff 	.word	0x004005ff

08007d1c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d1c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8007d1e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d20:	0409      	lsls	r1, r1, #16
{
 8007d22:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d24:	6800      	ldr	r0, [r0, #0]
 8007d26:	f000 ff1b 	bl	8008b60 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	f000 fd0f 	bl	8008752 <SDMMC_GetResponse>
}
 8007d34:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8007d38:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8007d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007d3c:	4308      	orrs	r0, r1
 8007d3e:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8007d40:	2000      	movs	r0, #0
 8007d42:	e7f7      	b.n	8007d34 <HAL_SD_GetCardState+0x18>

08007d44 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007d48:	4604      	mov	r4, r0
 8007d4a:	b1c8      	cbz	r0, 8007d80 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007d4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007d50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d54:	b91b      	cbnz	r3, 8007d5e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007d56:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007d5a:	f003 ffc9 	bl	800bcf0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d5e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d60:	1d21      	adds	r1, r4, #4
 8007d62:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007d68:	f000 fc27 	bl	80085ba <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007d6c:	6862      	ldr	r2, [r4, #4]
 8007d6e:	4629      	mov	r1, r5
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	f000 fc5d 	bl	8008630 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d76:	2301      	movs	r3, #1

  return HAL_OK;
 8007d78:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d7a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d80:	2001      	movs	r0, #1
 8007d82:	e7fc      	b.n	8007d7e <HAL_SDRAM_Init+0x3a>

08007d84 <SDRAM_DMACpltProt>:
static void SDRAM_DMACpltProt(DMA_HandleTypeDef *hdma)
{
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007d84:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 8007d86:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8007d88:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	6013      	str	r3, [r2, #0]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 8007d92:	2304      	movs	r3, #4
 8007d94:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hdma);
 8007d98:	f003 fe92 	bl	800bac0 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 8007d9c:	bd08      	pop	{r3, pc}

08007d9e <SDRAM_DMACplt>:
  __HAL_DMA_DISABLE(hdma);
 8007d9e:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 8007da0:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8007da2:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 8007da4:	6813      	ldr	r3, [r2, #0]
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
  HAL_SDRAM_DMA_XferCpltCallback(hdma);
 8007db2:	f003 fe85 	bl	800bac0 <HAL_SDRAM_DMA_XferCpltCallback>
}
 8007db6:	bd08      	pop	{r3, pc}

08007db8 <SDRAM_DMAError>:
static void SDRAM_DMAError(DMA_HandleTypeDef *hdma)
{
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007db8:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 8007dba:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8007dbc:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	6013      	str	r3, [r2, #0]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_ERROR;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferErrorCallback(hdma);
#else
  HAL_SDRAM_DMA_XferErrorCallback(hdma);
 8007dcc:	f003 fe80 	bl	800bad0 <HAL_SDRAM_DMA_XferErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 8007dd0:	bd08      	pop	{r3, pc}

08007dd2 <HAL_SDRAM_Read_32b>:
{
 8007dd2:	b530      	push	{r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007dd4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
{
 8007dd8:	4604      	mov	r4, r0
  if (state == HAL_SDRAM_STATE_BUSY)
 8007dda:	2d02      	cmp	r5, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007ddc:	b2e8      	uxtb	r0, r5
  if (state == HAL_SDRAM_STATE_BUSY)
 8007dde:	d011      	beq.n	8007e04 <HAL_SDRAM_Read_32b+0x32>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8007de0:	2801      	cmp	r0, #1
 8007de2:	d001      	beq.n	8007de8 <HAL_SDRAM_Read_32b+0x16>
 8007de4:	2804      	cmp	r0, #4
 8007de6:	d114      	bne.n	8007e12 <HAL_SDRAM_Read_32b+0x40>
    __HAL_LOCK(hsdram);
 8007de8:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 8007dec:	2d01      	cmp	r5, #1
 8007dee:	f04f 0502 	mov.w	r5, #2
 8007df2:	d010      	beq.n	8007e16 <HAL_SDRAM_Read_32b+0x44>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007df4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
    for (size = BufferSize; size != 0U; size--)
 8007df8:	b92b      	cbnz	r3, 8007e06 <HAL_SDRAM_Read_32b+0x34>
    hsdram->State = state;
 8007dfa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  return HAL_OK;
 8007dfe:	4618      	mov	r0, r3
    __HAL_UNLOCK(hsdram);
 8007e00:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8007e04:	bd30      	pop	{r4, r5, pc}
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 8007e06:	f851 5b04 	ldr.w	r5, [r1], #4
    for (size = BufferSize; size != 0U; size--)
 8007e0a:	3b01      	subs	r3, #1
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 8007e0c:	f842 5b04 	str.w	r5, [r2], #4
    for (size = BufferSize; size != 0U; size--)
 8007e10:	e7f2      	b.n	8007df8 <HAL_SDRAM_Read_32b+0x26>
    return  HAL_ERROR;
 8007e12:	2001      	movs	r0, #1
 8007e14:	e7f6      	b.n	8007e04 <HAL_SDRAM_Read_32b+0x32>
    return HAL_BUSY;
 8007e16:	4628      	mov	r0, r5
 8007e18:	e7f4      	b.n	8007e04 <HAL_SDRAM_Read_32b+0x32>

08007e1a <HAL_SDRAM_Write_32b>:
{
 8007e1a:	b530      	push	{r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007e1c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8007e20:	2d02      	cmp	r5, #2
 8007e22:	b2ec      	uxtb	r4, r5
 8007e24:	d012      	beq.n	8007e4c <HAL_SDRAM_Write_32b+0x32>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007e26:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8007e2a:	2c01      	cmp	r4, #1
 8007e2c:	d116      	bne.n	8007e5c <HAL_SDRAM_Write_32b+0x42>
    __HAL_LOCK(hsdram);
 8007e2e:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
 8007e32:	2c01      	cmp	r4, #1
 8007e34:	f04f 0402 	mov.w	r4, #2
 8007e38:	d008      	beq.n	8007e4c <HAL_SDRAM_Write_32b+0x32>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e3a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    for (size = BufferSize; size != 0U; size--)
 8007e3e:	b93b      	cbnz	r3, 8007e50 <HAL_SDRAM_Write_32b+0x36>
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007e40:	2201      	movs	r2, #1
  return HAL_OK;
 8007e42:	461c      	mov	r4, r3
    __HAL_UNLOCK(hsdram);
 8007e44:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007e48:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
}
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	bd30      	pop	{r4, r5, pc}
      *pSdramAddress = *psrcbuff;
 8007e50:	f852 4b04 	ldr.w	r4, [r2], #4
    for (size = BufferSize; size != 0U; size--)
 8007e54:	3b01      	subs	r3, #1
      *pSdramAddress = *psrcbuff;
 8007e56:	f841 4b04 	str.w	r4, [r1], #4
    for (size = BufferSize; size != 0U; size--)
 8007e5a:	e7f0      	b.n	8007e3e <HAL_SDRAM_Write_32b+0x24>
    return  HAL_ERROR;
 8007e5c:	2401      	movs	r4, #1
 8007e5e:	e7f5      	b.n	8007e4c <HAL_SDRAM_Write_32b+0x32>

08007e60 <HAL_SDRAM_Read_DMA>:
{
 8007e60:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007e62:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
{
 8007e66:	4604      	mov	r4, r0
  if (state == HAL_SDRAM_STATE_BUSY)
 8007e68:	2d02      	cmp	r5, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007e6a:	b2e8      	uxtb	r0, r5
  if (state == HAL_SDRAM_STATE_BUSY)
 8007e6c:	d01c      	beq.n	8007ea8 <HAL_SDRAM_Read_DMA+0x48>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8007e6e:	2801      	cmp	r0, #1
 8007e70:	d001      	beq.n	8007e76 <HAL_SDRAM_Read_DMA+0x16>
 8007e72:	2804      	cmp	r0, #4
 8007e74:	d119      	bne.n	8007eaa <HAL_SDRAM_Read_DMA+0x4a>
    __HAL_LOCK(hsdram);
 8007e76:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
 8007e7a:	2d01      	cmp	r5, #1
 8007e7c:	f04f 0502 	mov.w	r5, #2
 8007e80:	d015      	beq.n	8007eae <HAL_SDRAM_Read_DMA+0x4e>
 8007e82:	2601      	movs	r6, #1
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e84:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
      hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007e88:	6b25      	ldr	r5, [r4, #48]	; 0x30
    if (state == HAL_SDRAM_STATE_READY)
 8007e8a:	42b0      	cmp	r0, r6
    __HAL_LOCK(hsdram);
 8007e8c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
      hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007e90:	bf0c      	ite	eq
 8007e92:	4808      	ldreq	r0, [pc, #32]	; (8007eb4 <HAL_SDRAM_Read_DMA+0x54>)
      hsdram->hdma->XferCpltCallback = SDRAM_DMACpltProt;
 8007e94:	4808      	ldrne	r0, [pc, #32]	; (8007eb8 <HAL_SDRAM_Read_DMA+0x58>)
 8007e96:	63e8      	str	r0, [r5, #60]	; 0x3c
    hsdram->hdma->XferErrorCallback = SDRAM_DMAError;
 8007e98:	4808      	ldr	r0, [pc, #32]	; (8007ebc <HAL_SDRAM_Read_DMA+0x5c>)
 8007e9a:	64e8      	str	r0, [r5, #76]	; 0x4c
    status = HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7fc fc45 	bl	800472c <HAL_DMA_Start_IT>
    __HAL_UNLOCK(hsdram);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7fc      	b.n	8007ea8 <HAL_SDRAM_Read_DMA+0x48>
    status = HAL_BUSY;
 8007eae:	4628      	mov	r0, r5
 8007eb0:	e7fa      	b.n	8007ea8 <HAL_SDRAM_Read_DMA+0x48>
 8007eb2:	bf00      	nop
 8007eb4:	08007d9f 	.word	0x08007d9f
 8007eb8:	08007d85 	.word	0x08007d85
 8007ebc:	08007db9 	.word	0x08007db9

08007ec0 <HAL_SDRAM_Write_DMA>:
{
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	460e      	mov	r6, r1
 8007ec4:	4611      	mov	r1, r2
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007ec6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
{
 8007eca:	4605      	mov	r5, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007ecc:	2a02      	cmp	r2, #2
 8007ece:	b2d0      	uxtb	r0, r2
 8007ed0:	d018      	beq.n	8007f04 <HAL_SDRAM_Write_DMA+0x44>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007ed2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8007ed6:	2a01      	cmp	r2, #1
 8007ed8:	b2d0      	uxtb	r0, r2
 8007eda:	d114      	bne.n	8007f06 <HAL_SDRAM_Write_DMA+0x46>
    __HAL_LOCK(hsdram);
 8007edc:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 8007ee0:	2402      	movs	r4, #2
 8007ee2:	2a01      	cmp	r2, #1
 8007ee4:	d011      	beq.n	8007f0a <HAL_SDRAM_Write_DMA+0x4a>
 8007ee6:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <HAL_SDRAM_Write_DMA+0x50>)
 8007eec:	6b28      	ldr	r0, [r5, #48]	; 0x30
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007eee:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
    hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007ef2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsdram->hdma->XferErrorCallback = SDRAM_DMAError;
 8007ef4:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <HAL_SDRAM_Write_DMA+0x54>)
 8007ef6:	64c2      	str	r2, [r0, #76]	; 0x4c
    status = HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8007ef8:	4632      	mov	r2, r6
 8007efa:	f7fc fc17 	bl	800472c <HAL_DMA_Start_IT>
    __HAL_UNLOCK(hsdram);
 8007efe:	2300      	movs	r3, #0
 8007f00:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
 8007f04:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 8007f06:	2001      	movs	r0, #1
 8007f08:	e7fc      	b.n	8007f04 <HAL_SDRAM_Write_DMA+0x44>
    status = HAL_BUSY;
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	e7fa      	b.n	8007f04 <HAL_SDRAM_Write_DMA+0x44>
 8007f0e:	bf00      	nop
 8007f10:	08007d9f 	.word	0x08007d9f
 8007f14:	08007db9 	.word	0x08007db9

08007f18 <HAL_SDRAM_SendCommand>:
{
 8007f18:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007f1a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007f1e:	4605      	mov	r5, r0
 8007f20:	460e      	mov	r6, r1
  if (state == HAL_SDRAM_STATE_BUSY)
 8007f22:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007f24:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8007f26:	d010      	beq.n	8007f4a <HAL_SDRAM_SendCommand+0x32>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007f28:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8007f2c:	2c01      	cmp	r4, #1
 8007f2e:	d110      	bne.n	8007f52 <HAL_SDRAM_SendCommand+0x3a>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f30:	2302      	movs	r3, #2
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f32:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f34:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f38:	f000 fbb0 	bl	800869c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d104      	bne.n	8007f4c <HAL_SDRAM_SendCommand+0x34>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007f42:	2305      	movs	r3, #5
 8007f44:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  return HAL_OK;
 8007f48:	2000      	movs	r0, #0
}
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007f4c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8007f50:	e7fa      	b.n	8007f48 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7f9      	b.n	8007f4a <HAL_SDRAM_SendCommand+0x32>

08007f56 <HAL_SDRAM_ProgramRefreshRate>:
{
 8007f56:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007f5c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	b2d8      	uxtb	r0, r3
 8007f62:	d00d      	beq.n	8007f80 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007f64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	b2dd      	uxtb	r5, r3
 8007f6c:	d109      	bne.n	8007f82 <HAL_SDRAM_ProgramRefreshRate+0x2c>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f6e:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f70:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f76:	f000 fba3 	bl	80086c0 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8007f7a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007f7c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f82:	2001      	movs	r0, #1
 8007f84:	e7fc      	b.n	8007f80 <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

08007f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f8c:	69c0      	ldr	r0, [r0, #28]
 8007f8e:	6921      	ldr	r1, [r4, #16]
 8007f90:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f92:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f94:	430a      	orrs	r2, r1
 8007f96:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f98:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f9a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f9c:	4991      	ldr	r1, [pc, #580]	; (80081e4 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f9e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa0:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8007fa2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fb4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8007fb8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fba:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc2:	4a89      	ldr	r2, [pc, #548]	; (80081e8 <UART_SetConfig+0x260>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d11b      	bne.n	8008000 <UART_SetConfig+0x78>
 8007fc8:	4b88      	ldr	r3, [pc, #544]	; (80081ec <UART_SetConfig+0x264>)
 8007fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	f200 80e8 	bhi.w	80081aa <UART_SetConfig+0x222>
 8007fda:	4a85      	ldr	r2, [pc, #532]	; (80081f0 <UART_SetConfig+0x268>)
 8007fdc:	5cd3      	ldrb	r3, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007fe2:	f040 80b9 	bne.w	8008158 <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d828      	bhi.n	800803c <UART_SetConfig+0xb4>
 8007fea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007fee:	0096      	.short	0x0096
 8007ff0:	009e00e1 	.word	0x009e00e1
 8007ff4:	00db0027 	.word	0x00db0027
 8007ff8:	00270027 	.word	0x00270027
 8007ffc:	009f0027 	.word	0x009f0027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008000:	4a7c      	ldr	r2, [pc, #496]	; (80081f4 <UART_SetConfig+0x26c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d108      	bne.n	8008018 <UART_SetConfig+0x90>
 8008006:	4b79      	ldr	r3, [pc, #484]	; (80081ec <UART_SetConfig+0x264>)
 8008008:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800800c:	4b78      	ldr	r3, [pc, #480]	; (80081f0 <UART_SetConfig+0x268>)
 800800e:	f002 020c 	and.w	r2, r2, #12
 8008012:	4413      	add	r3, r2
 8008014:	78db      	ldrb	r3, [r3, #3]
 8008016:	e7e2      	b.n	8007fde <UART_SetConfig+0x56>
 8008018:	4a77      	ldr	r2, [pc, #476]	; (80081f8 <UART_SetConfig+0x270>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d118      	bne.n	8008050 <UART_SetConfig+0xc8>
 800801e:	4b73      	ldr	r3, [pc, #460]	; (80081ec <UART_SetConfig+0x264>)
 8008020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008028:	2b20      	cmp	r3, #32
 800802a:	f000 80b3 	beq.w	8008194 <UART_SetConfig+0x20c>
 800802e:	d807      	bhi.n	8008040 <UART_SetConfig+0xb8>
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80c0 	beq.w	80081b6 <UART_SetConfig+0x22e>
 8008036:	2b10      	cmp	r3, #16
 8008038:	f000 80b1 	beq.w	800819e <UART_SetConfig+0x216>
      }
    }
  }
  else
  {
    switch (clocksource)
 800803c:	2001      	movs	r0, #1
 800803e:	e070      	b.n	8008122 <UART_SetConfig+0x19a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008040:	2b30      	cmp	r3, #48	; 0x30
 8008042:	d1fb      	bne.n	800803c <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008044:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008048:	d070      	beq.n	800812c <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800804e:	e0b9      	b.n	80081c4 <UART_SetConfig+0x23c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008050:	4a6a      	ldr	r2, [pc, #424]	; (80081fc <UART_SetConfig+0x274>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10f      	bne.n	8008076 <UART_SetConfig+0xee>
 8008056:	4b65      	ldr	r3, [pc, #404]	; (80081ec <UART_SetConfig+0x264>)
 8008058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	f000 8097 	beq.w	8008194 <UART_SetConfig+0x20c>
 8008066:	d804      	bhi.n	8008072 <UART_SetConfig+0xea>
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80a4 	beq.w	80081b6 <UART_SetConfig+0x22e>
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	e7e2      	b.n	8008038 <UART_SetConfig+0xb0>
 8008072:	2bc0      	cmp	r3, #192	; 0xc0
 8008074:	e7e5      	b.n	8008042 <UART_SetConfig+0xba>
 8008076:	4a62      	ldr	r2, [pc, #392]	; (8008200 <UART_SetConfig+0x278>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d112      	bne.n	80080a2 <UART_SetConfig+0x11a>
 800807c:	4b5b      	ldr	r3, [pc, #364]	; (80081ec <UART_SetConfig+0x264>)
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808a:	f000 8083 	beq.w	8008194 <UART_SetConfig+0x20c>
 800808e:	d805      	bhi.n	800809c <UART_SetConfig+0x114>
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8090 	beq.w	80081b6 <UART_SetConfig+0x22e>
 8008096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809a:	e7cd      	b.n	8008038 <UART_SetConfig+0xb0>
 800809c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a0:	e7cf      	b.n	8008042 <UART_SetConfig+0xba>
 80080a2:	4a58      	ldr	r2, [pc, #352]	; (8008204 <UART_SetConfig+0x27c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d110      	bne.n	80080ca <UART_SetConfig+0x142>
 80080a8:	4b50      	ldr	r3, [pc, #320]	; (80081ec <UART_SetConfig+0x264>)
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b6:	d06d      	beq.n	8008194 <UART_SetConfig+0x20c>
 80080b8:	d804      	bhi.n	80080c4 <UART_SetConfig+0x13c>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d075      	beq.n	80081aa <UART_SetConfig+0x222>
 80080be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c2:	e7b9      	b.n	8008038 <UART_SetConfig+0xb0>
 80080c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c8:	e7bb      	b.n	8008042 <UART_SetConfig+0xba>
 80080ca:	4a4f      	ldr	r2, [pc, #316]	; (8008208 <UART_SetConfig+0x280>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d110      	bne.n	80080f2 <UART_SetConfig+0x16a>
 80080d0:	4b46      	ldr	r3, [pc, #280]	; (80081ec <UART_SetConfig+0x264>)
 80080d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80080da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080de:	d059      	beq.n	8008194 <UART_SetConfig+0x20c>
 80080e0:	d804      	bhi.n	80080ec <UART_SetConfig+0x164>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d067      	beq.n	80081b6 <UART_SetConfig+0x22e>
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	e7a5      	b.n	8008038 <UART_SetConfig+0xb0>
 80080ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080f0:	e7a7      	b.n	8008042 <UART_SetConfig+0xba>
 80080f2:	4a46      	ldr	r2, [pc, #280]	; (800820c <UART_SetConfig+0x284>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d1a1      	bne.n	800803c <UART_SetConfig+0xb4>
 80080f8:	4b3c      	ldr	r3, [pc, #240]	; (80081ec <UART_SetConfig+0x264>)
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008106:	d045      	beq.n	8008194 <UART_SetConfig+0x20c>
 8008108:	d804      	bhi.n	8008114 <UART_SetConfig+0x18c>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d053      	beq.n	80081b6 <UART_SetConfig+0x22e>
 800810e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008112:	e791      	b.n	8008038 <UART_SetConfig+0xb0>
 8008114:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008118:	e793      	b.n	8008042 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 800811a:	f7fe fa8f 	bl	800663c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800811e:	b928      	cbnz	r0, 800812c <UART_SetConfig+0x1a4>
 8008120:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008122:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008124:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8008128:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800812a:	4839      	ldr	r0, [pc, #228]	; (8008210 <UART_SetConfig+0x288>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800812c:	6862      	ldr	r2, [r4, #4]
 800812e:	0853      	lsrs	r3, r2, #1
 8008130:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008134:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008138:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800813c:	f1a0 0210 	sub.w	r2, r0, #16
 8008140:	429a      	cmp	r2, r3
 8008142:	f63f af7b 	bhi.w	800803c <UART_SetConfig+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008146:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800814a:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800814e:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008150:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8008152:	4318      	orrs	r0, r3
 8008154:	60d0      	str	r0, [r2, #12]
 8008156:	e7e3      	b.n	8008120 <UART_SetConfig+0x198>
    switch (clocksource)
 8008158:	2b08      	cmp	r3, #8
 800815a:	f63f af6f 	bhi.w	800803c <UART_SetConfig+0xb4>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <UART_SetConfig+0x1dc>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	080081bd 	.word	0x080081bd
 8008168:	08008189 	.word	0x08008189
 800816c:	0800819b 	.word	0x0800819b
 8008170:	0800803d 	.word	0x0800803d
 8008174:	0800818f 	.word	0x0800818f
 8008178:	0800803d 	.word	0x0800803d
 800817c:	0800803d 	.word	0x0800803d
 8008180:	0800803d 	.word	0x0800803d
 8008184:	0800804b 	.word	0x0800804b
        pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fe fa68 	bl	800665c <HAL_RCC_GetPCLK2Freq>
        break;
 800818c:	e018      	b.n	80081c0 <UART_SetConfig+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fe f987 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
        break;
 8008192:	e015      	b.n	80081c0 <UART_SetConfig+0x238>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008194:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008198:	d0c7      	beq.n	800812a <UART_SetConfig+0x1a2>
        pclk = (uint32_t) HSI_VALUE;
 800819a:	481d      	ldr	r0, [pc, #116]	; (8008210 <UART_SetConfig+0x288>)
 800819c:	e012      	b.n	80081c4 <UART_SetConfig+0x23c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80081a2:	d1f4      	bne.n	800818e <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetSysClockFreq();
 80081a4:	f7fe f97c 	bl	80064a0 <HAL_RCC_GetSysClockFreq>
        break;
 80081a8:	e7b9      	b.n	800811e <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80081ae:	d1eb      	bne.n	8008188 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe fa54 	bl	800665c <HAL_RCC_GetPCLK2Freq>
        break;
 80081b4:	e7b3      	b.n	800811e <UART_SetConfig+0x196>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80081ba:	d0ae      	beq.n	800811a <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK1Freq();
 80081bc:	f7fe fa3e 	bl	800663c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d0ad      	beq.n	8008120 <UART_SetConfig+0x198>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081c4:	6862      	ldr	r2, [r4, #4]
 80081c6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80081ca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ce:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80081d2:	f1a3 0110 	sub.w	r1, r3, #16
 80081d6:	4291      	cmp	r1, r2
 80081d8:	f63f af30 	bhi.w	800803c <UART_SetConfig+0xb4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081dc:	6822      	ldr	r2, [r4, #0]
 80081de:	60d3      	str	r3, [r2, #12]
 80081e0:	e79e      	b.n	8008120 <UART_SetConfig+0x198>
 80081e2:	bf00      	nop
 80081e4:	efff69f3 	.word	0xefff69f3
 80081e8:	40011000 	.word	0x40011000
 80081ec:	40023800 	.word	0x40023800
 80081f0:	08017e6c 	.word	0x08017e6c
 80081f4:	40004400 	.word	0x40004400
 80081f8:	40004800 	.word	0x40004800
 80081fc:	40004c00 	.word	0x40004c00
 8008200:	40005000 	.word	0x40005000
 8008204:	40011400 	.word	0x40011400
 8008208:	40007800 	.word	0x40007800
 800820c:	40007c00 	.word	0x40007c00
 8008210:	00f42400 	.word	0x00f42400

08008214 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008214:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008216:	07da      	lsls	r2, r3, #31
{
 8008218:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800821a:	d506      	bpl.n	800822a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800821c:	6801      	ldr	r1, [r0, #0]
 800821e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008220:	684a      	ldr	r2, [r1, #4]
 8008222:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008226:	4322      	orrs	r2, r4
 8008228:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800822a:	079c      	lsls	r4, r3, #30
 800822c:	d506      	bpl.n	800823c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800822e:	6801      	ldr	r1, [r0, #0]
 8008230:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008232:	684a      	ldr	r2, [r1, #4]
 8008234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008238:	4322      	orrs	r2, r4
 800823a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800823c:	0759      	lsls	r1, r3, #29
 800823e:	d506      	bpl.n	800824e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008240:	6801      	ldr	r1, [r0, #0]
 8008242:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008244:	684a      	ldr	r2, [r1, #4]
 8008246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800824a:	4322      	orrs	r2, r4
 800824c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800824e:	071a      	lsls	r2, r3, #28
 8008250:	d506      	bpl.n	8008260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008252:	6801      	ldr	r1, [r0, #0]
 8008254:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008256:	684a      	ldr	r2, [r1, #4]
 8008258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800825c:	4322      	orrs	r2, r4
 800825e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008260:	06dc      	lsls	r4, r3, #27
 8008262:	d506      	bpl.n	8008272 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008264:	6801      	ldr	r1, [r0, #0]
 8008266:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008268:	688a      	ldr	r2, [r1, #8]
 800826a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800826e:	4322      	orrs	r2, r4
 8008270:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008272:	0699      	lsls	r1, r3, #26
 8008274:	d506      	bpl.n	8008284 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008276:	6801      	ldr	r1, [r0, #0]
 8008278:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800827a:	688a      	ldr	r2, [r1, #8]
 800827c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008280:	4322      	orrs	r2, r4
 8008282:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008284:	065a      	lsls	r2, r3, #25
 8008286:	d510      	bpl.n	80082aa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800828c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800828e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008292:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008296:	ea42 0204 	orr.w	r2, r2, r4
 800829a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800829c:	d105      	bne.n	80082aa <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800829e:	684a      	ldr	r2, [r1, #4]
 80082a0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80082a2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80082a6:	4322      	orrs	r2, r4
 80082a8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082aa:	061b      	lsls	r3, r3, #24
 80082ac:	d506      	bpl.n	80082bc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ae:	6802      	ldr	r2, [r0, #0]
 80082b0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80082b2:	6853      	ldr	r3, [r2, #4]
 80082b4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80082b8:	430b      	orrs	r3, r1
 80082ba:	6053      	str	r3, [r2, #4]
  }
}
 80082bc:	bd10      	pop	{r4, pc}

080082be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80082c6:	4604      	mov	r4, r0
 80082c8:	460e      	mov	r6, r1
 80082ca:	4615      	mov	r5, r2
 80082cc:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	69d3      	ldr	r3, [r2, #28]
 80082d2:	ea36 0303 	bics.w	r3, r6, r3
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	42ab      	cmp	r3, r5
 80082de:	d001      	beq.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80082e0:	2000      	movs	r0, #0
 80082e2:	e025      	b.n	8008330 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80082e8:	d0f2      	beq.n	80082d0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fc f883 	bl	80043f4 <HAL_GetTick>
 80082ee:	1bc0      	subs	r0, r0, r7
 80082f0:	4540      	cmp	r0, r8
 80082f2:	6820      	ldr	r0, [r4, #0]
 80082f4:	d802      	bhi.n	80082fc <UART_WaitOnFlagUntilTimeout+0x3e>
 80082f6:	f1b8 0f00 	cmp.w	r8, #0
 80082fa:	d11b      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	e840 3200 	strex	r2, r3, [r0]
 8008308:	2a00      	cmp	r2, #0
 800830a:	d1f7      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f100 0308 	add.w	r3, r0, #8
 8008310:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008314:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	f100 0108 	add.w	r1, r0, #8
 800831c:	e841 3200 	strex	r2, r3, [r1]
 8008320:	2a00      	cmp	r2, #0
 8008322:	d1f3      	bne.n	800830c <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8008324:	2320      	movs	r3, #32
 8008326:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008328:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 800832a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800832c:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
}
 8008330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008334:	6803      	ldr	r3, [r0, #0]
 8008336:	075a      	lsls	r2, r3, #29
 8008338:	d5c9      	bpl.n	80082ce <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800833a:	69c3      	ldr	r3, [r0, #28]
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	d5c6      	bpl.n	80082ce <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008344:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800834a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	e840 3200 	strex	r2, r3, [r0]
 8008352:	2a00      	cmp	r2, #0
 8008354:	d1f7      	bne.n	8008346 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	f100 0308 	add.w	r3, r0, #8
 800835a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	f100 0108 	add.w	r1, r0, #8
 8008366:	e841 3200 	strex	r2, r3, [r1]
 800836a:	2a00      	cmp	r2, #0
 800836c:	d1f3      	bne.n	8008356 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800836e:	2320      	movs	r3, #32
 8008370:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008372:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008374:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8008378:	e7d7      	b.n	800832a <UART_WaitOnFlagUntilTimeout+0x6c>

0800837a <HAL_UART_Transmit>:
{
 800837a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800837e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008380:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8008382:	4604      	mov	r4, r0
 8008384:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8008386:	2b20      	cmp	r3, #32
{
 8008388:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800838a:	d14e      	bne.n	800842a <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800838c:	2900      	cmp	r1, #0
 800838e:	d04a      	beq.n	8008426 <HAL_UART_Transmit+0xac>
 8008390:	2a00      	cmp	r2, #0
 8008392:	d048      	beq.n	8008426 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8008394:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8008398:	2b01      	cmp	r3, #1
 800839a:	d046      	beq.n	800842a <HAL_UART_Transmit+0xb0>
 800839c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80083a0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083a4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083aa:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80083ac:	f7fc f822 	bl	80043f4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80083b2:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80083b4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80083bc:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c0:	d103      	bne.n	80083ca <HAL_UART_Transmit+0x50>
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	b90a      	cbnz	r2, 80083ca <HAL_UART_Transmit+0x50>
 80083c6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80083c8:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80083ca:	2200      	movs	r2, #0
 80083cc:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80083d0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083d4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80083d8:	b292      	uxth	r2, r2
 80083da:	b93a      	cbnz	r2, 80083ec <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083dc:	2140      	movs	r1, #64	; 0x40
 80083de:	4620      	mov	r0, r4
 80083e0:	f7ff ff6d 	bl	80082be <UART_WaitOnFlagUntilTimeout>
 80083e4:	b950      	cbnz	r0, 80083fc <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80083e6:	2320      	movs	r3, #32
 80083e8:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80083ea:	e008      	b.n	80083fe <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	; 0x80
 80083f0:	4620      	mov	r0, r4
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	f7ff ff63 	bl	80082be <UART_WaitOnFlagUntilTimeout>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	b118      	cbz	r0, 8008404 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80083fc:	2003      	movs	r0, #3
}
 80083fe:	b004      	add	sp, #16
 8008400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008404:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8008406:	b95e      	cbnz	r6, 8008420 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008408:	f835 2b02 	ldrh.w	r2, [r5], #2
 800840c:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008410:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8008412:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8008416:	3a01      	subs	r2, #1
 8008418:	b292      	uxth	r2, r2
 800841a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800841e:	e7d7      	b.n	80083d0 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008420:	f816 2b01 	ldrb.w	r2, [r6], #1
 8008424:	e7f4      	b.n	8008410 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8008426:	2001      	movs	r0, #1
 8008428:	e7e9      	b.n	80083fe <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800842a:	2002      	movs	r0, #2
 800842c:	e7e7      	b.n	80083fe <HAL_UART_Transmit+0x84>

0800842e <HAL_UART_Receive>:
{
 800842e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008432:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8008434:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800843a:	2b20      	cmp	r3, #32
{
 800843c:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800843e:	d168      	bne.n	8008512 <HAL_UART_Receive+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8008440:	2900      	cmp	r1, #0
 8008442:	d064      	beq.n	800850e <HAL_UART_Receive+0xe0>
 8008444:	2a00      	cmp	r2, #0
 8008446:	d062      	beq.n	800850e <HAL_UART_Receive+0xe0>
    __HAL_LOCK(huart);
 8008448:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800844c:	2b01      	cmp	r3, #1
 800844e:	d060      	beq.n	8008512 <HAL_UART_Receive+0xe4>
 8008450:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8008456:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800845a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	f8c0 8080 	str.w	r8, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008460:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008462:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8008466:	f7fb ffc5 	bl	80043f4 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800846a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800846c:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 800846e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8008476:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800847a:	d11c      	bne.n	80084b6 <HAL_UART_Receive+0x88>
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	b9c2      	cbnz	r2, 80084b2 <HAL_UART_Receive+0x84>
 8008480:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008484:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800848c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008490:	d122      	bne.n	80084d8 <HAL_UART_Receive+0xaa>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	bb03      	cbnz	r3, 80084d8 <HAL_UART_Receive+0xaa>
 8008496:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8008498:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 800849a:	2300      	movs	r3, #0
 800849c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 80084a0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80084a4:	b290      	uxth	r0, r2
 80084a6:	b9c8      	cbnz	r0, 80084dc <HAL_UART_Receive+0xae>
    huart->RxState = HAL_UART_STATE_READY;
 80084a8:	2320      	movs	r3, #32
 80084aa:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80084ac:	b003      	add	sp, #12
 80084ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	e7e6      	b.n	8008484 <HAL_UART_Receive+0x56>
 80084b6:	b923      	cbnz	r3, 80084c2 <HAL_UART_Receive+0x94>
 80084b8:	6922      	ldr	r2, [r4, #16]
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	d0f9      	beq.n	80084b2 <HAL_UART_Receive+0x84>
 80084be:	227f      	movs	r2, #127	; 0x7f
 80084c0:	e7e0      	b.n	8008484 <HAL_UART_Receive+0x56>
 80084c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c6:	d104      	bne.n	80084d2 <HAL_UART_Receive+0xa4>
 80084c8:	6922      	ldr	r2, [r4, #16]
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d0f7      	beq.n	80084be <HAL_UART_Receive+0x90>
 80084ce:	223f      	movs	r2, #63	; 0x3f
 80084d0:	e7d8      	b.n	8008484 <HAL_UART_Receive+0x56>
 80084d2:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 80084d6:	e7d7      	b.n	8008488 <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 80084d8:	2600      	movs	r6, #0
 80084da:	e7de      	b.n	800849a <HAL_UART_Receive+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80084dc:	464b      	mov	r3, r9
 80084de:	2200      	movs	r2, #0
 80084e0:	2120      	movs	r1, #32
 80084e2:	4620      	mov	r0, r4
 80084e4:	9700      	str	r7, [sp, #0]
 80084e6:	f7ff feea 	bl	80082be <UART_WaitOnFlagUntilTimeout>
 80084ea:	b9a0      	cbnz	r0, 8008516 <HAL_UART_Receive+0xe8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80084f4:	b945      	cbnz	r5, 8008508 <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80084f6:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80084fa:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80084fe:	3a01      	subs	r2, #1
 8008500:	b292      	uxth	r2, r2
 8008502:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8008506:	e7cb      	b.n	80084a0 <HAL_UART_Receive+0x72>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008508:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 800850c:	e7f5      	b.n	80084fa <HAL_UART_Receive+0xcc>
      return  HAL_ERROR;
 800850e:	2001      	movs	r0, #1
 8008510:	e7cc      	b.n	80084ac <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 8008512:	2002      	movs	r0, #2
 8008514:	e7ca      	b.n	80084ac <HAL_UART_Receive+0x7e>
        return HAL_TIMEOUT;
 8008516:	2003      	movs	r0, #3
 8008518:	e7c8      	b.n	80084ac <HAL_UART_Receive+0x7e>

0800851a <UART_CheckIdleState>:
{
 800851a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851c:	2500      	movs	r5, #0
{
 800851e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8008524:	f7fb ff66 	bl	80043f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008528:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800852a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	0712      	lsls	r2, r2, #28
 8008530:	d408      	bmi.n	8008544 <UART_CheckIdleState+0x2a>
  huart->gState = HAL_UART_STATE_READY;
 8008532:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008536:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8008538:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	6620      	str	r0, [r4, #96]	; 0x60
}
 8008540:	b003      	add	sp, #12
 8008542:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008544:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008548:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800854c:	4620      	mov	r0, r4
 800854e:	9200      	str	r2, [sp, #0]
 8008550:	462a      	mov	r2, r5
 8008552:	f7ff feb4 	bl	80082be <UART_WaitOnFlagUntilTimeout>
 8008556:	2800      	cmp	r0, #0
 8008558:	d0eb      	beq.n	8008532 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800855a:	2003      	movs	r0, #3
 800855c:	e7f0      	b.n	8008540 <UART_CheckIdleState+0x26>

0800855e <HAL_UART_Init>:
{
 800855e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008560:	4604      	mov	r4, r0
 8008562:	b340      	cbz	r0, 80085b6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008564:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008566:	b91b      	cbnz	r3, 8008570 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8008568:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800856c:	f003 fad8 	bl	800bb20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8008570:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008572:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008574:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8008576:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8008578:	6813      	ldr	r3, [r2, #0]
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008580:	f7ff fd02 	bl	8007f88 <UART_SetConfig>
 8008584:	2801      	cmp	r0, #1
 8008586:	d016      	beq.n	80085b6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800858a:	b113      	cbz	r3, 8008592 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800858c:	4620      	mov	r0, r4
 800858e:	f7ff fe41 	bl	8008214 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008592:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008594:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800859c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
}
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80085b0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80085b2:	f7ff bfb2 	b.w	800851a <UART_CheckIdleState>
}
 80085b6:	2001      	movs	r0, #1
 80085b8:	bd10      	pop	{r4, pc}

080085ba <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80085ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80085be:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80085c0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80085c4:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80085c8:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80085cc:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80085d0:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 80085d4:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80085d6:	b9a2      	cbnz	r2, 8008602 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80085d8:	ea43 0209 	orr.w	r2, r3, r9
 80085dc:	6801      	ldr	r1, [r0, #0]
 80085de:	432a      	orrs	r2, r5
 80085e0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80085e4:	ea42 0308 	orr.w	r3, r2, r8
 80085e8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80085ec:	ea43 030e 	orr.w	r3, r3, lr
 80085f0:	ea43 030c 	orr.w	r3, r3, ip
 80085f4:	433b      	orrs	r3, r7
 80085f6:	4333      	orrs	r3, r6
 80085f8:	430b      	orrs	r3, r1
 80085fa:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80085fc:	2000      	movs	r0, #0
 80085fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008602:	6802      	ldr	r2, [r0, #0]
 8008604:	ea43 0309 	orr.w	r3, r3, r9
 8008608:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800860c:	4313      	orrs	r3, r2
 800860e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008610:	ea45 0308 	orr.w	r3, r5, r8
 8008614:	6842      	ldr	r2, [r0, #4]
 8008616:	ea43 030e 	orr.w	r3, r3, lr
 800861a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800861e:	ea43 030c 	orr.w	r3, r3, ip
 8008622:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8008626:	433b      	orrs	r3, r7
 8008628:	4333      	orrs	r3, r6
 800862a:	4313      	orrs	r3, r2
 800862c:	6043      	str	r3, [r0, #4]
 800862e:	e7e5      	b.n	80085fc <FMC_SDRAM_Init+0x42>

08008630 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008630:	68cb      	ldr	r3, [r1, #12]
 8008632:	f103 3cff 	add.w	ip, r3, #4294967295
 8008636:	694b      	ldr	r3, [r1, #20]
{
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800863a:	3b01      	subs	r3, #1
 800863c:	680f      	ldr	r7, [r1, #0]
 800863e:	684c      	ldr	r4, [r1, #4]
 8008640:	688e      	ldr	r6, [r1, #8]
 8008642:	051b      	lsls	r3, r3, #20
 8008644:	690d      	ldr	r5, [r1, #16]
 8008646:	3c01      	subs	r4, #1
 8008648:	6989      	ldr	r1, [r1, #24]
 800864a:	3e01      	subs	r6, #1
 800864c:	3d01      	subs	r5, #1
 800864e:	3f01      	subs	r7, #1
 8008650:	3901      	subs	r1, #1
 8008652:	0124      	lsls	r4, r4, #4
 8008654:	0236      	lsls	r6, r6, #8
 8008656:	042d      	lsls	r5, r5, #16
 8008658:	0609      	lsls	r1, r1, #24
 800865a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800865e:	b95a      	cbnz	r2, 8008678 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008660:	433b      	orrs	r3, r7
 8008662:	6882      	ldr	r2, [r0, #8]
 8008664:	4323      	orrs	r3, r4
 8008666:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800866a:	4333      	orrs	r3, r6
 800866c:	432b      	orrs	r3, r5
 800866e:	430b      	orrs	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008674:	2000      	movs	r0, #0
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008678:	6882      	ldr	r2, [r0, #8]
 800867a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800867e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008682:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008684:	ea44 0306 	orr.w	r3, r4, r6
 8008688:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800868a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800868c:	68c2      	ldr	r2, [r0, #12]
 800868e:	432b      	orrs	r3, r5
 8008690:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8008694:	430b      	orrs	r3, r1
 8008696:	4313      	orrs	r3, r2
 8008698:	60c3      	str	r3, [r0, #12]
 800869a:	e7eb      	b.n	8008674 <FMC_SDRAM_Timing_Init+0x44>

0800869c <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800869c:	6902      	ldr	r2, [r0, #16]
{
 800869e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80086a0:	e9d1 3400 	ldrd	r3, r4, [r1]
 80086a4:	0d92      	lsrs	r2, r2, #22
 80086a6:	4323      	orrs	r3, r4
 80086a8:	68cc      	ldr	r4, [r1, #12]
 80086aa:	0592      	lsls	r2, r2, #22
 80086ac:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80086b0:	4313      	orrs	r3, r2
 80086b2:	688a      	ldr	r2, [r1, #8]
 80086b4:	3a01      	subs	r2, #1
 80086b6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80086ba:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80086bc:	2000      	movs	r0, #0
 80086be:	bd10      	pop	{r4, pc}

080086c0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80086c0:	6943      	ldr	r3, [r0, #20]
 80086c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80086c6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80086ca:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80086ce:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 80086d0:	2000      	movs	r0, #0
 80086d2:	4770      	bx	lr

080086d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80086d4:	b084      	sub	sp, #16
 80086d6:	b510      	push	{r4, lr}
 80086d8:	ac03      	add	r4, sp, #12
 80086da:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80086de:	460b      	mov	r3, r1
 80086e0:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80086e2:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80086e4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80086e6:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80086e8:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 80086ec:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 80086ee:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80086f0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 80086f4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80086f6:	9907      	ldr	r1, [sp, #28]
 80086f8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80086fa:	9908      	ldr	r1, [sp, #32]
 80086fc:	430b      	orrs	r3, r1

  return HAL_OK;
}
 80086fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008702:	4313      	orrs	r3, r2
}
 8008704:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008706:	6043      	str	r3, [r0, #4]
}
 8008708:	2000      	movs	r0, #0
 800870a:	4770      	bx	lr

0800870c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800870c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8008710:	4770      	bx	lr

08008712 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008712:	680b      	ldr	r3, [r1, #0]
 8008714:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8008718:	2000      	movs	r0, #0
 800871a:	4770      	bx	lr

0800871c <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800871c:	2303      	movs	r3, #3
 800871e:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr

08008724 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008724:	6800      	ldr	r0, [r0, #0]
}
 8008726:	f000 0003 	and.w	r0, r0, #3
 800872a:	4770      	bx	lr

0800872c <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800872c:	680b      	ldr	r3, [r1, #0]
{
 800872e:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8008730:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008732:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008734:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008738:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800873c:	4323      	orrs	r3, r4
                       Command->Response         |\
 800873e:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8008740:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008742:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8008746:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8008748:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800874a:	4313      	orrs	r3, r2
 800874c:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 800874e:	2000      	movs	r0, #0
 8008750:	bd10      	pop	{r4, pc}

08008752 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008752:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8008754:	5840      	ldr	r0, [r0, r1]
}  
 8008756:	4770      	bx	lr

08008758 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008758:	680b      	ldr	r3, [r1, #0]
{
 800875a:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 800875c:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800875e:	684b      	ldr	r3, [r1, #4]
 8008760:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008762:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008764:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008768:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800876c:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800876e:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8008770:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8008772:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8008774:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008776:	4313      	orrs	r3, r2
 8008778:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 800877a:	2000      	movs	r0, #0
 800877c:	bd10      	pop	{r4, pc}
	...

08008780 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008780:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008782:	2300      	movs	r3, #0
{
 8008784:	b086      	sub	sp, #24
 8008786:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008788:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800878a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800878e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008796:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008798:	f7ff ffc8 	bl	800872c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <SDMMC_CmdGoIdleState+0x48>)
 800879e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ac:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80087ae:	3b01      	subs	r3, #1
 80087b0:	d307      	bcc.n	80087c2 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80087b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80087b4:	0612      	lsls	r2, r2, #24
 80087b6:	d5fa      	bpl.n	80087ae <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087b8:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 80087ba:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087bc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80087be:	b006      	add	sp, #24
 80087c0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80087c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80087c6:	e7fa      	b.n	80087be <SDMMC_CmdGoIdleState+0x3e>
 80087c8:	200000a0 	.word	0x200000a0

080087cc <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80087cc:	4b45      	ldr	r3, [pc, #276]	; (80088e4 <SDMMC_GetCmdResp1+0x118>)
{
 80087ce:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80087d0:	681b      	ldr	r3, [r3, #0]
{
 80087d2:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80087d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80087d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80087dc:	435a      	muls	r2, r3
    if (count-- == 0U)
 80087de:	2a00      	cmp	r2, #0
 80087e0:	d049      	beq.n	8008876 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 80087e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087e4:	f013 0f45 	tst.w	r3, #69	; 0x45
 80087e8:	d007      	beq.n	80087fa <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087ea:	051b      	lsls	r3, r3, #20
 80087ec:	d405      	bmi.n	80087fa <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f0:	0758      	lsls	r0, r3, #29
 80087f2:	d504      	bpl.n	80087fe <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087f4:	2004      	movs	r0, #4
 80087f6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	3a01      	subs	r2, #1
 80087fc:	e7ef      	b.n	80087de <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008800:	f010 0001 	ands.w	r0, r0, #1
 8008804:	d002      	beq.n	800880c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008806:	2301      	movs	r3, #1
 8008808:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800880a:	e7f5      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800880c:	23c5      	movs	r3, #197	; 0xc5
 800880e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8008810:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008812:	b2db      	uxtb	r3, r3
 8008814:	4299      	cmp	r1, r3
 8008816:	d131      	bne.n	800887c <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8008818:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800881a:	4833      	ldr	r0, [pc, #204]	; (80088e8 <SDMMC_GetCmdResp1+0x11c>)
 800881c:	4018      	ands	r0, r3
 800881e:	2800      	cmp	r0, #0
 8008820:	d0ea      	beq.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008822:	2b00      	cmp	r3, #0
 8008824:	db2c      	blt.n	8008880 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008826:	005a      	lsls	r2, r3, #1
 8008828:	d42d      	bmi.n	8008886 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800882a:	009c      	lsls	r4, r3, #2
 800882c:	d42d      	bmi.n	800888a <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800882e:	00d9      	lsls	r1, r3, #3
 8008830:	d42d      	bmi.n	800888e <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008832:	011a      	lsls	r2, r3, #4
 8008834:	d42e      	bmi.n	8008894 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008836:	015c      	lsls	r4, r3, #5
 8008838:	d42f      	bmi.n	800889a <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800883a:	01d9      	lsls	r1, r3, #7
 800883c:	d430      	bmi.n	80088a0 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800883e:	021a      	lsls	r2, r3, #8
 8008840:	d431      	bmi.n	80088a6 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008842:	025c      	lsls	r4, r3, #9
 8008844:	d432      	bmi.n	80088ac <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008846:	0299      	lsls	r1, r3, #10
 8008848:	d433      	bmi.n	80088b2 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800884a:	02da      	lsls	r2, r3, #11
 800884c:	d434      	bmi.n	80088b8 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800884e:	035c      	lsls	r4, r3, #13
 8008850:	d435      	bmi.n	80088be <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008852:	0399      	lsls	r1, r3, #14
 8008854:	d436      	bmi.n	80088c4 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008856:	03da      	lsls	r2, r3, #15
 8008858:	d437      	bmi.n	80088ca <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800885a:	041c      	lsls	r4, r3, #16
 800885c:	d438      	bmi.n	80088d0 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800885e:	0459      	lsls	r1, r3, #17
 8008860:	d439      	bmi.n	80088d6 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008862:	049a      	lsls	r2, r3, #18
 8008864:	d43a      	bmi.n	80088dc <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008866:	f013 0f08 	tst.w	r3, #8
 800886a:	bf14      	ite	ne
 800886c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8008870:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8008874:	e7c0      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8008876:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800887a:	e7bd      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800887c:	2001      	movs	r0, #1
 800887e:	e7bb      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008880:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8008884:	e7b8      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008886:	2040      	movs	r0, #64	; 0x40
 8008888:	e7b6      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800888a:	2080      	movs	r0, #128	; 0x80
 800888c:	e7b4      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800888e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008892:	e7b1      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008894:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008898:	e7ae      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800889a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800889e:	e7ab      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80088a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80088a4:	e7a8      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80088a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80088aa:	e7a5      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80088ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80088b0:	e7a2      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80088b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80088b6:	e79f      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80088b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80088bc:	e79c      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80088be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80088c2:	e799      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80088c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80088c8:	e796      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80088ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80088ce:	e793      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80088d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80088d4:	e790      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80088d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80088da:	e78d      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80088dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80088e0:	e78a      	b.n	80087f8 <SDMMC_GetCmdResp1+0x2c>
 80088e2:	bf00      	nop
 80088e4:	200000a0 	.word	0x200000a0
 80088e8:	fdffe008 	.word	0xfdffe008

080088ec <SDMMC_CmdBlockLength>:
{
 80088ec:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088ee:	2340      	movs	r3, #64	; 0x40
{
 80088f0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088f2:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088f4:	2200      	movs	r2, #0
{
 80088f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80088f8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088fc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008904:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008908:	f7ff ff10 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800890c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008910:	4629      	mov	r1, r5
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff ff5a 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008918:	b007      	add	sp, #28
 800891a:	bd30      	pop	{r4, r5, pc}

0800891c <SDMMC_CmdReadSingleBlock>:
{
 800891c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800891e:	2340      	movs	r3, #64	; 0x40
{
 8008920:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008922:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008924:	2200      	movs	r2, #0
{
 8008926:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008928:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800892a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800892c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008934:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008938:	f7ff fef8 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800893c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff ff42 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008948:	b007      	add	sp, #28
 800894a:	bd30      	pop	{r4, r5, pc}

0800894c <SDMMC_CmdReadMultiBlock>:
{
 800894c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800894e:	2340      	movs	r3, #64	; 0x40
{
 8008950:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008952:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008954:	2200      	movs	r2, #0
{
 8008956:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008958:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800895a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800895c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008964:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008968:	f7ff fee0 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800896c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008970:	4629      	mov	r1, r5
 8008972:	4620      	mov	r0, r4
 8008974:	f7ff ff2a 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008978:	b007      	add	sp, #28
 800897a:	bd30      	pop	{r4, r5, pc}

0800897c <SDMMC_CmdWriteSingleBlock>:
{
 800897c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800897e:	2340      	movs	r3, #64	; 0x40
{
 8008980:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008982:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008984:	2200      	movs	r2, #0
{
 8008986:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008988:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800898a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800898c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008994:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008998:	f7ff fec8 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800899c:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a0:	4629      	mov	r1, r5
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff ff12 	bl	80087cc <SDMMC_GetCmdResp1>
}
 80089a8:	b007      	add	sp, #28
 80089aa:	bd30      	pop	{r4, r5, pc}

080089ac <SDMMC_CmdWriteMultiBlock>:
{
 80089ac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089ae:	2340      	movs	r3, #64	; 0x40
{
 80089b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089b2:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089b4:	2200      	movs	r2, #0
{
 80089b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80089b8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089bc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089c8:	f7ff feb0 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80089cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d0:	4629      	mov	r1, r5
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff fefa 	bl	80087cc <SDMMC_GetCmdResp1>
}
 80089d8:	b007      	add	sp, #28
 80089da:	bd30      	pop	{r4, r5, pc}

080089dc <SDMMC_CmdSDEraseStartAdd>:
{
 80089dc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089de:	2340      	movs	r3, #64	; 0x40
{
 80089e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089e2:	2520      	movs	r5, #32
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089e4:	2200      	movs	r2, #0
{
 80089e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 80089e8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089ea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089ec:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089f8:	f7ff fe98 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 80089fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a00:	4629      	mov	r1, r5
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff fee2 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008a08:	b007      	add	sp, #28
 8008a0a:	bd30      	pop	{r4, r5, pc}

08008a0c <SDMMC_CmdSDEraseEndAdd>:
{
 8008a0c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a0e:	2340      	movs	r3, #64	; 0x40
{
 8008a10:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a12:	2521      	movs	r5, #33	; 0x21
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a14:	2200      	movs	r2, #0
{
 8008a16:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 8008a18:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a1a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a1c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a24:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a28:	f7ff fe80 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 8008a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a30:	4629      	mov	r1, r5
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff feca 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008a38:	b007      	add	sp, #28
 8008a3a:	bd30      	pop	{r4, r5, pc}

08008a3c <SDMMC_CmdErase>:
{
 8008a3c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8008a3e:	2300      	movs	r3, #0
{
 8008a40:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8008a42:	2526      	movs	r5, #38	; 0x26
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a44:	2240      	movs	r2, #64	; 0x40
{
 8008a46:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8008a4e:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a56:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a58:	f7ff fe68 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 8008a5c:	f24f 6218 	movw	r2, #63000	; 0xf618
 8008a60:	4629      	mov	r1, r5
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7ff feb2 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008a68:	b007      	add	sp, #28
 8008a6a:	bd30      	pop	{r4, r5, pc}

08008a6c <SDMMC_CmdStopTransfer>:
{
 8008a6c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008a6e:	2300      	movs	r3, #0
{
 8008a70:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008a72:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a74:	2240      	movs	r2, #64	; 0x40
{
 8008a76:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a78:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008a7e:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a86:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a88:	f7ff fe50 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008a8c:	4a03      	ldr	r2, [pc, #12]	; (8008a9c <SDMMC_CmdStopTransfer+0x30>)
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4620      	mov	r0, r4
 8008a92:	f7ff fe9b 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008a96:	b007      	add	sp, #28
 8008a98:	bd30      	pop	{r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	05f5e100 	.word	0x05f5e100

08008aa0 <SDMMC_CmdSelDesel>:
{
 8008aa0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aa2:	2340      	movs	r3, #64	; 0x40
{
 8008aa4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aa6:	2507      	movs	r5, #7
{
 8008aa8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008aaa:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008aac:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ab0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008abc:	f7ff fe36 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff fe80 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008acc:	b007      	add	sp, #28
 8008ace:	bd30      	pop	{r4, r5, pc}

08008ad0 <SDMMC_CmdAppCommand>:
{
 8008ad0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ad2:	2340      	movs	r3, #64	; 0x40
{
 8008ad4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ad6:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ad8:	2200      	movs	r2, #0
{
 8008ada:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008adc:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ade:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ae0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008aec:	f7ff fe1e 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af4:	4629      	mov	r1, r5
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fe68 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008afc:	b007      	add	sp, #28
 8008afe:	bd30      	pop	{r4, r5, pc}

08008b00 <SDMMC_CmdBusWidth>:
{
 8008b00:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b02:	2340      	movs	r3, #64	; 0x40
{
 8008b04:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b06:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b08:	2200      	movs	r2, #0
{
 8008b0a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008b0c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b0e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b10:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b1c:	f7ff fe06 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff fe50 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008b2c:	b007      	add	sp, #28
 8008b2e:	bd30      	pop	{r4, r5, pc}

08008b30 <SDMMC_CmdSendSCR>:
{
 8008b30:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008b32:	2300      	movs	r3, #0
{
 8008b34:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008b36:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b38:	2240      	movs	r2, #64	; 0x40
{
 8008b3a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b3c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b3e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008b42:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b4a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b4c:	f7ff fdee 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff fe38 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008b5c:	b007      	add	sp, #28
 8008b5e:	bd30      	pop	{r4, r5, pc}

08008b60 <SDMMC_CmdSendStatus>:
{
 8008b60:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b62:	2340      	movs	r3, #64	; 0x40
{
 8008b64:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b66:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b68:	2200      	movs	r2, #0
{
 8008b6a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8008b6c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b6e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b70:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b78:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b7c:	f7ff fdd6 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b84:	4629      	mov	r1, r5
 8008b86:	4620      	mov	r0, r4
 8008b88:	f7ff fe20 	bl	80087cc <SDMMC_GetCmdResp1>
}
 8008b8c:	b007      	add	sp, #28
 8008b8e:	bd30      	pop	{r4, r5, pc}

08008b90 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b90:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <SDMMC_GetCmdResp2+0x48>)
 8008b92:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8008b96:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008ba2:	434b      	muls	r3, r1
    if (count-- == 0U)
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	d313      	bcc.n	8008bd0 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8008ba8:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008baa:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008bae:	d0f9      	beq.n	8008ba4 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bb0:	0509      	lsls	r1, r1, #20
 8008bb2:	d4f7      	bmi.n	8008ba4 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bb4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008bb6:	075b      	lsls	r3, r3, #29
 8008bb8:	d502      	bpl.n	8008bc0 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bba:	2004      	movs	r0, #4
 8008bbc:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bbe:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bc0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008bc2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008bca:	23c5      	moveq	r3, #197	; 0xc5
 8008bcc:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008bce:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008bd0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200000a0 	.word	0x200000a0

08008bdc <SDMMC_CmdSendCID>:
{
 8008bdc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008bde:	2300      	movs	r3, #0
{
 8008be0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008be2:	2202      	movs	r2, #2
{
 8008be4:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008be6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008be8:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008bec:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bee:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bf8:	f7ff fd98 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff ffc7 	bl	8008b90 <SDMMC_GetCmdResp2>
}
 8008c02:	b006      	add	sp, #24
 8008c04:	bd10      	pop	{r4, pc}

08008c06 <SDMMC_CmdSendCSD>:
{
 8008c06:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c08:	2209      	movs	r2, #9
{
 8008c0a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c0c:	23c0      	movs	r3, #192	; 0xc0
{
 8008c0e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8008c10:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c12:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c1c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c20:	a901      	add	r1, sp, #4
 8008c22:	f7ff fd83 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7ff ffb2 	bl	8008b90 <SDMMC_GetCmdResp2>
}
 8008c2c:	b006      	add	sp, #24
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c30:	4b0f      	ldr	r3, [pc, #60]	; (8008c70 <SDMMC_GetCmdResp3+0x40>)
 8008c32:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8008c36:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8008c42:	434b      	muls	r3, r1
    if (count-- == 0U)
 8008c44:	3b01      	subs	r3, #1
 8008c46:	d30f      	bcc.n	8008c68 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8008c48:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008c4a:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008c4e:	d0f9      	beq.n	8008c44 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c50:	0509      	lsls	r1, r1, #20
 8008c52:	d4f7      	bmi.n	8008c44 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c54:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008c56:	f010 0004 	ands.w	r0, r0, #4
 8008c5a:	d002      	beq.n	8008c62 <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c5c:	2004      	movs	r0, #4
 8008c5e:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c60:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c62:	23c5      	movs	r3, #197	; 0xc5
 8008c64:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8008c66:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8008c68:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	200000a0 	.word	0x200000a0

08008c74 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c74:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c78:	2229      	movs	r2, #41	; 0x29
 8008c7a:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8008c80:	b510      	push	{r4, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c90:	2100      	movs	r1, #0
 8008c92:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c96:	a901      	add	r1, sp, #4
 8008c98:	f7ff fd48 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff ffc7 	bl	8008c30 <SDMMC_GetCmdResp3>
}
 8008ca2:	b006      	add	sp, #24
 8008ca4:	bd10      	pop	{r4, pc}
	...

08008ca8 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ca8:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <SDMMC_GetCmdResp6+0x80>)
{
 8008caa:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cac:	681b      	ldr	r3, [r3, #0]
{
 8008cae:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cb0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8008cb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8008cb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8008cbc:	4343      	muls	r3, r0
    if (count-- == 0U)
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	d329      	bcc.n	8008d16 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 8008cc2:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cc4:	f010 0f45 	tst.w	r0, #69	; 0x45
 8008cc8:	d0f9      	beq.n	8008cbe <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cca:	0500      	lsls	r0, r0, #20
 8008ccc:	d4f7      	bmi.n	8008cbe <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cd0:	0758      	lsls	r0, r3, #29
 8008cd2:	d502      	bpl.n	8008cda <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cd4:	2004      	movs	r0, #4
 8008cd6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8008cd8:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008cdc:	f010 0001 	ands.w	r0, r0, #1
 8008ce0:	d002      	beq.n	8008ce8 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ce6:	e7f7      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ce8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	4299      	cmp	r1, r3
 8008cee:	d115      	bne.n	8008d1c <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cf0:	23c5      	movs	r3, #197	; 0xc5
 8008cf2:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8008cf4:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008cf6:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8008cfa:	d102      	bne.n	8008d02 <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008cfc:	0c1b      	lsrs	r3, r3, #16
 8008cfe:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8008d00:	e7ea      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d02:	045a      	lsls	r2, r3, #17
 8008d04:	d40c      	bmi.n	8008d20 <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d06:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008d0a:	bf14      	ite	ne
 8008d0c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8008d10:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8008d14:	e7e0      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8008d16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008d1a:	e7dd      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7db      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008d24:	e7d8      	b.n	8008cd8 <SDMMC_GetCmdResp6+0x30>
 8008d26:	bf00      	nop
 8008d28:	200000a0 	.word	0x200000a0

08008d2c <SDMMC_CmdSetRelAdd>:
{
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d30:	2300      	movs	r3, #0
 8008d32:	2503      	movs	r5, #3
{
 8008d34:	4604      	mov	r4, r0
 8008d36:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d38:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d3a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d3e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d46:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d48:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d4a:	f7ff fcef 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d4e:	9a01      	ldr	r2, [sp, #4]
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff ffa8 	bl	8008ca8 <SDMMC_GetCmdResp6>
}
 8008d58:	b009      	add	sp, #36	; 0x24
 8008d5a:	bd30      	pop	{r4, r5, pc}

08008d5c <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <SDMMC_GetCmdResp7+0x50>)
 8008d5e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8008d62:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8008d6e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8008d70:	3b01      	subs	r3, #1
 8008d72:	d317      	bcc.n	8008da4 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8008d74:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d76:	f011 0f45 	tst.w	r1, #69	; 0x45
 8008d7a:	d0f9      	beq.n	8008d70 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d7c:	0508      	lsls	r0, r1, #20
 8008d7e:	d4f7      	bmi.n	8008d70 <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d80:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008d82:	0759      	lsls	r1, r3, #29
 8008d84:	d502      	bpl.n	8008d8c <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d86:	2004      	movs	r0, #4
 8008d88:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d8a:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d8c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008d8e:	f010 0001 	ands.w	r0, r0, #1
 8008d92:	d002      	beq.n	8008d9a <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d94:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008d96:	6393      	str	r3, [r2, #56]	; 0x38
 8008d98:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008d9a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008d9c:	065b      	lsls	r3, r3, #25
 8008d9e:	d503      	bpl.n	8008da8 <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	e7f8      	b.n	8008d96 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8008da4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	200000a0 	.word	0x200000a0

08008db0 <SDMMC_CmdOperCond>:
{
 8008db0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008db2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8008db6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008db8:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dba:	2140      	movs	r1, #64	; 0x40
{
 8008dbc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008dbe:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dcc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dd0:	f7ff fcac 	bl	800872c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff ffc1 	bl	8008d5c <SDMMC_GetCmdResp7>
}
 8008dda:	b006      	add	sp, #24
 8008ddc:	bd10      	pop	{r4, pc}
	...

08008de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008de4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008de6:	e003      	b.n	8008df0 <LoopCopyDataInit>

08008de8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008dea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008dec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008dee:	3104      	adds	r1, #4

08008df0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008df0:	480b      	ldr	r0, [pc, #44]	; (8008e20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008df4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008df6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008df8:	d3f6      	bcc.n	8008de8 <CopyDataInit>
  ldr  r2, =_sbss
 8008dfa:	4a0b      	ldr	r2, [pc, #44]	; (8008e28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008dfc:	e002      	b.n	8008e04 <LoopFillZerobss>

08008dfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008dfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008e00:	f842 3b04 	str.w	r3, [r2], #4

08008e04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008e04:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008e06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e08:	d3f9      	bcc.n	8008dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008e0a:	f7fb fa8d 	bl	8004328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e0e:	f005 fb0f 	bl	800e430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e12:	f001 fc05 	bl	800a620 <main>
  bx  lr    
 8008e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008e18:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008e1c:	0802c578 	.word	0x0802c578
  ldr  r0, =_sdata
 8008e20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008e24:	20000770 	.word	0x20000770
  ldr  r2, =_sbss
 8008e28:	20000780 	.word	0x20000780
  ldr  r3, = _ebss
 8008e2c:	2001b76c 	.word	0x2001b76c

08008e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e30:	e7fe      	b.n	8008e30 <ADC_IRQHandler>

08008e32 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8008e32:	2001      	movs	r0, #1
 8008e34:	4770      	bx	lr

08008e36 <_kill>:

int _kill(int pid, int sig)
{
 8008e36:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008e38:	f005 faf4 	bl	800e424 <__errno>
 8008e3c:	2316      	movs	r3, #22
 8008e3e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295
 8008e44:	bd08      	pop	{r3, pc}

08008e46 <_exit>:

void _exit (int status)
{
 8008e46:	b508      	push	{r3, lr}
	errno = EINVAL;
 8008e48:	f005 faec 	bl	800e424 <__errno>
 8008e4c:	2316      	movs	r3, #22
 8008e4e:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8008e50:	e7fe      	b.n	8008e50 <_exit+0xa>

08008e52 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8008e52:	b570      	push	{r4, r5, r6, lr}
 8008e54:	460d      	mov	r5, r1
 8008e56:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e58:	460e      	mov	r6, r1
 8008e5a:	1b73      	subs	r3, r6, r5
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	dc01      	bgt.n	8008e64 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8008e60:	4620      	mov	r0, r4
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8008e64:	f3af 8000 	nop.w
 8008e68:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e6c:	e7f5      	b.n	8008e5a <_read+0x8>

08008e6e <_write>:

int _write(int file, char *ptr, int len)
{
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	460d      	mov	r5, r1
 8008e72:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e74:	460e      	mov	r6, r1
 8008e76:	1b73      	subs	r3, r6, r5
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	dc01      	bgt.n	8008e80 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8008e80:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008e84:	f004 f93a 	bl	800d0fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e88:	e7f5      	b.n	8008e76 <_write+0x8>
	...

08008e8c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008e8c:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <_sbrk+0x2c>)
 8008e8e:	6811      	ldr	r1, [r2, #0]
{
 8008e90:	b508      	push	{r3, lr}
 8008e92:	4603      	mov	r3, r0
	if (heap_end == 0)
 8008e94:	b909      	cbnz	r1, 8008e9a <_sbrk+0xe>
		heap_end = &end;
 8008e96:	4909      	ldr	r1, [pc, #36]	; (8008ebc <_sbrk+0x30>)
 8008e98:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8008e9a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008e9c:	4669      	mov	r1, sp
 8008e9e:	4403      	add	r3, r0
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	d906      	bls.n	8008eb2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008ea4:	f005 fabe 	bl	800e424 <__errno>
 8008ea8:	230c      	movs	r3, #12
 8008eaa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8008eb0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8008eb2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8008eb4:	e7fc      	b.n	8008eb0 <_sbrk+0x24>
 8008eb6:	bf00      	nop
 8008eb8:	20000ff4 	.word	0x20000ff4
 8008ebc:	2001b770 	.word	0x2001b770

08008ec0 <_close>:

int _close(int file)
{
	return -1;
}
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	4770      	bx	lr

08008ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8008eca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8008ecc:	604b      	str	r3, [r1, #4]
}
 8008ece:	4770      	bx	lr

08008ed0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	4770      	bx	lr

08008ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	4770      	bx	lr

08008ed8 <AudioLoopback_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioLoopback_demo (void)
{
 8008ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  * @retval None
  */
static void AudioLoopback_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	f7f9 fe00 	bl	8002ae4 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008ee4:	4869      	ldr	r0, [pc, #420]	; (800908c <AudioLoopback_demo+0x1b4>)
 8008ee6:	f7f9 fdcd 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8008eea:	f7f9 fd71 	bl	80029d0 <BSP_LCD_GetXSize>
 8008eee:	2100      	movs	r1, #0
 8008ef0:	b282      	uxth	r2, r0
 8008ef2:	235a      	movs	r3, #90	; 0x5a
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	f7fa f945 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008efa:	f04f 30ff 	mov.w	r0, #4294967295
 8008efe:	f7f9 fdc1 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008f02:	4862      	ldr	r0, [pc, #392]	; (800908c <AudioLoopback_demo+0x1b4>)
 8008f04:	f7f9 fdca 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008f08:	4861      	ldr	r0, [pc, #388]	; (8009090 <AudioLoopback_demo+0x1b8>)
 8008f0a:	f7f9 fdd3 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO LOOPBACK EXAMPLE", CENTER_MODE);
 8008f0e:	2100      	movs	r1, #0
 8008f10:	2301      	movs	r3, #1
 8008f12:	4a60      	ldr	r2, [pc, #384]	; (8009094 <AudioLoopback_demo+0x1bc>)
 8008f14:	4608      	mov	r0, r1
 8008f16:	f7f9 fef5 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008f1a:	485f      	ldr	r0, [pc, #380]	; (8009098 <AudioLoopback_demo+0x1c0>)
 8008f1c:	f7f9 fdca 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8008f20:	2301      	movs	r3, #1
 8008f22:	4a5e      	ldr	r2, [pc, #376]	; (800909c <AudioLoopback_demo+0x1c4>)
 8008f24:	211e      	movs	r1, #30
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7f9 feec 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008f2c:	4857      	ldr	r0, [pc, #348]	; (800908c <AudioLoopback_demo+0x1b4>)
 8008f2e:	f7f9 fda9 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8008f32:	f7f9 fd4d 	bl	80029d0 <BSP_LCD_GetXSize>
 8008f36:	4604      	mov	r4, r0
 8008f38:	f7f9 fd56 	bl	80029e8 <BSP_LCD_GetYSize>
 8008f3c:	386e      	subs	r0, #110	; 0x6e
 8008f3e:	f1a4 0214 	sub.w	r2, r4, #20
 8008f42:	2164      	movs	r1, #100	; 0x64
 8008f44:	b283      	uxth	r3, r0
 8008f46:	200a      	movs	r0, #10
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	f7f9 fe43 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8008f4e:	f7f9 fd3f 	bl	80029d0 <BSP_LCD_GetXSize>
 8008f52:	4604      	mov	r4, r0
 8008f54:	f7f9 fd48 	bl	80029e8 <BSP_LCD_GetYSize>
 8008f58:	3870      	subs	r0, #112	; 0x70
 8008f5a:	f1a4 0216 	sub.w	r2, r4, #22
 8008f5e:	2165      	movs	r1, #101	; 0x65
 8008f60:	b283      	uxth	r3, r0
 8008f62:	200b      	movs	r0, #11
 8008f64:	b292      	uxth	r2, r2
 8008f66:	f7f9 fe35 	bl	8002bd4 <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008f72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008f76:	9100      	str	r1, [sp, #0]
 8008f78:	f7f9 fbca 	bl	8002710 <BSP_AUDIO_IN_OUT_Init>
 8008f7c:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d15c      	bne.n	8009040 <AudioLoopback_demo+0x168>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008f86:	f7f9 fd89 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008f8a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008f8e:	f7f9 fd79 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8008f92:	f7f9 fd29 	bl	80029e8 <BSP_LCD_GetYSize>
 8008f96:	2301      	movs	r3, #1
 8008f98:	385f      	subs	r0, #95	; 0x5f
 8008f9a:	4a41      	ldr	r2, [pc, #260]	; (80090a0 <AudioLoopback_demo+0x1c8>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008f9c:	b281      	uxth	r1, r0
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	f7f9 feb0 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	f7f9 fd78 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008fac:	4837      	ldr	r0, [pc, #220]	; (800908c <AudioLoopback_demo+0x1b4>)
 8008fae:	f7f9 fd69 	bl	8002a84 <BSP_LCD_SetTextColor>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008fb2:	4c3c      	ldr	r4, [pc, #240]	; (80090a4 <AudioLoopback_demo+0x1cc>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Microphones sound streamed to headphones", CENTER_MODE);
 8008fb4:	f7f9 fd18 	bl	80029e8 <BSP_LCD_GetYSize>
 8008fb8:	3850      	subs	r0, #80	; 0x50
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4a3a      	ldr	r2, [pc, #232]	; (80090a8 <AudioLoopback_demo+0x1d0>)
 8008fbe:	b281      	uxth	r1, r0
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	f7f9 fe9f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 8008fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4837      	ldr	r0, [pc, #220]	; (80090ac <AudioLoopback_demo+0x1d4>)
 8008fce:	f005 fa61 	bl	800e494 <memset>
  memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 8008fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4835      	ldr	r0, [pc, #212]	; (80090b0 <AudioLoopback_demo+0x1d8>)
 8008fda:	f005 fa5b 	bl	800e494 <memset>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008fde:	2300      	movs	r3, #0
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8008fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fe4:	4831      	ldr	r0, [pc, #196]	; (80090ac <AudioLoopback_demo+0x1d4>)
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008fe6:	6023      	str	r3, [r4, #0]
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8008fe8:	f7f9 fa72 	bl	80024d0 <BSP_AUDIO_IN_Record>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8008fec:	4f2f      	ldr	r7, [pc, #188]	; (80090ac <AudioLoopback_demo+0x1d4>)
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8008fee:	2005      	movs	r0, #5
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8008ff0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80090b0 <AudioLoopback_demo+0x1d8>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8008ff4:	f7f9 f8ba 	bl	800216c <BSP_AUDIO_OUT_SetAudioFrameSlot>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8008ff8:	4e2e      	ldr	r6, [pc, #184]	; (80090b4 <AudioLoopback_demo+0x1dc>)
  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 8008ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ffe:	482c      	ldr	r0, [pc, #176]	; (80090b0 <AudioLoopback_demo+0x1d8>)
 8009000:	f7f9 f84a 	bl	8002098 <BSP_AUDIO_OUT_Play>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d12e      	bne.n	8009068 <AudioLoopback_demo+0x190>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800900a:	2300      	movs	r3, #0
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 800900c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009010:	4639      	mov	r1, r7
 8009012:	4640      	mov	r0, r8
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009014:	6023      	str	r3, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8009016:	f005 fa2f 	bl	800e478 <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 800901a:	6825      	ldr	r5, [r4, #0]
 800901c:	2d02      	cmp	r5, #2
 800901e:	d130      	bne.n	8009082 <AudioLoopback_demo+0x1aa>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009020:	2300      	movs	r3, #0
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8009022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009026:	4631      	mov	r1, r6
 8009028:	4823      	ldr	r0, [pc, #140]	; (80090b8 <AudioLoopback_demo+0x1e0>)
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800902a:	6023      	str	r3, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 800902c:	f005 fa24 	bl	800e478 <memcpy>
    if (CheckForUserInput() > 0)
 8009030:	f002 f85c 	bl	800b0ec <CheckForUserInput>
 8009034:	2800      	cmp	r0, #0
 8009036:	d0e5      	beq.n	8009004 <AudioLoopback_demo+0x12c>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8009038:	4628      	mov	r0, r5
 800903a:	f7f9 fa53 	bl	80024e4 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800903e:	e01a      	b.n	8009076 <AudioLoopback_demo+0x19e>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009040:	f7f9 fd2c 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009044:	481d      	ldr	r0, [pc, #116]	; (80090bc <AudioLoopback_demo+0x1e4>)
 8009046:	f7f9 fd1d 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 800904a:	f7f9 fccd 	bl	80029e8 <BSP_LCD_GetYSize>
 800904e:	385f      	subs	r0, #95	; 0x5f
 8009050:	2301      	movs	r3, #1
 8009052:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <AudioLoopback_demo+0x1e8>)
 8009054:	b281      	uxth	r1, r0
 8009056:	2000      	movs	r0, #0
 8009058:	f7f9 fe54 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800905c:	f7f9 fcc4 	bl	80029e8 <BSP_LCD_GetYSize>
 8009060:	2301      	movs	r3, #1
 8009062:	3850      	subs	r0, #80	; 0x50
 8009064:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <AudioLoopback_demo+0x1ec>)
 8009066:	e799      	b.n	8008f9c <AudioLoopback_demo+0xc4>
      if (CheckForUserInput() > 0)
 8009068:	f002 f840 	bl	800b0ec <CheckForUserInput>
 800906c:	2800      	cmp	r0, #0
 800906e:	d0c9      	beq.n	8009004 <AudioLoopback_demo+0x12c>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009070:	2002      	movs	r0, #2
 8009072:	f7f9 f853 	bl	800211c <BSP_AUDIO_OUT_Stop>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009076:	2002      	movs	r0, #2
}
 8009078:	b002      	add	sp, #8
 800907a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800907e:	f7f9 b84d 	b.w	800211c <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 8009082:	f002 f833 	bl	800b0ec <CheckForUserInput>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0c7      	beq.n	800901a <AudioLoopback_demo+0x142>
 800908a:	e7f1      	b.n	8009070 <AudioLoopback_demo+0x198>
 800908c:	ff0000ff 	.word	0xff0000ff
 8009090:	20000074 	.word	0x20000074
 8009094:	08017e94 	.word	0x08017e94
 8009098:	20000084 	.word	0x20000084
 800909c:	08017eab 	.word	0x08017eab
 80090a0:	08017ecb 	.word	0x08017ecb
 80090a4:	2000c9c4 	.word	0x2000c9c4
 80090a8:	08017f12 	.word	0x08017f12
 80090ac:	c0115800 	.word	0xc0115800
 80090b0:	c0115c00 	.word	0xc0115c00
 80090b4:	c0115a00 	.word	0xc0115a00
 80090b8:	c0115e00 	.word	0xc0115e00
 80090bc:	ffff0000 	.word	0xffff0000
 80090c0:	08017ee4 	.word	0x08017ee4
 80090c4:	08017efd 	.word	0x08017efd

080090c8 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 80090ca:	4c07      	ldr	r4, [pc, #28]	; (80090e8 <GetData+0x20>)
 80090cc:	6825      	ldr	r5, [r4, #0]
 80090ce:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 80090d0:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 80090d2:	1846      	adds	r6, r0, r1
 80090d4:	42b5      	cmp	r5, r6
 80090d6:	d901      	bls.n	80090dc <GetData+0x14>
 80090d8:	4298      	cmp	r0, r3
 80090da:	d100      	bne.n	80090de <GetData+0x16>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }

  return ReadDataNbr;
}
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 80090de:	f814 6b01 	ldrb.w	r6, [r4], #1
 80090e2:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 80090e4:	3001      	adds	r0, #1
 80090e6:	e7f4      	b.n	80090d2 <GetData+0xa>
 80090e8:	20001000 	.word	0x20001000

080090ec <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 80090ec:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 80090f2:	f500 6346 	add.w	r3, r0, #3168	; 0xc60
 80090f6:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80090fa:	3020      	adds	r0, #32
    while (op_size > 0) {
 80090fc:	4298      	cmp	r0, r3
 80090fe:	d1fa      	bne.n	80090f6 <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 8009100:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009104:	f3bf 8f6f 	isb	sy
}
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	e000ed00 	.word	0xe000ed00

08009110 <AUDIO_Start>:
{
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8009112:	4d10      	ldr	r5, [pc, #64]	; (8009154 <AUDIO_Start+0x44>)
 8009114:	2400      	movs	r4, #0
  AudioStartAddress = audio_start_address;
 8009116:	4f10      	ldr	r7, [pc, #64]	; (8009158 <AUDIO_Start+0x48>)
  bytesread = GetData( (void *)AudioStartAddress,
 8009118:	f641 039c 	movw	r3, #6300	; 0x189c
 800911c:	f5a5 5280 	sub.w	r2, r5, #4096	; 0x1000
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8009120:	f885 48a0 	strb.w	r4, [r5, #2208]	; 0x8a0
  AudioFileSize = audio_file_size;
 8009124:	e9c7 1000 	strd	r1, r0, [r7]
  bytesread = GetData( (void *)AudioStartAddress,
 8009128:	4621      	mov	r1, r4
 800912a:	f7ff ffcd 	bl	80090c8 <GetData>
  if(bytesread > 0)
 800912e:	4606      	mov	r6, r0
 8009130:	b170      	cbz	r0, 8009150 <AUDIO_Start+0x40>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8009132:	4610      	mov	r0, r2
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8009134:	f641 019c 	movw	r1, #6300	; 0x189c
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8009138:	f7ff ffd8 	bl	80090ec <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 800913c:	f5a5 5080 	sub.w	r0, r5, #4096	; 0x1000
 8009140:	f7f8 ffaa 	bl	8002098 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 8009144:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 8009146:	4620      	mov	r0, r4
    buffer_ctl.fptr = bytesread;
 8009148:	f8c5 689c 	str.w	r6, [r5, #2204]	; 0x89c
    audio_state = AUDIO_STATE_PLAYING;      
 800914c:	723b      	strb	r3, [r7, #8]
}
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return AUDIO_ERROR_IO;
 8009150:	2002      	movs	r0, #2
 8009152:	e7fc      	b.n	800914e <AUDIO_Start+0x3e>
 8009154:	2000c120 	.word	0x2000c120
 8009158:	20001000 	.word	0x20001000

0800915c <AUDIO_Process>:
{
 800915c:	b570      	push	{r4, r5, r6, lr}
  switch(audio_state)
 800915e:	4d27      	ldr	r5, [pc, #156]	; (80091fc <AUDIO_Process+0xa0>)
 8009160:	7a2e      	ldrb	r6, [r5, #8]
 8009162:	2e02      	cmp	r6, #2
 8009164:	d147      	bne.n	80091f6 <AUDIO_Process+0x9a>
    if(buffer_ctl.fptr >= AudioFileSize)
 8009166:	4c26      	ldr	r4, [pc, #152]	; (8009200 <AUDIO_Process+0xa4>)
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
 800916e:	4299      	cmp	r1, r3
 8009170:	d30e      	bcc.n	8009190 <AUDIO_Process+0x34>
      buffer_ctl.fptr = 0; 
 8009172:	2300      	movs	r3, #0
      drawPlay(388, 45, LCD_COLOR_WHITE);
 8009174:	f04f 32ff 	mov.w	r2, #4294967295
 8009178:	212d      	movs	r1, #45	; 0x2d
 800917a:	f44f 70c2 	mov.w	r0, #388	; 0x184
      buffer_ctl.fptr = 0; 
 800917e:	f8c4 389c 	str.w	r3, [r4, #2204]	; 0x89c
      drawPlay(388, 45, LCD_COLOR_WHITE);
 8009182:	f001 f9ab 	bl	800a4dc <drawPlay>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009186:	4630      	mov	r0, r6
 8009188:	f7f8 ffc8 	bl	800211c <BSP_AUDIO_OUT_Stop>
      return 5;	//Here *****
 800918c:	2005      	movs	r0, #5
}
 800918e:	bd70      	pop	{r4, r5, r6, pc}
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8009190:	f894 38a0 	ldrb.w	r3, [r4, #2208]	; 0x8a0
 8009194:	2b01      	cmp	r3, #1
 8009196:	d112      	bne.n	80091be <AUDIO_Process+0x62>
      bytesread = GetData((void *)AudioStartAddress,
 8009198:	f640 434e 	movw	r3, #3150	; 0xc4e
 800919c:	f5a4 5280 	sub.w	r2, r4, #4096	; 0x1000
 80091a0:	6868      	ldr	r0, [r5, #4]
 80091a2:	f7ff ff91 	bl	80090c8 <GetData>
      if( bytesread >0)
 80091a6:	b150      	cbz	r0, 80091be <AUDIO_Process+0x62>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 80091a8:	2300      	movs	r3, #0
 80091aa:	f884 38a0 	strb.w	r3, [r4, #2208]	; 0x8a0
        buffer_ctl.fptr += bytesread; 
 80091ae:	f8d4 389c 	ldr.w	r3, [r4, #2204]	; 0x89c
 80091b2:	4418      	add	r0, r3
 80091b4:	f8c4 089c 	str.w	r0, [r4, #2204]	; 0x89c
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7ff ff97 	bl	80090ec <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 80091be:	f894 38a0 	ldrb.w	r3, [r4, #2208]	; 0x8a0
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d001      	beq.n	80091ca <AUDIO_Process+0x6e>
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;  
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7e1      	b.n	800918e <AUDIO_Process+0x32>
      bytesread = GetData((void *)AudioStartAddress,
 80091ca:	f640 434e 	movw	r3, #3150	; 0xc4e
 80091ce:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <AUDIO_Process+0xa8>)
 80091d0:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
 80091d4:	6868      	ldr	r0, [r5, #4]
 80091d6:	f7ff ff77 	bl	80090c8 <GetData>
      if( bytesread > 0)
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f3      	beq.n	80091c6 <AUDIO_Process+0x6a>
        buffer_ctl.fptr += bytesread;
 80091de:	f8d4 389c 	ldr.w	r3, [r4, #2204]	; 0x89c
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 80091e2:	2100      	movs	r1, #0
        buffer_ctl.fptr += bytesread;
 80091e4:	4418      	add	r0, r3
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 80091e6:	f884 18a0 	strb.w	r1, [r4, #2208]	; 0x8a0
        buffer_ctl.fptr += bytesread;
 80091ea:	f8c4 089c 	str.w	r0, [r4, #2204]	; 0x89c
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7ff ff7c 	bl	80090ec <SCB_CleanDCache_by_Addr.constprop.0>
 80091f4:	e7e7      	b.n	80091c6 <AUDIO_Process+0x6a>
    error_state = AUDIO_ERROR_NOTREADY;
 80091f6:	2001      	movs	r0, #1
 80091f8:	e7c9      	b.n	800918e <AUDIO_Process+0x32>
 80091fa:	bf00      	nop
 80091fc:	20001000 	.word	0x20001000
 8009200:	2000c120 	.word	0x2000c120
 8009204:	2000bd6e 	.word	0x2000bd6e

08009208 <AudioPlay_demo>:
{
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t FreqStr[256] = {0};
 800920c:	2500      	movs	r5, #0
{
 800920e:	b0cd      	sub	sp, #308	; 0x134
  uint8_t FreqStr[256] = {0};
 8009210:	22fc      	movs	r2, #252	; 0xfc
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 8009212:	2601      	movs	r6, #1
  uint8_t FreqStr[256] = {0};
 8009214:	4629      	mov	r1, r5
 8009216:	a80d      	add	r0, sp, #52	; 0x34
  uwVolume = 70;
 8009218:	4cba      	ldr	r4, [pc, #744]	; (8009504 <AudioPlay_demo+0x2fc>)
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 800921a:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8009558 <AudioPlay_demo+0x350>
  uint8_t FreqStr[256] = {0};
 800921e:	950c      	str	r5, [sp, #48]	; 0x30
 8009220:	f005 f938 	bl	800e494 <memset>
  uwVolume = 70;
 8009224:	2346      	movs	r3, #70	; 0x46
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 800922a:	f8c8 600c 	str.w	r6, [r8, #12]
  uwVolume = 70;
 800922e:	6263      	str	r3, [r4, #36]	; 0x24
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009230:	f7f9 fc58 	bl	8002ae4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009234:	48b4      	ldr	r0, [pc, #720]	; (8009508 <AudioPlay_demo+0x300>)
 8009236:	f7f9 fc25 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 800923a:	f7f9 fbc9 	bl	80029d0 <BSP_LCD_GetXSize>
 800923e:	235a      	movs	r3, #90	; 0x5a
 8009240:	b282      	uxth	r2, r0
 8009242:	4629      	mov	r1, r5
 8009244:	4628      	mov	r0, r5
 8009246:	f7f9 ff9d 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800924a:	f04f 30ff 	mov.w	r0, #4294967295
 800924e:	f7f9 fc19 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009252:	48ad      	ldr	r0, [pc, #692]	; (8009508 <AudioPlay_demo+0x300>)
 8009254:	f7f9 fc22 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009258:	48ac      	ldr	r0, [pc, #688]	; (800950c <AudioPlay_demo+0x304>)
 800925a:	f7f9 fc2b 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO EXAMPLE", CENTER_MODE);
 800925e:	4633      	mov	r3, r6
 8009260:	4aab      	ldr	r2, [pc, #684]	; (8009510 <AudioPlay_demo+0x308>)
 8009262:	4629      	mov	r1, r5
 8009264:	4628      	mov	r0, r5
 8009266:	f7f9 fd4d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800926a:	48aa      	ldr	r0, [pc, #680]	; (8009514 <AudioPlay_demo+0x30c>)
 800926c:	f7f9 fc22 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8009270:	4633      	mov	r3, r6
 8009272:	4aa9      	ldr	r2, [pc, #676]	; (8009518 <AudioPlay_demo+0x310>)
 8009274:	211e      	movs	r1, #30
 8009276:	4628      	mov	r0, r5
 8009278:	f7f9 fd44 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"Press Top/Bottom screen to change Volume   ", CENTER_MODE);
 800927c:	4633      	mov	r3, r6
 800927e:	4aa7      	ldr	r2, [pc, #668]	; (800951c <AudioPlay_demo+0x314>)
 8009280:	212d      	movs	r1, #45	; 0x2d
 8009282:	4628      	mov	r0, r5
 8009284:	f7f9 fd3e 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Press Left/Right screen to change Frequency", CENTER_MODE);
 8009288:	4633      	mov	r3, r6
 800928a:	4aa5      	ldr	r2, [pc, #660]	; (8009520 <AudioPlay_demo+0x318>)
 800928c:	213c      	movs	r1, #60	; 0x3c
 800928e:	4628      	mov	r0, r5
 8009290:	f7f9 fd38 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 75, (uint8_t *)"Press 2 fingers for Pause/Resume           ", CENTER_MODE);
 8009294:	4633      	mov	r3, r6
 8009296:	4aa3      	ldr	r2, [pc, #652]	; (8009524 <AudioPlay_demo+0x31c>)
 8009298:	214b      	movs	r1, #75	; 0x4b
 800929a:	4628      	mov	r0, r5
 800929c:	f7f9 fd32 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80092a0:	4899      	ldr	r0, [pc, #612]	; (8009508 <AudioPlay_demo+0x300>)
 80092a2:	f7f9 fbef 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 80092a6:	f7f9 fb93 	bl	80029d0 <BSP_LCD_GetXSize>
 80092aa:	4607      	mov	r7, r0
 80092ac:	f7f9 fb9c 	bl	80029e8 <BSP_LCD_GetYSize>
 80092b0:	386e      	subs	r0, #110	; 0x6e
 80092b2:	f1a7 0214 	sub.w	r2, r7, #20
 80092b6:	2164      	movs	r1, #100	; 0x64
 80092b8:	b283      	uxth	r3, r0
 80092ba:	200a      	movs	r0, #10
 80092bc:	b292      	uxth	r2, r2
 80092be:	f7f9 fc89 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 80092c2:	f7f9 fb85 	bl	80029d0 <BSP_LCD_GetXSize>
 80092c6:	4607      	mov	r7, r0
 80092c8:	f7f9 fb8e 	bl	80029e8 <BSP_LCD_GetYSize>
 80092cc:	3870      	subs	r0, #112	; 0x70
 80092ce:	f1a7 0216 	sub.w	r2, r7, #22
 80092d2:	2165      	movs	r1, #101	; 0x65
 80092d4:	b283      	uxth	r3, r0
 80092d6:	200b      	movs	r0, #11
 80092d8:	b292      	uxth	r2, r2
 80092da:	f7f9 fc7b 	bl	8002bd4 <BSP_LCD_DrawRect>
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 80092de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092e0:	69a2      	ldr	r2, [r4, #24]
 80092e2:	2002      	movs	r0, #2
 80092e4:	b2c9      	uxtb	r1, r1
 80092e6:	f7f9 f86f 	bl	80023c8 <BSP_AUDIO_OUT_Init>
 80092ea:	4607      	mov	r7, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	f040 80ac 	bne.w	800944e <AudioPlay_demo+0x246>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80092f6:	f7f9 fbd1 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80092fa:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80092fe:	f7f9 fbc1 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC   OK  ", CENTER_MODE);
 8009302:	f7f9 fb71 	bl	80029e8 <BSP_LCD_GetYSize>
 8009306:	385f      	subs	r0, #95	; 0x5f
 8009308:	4633      	mov	r3, r6
 800930a:	4a87      	ldr	r2, [pc, #540]	; (8009528 <AudioPlay_demo+0x320>)
 800930c:	b281      	uxth	r1, r0
 800930e:	4638      	mov	r0, r7
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8009310:	f7f9 fcf8 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 8009314:	f7f9 fb5c 	bl	80029d0 <BSP_LCD_GetXSize>
 8009318:	4605      	mov	r5, r0
 800931a:	f7f9 fb65 	bl	80029e8 <BSP_LCD_GetYSize>
 800931e:	b281      	uxth	r1, r0
 8009320:	b2a8      	uxth	r0, r5
 8009322:	f7fa ff05 	bl	8004130 <BSP_TS_Init>
 8009326:	b1c0      	cbz	r0, 800935a <AudioPlay_demo+0x152>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009328:	f04f 30ff 	mov.w	r0, #4294967295
 800932c:	f7f9 fbb6 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009330:	487e      	ldr	r0, [pc, #504]	; (800952c <AudioPlay_demo+0x324>)
 8009332:	f7f9 fba7 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"ERROR", CENTER_MODE);
 8009336:	f7f9 fb57 	bl	80029e8 <BSP_LCD_GetYSize>
 800933a:	3841      	subs	r0, #65	; 0x41
 800933c:	2301      	movs	r3, #1
 800933e:	4a7c      	ldr	r2, [pc, #496]	; (8009530 <AudioPlay_demo+0x328>)
 8009340:	b281      	uxth	r1, r0
 8009342:	2000      	movs	r0, #0
 8009344:	f7f9 fcde 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 8009348:	f7f9 fb4e 	bl	80029e8 <BSP_LCD_GetYSize>
 800934c:	3832      	subs	r0, #50	; 0x32
 800934e:	2301      	movs	r3, #1
 8009350:	4a78      	ldr	r2, [pc, #480]	; (8009534 <AudioPlay_demo+0x32c>)
 8009352:	b281      	uxth	r1, r0
 8009354:	2000      	movs	r0, #0
 8009356:	f7f9 fcd5 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  AUDIO_Start(AUDIO_FILE_ADDRESS, AUDIO_FILE_SIZE);
 800935a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800935e:	4876      	ldr	r0, [pc, #472]	; (8009538 <AudioPlay_demo+0x330>)
 8009360:	f7ff fed6 	bl	8009110 <AUDIO_Start>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	f7f9 fb98 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800936c:	4866      	ldr	r0, [pc, #408]	; (8009508 <AudioPlay_demo+0x300>)
 800936e:	f7f9 fb89 	bl	8002a84 <BSP_LCD_SetTextColor>
  AudioFreq_ptr = AudioFreq+6; /*AF_48K*/
 8009372:	4d72      	ldr	r5, [pc, #456]	; (800953c <AudioPlay_demo+0x334>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 8009374:	f7f9 fb38 	bl	80029e8 <BSP_LCD_GetYSize>
 8009378:	3850      	subs	r0, #80	; 0x50
 800937a:	2301      	movs	r3, #1
 800937c:	4a70      	ldr	r2, [pc, #448]	; (8009540 <AudioPlay_demo+0x338>)
 800937e:	b281      	uxth	r1, r0
 8009380:	2000      	movs	r0, #0
 8009382:	f7f9 fcbf 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8009386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009388:	496e      	ldr	r1, [pc, #440]	; (8009544 <AudioPlay_demo+0x33c>)
 800938a:	a80c      	add	r0, sp, #48	; 0x30
 800938c:	f005 fd40 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 8009390:	4e6d      	ldr	r6, [pc, #436]	; (8009548 <AudioPlay_demo+0x340>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8009392:	f7f9 fb29 	bl	80029e8 <BSP_LCD_GetYSize>
 8009396:	3841      	subs	r0, #65	; 0x41
 8009398:	2301      	movs	r3, #1
 800939a:	aa0c      	add	r2, sp, #48	; 0x30
 800939c:	b281      	uxth	r1, r0
 800939e:	2000      	movs	r0, #0
 80093a0:	f7f9 fcb0 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80093a4:	69a2      	ldr	r2, [r4, #24]
 80093a6:	4969      	ldr	r1, [pc, #420]	; (800954c <AudioPlay_demo+0x344>)
 80093a8:	a80c      	add	r0, sp, #48	; 0x30
 80093aa:	f005 fd31 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 80093ae:	4f64      	ldr	r7, [pc, #400]	; (8009540 <AudioPlay_demo+0x338>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 80093b0:	f7f9 fb1a 	bl	80029e8 <BSP_LCD_GetYSize>
 80093b4:	3832      	subs	r0, #50	; 0x32
 80093b6:	2301      	movs	r3, #1
 80093b8:	aa0c      	add	r2, sp, #48	; 0x30
 80093ba:	b281      	uxth	r1, r0
 80093bc:	2000      	movs	r0, #0
 80093be:	f7f9 fca1 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_SetVolume(70);
 80093c2:	2046      	movs	r0, #70	; 0x46
 80093c4:	f7f8 fec4 	bl	8002150 <BSP_AUDIO_OUT_SetVolume>
        if (*AudioFreq_ptr != 96000)
 80093c8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800955c <AudioPlay_demo+0x354>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	f7f9 fb64 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80093d4:	484c      	ldr	r0, [pc, #304]	; (8009508 <AudioPlay_demo+0x300>)
 80093d6:	f7f9 fb55 	bl	8002a84 <BSP_LCD_SetTextColor>
    AUDIO_Process();
 80093da:	f7ff febf 	bl	800915c <AUDIO_Process>
    BSP_TS_GetState(&TS_State);
 80093de:	a801      	add	r0, sp, #4
 80093e0:	f7fa fef0 	bl	80041c4 <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
 80093e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	f040 80b9 	bne.w	8009560 <AudioPlay_demo+0x358>
      if (TS_State.touchY[0] < 30)
 80093ee:	f8bd a010 	ldrh.w	sl, [sp, #16]
 80093f2:	f1ba 0f1d 	cmp.w	sl, #29
 80093f6:	d842      	bhi.n	800947e <AudioPlay_demo+0x276>
        if (uwVolume < 95)
 80093f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093fa:	2b5e      	cmp	r3, #94	; 0x5e
 80093fc:	d83d      	bhi.n	800947a <AudioPlay_demo+0x272>
          uwVolume += 5;
 80093fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009400:	3305      	adds	r3, #5
          uwVolume = 0;
 8009402:	6263      	str	r3, [r4, #36]	; 0x24
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8009404:	a80c      	add	r0, sp, #48	; 0x30
 8009406:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009408:	494e      	ldr	r1, [pc, #312]	; (8009544 <AudioPlay_demo+0x33c>)
 800940a:	f005 fd01 	bl	800ee10 <siprintf>
        BSP_AUDIO_OUT_SetVolume(uwVolume);
 800940e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009410:	b2c0      	uxtb	r0, r0
 8009412:	f7f8 fe9d 	bl	8002150 <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8009416:	f7f9 fae7 	bl	80029e8 <BSP_LCD_GetYSize>
 800941a:	3841      	subs	r0, #65	; 0x41
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 800941c:	b281      	uxth	r1, r0
 800941e:	2301      	movs	r3, #1
 8009420:	aa0c      	add	r2, sp, #48	; 0x30
 8009422:	2000      	movs	r0, #0
 8009424:	f7f9 fc6e 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 8009428:	a801      	add	r0, sp, #4
 800942a:	f7fa fecb 	bl	80041c4 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 800942e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f8      	bne.n	8009428 <AudioPlay_demo+0x220>
    if (CheckForUserInput() > 0)
 8009436:	f001 fe59 	bl	800b0ec <CheckForUserInput>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0cd      	beq.n	80093da <AudioPlay_demo+0x1d2>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800943e:	2002      	movs	r0, #2
 8009440:	f7f8 fe6c 	bl	800211c <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit();
 8009444:	f7f8 ff84 	bl	8002350 <BSP_AUDIO_OUT_DeInit>
}
 8009448:	b04d      	add	sp, #308	; 0x134
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800944e:	f7f9 fb25 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009452:	4836      	ldr	r0, [pc, #216]	; (800952c <AudioPlay_demo+0x324>)
 8009454:	f7f9 fb16 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC  FAIL ", CENTER_MODE);
 8009458:	f7f9 fac6 	bl	80029e8 <BSP_LCD_GetYSize>
 800945c:	385f      	subs	r0, #95	; 0x5f
 800945e:	4633      	mov	r3, r6
 8009460:	4a3b      	ldr	r2, [pc, #236]	; (8009550 <AudioPlay_demo+0x348>)
 8009462:	b281      	uxth	r1, r0
 8009464:	4628      	mov	r0, r5
 8009466:	f7f9 fc4d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800946a:	f7f9 fabd 	bl	80029e8 <BSP_LCD_GetYSize>
 800946e:	3850      	subs	r0, #80	; 0x50
 8009470:	4633      	mov	r3, r6
 8009472:	4a38      	ldr	r2, [pc, #224]	; (8009554 <AudioPlay_demo+0x34c>)
 8009474:	b281      	uxth	r1, r0
 8009476:	4628      	mov	r0, r5
 8009478:	e74a      	b.n	8009310 <AudioPlay_demo+0x108>
          uwVolume = 100;
 800947a:	2364      	movs	r3, #100	; 0x64
 800947c:	e7c1      	b.n	8009402 <AudioPlay_demo+0x1fa>
      else if (TS_State.touchY[0] > (BSP_LCD_GetYSize() - 30))
 800947e:	f7f9 fab3 	bl	80029e8 <BSP_LCD_GetYSize>
 8009482:	381e      	subs	r0, #30
 8009484:	4582      	cmp	sl, r0
 8009486:	d907      	bls.n	8009498 <AudioPlay_demo+0x290>
        if (uwVolume > 5)
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	2b05      	cmp	r3, #5
 800948c:	d902      	bls.n	8009494 <AudioPlay_demo+0x28c>
          uwVolume -= 5;
 800948e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009490:	3b05      	subs	r3, #5
 8009492:	e7b6      	b.n	8009402 <AudioPlay_demo+0x1fa>
          uwVolume = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	e7b4      	b.n	8009402 <AudioPlay_demo+0x1fa>
      else if (TS_State.touchX[0] < 30)
 8009498:	f8bd a006 	ldrh.w	sl, [sp, #6]
 800949c:	f1ba 0f1d 	cmp.w	sl, #29
 80094a0:	d81c      	bhi.n	80094dc <AudioPlay_demo+0x2d4>
        if (*AudioFreq_ptr != 8000)
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80094a8:	d014      	beq.n	80094d4 <AudioPlay_demo+0x2cc>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80094aa:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80094ae:	a80c      	add	r0, sp, #48	; 0x30
 80094b0:	4926      	ldr	r1, [pc, #152]	; (800954c <AudioPlay_demo+0x344>)
          AudioFreq_ptr--;
 80094b2:	f1a5 0a04 	sub.w	sl, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80094b6:	f005 fcab 	bl	800ee10 <siprintf>
          BSP_AUDIO_OUT_Pause();
 80094ba:	f7f8 fe0b 	bl	80020d4 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 80094be:	f855 0c04 	ldr.w	r0, [r5, #-4]
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 80094c2:	f7f8 ffeb 	bl	800249c <BSP_AUDIO_OUT_SetFrequency>
          AudioFreq_ptr++;
 80094c6:	4655      	mov	r5, sl
          BSP_AUDIO_OUT_Resume();
 80094c8:	f7f8 fe16 	bl	80020f8 <BSP_AUDIO_OUT_Resume>
          BSP_AUDIO_OUT_SetVolume(uwVolume);
 80094cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094ce:	b2c0      	uxtb	r0, r0
 80094d0:	f7f8 fe3e 	bl	8002150 <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 80094d4:	f7f9 fa88 	bl	80029e8 <BSP_LCD_GetYSize>
 80094d8:	3832      	subs	r0, #50	; 0x32
 80094da:	e79f      	b.n	800941c <AudioPlay_demo+0x214>
      else if (TS_State.touchX[0] > (BSP_LCD_GetXSize() - 30))
 80094dc:	f7f9 fa78 	bl	80029d0 <BSP_LCD_GetXSize>
 80094e0:	381e      	subs	r0, #30
 80094e2:	4582      	cmp	sl, r0
 80094e4:	d9a0      	bls.n	8009428 <AudioPlay_demo+0x220>
        if (*AudioFreq_ptr != 96000)
 80094e6:	682b      	ldr	r3, [r5, #0]
 80094e8:	454b      	cmp	r3, r9
 80094ea:	d0f3      	beq.n	80094d4 <AudioPlay_demo+0x2cc>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80094ec:	686a      	ldr	r2, [r5, #4]
 80094ee:	a80c      	add	r0, sp, #48	; 0x30
 80094f0:	4916      	ldr	r1, [pc, #88]	; (800954c <AudioPlay_demo+0x344>)
          AudioFreq_ptr++;
 80094f2:	f105 0a04 	add.w	sl, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 80094f6:	f005 fc8b 	bl	800ee10 <siprintf>
          BSP_AUDIO_OUT_Pause();
 80094fa:	f7f8 fdeb 	bl	80020d4 <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 80094fe:	6868      	ldr	r0, [r5, #4]
 8009500:	e7df      	b.n	80094c2 <AudioPlay_demo+0x2ba>
 8009502:	bf00      	nop
 8009504:	200000ac 	.word	0x200000ac
 8009508:	ff0000ff 	.word	0xff0000ff
 800950c:	20000074 	.word	0x20000074
 8009510:	08017f3b 	.word	0x08017f3b
 8009514:	20000084 	.word	0x20000084
 8009518:	08017eab 	.word	0x08017eab
 800951c:	08017f49 	.word	0x08017f49
 8009520:	08017f75 	.word	0x08017f75
 8009524:	08017fa1 	.word	0x08017fa1
 8009528:	08017fcd 	.word	0x08017fcd
 800952c:	ffff0000 	.word	0xffff0000
 8009530:	0801897e 	.word	0x0801897e
 8009534:	08017ff7 	.word	0x08017ff7
 8009538:	08080000 	.word	0x08080000
 800953c:	200000c4 	.word	0x200000c4
 8009540:	08018019 	.word	0x08018019
 8009544:	08018030 	.word	0x08018030
 8009548:	0801805f 	.word	0x0801805f
 800954c:	08018049 	.word	0x08018049
 8009550:	08017fe2 	.word	0x08017fe2
 8009554:	08017efd 	.word	0x08017efd
 8009558:	20001000 	.word	0x20001000
 800955c:	00017700 	.word	0x00017700
    if (TS_State.touchDetected >= 2)
 8009560:	f67f af69 	bls.w	8009436 <AudioPlay_demo+0x22e>
      if (uwPauseEnabledStatus == 1)
 8009564:	f8d8 b00c 	ldr.w	fp, [r8, #12]
 8009568:	f1bb 0f01 	cmp.w	fp, #1
 800956c:	d116      	bne.n	800959c <AudioPlay_demo+0x394>
        uwPauseEnabledStatus = 0;
 800956e:	f04f 0a00 	mov.w	sl, #0
        BSP_AUDIO_OUT_Resume();
 8009572:	f7f8 fdc1 	bl	80020f8 <BSP_AUDIO_OUT_Resume>
        uwPauseEnabledStatus = 0;
 8009576:	f8c8 a00c 	str.w	sl, [r8, #12]
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 800957a:	f7f9 fa35 	bl	80029e8 <BSP_LCD_GetYSize>
 800957e:	465b      	mov	r3, fp
 8009580:	3850      	subs	r0, #80	; 0x50
 8009582:	463a      	mov	r2, r7
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 8009584:	b281      	uxth	r1, r0
 8009586:	2000      	movs	r0, #0
 8009588:	f7f9 fbbc 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 800958c:	a801      	add	r0, sp, #4
 800958e:	f7fa fe19 	bl	80041c4 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 8009592:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f8      	bne.n	800958c <AudioPlay_demo+0x384>
 800959a:	e74c      	b.n	8009436 <AudioPlay_demo+0x22e>
        uwPauseEnabledStatus = 1;
 800959c:	f04f 0a01 	mov.w	sl, #1
        BSP_AUDIO_OUT_Pause();
 80095a0:	f7f8 fd98 	bl	80020d4 <BSP_AUDIO_OUT_Pause>
        uwPauseEnabledStatus = 1;
 80095a4:	f8c8 a00c 	str.w	sl, [r8, #12]
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 80095a8:	f7f9 fa1e 	bl	80029e8 <BSP_LCD_GetYSize>
 80095ac:	4653      	mov	r3, sl
 80095ae:	3850      	subs	r0, #80	; 0x50
 80095b0:	4632      	mov	r2, r6
 80095b2:	e7e7      	b.n	8009584 <AudioPlay_demo+0x37c>
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <AUDIO_MFCC>:
{
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 80095bc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009674 <AUDIO_MFCC+0xbc>
 80095c0:	2200      	movs	r2, #0
 80095c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80095c6:	4648      	mov	r0, r9
{
 80095c8:	ed2d 8b04 	vpush	{d8-d9}
 80095cc:	b085      	sub	sp, #20
	if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 80095ce:	f003 fcbb 	bl	800cf48 <Window_Init>
 80095d2:	4606      	mov	r6, r0
 80095d4:	b100      	cbz	r0, 80095d8 <AUDIO_MFCC+0x20>
	  while(1);
 80095d6:	e7fe      	b.n	80095d6 <AUDIO_MFCC+0x1e>
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80095d8:	4c21      	ldr	r4, [pc, #132]	; (8009660 <AUDIO_MFCC+0xa8>)
 80095da:	f44f 6100 	mov.w	r1, #2048	; 0x800
	S_MelFilter.Formula   = MEL_SLANEY;
 80095de:	2501      	movs	r5, #1
	S_MelFilter.FFTLen    = FFT_LEN;
 80095e0:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80095e4:	f104 0a10 	add.w	sl, r4, #16
	MelFilterbank_Init(&S_MelFilter);
 80095e8:	f104 0728 	add.w	r7, r4, #40	; 0x28
	S_MelFilter.SampRate  = SAMPLE_RATE;
 80095ec:	f64a 4844 	movw	r8, #44100	; 0xac44
	S_MelFilter.FMin      = 0.0;
 80095f0:	eddf 8a1c 	vldr	s17, [pc, #112]	; 8009664 <AUDIO_MFCC+0xac>
	arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 80095f4:	4650      	mov	r0, sl
 80095f6:	f003 fe69 	bl	800d2cc <arm_rfft_fast_init_f32>
	S_MelFilter.pStartIndices = pMelFilterStartIndices;
 80095fa:	f104 0358 	add.w	r3, r4, #88	; 0x58
	S_MelFilter.FFTLen    = FFT_LEN;
 80095fe:	2280      	movs	r2, #128	; 0x80
	MelFilterbank_Init(&S_MelFilter);
 8009600:	4638      	mov	r0, r7
	S_MelFilter.pStartIndices = pMelFilterStartIndices;
 8009602:	62a3      	str	r3, [r4, #40]	; 0x28
	S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 8009604:	f504 7316 	add.w	r3, r4, #600	; 0x258
	S_MelFilter.SampRate  = SAMPLE_RATE;
 8009608:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
	S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800960c:	62e3      	str	r3, [r4, #44]	; 0x2c
	S_MelFilter.pCoefficients = pMelFilterCoefs;
 800960e:	4b16      	ldr	r3, [pc, #88]	; (8009668 <AUDIO_MFCC+0xb0>)
	S_MelFilter.FMin      = 0.0;
 8009610:	edc4 8a11 	vstr	s17, [r4, #68]	; 0x44
	S_MelFilter.pCoefficients = pMelFilterCoefs;
 8009614:	6323      	str	r3, [r4, #48]	; 0x30
	S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <AUDIO_MFCC+0xb4>)
	S_MelFilter.Formula   = MEL_SLANEY;
 8009618:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800961c:	64a3      	str	r3, [r4, #72]	; 0x48
	S_MelFilter.FFTLen    = FFT_LEN;
 800961e:	e9c4 2b0e 	strd	r2, fp, [r4, #56]	; 0x38
	S_MelFilter.Mel2F     = 1;
 8009622:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
	MelFilterbank_Init(&S_MelFilter);
 8009626:	f003 fb35 	bl	800cc94 <MelFilterbank_Init>
	if (S_MelFilter.CoefficientsLength != NUM_MEL_COEFS)
 800962a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800962c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	428b      	cmp	r3, r1
 8009634:	d000      	beq.n	8009638 <AUDIO_MFCC+0x80>
	  while(1); /* Adjust NUM_MEL_COEFS to match S_MelFilter.CoefficientsLength */
 8009636:	e7fe      	b.n	8009636 <AUDIO_MFCC+0x7e>
	S_DCT.NumFilters    = NUM_MFCC;
 8009638:	230d      	movs	r3, #13
	S_DCT.RemoveDCTZero = 0;
 800963a:	f8c4 6464 	str.w	r6, [r4, #1124]	; 0x464
	if (DCT_Init(&S_DCT) != 0)
 800963e:	f504 668b 	add.w	r6, r4, #1112	; 0x458
	S_DCT.NumInputs     = NUM_MELS;
 8009642:	f8c4 245c 	str.w	r2, [r4, #1116]	; 0x45c
	S_DCT.NumFilters    = NUM_MFCC;
 8009646:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
	S_DCT.Type          = DCT_TYPE_II_ORTHO;
 800964a:	2302      	movs	r3, #2
	if (DCT_Init(&S_DCT) != 0)
 800964c:	4630      	mov	r0, r6
	S_DCT.Type          = DCT_TYPE_II_ORTHO;
 800964e:	f884 3460 	strb.w	r3, [r4, #1120]	; 0x460
	S_DCT.pDCTCoefs     = pDCTCoefsBuffer;
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <AUDIO_MFCC+0xb8>)
 8009654:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
	if (DCT_Init(&S_DCT) != 0)
 8009658:	f002 ff56 	bl	800c508 <DCT_Init>
 800965c:	b160      	cbz	r0, 8009678 <AUDIO_MFCC+0xc0>
	  while(1);
 800965e:	e7fe      	b.n	800965e <AUDIO_MFCC+0xa6>
 8009660:	20001000 	.word	0x20001000
 8009664:	00000000 	.word	0x00000000
 8009668:	20001798 	.word	0x20001798
 800966c:	46ac4400 	.word	0x46ac4400
 8009670:	2000370c 	.word	0x2000370c
 8009674:	2000710c 	.word	0x2000710c
	S_Spectr.pScratch = pSpectrScratchBuffer;
 8009678:	4bd2      	ldr	r3, [pc, #840]	; (80099c4 <AUDIO_MFCC+0x40c>)
	S_LogMelSpectr.Ref                = 1.0;
 800967a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800967e:	f884 5470 	strb.w	r5, [r4, #1136]	; 0x470
	S_Spectr.pScratch = pSpectrScratchBuffer;
 8009682:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
	S_MelSpectr.SpectrogramConf = &S_Spectr;
 8009686:	f204 436c 	addw	r3, r4, #1132	; 0x46c
	init_mfcc=0;
 800968a:	4dcf      	ldr	r5, [pc, #828]	; (80099c8 <AUDIO_MFCC+0x410>)
	S_MelSpectr.SpectrogramConf = &S_Spectr;
 800968c:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
	S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 8009690:	f504 6391 	add.w	r3, r4, #1160	; 0x488
	S_Spectr.pRfft    = &S_Rfft;
 8009694:	f8c4 a46c 	str.w	sl, [r4, #1132]	; 0x46c
	S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 8009698:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	S_LogMelSpectr.Ref                = 1.0;
 800969c:	f504 6392 	add.w	r3, r4, #1168	; 0x490
	S_Spectr.pWindow  = pWindowFuncBuffer;
 80096a0:	f8c4 9474 	str.w	r9, [r4, #1140]	; 0x474
			MfccColumn(&S_Mfcc, pInFrame, pOutColBuffer);
 80096a4:	f204 69bc 	addw	r9, r4, #1724	; 0x6bc
	S_LogMelSpectr.Ref                = 1.0;
 80096a8:	609a      	str	r2, [r3, #8]
	S_LogMelSpectr.TopdB              = HUGE_VALF;
 80096aa:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
	S_Mfcc.LogMelConf   = &S_LogMelSpectr;
 80096ae:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
	S_LogMelSpectr.TopdB              = HUGE_VALF;
 80096b2:	60da      	str	r2, [r3, #12]
	S_Mfcc.NumMfccCoefs = 20;
 80096b4:	2314      	movs	r3, #20
	S_MelSpectr.MelFilter       = &S_MelFilter;
 80096b6:	f8c4 748c 	str.w	r7, [r4, #1164]	; 0x48c
	S_Mfcc.NumMfccCoefs = 20;
 80096ba:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
	S_Mfcc.pScratch     = pMfccScratchBuffer;
 80096be:	f504 6396 	add.w	r3, r4, #1200	; 0x4b0
	S_Mfcc.pDCT         = &S_DCT;
 80096c2:	f8c4 64a4 	str.w	r6, [r4, #1188]	; 0x4a4
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 80096c6:	4606      	mov	r6, r0
	S_Mfcc.pScratch     = pMfccScratchBuffer;
 80096c8:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
	num_frames =1 + (signal_len - FRAME_LEN) / HOP_LEN;
 80096cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096ce:	4fbf      	ldr	r7, [pc, #764]	; (80099cc <AUDIO_MFCC+0x414>)
 80096d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
				pInFrame[i]= (float32_t) value_16 / (1 << 15);
 80096d4:	ed9f 8abe 	vldr	s16, [pc, #760]	; 80099d0 <AUDIO_MFCC+0x418>
			MfccColumn(&S_Mfcc, pInFrame, pOutColBuffer);
 80096d8:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 80099d4 <AUDIO_MFCC+0x41c>
	num_frames =1 + (signal_len - FRAME_LEN) / HOP_LEN;
 80096dc:	0a9b      	lsrs	r3, r3, #10
	S_Spectr.SampRate = SAMPLE_RATE;
 80096de:	f8c4 8478 	str.w	r8, [r4, #1144]	; 0x478
	S_Spectr.FrameLen = FRAME_LEN;
 80096e2:	f8c4 b47c 	str.w	fp, [r4, #1148]	; 0x47c
	num_frames =1 + (signal_len - FRAME_LEN) / HOP_LEN;
 80096e6:	3301      	adds	r3, #1
	S_Spectr.FFTLen   = FFT_LEN;
 80096e8:	f8c4 b480 	str.w	fp, [r4, #1152]	; 0x480
	S_LogMelSpectr.LogFormula         = LOGMELSPECTROGRAM_SCALE_DB;
 80096ec:	f884 0494 	strb.w	r0, [r4, #1172]	; 0x494
	init_mfcc=0;
 80096f0:	62a8      	str	r0, [r5, #40]	; 0x28
	num_frames =1 + (signal_len - FRAME_LEN) / HOP_LEN;
 80096f2:	f8c4 36b0 	str.w	r3, [r4, #1712]	; 0x6b0
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 80096f6:	49b7      	ldr	r1, [pc, #732]	; (80099d4 <AUDIO_MFCC+0x41c>)
 80096f8:	463a      	mov	r2, r7
			for (uint32_t i = 0; i < FRAME_LEN; i++)
 80096fa:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
				value=(((uint32_t)first) << 0) | (((uint32_t)second) << 8);
 80096fe:	f892 c001 	ldrb.w	ip, [r2, #1]
 8009702:	f812 3b04 	ldrb.w	r3, [r2], #4
 8009706:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			for (uint32_t i = 0; i < FRAME_LEN; i++)
 800970a:	4290      	cmp	r0, r2
				value=(((uint32_t)first) << 0) | (((uint32_t)second) << 8);
 800970c:	f8c4 36b4 	str.w	r3, [r4, #1716]	; 0x6b4
				value_16=((int32_t) value)- 0x10000;
 8009710:	b21b      	sxth	r3, r3
				pInFrame[i]= (float32_t) value_16 / (1 << 15);
 8009712:	ee07 3a90 	vmov	s15, r3
				value_16=((int32_t) value)- 0x10000;
 8009716:	f8a4 36b8 	strh.w	r3, [r4, #1720]	; 0x6b8
				pInFrame[i]= (float32_t) value_16 / (1 << 15);
 800971a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800971e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8009722:	ece1 7a01 	vstmia	r1!, {s15}
			for (uint32_t i = 0; i < FRAME_LEN; i++)
 8009726:	d1ea      	bne.n	80096fe <AUDIO_MFCC+0x146>
			MfccColumn(&S_Mfcc, pInFrame, pOutColBuffer);
 8009728:	464a      	mov	r2, r9
 800972a:	4651      	mov	r1, sl
 800972c:	48aa      	ldr	r0, [pc, #680]	; (80099d8 <AUDIO_MFCC+0x420>)
			for (uint32_t i = 0; i < NUM_MFCC; i++)
 800972e:	f04f 0800 	mov.w	r8, #0
			MfccColumn(&S_Mfcc, pInFrame, pOutColBuffer);
 8009732:	f003 fa2b 	bl	800cb8c <MfccColumn>
			for (uint32_t i = 0; i < NUM_MFCC; i++)
 8009736:	4aa9      	ldr	r2, [pc, #676]	; (80099dc <AUDIO_MFCC+0x424>)
			  memcpy((uint32_t *)(AUDIO_MFCC_START_ADDR + ((i * num_frames + frame_index) *4)),&pOutColBuffer[i],4);
 8009738:	f8d4 36b0 	ldr.w	r3, [r4, #1712]	; 0x6b0
 800973c:	f852 1b04 	ldr.w	r1, [r2], #4
 8009740:	fb03 6308 	mla	r3, r3, r8, r6
			for (uint32_t i = 0; i < NUM_MFCC; i++)
 8009744:	f108 0801 	add.w	r8, r8, #1
			  memcpy((uint32_t *)(AUDIO_MFCC_START_ADDR + ((i * num_frames + frame_index) *4)),&pOutColBuffer[i],4);
 8009748:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
			for (uint32_t i = 0; i < NUM_MFCC; i++)
 800974c:	f1b8 0f0d 	cmp.w	r8, #13
			  memcpy((uint32_t *)(AUDIO_MFCC_START_ADDR + ((i * num_frames + frame_index) *4)),&pOutColBuffer[i],4);
 8009750:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009754:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009758:	6019      	str	r1, [r3, #0]
			for (uint32_t i = 0; i < NUM_MFCC; i++)
 800975a:	d1ed      	bne.n	8009738 <AUDIO_MFCC+0x180>
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800975c:	3601      	adds	r6, #1
 800975e:	f8d4 36b0 	ldr.w	r3, [r4, #1712]	; 0x6b0
 8009762:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8009766:	42b3      	cmp	r3, r6
 8009768:	d8c5      	bhi.n	80096f6 <AUDIO_MFCC+0x13e>
	buf_len=sprintf(buf,"sssssssss\n");
 800976a:	499d      	ldr	r1, [pc, #628]	; (80099e0 <AUDIO_MFCC+0x428>)
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 800976c:	2600      	movs	r6, #0
	buf_len=sprintf(buf,"sssssssss\n");
 800976e:	489d      	ldr	r0, [pc, #628]	; (80099e4 <AUDIO_MFCC+0x42c>)
 8009770:	f005 fb6e 	bl	800ee50 <strcpy>
 8009774:	220a      	movs	r2, #10
	HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 8009776:	2364      	movs	r3, #100	; 0x64
 8009778:	499a      	ldr	r1, [pc, #616]	; (80099e4 <AUDIO_MFCC+0x42c>)
 800977a:	489b      	ldr	r0, [pc, #620]	; (80099e8 <AUDIO_MFCC+0x430>)
	buf_len=sprintf(buf,"sssssssss\n");
 800977c:	f8c4 2724 	str.w	r2, [r4, #1828]	; 0x724
	HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 8009780:	f7fe fdfb 	bl	800837a <HAL_UART_Transmit>
	int len_vec= (int)(1 + (signal_len - FRAME_LEN) / HOP_LEN);
 8009784:	6aef      	ldr	r7, [r5, #44]	; 0x2c
	  if (mfcc>mfcc_max)
 8009786:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80099ec <AUDIO_MFCC+0x434>
	int len_vec= (int)(1 + (signal_len - FRAME_LEN) / HOP_LEN);
 800978a:	f5a7 6700 	sub.w	r7, r7, #2048	; 0x800
	  mfcc=GetElement_f((void *)((uint32_t)(AUDIO_MFCC_START_ADDR+ (i *4))));
 800978e:	f1a9 0a04 	sub.w	sl, r9, #4
	int len_vec= (int)(1 + (signal_len - FRAME_LEN) / HOP_LEN);
 8009792:	0abf      	lsrs	r7, r7, #10
 8009794:	1c7b      	adds	r3, r7, #1
 8009796:	9301      	str	r3, [sp, #4]
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 8009798:	fb07 8308 	mla	r3, r7, r8, r8
 800979c:	9302      	str	r3, [sp, #8]
 800979e:	9b02      	ldr	r3, [sp, #8]
	  if (mfcc>mfcc_max)
 80097a0:	edd9 7a00 	vldr	s15, [r9]
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 80097a4:	429e      	cmp	r6, r3
 80097a6:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8009a28 <AUDIO_MFCC+0x470>
 80097aa:	f040 80d8 	bne.w	800995e <AUDIO_MFCC+0x3a6>
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 80097ae:	2600      	movs	r6, #0
	int k=0;
 80097b0:	46b3      	mov	fp, r6

static float GetElement_f(void *pdata)
{
	float *lptr = pdata;
	return *lptr;
 80097b2:	00b3      	lsls	r3, r6, #2
		mean=(mean-mfcc_min)/(mfcc_max-mfcc_min);
 80097b4:	edd8 7a00 	vldr	s15, [r8]
		if (mean<0.5)
 80097b8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	return *lptr;
 80097bc:	f1a3 537f 	sub.w	r3, r3, #1069547520	; 0x3fc00000
		mean=(mean-mfcc_min)/(mfcc_max-mfcc_min);
 80097c0:	edd3 6a00 	vldr	s13, [r3]
 80097c4:	4b89      	ldr	r3, [pc, #548]	; (80099ec <AUDIO_MFCC+0x434>)
 80097c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80097ca:	ed93 7a00 	vldr	s14, [r3]
 80097ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (mean<0.5)
 80097d6:	eef4 7ac9 	vcmpe.f32	s15, s18
		mean=(mean-mfcc_min)/(mfcc_max-mfcc_min);
 80097da:	edc3 7a02 	vstr	s15, [r3, #8]
		if (mean<0.5)
 80097de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e2:	f140 8123 	bpl.w	8009a2c <AUDIO_MFCC+0x474>
			VAL = (uint32_t) ((int)(mean*510)*65792);
 80097e6:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80099f0 <AUDIO_MFCC+0x438>
 80097ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097f2:	ee17 3a90 	vmov	r3, s15
 80097f6:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	f8c4 3738 	str.w	r3, [r4, #1848]	; 0x738
			color=(uint32_t) 4278190335 +(VAL);
 8009800:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8009804:	33ff      	adds	r3, #255	; 0xff
 8009806:	f8c4 373c 	str.w	r3, [r4, #1852]	; 0x73c
		mfcc_xpos=i%len_vec+25;
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	fbb6 faf3 	udiv	sl, r6, r3
 8009810:	fb03 6a1a 	mls	sl, r3, sl, r6
 8009814:	f10a 0319 	add.w	r3, sl, #25
 8009818:	632b      	str	r3, [r5, #48]	; 0x30
		for (int q=0;q<8;q++)
 800981a:	2300      	movs	r3, #0
			BSP_LCD_DrawPixel(mfcc_xpos,mfcc_ypos-(k+q),(uint32_t) color);
 800981c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800981e:	f8d4 273c 	ldr.w	r2, [r4, #1852]	; 0x73c
 8009822:	eba1 010b 	sub.w	r1, r1, fp
 8009826:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	1ac9      	subs	r1, r1, r3
 800982c:	b289      	uxth	r1, r1
 800982e:	f7f9 f9eb 	bl	8002c08 <BSP_LCD_DrawPixel>
		for (int q=0;q<8;q++)
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	2b08      	cmp	r3, #8
 8009838:	d1f0      	bne.n	800981c <AUDIO_MFCC+0x264>
		if (i%len_vec==len_vec-1)
 800983a:	45ba      	cmp	sl, r7
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 800983c:	f106 0601 	add.w	r6, r6, #1
 8009840:	9b02      	ldr	r3, [sp, #8]
			k+=8;
 8009842:	bf08      	it	eq
 8009844:	f10b 0b08 	addeq.w	fp, fp, #8
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 8009848:	429e      	cmp	r6, r3
 800984a:	d1b2      	bne.n	80097b2 <AUDIO_MFCC+0x1fa>
	mfcc_ypos=272;
 800984c:	2219      	movs	r2, #25
 800984e:	f44f 7388 	mov.w	r3, #272	; 0x110
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009852:	f04f 30ff 	mov.w	r0, #4294967295
	mfcc_max=0.0;
 8009856:	edc9 8a00 	vstr	s17, [r9]
	mfcc_min=0.0;
 800985a:	edc8 8a00 	vstr	s17, [r8]
	while (HAL_UART_Receive(&huart6, UART6_rxBuffer, 10,100)!=HAL_OK)
 800985e:	4e65      	ldr	r6, [pc, #404]	; (80099f4 <AUDIO_MFCC+0x43c>)
	mfcc_ypos=272;
 8009860:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
	init_mfcc=1;
 8009864:	2301      	movs	r3, #1
 8009866:	62ab      	str	r3, [r5, #40]	; 0x28
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009868:	f7f9 f90c 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(285, 103, 11);
 800986c:	220b      	movs	r2, #11
 800986e:	2167      	movs	r1, #103	; 0x67
 8009870:	f240 101d 	movw	r0, #285	; 0x11d
	while (HAL_UART_Receive(&huart6, UART6_rxBuffer, 10,100)!=HAL_OK)
 8009874:	4d5c      	ldr	r5, [pc, #368]	; (80099e8 <AUDIO_MFCC+0x430>)
	BSP_LCD_FillCircle(285, 103, 11);
 8009876:	f7f9 fce9 	bl	800324c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(0xff003a65);
 800987a:	485f      	ldr	r0, [pc, #380]	; (80099f8 <AUDIO_MFCC+0x440>)
 800987c:	f7f9 f902 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(285, 103, 8);
 8009880:	2208      	movs	r2, #8
 8009882:	2167      	movs	r1, #103	; 0x67
 8009884:	f240 101d 	movw	r0, #285	; 0x11d
 8009888:	f7f9 fce0 	bl	800324c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	f7f9 f8f8 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(293,111,301,119);
 8009894:	2377      	movs	r3, #119	; 0x77
 8009896:	f240 122d 	movw	r2, #301	; 0x12d
 800989a:	216f      	movs	r1, #111	; 0x6f
 800989c:	f240 1025 	movw	r0, #293	; 0x125
 80098a0:	f7f9 fa96 	bl	8002dd0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawPolygon(Points, 4);
 80098a4:	2104      	movs	r1, #4
 80098a6:	4855      	ldr	r0, [pc, #340]	; (80099fc <AUDIO_MFCC+0x444>)
 80098a8:	f7f9 fafc 	bl	8002ea4 <BSP_LCD_DrawPolygon>
	buf_len=sprintf(buf,"fffffffff\n");
 80098ac:	4954      	ldr	r1, [pc, #336]	; (8009a00 <AUDIO_MFCC+0x448>)
 80098ae:	484d      	ldr	r0, [pc, #308]	; (80099e4 <AUDIO_MFCC+0x42c>)
 80098b0:	f005 face 	bl	800ee50 <strcpy>
 80098b4:	220a      	movs	r2, #10
	HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 80098b6:	2364      	movs	r3, #100	; 0x64
 80098b8:	494a      	ldr	r1, [pc, #296]	; (80099e4 <AUDIO_MFCC+0x42c>)
 80098ba:	484b      	ldr	r0, [pc, #300]	; (80099e8 <AUDIO_MFCC+0x430>)
	buf_len=sprintf(buf,"fffffffff\n");
 80098bc:	f8c4 2724 	str.w	r2, [r4, #1828]	; 0x724
	HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 80098c0:	f7fe fd5b 	bl	800837a <HAL_UART_Transmit>
	while (HAL_UART_Receive(&huart6, UART6_rxBuffer, 10,100)!=HAL_OK)
 80098c4:	2364      	movs	r3, #100	; 0x64
 80098c6:	220a      	movs	r2, #10
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7fe fdaf 	bl	800842e <HAL_UART_Receive>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d1f7      	bne.n	80098c4 <AUDIO_MFCC+0x30c>
	output=atof(UART6_rxBuffer);
 80098d4:	4d4b      	ldr	r5, [pc, #300]	; (8009a04 <AUDIO_MFCC+0x44c>)
 80098d6:	4847      	ldr	r0, [pc, #284]	; (80099f4 <AUDIO_MFCC+0x43c>)
 80098d8:	462e      	mov	r6, r5
 80098da:	f004 fd9f 	bl	800e41c <atof>
 80098de:	eca6 0b02 	vstmia	r6!, {d0}
 80098e2:	ec51 0b10 	vmov	r0, r1, d0
	output_f=(float)(output);
 80098e6:	f7f7 f9ff 	bl	8000ce8 <__aeabi_d2f>
 80098ea:	6030      	str	r0, [r6, #0]
 80098ec:	ee08 0a10 	vmov	s16, r0
	percentage=(int)(fabs(output_f-0.5)*200);
 80098f0:	f7f6 feaa 	bl	8000648 <__aeabi_f2d>
 80098f4:	2200      	movs	r2, #0
 80098f6:	4b44      	ldr	r3, [pc, #272]	; (8009a08 <AUDIO_MFCC+0x450>)
 80098f8:	f7f6 fd46 	bl	8000388 <__aeabi_dsub>
 80098fc:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009900:	2200      	movs	r2, #0
 8009902:	4b42      	ldr	r3, [pc, #264]	; (8009a0c <AUDIO_MFCC+0x454>)
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fef7 	bl	80006f8 <__aeabi_dmul>
 800990a:	f7f7 f9a5 	bl	8000c58 <__aeabi_d2iz>
	if (output_f>0.5)
 800990e:	eeb4 8ac9 	vcmpe.f32	s16, s18
	percentage=(int)(fabs(output_f-0.5)*200);
 8009912:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
	if (output_f>0.5)
 8009916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991a:	f340 809e 	ble.w	8009a5a <AUDIO_MFCC+0x4a2>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800991e:	483c      	ldr	r0, [pc, #240]	; (8009a10 <AUDIO_MFCC+0x458>)
 8009920:	f7f9 f8b0 	bl	8002a84 <BSP_LCD_SetTextColor>
		buffer_len=sprintf(output_buf,"Bird detected with %d %c certainty",percentage,'%');
 8009924:	2325      	movs	r3, #37	; 0x25
 8009926:	f8d4 275c 	ldr.w	r2, [r4, #1884]	; 0x75c
 800992a:	493a      	ldr	r1, [pc, #232]	; (8009a14 <AUDIO_MFCC+0x45c>)
		buffer_len=sprintf(output_buf,"No bird detected with %d %c certainty",percentage,'%');
 800992c:	f105 0010 	add.w	r0, r5, #16
 8009930:	f005 fa6e 	bl	800ee10 <siprintf>
 8009934:	f8c4 0794 	str.w	r0, [r4, #1940]	; 0x794
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	f7f9 f8ae 	bl	8002a9c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font16);
 8009940:	4835      	ldr	r0, [pc, #212]	; (8009a18 <AUDIO_MFCC+0x460>)
 8009942:	f7f9 f8b7 	bl	8002ab4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 140, (uint8_t*) output_buf, CENTER_MODE);
 8009946:	2301      	movs	r3, #1
 8009948:	4a34      	ldr	r2, [pc, #208]	; (8009a1c <AUDIO_MFCC+0x464>)
 800994a:	218c      	movs	r1, #140	; 0x8c
 800994c:	2000      	movs	r0, #0
 800994e:	f7f9 f9d9 	bl	8002d04 <BSP_LCD_DisplayStringAt>
}
 8009952:	2005      	movs	r0, #5
 8009954:	b005      	add	sp, #20
 8009956:	ecbd 8b04 	vpop	{d8-d9}
 800995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *lptr;
 800995e:	00b3      	lsls	r3, r6, #2
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 8009960:	3601      	adds	r6, #1
	return *lptr;
 8009962:	f1a3 537f 	sub.w	r3, r3, #1069547520	; 0x3fc00000
 8009966:	ed93 8a00 	vldr	s16, [r3]
	  if (mfcc>mfcc_max)
 800996a:	eeb4 8ae7 	vcmpe.f32	s16, s15
	  if (mfcc<mfcc_min)
 800996e:	edd8 7a00 	vldr	s15, [r8]
		  buf_len=sprintf(buf,"%09.4f\n",mfcc);
 8009972:	ee18 0a10 	vmov	r0, s16
	  mfcc=GetElement_f((void *)((uint32_t)(AUDIO_MFCC_START_ADDR+ (i *4))));
 8009976:	ed8a 8a00 	vstr	s16, [sl]
	  if (mfcc>mfcc_max)
 800997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  if (mfcc<mfcc_min)
 800997e:	eef4 7ac8 	vcmpe.f32	s15, s16
		  mfcc_max=mfcc;
 8009982:	bfc8      	it	gt
 8009984:	ed89 8a00 	vstrgt	s16, [r9]
	  if (mfcc<mfcc_min)
 8009988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  mfcc_min=mfcc;
 800998c:	bfc8      	it	gt
 800998e:	ed88 8a00 	vstrgt	s16, [r8]
		  buf_len=sprintf(buf,"%09.4f\n",mfcc);
 8009992:	f7f6 fe59 	bl	8000648 <__aeabi_f2d>
	  if (mfcc<0)
 8009996:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		  buf_len=sprintf(buf,"%09.4f\n",mfcc);
 800999a:	460b      	mov	r3, r1
 800999c:	4602      	mov	r2, r0
		  buf_len=sprintf(buf,"+%08.4f\n",mfcc);
 800999e:	4811      	ldr	r0, [pc, #68]	; (80099e4 <AUDIO_MFCC+0x42c>)
	  if (mfcc<0)
 80099a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		  buf_len=sprintf(buf,"%09.4f\n",mfcc);
 80099a4:	bf4c      	ite	mi
 80099a6:	491e      	ldrmi	r1, [pc, #120]	; (8009a20 <AUDIO_MFCC+0x468>)
		  buf_len=sprintf(buf,"+%08.4f\n",mfcc);
 80099a8:	491e      	ldrpl	r1, [pc, #120]	; (8009a24 <AUDIO_MFCC+0x46c>)
 80099aa:	f005 fa31 	bl	800ee10 <siprintf>
	  HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 80099ae:	2364      	movs	r3, #100	; 0x64
		  buf_len=sprintf(buf,"+%08.4f\n",mfcc);
 80099b0:	f8c4 0724 	str.w	r0, [r4, #1828]	; 0x724
	  HAL_UART_Transmit(&huart6,(uint8_t *)buf, buf_len,100);
 80099b4:	490b      	ldr	r1, [pc, #44]	; (80099e4 <AUDIO_MFCC+0x42c>)
 80099b6:	f8b4 2724 	ldrh.w	r2, [r4, #1828]	; 0x724
 80099ba:	480b      	ldr	r0, [pc, #44]	; (80099e8 <AUDIO_MFCC+0x430>)
 80099bc:	f7fe fcdd 	bl	800837a <HAL_UART_Transmit>
	for(int i=0;i<NUM_MFCC*len_vec;i++)
 80099c0:	e6ed      	b.n	800979e <AUDIO_MFCC+0x1e6>
 80099c2:	bf00      	nop
 80099c4:	2000510c 	.word	0x2000510c
 80099c8:	200000ac 	.word	0x200000ac
 80099cc:	c0115800 	.word	0xc0115800
 80099d0:	38000000 	.word	0x38000000
 80099d4:	2000910c 	.word	0x2000910c
 80099d8:	200014a0 	.word	0x200014a0
 80099dc:	200016bc 	.word	0x200016bc
 80099e0:	08018076 	.word	0x08018076
 80099e4:	200016f0 	.word	0x200016f0
 80099e8:	2001000c 	.word	0x2001000c
 80099ec:	2000172c 	.word	0x2000172c
 80099f0:	43ff0000 	.word	0x43ff0000
 80099f4:	20001740 	.word	0x20001740
 80099f8:	ff003a65 	.word	0xff003a65
 80099fc:	200002f0 	.word	0x200002f0
 8009a00:	08018092 	.word	0x08018092
 8009a04:	20001750 	.word	0x20001750
 8009a08:	3fe00000 	.word	0x3fe00000
 8009a0c:	40690000 	.word	0x40690000
 8009a10:	ff0000ff 	.word	0xff0000ff
 8009a14:	0801809d 	.word	0x0801809d
 8009a18:	2000008c 	.word	0x2000008c
 8009a1c:	20001760 	.word	0x20001760
 8009a20:	08018081 	.word	0x08018081
 8009a24:	08018089 	.word	0x08018089
 8009a28:	20001730 	.word	0x20001730
			VAL = (uint32_t) ((int)((mean-0.5)*510)*257);
 8009a2c:	ee17 0a90 	vmov	r0, s15
 8009a30:	f7f6 fe0a 	bl	8000648 <__aeabi_f2d>
 8009a34:	2200      	movs	r2, #0
 8009a36:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <AUDIO_MFCC+0x4c0>)
 8009a38:	f7f6 fca6 	bl	8000388 <__aeabi_dsub>
 8009a3c:	a30c      	add	r3, pc, #48	; (adr r3, 8009a70 <AUDIO_MFCC+0x4b8>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f6 fe59 	bl	80006f8 <__aeabi_dmul>
 8009a46:	f7f7 f907 	bl	8000c58 <__aeabi_d2iz>
 8009a4a:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8009a4e:	f8c4 0738 	str.w	r0, [r4, #1848]	; 0x738
			color=(uint32_t) 4294967295  -(VAL);
 8009a52:	43c0      	mvns	r0, r0
 8009a54:	f8c4 073c 	str.w	r0, [r4, #1852]	; 0x73c
 8009a58:	e6d7      	b.n	800980a <AUDIO_MFCC+0x252>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009a5a:	4808      	ldr	r0, [pc, #32]	; (8009a7c <AUDIO_MFCC+0x4c4>)
 8009a5c:	f7f9 f812 	bl	8002a84 <BSP_LCD_SetTextColor>
		buffer_len=sprintf(output_buf,"No bird detected with %d %c certainty",percentage,'%');
 8009a60:	2325      	movs	r3, #37	; 0x25
 8009a62:	f8d4 275c 	ldr.w	r2, [r4, #1884]	; 0x75c
 8009a66:	4906      	ldr	r1, [pc, #24]	; (8009a80 <AUDIO_MFCC+0x4c8>)
 8009a68:	e760      	b.n	800992c <AUDIO_MFCC+0x374>
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w
 8009a70:	00000000 	.word	0x00000000
 8009a74:	407fe000 	.word	0x407fe000
 8009a78:	3fe00000 	.word	0x3fe00000
 8009a7c:	ffff0000 	.word	0xffff0000
 8009a80:	080180c0 	.word	0x080180c0

08009a84 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8009a84:	4b03      	ldr	r3, [pc, #12]	; (8009a94 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8009a86:	7a1b      	ldrb	r3, [r3, #8]
 8009a88:	2b02      	cmp	r3, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8009a8a:	bf04      	itt	eq
 8009a8c:	4a02      	ldreq	r2, [pc, #8]	; (8009a98 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 8009a8e:	f882 38a0 	strbeq.w	r3, [r2, #2208]	; 0x8a0
  }
}
 8009a92:	4770      	bx	lr
 8009a94:	20001000 	.word	0x20001000
 8009a98:	2000c120 	.word	0x2000c120

08009a9c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8009a9e:	7a1b      	ldrb	r3, [r3, #8]
 8009aa0:	2b02      	cmp	r3, #2
  {
    /* allows AUDIODATA_SIZE() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8009aa2:	bf02      	ittt	eq
 8009aa4:	4b03      	ldreq	r3, [pc, #12]	; (8009ab4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 8009aa6:	2201      	moveq	r2, #1
 8009aa8:	f883 28a0 	strbeq.w	r2, [r3, #2208]	; 0x8a0
  }
}
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	20001000 	.word	0x20001000
 8009ab4:	2000c120 	.word	0x2000c120

08009ab8 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8009ab8:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8009aba:	4806      	ldr	r0, [pc, #24]	; (8009ad4 <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 8009abc:	f7f8 ffee 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 8009ac0:	200e      	movs	r0, #14
 8009ac2:	4905      	ldr	r1, [pc, #20]	; (8009ad8 <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 8009ac4:	f7f9 f972 	bl	8002dac <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8009ac8:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8009aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8009ace:	f7f8 b9a9 	b.w	8001e24 <BSP_PB_GetState>
 8009ad2:	bf00      	nop
 8009ad4:	ffff0000 	.word	0xffff0000
 8009ad8:	080180e6 	.word	0x080180e6

08009adc <AudioRec_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioRec_demo (void)
{
 8009adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  */
  }

  audio_rec_buffer_state = BUFFER_OFFSET_NONE;

  if (recording==1)
 8009ae0:	4e62      	ldr	r6, [pc, #392]	; (8009c6c <AudioRec_demo+0x190>)
  if (BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2 , DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	f64a 4144 	movw	r1, #44100	; 0xac44
 8009aea:	f44f 7000 	mov.w	r0, #512	; 0x200
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009aee:	4d60      	ldr	r5, [pc, #384]	; (8009c70 <AudioRec_demo+0x194>)
  if (BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2 , DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8009af0:	f7f8 fe04 	bl	80026fc <BSP_AUDIO_IN_InitEx>
  if (recording==1)
 8009af4:	6833      	ldr	r3, [r6, #0]
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009af6:	2400      	movs	r4, #0
  if (recording==1)
 8009af8:	2b01      	cmp	r3, #1
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009afa:	602c      	str	r4, [r5, #0]
  if (recording==1)
 8009afc:	d150      	bne.n	8009ba0 <AudioRec_demo+0xc4>
  {
	  /* Initialize Audio Recorder */
	  if (BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2 , DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8009afe:	2302      	movs	r3, #2
 8009b00:	2210      	movs	r2, #16
 8009b02:	f64a 4144 	movw	r1, #44100	; 0xac44
 8009b06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b0a:	f7f8 fdf7 	bl	80026fc <BSP_AUDIO_IN_InitEx>
		  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
		  */
	  }

	  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009b0e:	4859      	ldr	r0, [pc, #356]	; (8009c74 <AudioRec_demo+0x198>)
	  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009b10:	602c      	str	r4, [r5, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009b12:	f7f8 ffb7 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(175, 45, 14);
 8009b16:	220e      	movs	r2, #14
 8009b18:	212d      	movs	r1, #45	; 0x2d
 8009b1a:	20af      	movs	r0, #175	; 0xaf
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8009b1c:	4c56      	ldr	r4, [pc, #344]	; (8009c78 <AudioRec_demo+0x19c>)
	  BSP_LCD_FillCircle(175, 45, 14);
 8009b1e:	f7f9 fb95 	bl	800324c <BSP_LCD_FillCircle>
				  return;
			  }
		  }
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		  /* Copy recorded 1st half block in SDRAM */
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8009b22:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009c7c <AudioRec_demo+0x1a0>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009b26:	f04f 30ff 	mov.w	r0, #4294967295
				  return;
			  }
		  }
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		  /* Copy recorded 2nd half block in SDRAM */
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8009b2a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8009c98 <AudioRec_demo+0x1bc>
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8009b2e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8009c9c <AudioRec_demo+0x1c0>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009b32:	f7f8 ffa7 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8009b36:	f641 019c 	movw	r1, #6300	; 0x189c
 8009b3a:	4850      	ldr	r0, [pc, #320]	; (8009c7c <AudioRec_demo+0x1a0>)
 8009b3c:	f7f8 fcc8 	bl	80024d0 <BSP_AUDIO_IN_Record>
		  while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d174      	bne.n	8009c30 <AudioRec_demo+0x154>
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8009b46:	f5a4 50c4 	sub.w	r0, r4, #6272	; 0x1880
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009b4a:	2300      	movs	r3, #0
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8009b4c:	f641 029c 	movw	r2, #6300	; 0x189c
 8009b50:	4659      	mov	r1, fp
 8009b52:	381c      	subs	r0, #28
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009b54:	602b      	str	r3, [r5, #0]
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8009b56:	f004 fc8f 	bl	800e478 <memcpy>
		  while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8009b5a:	f8d5 8000 	ldr.w	r8, [r5]
 8009b5e:	f1b8 0f02 	cmp.w	r8, #2
 8009b62:	d16e      	bne.n	8009c42 <AudioRec_demo+0x166>
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8009b64:	4620      	mov	r0, r4
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8009b66:	f504 5444 	add.w	r4, r4, #12544	; 0x3100
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009b6a:	2700      	movs	r7, #0
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8009b6c:	f641 029c 	movw	r2, #6300	; 0x189c
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8009b70:	3438      	adds	r4, #56	; 0x38
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8009b72:	4651      	mov	r1, sl
		  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8009b74:	602f      	str	r7, [r5, #0]
		  memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8009b76:	f004 fc7f 	bl	800e478 <memcpy>
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8009b7a:	454c      	cmp	r4, r9
 8009b7c:	d1e0      	bne.n	8009b40 <AudioRec_demo+0x64>
			   (uint16_t *)(&internal_buffer[AUDIO_BLOCK_SIZE/2]),
			   AUDIO_BLOCK_SIZE);
	  }
	  /* Stop recorder */
	  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8009b7e:	4640      	mov	r0, r8
 8009b80:	f7f8 fcb0 	bl	80024e4 <BSP_AUDIO_IN_Stop>
	  recording=0;
	  // Not recording button
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
	  recording=0;
 8009b88:	6037      	str	r7, [r6, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009b8a:	f7f8 ff7b 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(175, 45, 14);
 8009b8e:	20af      	movs	r0, #175	; 0xaf
 8009b90:	220e      	movs	r2, #14
 8009b92:	212d      	movs	r1, #45	; 0x2d
 8009b94:	f7f9 fb5a 	bl	800324c <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	f7f8 ff72 	bl	8002a84 <BSP_LCD_SetTextColor>
  }

  if (playing==1)
 8009ba0:	4c37      	ldr	r4, [pc, #220]	; (8009c80 <AudioRec_demo+0x1a4>)
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d117      	bne.n	8009bd8 <AudioRec_demo+0xfc>
  {
	  /* -----------Start Playback -------------- */
	  /* Change the color of the play button to red*/
	  drawPlay(388, 45, LCD_COLOR_RED);
 8009ba8:	4a32      	ldr	r2, [pc, #200]	; (8009c74 <AudioRec_demo+0x198>)
 8009baa:	212d      	movs	r1, #45	; 0x2d
 8009bac:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8009bb0:	f000 fc94 	bl	800a4dc <drawPlay>
	  /* Initialize audio IN at REC_FREQ*/
	  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, 100, DEFAULT_AUDIO_IN_FREQ);
 8009bb4:	2164      	movs	r1, #100	; 0x64
 8009bb6:	f64a 4244 	movw	r2, #44100	; 0xac44
 8009bba:	2003      	movs	r0, #3
 8009bbc:	f7f8 fc04 	bl	80023c8 <BSP_AUDIO_OUT_Init>
	  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8009bc0:	2005      	movs	r0, #5
 8009bc2:	f7f8 fad3 	bl	800216c <BSP_AUDIO_OUT_SetAudioFrameSlot>

	  /* Play the recorded buffer*/
	  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);
 8009bc6:	492f      	ldr	r1, [pc, #188]	; (8009c84 <AudioRec_demo+0x1a8>)
 8009bc8:	482f      	ldr	r0, [pc, #188]	; (8009c88 <AudioRec_demo+0x1ac>)
 8009bca:	f7ff faa1 	bl	8009110 <AUDIO_Start>
	  while (playing!=5)
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	2b05      	cmp	r3, #5
 8009bd2:	d13b      	bne.n	8009c4c <AudioRec_demo+0x170>
			  return;
		  }
	  }
	  if (playing==5)
	  {
		  playing=0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6023      	str	r3, [r4, #0]
	  }
  }

  if (analyzing==1)
 8009bd8:	4c2c      	ldr	r4, [pc, #176]	; (8009c8c <AudioRec_demo+0x1b0>)
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d125      	bne.n	8009c2c <AudioRec_demo+0x150>
  {

	  /* Change the color of the MFCC button to red*/
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009be0:	4824      	ldr	r0, [pc, #144]	; (8009c74 <AudioRec_demo+0x198>)
 8009be2:	f7f8 ff4f 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(285, 103, 11);
 8009be6:	220b      	movs	r2, #11
 8009be8:	2167      	movs	r1, #103	; 0x67
 8009bea:	f240 101d 	movw	r0, #285	; 0x11d
 8009bee:	f7f9 fb2d 	bl	800324c <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(0xff003a65);
 8009bf2:	4827      	ldr	r0, [pc, #156]	; (8009c90 <AudioRec_demo+0x1b4>)
 8009bf4:	f7f8 ff46 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillCircle(285, 103, 8);
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	2167      	movs	r1, #103	; 0x67
 8009bfc:	f240 101d 	movw	r0, #285	; 0x11d
 8009c00:	f7f9 fb24 	bl	800324c <BSP_LCD_FillCircle>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009c04:	481b      	ldr	r0, [pc, #108]	; (8009c74 <AudioRec_demo+0x198>)
 8009c06:	f7f8 ff3d 	bl	8002a84 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawLine(293,111,301,119);
 8009c0a:	216f      	movs	r1, #111	; 0x6f
 8009c0c:	f240 1025 	movw	r0, #293	; 0x125
 8009c10:	2377      	movs	r3, #119	; 0x77
 8009c12:	f240 122d 	movw	r2, #301	; 0x12d
 8009c16:	f7f9 f8db 	bl	8002dd0 <BSP_LCD_DrawLine>
	  BSP_LCD_DrawPolygon(Points, 4);
 8009c1a:	2104      	movs	r1, #4
 8009c1c:	481d      	ldr	r0, [pc, #116]	; (8009c94 <AudioRec_demo+0x1b8>)
 8009c1e:	f7f9 f941 	bl	8002ea4 <BSP_LCD_DrawPolygon>

	  while (analyzing!=5)
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	2b05      	cmp	r3, #5
 8009c26:	d119      	bne.n	8009c5c <AudioRec_demo+0x180>
			  return;
		  }
	  }
	  if (analyzing==5)
	  {
		  analyzing=0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6023      	str	r3, [r4, #0]
	  }
  }
}
 8009c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			  if (CheckForUserInput() > 0) //(CheckForUserInput() > 0)
 8009c30:	f001 fa5c 	bl	800b0ec <CheckForUserInput>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d083      	beq.n	8009b40 <AudioRec_demo+0x64>
				  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009c38:	2002      	movs	r0, #2
}
 8009c3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8009c3e:	f7f8 ba6d 	b.w	800211c <BSP_AUDIO_OUT_Stop>
			  if (CheckForUserInput() > 0)
 8009c42:	f001 fa53 	bl	800b0ec <CheckForUserInput>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d087      	beq.n	8009b5a <AudioRec_demo+0x7e>
 8009c4a:	e7f5      	b.n	8009c38 <AudioRec_demo+0x15c>
		  playing=AUDIO_Process();
 8009c4c:	f7ff fa86 	bl	800915c <AUDIO_Process>
 8009c50:	6020      	str	r0, [r4, #0]
		  if (CheckForUserInput() > 0)
 8009c52:	f001 fa4b 	bl	800b0ec <CheckForUserInput>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0b9      	beq.n	8009bce <AudioRec_demo+0xf2>
 8009c5a:	e7ed      	b.n	8009c38 <AudioRec_demo+0x15c>
		  analyzing=AUDIO_MFCC();
 8009c5c:	f7ff fcac 	bl	80095b8 <AUDIO_MFCC>
 8009c60:	6020      	str	r0, [r4, #0]
		  if (CheckForUserInput() > 0)
 8009c62:	f001 fa43 	bl	800b0ec <CheckForUserInput>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d0db      	beq.n	8009c22 <AudioRec_demo+0x146>
 8009c6a:	e7e5      	b.n	8009c38 <AudioRec_demo+0x15c>
 8009c6c:	200100cc 	.word	0x200100cc
 8009c70:	2000c9c4 	.word	0x2000c9c4
 8009c74:	ffff0000 	.word	0xffff0000
 8009c78:	c011709c 	.word	0xc011709c
 8009c7c:	2000c9c8 	.word	0x2000c9c8
 8009c80:	200100d0 	.word	0x200100d0
 8009c84:	001aeaa0 	.word	0x001aeaa0
 8009c88:	c0115800 	.word	0xc0115800
 8009c8c:	200100d4 	.word	0x200100d4
 8009c90:	ff003a65 	.word	0xff003a65
 8009c94:	200002f0 	.word	0x200002f0
 8009c98:	2000e264 	.word	0x2000e264
 8009c9c:	c02c5b3c 	.word	0xc02c5b3c

08009ca0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8009ca0:	4b01      	ldr	r3, [pc, #4]	; (8009ca8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	601a      	str	r2, [r3, #0]
  return;
}
 8009ca6:	4770      	bx	lr
 8009ca8:	2000c9c4 	.word	0x2000c9c4

08009cac <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8009cac:	4b01      	ldr	r3, [pc, #4]	; (8009cb4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
  return;
}
 8009cb2:	4770      	bx	lr
 8009cb4:	2000c9c4 	.word	0x2000c9c4

08009cb8 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8009cb8:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8009cba:	480a      	ldr	r0, [pc, #40]	; (8009ce4 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 8009cbc:	f7f8 feee 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8009cc0:	f7f8 ff04 	bl	8002acc <BSP_LCD_GetFont>
 8009cc4:	88c1      	ldrh	r1, [r0, #6]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	2000      	movs	r0, #0
 8009cca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009cce:	4a06      	ldr	r2, [pc, #24]	; (8009ce8 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8009cd0:	0049      	lsls	r1, r1, #1
 8009cd2:	b289      	uxth	r1, r1
 8009cd4:	f7f9 f816 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8009cd8:	2002      	movs	r0, #2
  {
    return;
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8009cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8009cde:	f7f8 b8a1 	b.w	8001e24 <BSP_PB_GetState>
 8009ce2:	bf00      	nop
 8009ce4:	ffff0000 	.word	0xffff0000
 8009ce8:	080180e6 	.word	0x080180e6

08009cec <BSP_LCD_DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_LCD_DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d_camera);
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <BSP_LCD_DMA2D_IRQHandler+0x8>)
 8009cee:	f7fa bf68 	b.w	8004bc2 <HAL_DMA2D_IRQHandler>
 8009cf2:	bf00      	nop
 8009cf4:	2000fb08 	.word	0x2000fb08

08009cf8 <HAL_DMA2D_MspInit>:
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <HAL_DMA2D_MspInit+0x2c>)
{
 8009cfa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*##-2- NVIC configuration  ################################################*/
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8009cfe:	205a      	movs	r0, #90	; 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8009d06:	2200      	movs	r2, #0
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8009d0a:	4611      	mov	r1, r2
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8009d14:	f7fa fb98 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009d18:	205a      	movs	r0, #90	; 0x5a
}
 8009d1a:	b003      	add	sp, #12
 8009d1c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009d20:	f7fa bbc4 	b.w	80044ac <HAL_NVIC_EnableIRQ>
 8009d24:	40023800 	.word	0x40023800

08009d28 <EEPROM_Show_Feature>:
  * @brief  Show EEPROM Features
  * @param  Feature : feature index
  * @retval None
  */
static void EEPROM_Show_Feature(uint8_t Feature)
{
 8009d28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  __IO TestStatus TransferStatus1 = FAILED;
 8009d2c:	2500      	movs	r5, #0
{
 8009d2e:	4604      	mov	r4, r0
  __IO uint16_t NumDataRead = 0;

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
  __IO TestStatus TransferStatus1 = FAILED;
 8009d34:	f88d 500d 	strb.w	r5, [sp, #13]
  __IO uint16_t NumDataRead = 0;
 8009d38:	f8ad 500e 	strh.w	r5, [sp, #14]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009d3c:	f7f8 feae 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295
 8009d44:	f7f8 fe9e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 8009d48:	f7f8 fe42 	bl	80029d0 <BSP_LCD_GetXSize>
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	f7f8 fe4b 	bl	80029e8 <BSP_LCD_GetYSize>
 8009d52:	3868      	subs	r0, #104	; 0x68
 8009d54:	f1a6 0218 	sub.w	r2, r6, #24
 8009d58:	215c      	movs	r1, #92	; 0x5c
 8009d5a:	b283      	uxth	r3, r0
 8009d5c:	200c      	movs	r0, #12
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	f7f9 fa10 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009d64:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009d68:	f7f8 fe8c 	bl	8002a84 <BSP_LCD_SetTextColor>

  /* Initialize the I2C EEPROM driver ----------------------------------------*/
  if (BSP_EEPROM_Init() != EEPROM_OK)
 8009d6c:	f7f8 fd1c 	bl	80027a8 <BSP_EEPROM_Init>
 8009d70:	4606      	mov	r6, r0
 8009d72:	b1a8      	cbz	r0, 8009da0 <EEPROM_Show_Feature+0x78>
  {
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009d74:	489a      	ldr	r0, [pc, #616]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009d76:	f7f8 fe85 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Initialization problem", CENTER_MODE);
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4a99      	ldr	r2, [pc, #612]	; (8009fe4 <EEPROM_Show_Feature+0x2bc>)
 8009d7e:	2173      	movs	r1, #115	; 0x73
 8009d80:	4628      	mov	r0, r5
 8009d82:	f7f8 ffbf 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Check if HW connected or", CENTER_MODE);
 8009d86:	2301      	movs	r3, #1
 8009d88:	4a97      	ldr	r2, [pc, #604]	; (8009fe8 <EEPROM_Show_Feature+0x2c0>)
 8009d8a:	2182      	movs	r1, #130	; 0x82
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7f8 ffb9 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"HW version not supported", CENTER_MODE);
 8009d92:	2301      	movs	r3, #1
 8009d94:	4a95      	ldr	r2, [pc, #596]	; (8009fec <EEPROM_Show_Feature+0x2c4>)
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 8009d96:	2191      	movs	r1, #145	; 0x91
        if (TransferStatus1 != FAILED)
        {
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 8009d98:	2000      	movs	r0, #0
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8009d9a:	f7f8 ffb3 	bl	8002d04 <BSP_LCD_DisplayStringAt>
 8009d9e:	e009      	b.n	8009db4 <EEPROM_Show_Feature+0x8c>
  EEPROMConnected = 1;
 8009da0:	4f93      	ldr	r7, [pc, #588]	; (8009ff0 <EEPROM_Show_Feature+0x2c8>)
 8009da2:	f04f 0801 	mov.w	r8, #1
 8009da6:	f887 8000 	strb.w	r8, [r7]
  BSP_EEPROM_WaitEepromStandbyState();
 8009daa:	f7f8 fd29 	bl	8002800 <BSP_EEPROM_WaitEepromStandbyState>
  switch (Feature)
 8009dae:	b124      	cbz	r4, 8009dba <EEPROM_Show_Feature+0x92>
 8009db0:	4544      	cmp	r4, r8
 8009db2:	d05d      	beq.n	8009e70 <EEPROM_Show_Feature+0x148>
      }
      break;
  }
}
 8009db4:	b004      	add	sp, #16
 8009db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (EEPROMConnected == 1)
 8009dba:	783d      	ldrb	r5, [r7, #0]
 8009dbc:	2d01      	cmp	r5, #1
 8009dbe:	d145      	bne.n	8009e4c <EEPROM_Show_Feature+0x124>
        NumDataRead = BUFFER_SIZE1;
 8009dc0:	f240 230f 	movw	r3, #527	; 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8009dc4:	f10d 020e 	add.w	r2, sp, #14
 8009dc8:	2149      	movs	r1, #73	; 0x49
 8009dca:	488a      	ldr	r0, [pc, #552]	; (8009ff4 <EEPROM_Show_Feature+0x2cc>)
        NumDataRead = BUFFER_SIZE1;
 8009dcc:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8009dd0:	f7f8 fd06 	bl	80027e0 <BSP_EEPROM_ReadBuffer>
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	b1b0      	cbz	r0, 8009e06 <EEPROM_Show_Feature+0xde>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009dd8:	4881      	ldr	r0, [pc, #516]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009dda:	f7f8 fe53 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read old data", CENTER_MODE);
 8009dde:	462b      	mov	r3, r5
 8009de0:	4a85      	ldr	r2, [pc, #532]	; (8009ff8 <EEPROM_Show_Feature+0x2d0>)
 8009de2:	2173      	movs	r1, #115	; 0x73
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7f8 ff8d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009dea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009dee:	f7f8 fe49 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 8009df2:	462b      	mov	r3, r5
 8009df4:	4a81      	ldr	r2, [pc, #516]	; (8009ffc <EEPROM_Show_Feature+0x2d4>)
 8009df6:	2191      	movs	r1, #145	; 0x91
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7f8 ff83 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"To write new data", CENTER_MODE);
 8009dfe:	462b      	mov	r3, r5
 8009e00:	4a7f      	ldr	r2, [pc, #508]	; (800a000 <EEPROM_Show_Feature+0x2d8>)
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 8009e02:	21a0      	movs	r1, #160	; 0xa0
 8009e04:	e7c8      	b.n	8009d98 <EEPROM_Show_Feature+0x70>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String read", CENTER_MODE);
 8009e06:	462b      	mov	r3, r5
 8009e08:	4a7e      	ldr	r2, [pc, #504]	; (800a004 <EEPROM_Show_Feature+0x2dc>)
 8009e0a:	2173      	movs	r1, #115	; 0x73
 8009e0c:	f7f8 ff7a 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 8009e10:	462b      	mov	r3, r5
 8009e12:	4a7d      	ldr	r2, [pc, #500]	; (800a008 <EEPROM_Show_Feature+0x2e0>)
 8009e14:	2182      	movs	r1, #130	; 0x82
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7f8 ff74 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009e1c:	487b      	ldr	r0, [pc, #492]	; (800a00c <EEPROM_Show_Feature+0x2e4>)
 8009e1e:	f7f8 fe31 	bl	8002a84 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 160, Rx1Buffer, CENTER_MODE);
 8009e22:	462b      	mov	r3, r5
 8009e24:	4a73      	ldr	r2, [pc, #460]	; (8009ff4 <EEPROM_Show_Feature+0x2cc>)
 8009e26:	21a0      	movs	r1, #160	; 0xa0
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7f8 ff6b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e2e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e32:	f7f8 fe27 	bl	8002a84 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"Press USER key", CENTER_MODE);
 8009e36:	462b      	mov	r3, r5
 8009e38:	4a75      	ldr	r2, [pc, #468]	; (800a010 <EEPROM_Show_Feature+0x2e8>)
 8009e3a:	21be      	movs	r1, #190	; 0xbe
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7f8 ff61 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 205, (uint8_t *)"To write new data", CENTER_MODE);
 8009e42:	462b      	mov	r3, r5
 8009e44:	4a6e      	ldr	r2, [pc, #440]	; (800a000 <EEPROM_Show_Feature+0x2d8>)
 8009e46:	21cd      	movs	r1, #205	; 0xcd
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8009e48:	4630      	mov	r0, r6
 8009e4a:	e7a6      	b.n	8009d9a <EEPROM_Show_Feature+0x72>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009e4c:	4864      	ldr	r0, [pc, #400]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009e4e:	f7f8 fe19 	bl	8002a84 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 8009e52:	4643      	mov	r3, r8
 8009e54:	4a6f      	ldr	r2, [pc, #444]	; (800a014 <EEPROM_Show_Feature+0x2ec>)
 8009e56:	2173      	movs	r1, #115	; 0x73
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7f8 ff53 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
 8009e5e:	4643      	mov	r3, r8
 8009e60:	4a6d      	ldr	r2, [pc, #436]	; (800a018 <EEPROM_Show_Feature+0x2f0>)
 8009e62:	2182      	movs	r1, #130	; 0x82
 8009e64:	4620      	mov	r0, r4
 8009e66:	f7f8 ff4d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 8009e6a:	4643      	mov	r3, r8
 8009e6c:	4a63      	ldr	r2, [pc, #396]	; (8009ffc <EEPROM_Show_Feature+0x2d4>)
 8009e6e:	e792      	b.n	8009d96 <EEPROM_Show_Feature+0x6e>
      if (EEPROMConnected == 1)
 8009e70:	783d      	ldrb	r5, [r7, #0]
 8009e72:	2d01      	cmp	r5, #1
 8009e74:	f040 80a1 	bne.w	8009fba <EEPROM_Show_Feature+0x292>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e78:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e7c:	f7f8 fe02 	bl	8002a84 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Writing...", CENTER_MODE);
 8009e80:	462b      	mov	r3, r5
 8009e82:	4a66      	ldr	r2, [pc, #408]	; (800a01c <EEPROM_Show_Feature+0x2f4>)
 8009e84:	2173      	movs	r1, #115	; 0x73
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7f8 ff3c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        snprintf((char*)Tx2Buffer, BUFFER_SIZE1, "%s Test %d", Tx1Buffer, NbLoop);
 8009e8c:	4b64      	ldr	r3, [pc, #400]	; (800a020 <EEPROM_Show_Feature+0x2f8>)
 8009e8e:	4a65      	ldr	r2, [pc, #404]	; (800a024 <EEPROM_Show_Feature+0x2fc>)
 8009e90:	f240 210f 	movw	r1, #527	; 0x20f
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	4864      	ldr	r0, [pc, #400]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	1c7b      	adds	r3, r7, #1
 8009e9c:	f004 ff84 	bl	800eda8 <sniprintf>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8009ea0:	f240 220f 	movw	r2, #527	; 0x20f
 8009ea4:	2149      	movs	r1, #73	; 0x49
 8009ea6:	4860      	ldr	r0, [pc, #384]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009ea8:	f7f8 fcd2 	bl	8002850 <BSP_EEPROM_WriteBuffer>
 8009eac:	b130      	cbz	r0, 8009ebc <EEPROM_Show_Feature+0x194>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009eae:	484c      	ldr	r0, [pc, #304]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009eb0:	f7f8 fde8 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 1", CENTER_MODE);
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	4a5d      	ldr	r2, [pc, #372]	; (800a02c <EEPROM_Show_Feature+0x304>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 8009eb8:	2173      	movs	r1, #115	; 0x73
 8009eba:	e7c5      	b.n	8009e48 <EEPROM_Show_Feature+0x120>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8009ebc:	f240 220f 	movw	r2, #527	; 0x20f
 8009ec0:	2149      	movs	r1, #73	; 0x49
 8009ec2:	4859      	ldr	r0, [pc, #356]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009ec4:	f7f8 fcc4 	bl	8002850 <BSP_EEPROM_WriteBuffer>
 8009ec8:	b130      	cbz	r0, 8009ed8 <EEPROM_Show_Feature+0x1b0>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009eca:	4845      	ldr	r0, [pc, #276]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009ecc:	f7f8 fdda 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 2", CENTER_MODE);
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4a57      	ldr	r2, [pc, #348]	; (800a030 <EEPROM_Show_Feature+0x308>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 8009ed4:	2173      	movs	r1, #115	; 0x73
 8009ed6:	e75f      	b.n	8009d98 <EEPROM_Show_Feature+0x70>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8009ed8:	f240 220f 	movw	r2, #527	; 0x20f
 8009edc:	2149      	movs	r1, #73	; 0x49
 8009ede:	4852      	ldr	r0, [pc, #328]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009ee0:	f7f8 fcb6 	bl	8002850 <BSP_EEPROM_WriteBuffer>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	b128      	cbz	r0, 8009ef4 <EEPROM_Show_Feature+0x1cc>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009ee8:	483d      	ldr	r0, [pc, #244]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009eea:	f7f8 fdcb 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 3", CENTER_MODE);
 8009eee:	462b      	mov	r3, r5
 8009ef0:	4a50      	ldr	r2, [pc, #320]	; (800a034 <EEPROM_Show_Feature+0x30c>)
 8009ef2:	e7ef      	b.n	8009ed4 <EEPROM_Show_Feature+0x1ac>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8009ef4:	f240 220f 	movw	r2, #527	; 0x20f
 8009ef8:	2149      	movs	r1, #73	; 0x49
 8009efa:	484b      	ldr	r0, [pc, #300]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009efc:	f7f8 fca8 	bl	8002850 <BSP_EEPROM_WriteBuffer>
 8009f00:	b128      	cbz	r0, 8009f0e <EEPROM_Show_Feature+0x1e6>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009f02:	4837      	ldr	r0, [pc, #220]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009f04:	f7f8 fdbe 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 8009f08:	462b      	mov	r3, r5
 8009f0a:	4a4b      	ldr	r2, [pc, #300]	; (800a038 <EEPROM_Show_Feature+0x310>)
 8009f0c:	e7d4      	b.n	8009eb8 <EEPROM_Show_Feature+0x190>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8009f0e:	f240 220f 	movw	r2, #527	; 0x20f
 8009f12:	2149      	movs	r1, #73	; 0x49
 8009f14:	4844      	ldr	r0, [pc, #272]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009f16:	f7f8 fc9b 	bl	8002850 <BSP_EEPROM_WriteBuffer>
 8009f1a:	b128      	cbz	r0, 8009f28 <EEPROM_Show_Feature+0x200>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009f1c:	4830      	ldr	r0, [pc, #192]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009f1e:	f7f8 fdb1 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 5", CENTER_MODE);
 8009f22:	462b      	mov	r3, r5
 8009f24:	4a45      	ldr	r2, [pc, #276]	; (800a03c <EEPROM_Show_Feature+0x314>)
 8009f26:	e7d5      	b.n	8009ed4 <EEPROM_Show_Feature+0x1ac>
        BSP_EEPROM_WaitEepromStandbyState();
 8009f28:	f7f8 fc6a 	bl	8002800 <BSP_EEPROM_WaitEepromStandbyState>
        NumDataRead = BUFFER_SIZE1;
 8009f2c:	f240 230f 	movw	r3, #527	; 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8009f30:	f10d 020e 	add.w	r2, sp, #14
 8009f34:	2149      	movs	r1, #73	; 0x49
 8009f36:	482f      	ldr	r0, [pc, #188]	; (8009ff4 <EEPROM_Show_Feature+0x2cc>)
        NumDataRead = BUFFER_SIZE1;
 8009f38:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8009f3c:	f7f8 fc50 	bl	80027e0 <BSP_EEPROM_ReadBuffer>
 8009f40:	bb00      	cbnz	r0, 8009f84 <EEPROM_Show_Feature+0x25c>
 8009f42:	4a39      	ldr	r2, [pc, #228]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009f44:	f44f 7304 	mov.w	r3, #528	; 0x210
 8009f48:	f2a2 210f 	subw	r1, r2, #527	; 0x20f
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
static TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	b9f3      	cbnz	r3, 8009f90 <EEPROM_Show_Feature+0x268>
        TransferStatus1 = Buffercmp(Tx2Buffer, Rx1Buffer, BUFFER_SIZE1);
 8009f52:	f88d 500d 	strb.w	r5, [sp, #13]
        if (TransferStatus1 != FAILED)
 8009f56:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009f5a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8009f5e:	b1fb      	cbz	r3, 8009fa0 <EEPROM_Show_Feature+0x278>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
 8009f60:	2301      	movs	r3, #1
 8009f62:	4a37      	ldr	r2, [pc, #220]	; (800a040 <EEPROM_Show_Feature+0x318>)
 8009f64:	2173      	movs	r1, #115	; 0x73
 8009f66:	2000      	movs	r0, #0
 8009f68:	f7f8 fecc 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4a26      	ldr	r2, [pc, #152]	; (800a008 <EEPROM_Show_Feature+0x2e0>)
 8009f70:	2182      	movs	r1, #130	; 0x82
 8009f72:	2000      	movs	r0, #0
 8009f74:	f7f8 fec6 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009f78:	4824      	ldr	r0, [pc, #144]	; (800a00c <EEPROM_Show_Feature+0x2e4>)
 8009f7a:	f7f8 fd83 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4a29      	ldr	r2, [pc, #164]	; (800a028 <EEPROM_Show_Feature+0x300>)
 8009f82:	e73e      	b.n	8009e02 <EEPROM_Show_Feature+0xda>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009f84:	4816      	ldr	r0, [pc, #88]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009f86:	f7f8 fd7d 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4a2d      	ldr	r2, [pc, #180]	; (800a044 <EEPROM_Show_Feature+0x31c>)
 8009f8e:	e7a1      	b.n	8009ed4 <EEPROM_Show_Feature+0x1ac>
  {
    if (*pBuffer1 != *pBuffer2)
 8009f90:	f812 4b01 	ldrb.w	r4, [r2], #1
 8009f94:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009f98:	4284      	cmp	r4, r0
 8009f9a:	d0d7      	beq.n	8009f4c <EEPROM_Show_Feature+0x224>
    {
      return FAILED;
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	e7d8      	b.n	8009f52 <EEPROM_Show_Feature+0x22a>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009fa0:	480f      	ldr	r0, [pc, #60]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009fa2:	f7f8 fd6f 	bl	8002a84 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"FAILED to write!", CENTER_MODE);
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4a27      	ldr	r2, [pc, #156]	; (800a048 <EEPROM_Show_Feature+0x320>)
 8009faa:	2173      	movs	r1, #115	; 0x73
 8009fac:	4620      	mov	r0, r4
 8009fae:	f7f8 fea9 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4a25      	ldr	r2, [pc, #148]	; (800a04c <EEPROM_Show_Feature+0x324>)
 8009fb6:	2182      	movs	r1, #130	; 0x82
 8009fb8:	e6ee      	b.n	8009d98 <EEPROM_Show_Feature+0x70>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009fba:	4809      	ldr	r0, [pc, #36]	; (8009fe0 <EEPROM_Show_Feature+0x2b8>)
 8009fbc:	f7f8 fd62 	bl	8002a84 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	4a14      	ldr	r2, [pc, #80]	; (800a014 <EEPROM_Show_Feature+0x2ec>)
 8009fc4:	2173      	movs	r1, #115	; 0x73
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7f8 fe9c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
 8009fcc:	4623      	mov	r3, r4
 8009fce:	4a20      	ldr	r2, [pc, #128]	; (800a050 <EEPROM_Show_Feature+0x328>)
 8009fd0:	2182      	movs	r1, #130	; 0x82
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7f8 fe96 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 8009fd8:	4623      	mov	r3, r4
 8009fda:	4a1c      	ldr	r2, [pc, #112]	; (800a04c <EEPROM_Show_Feature+0x324>)
 8009fdc:	2182      	movs	r1, #130	; 0x82
 8009fde:	e733      	b.n	8009e48 <EEPROM_Show_Feature+0x120>
 8009fe0:	ffff0000 	.word	0xffff0000
 8009fe4:	0801810b 	.word	0x0801810b
 8009fe8:	08018122 	.word	0x08018122
 8009fec:	0801813b 	.word	0x0801813b
 8009ff0:	200000e4 	.word	0x200000e4
 8009ff4:	2000fb64 	.word	0x2000fb64
 8009ff8:	08018154 	.word	0x08018154
 8009ffc:	08018170 	.word	0x08018170
 800a000:	08018185 	.word	0x08018185
 800a004:	08018197 	.word	0x08018197
 800a008:	080181aa 	.word	0x080181aa
 800a00c:	ff0000ff 	.word	0xff0000ff
 800a010:	080181b5 	.word	0x080181b5
 800a014:	080181c4 	.word	0x080181c4
 800a018:	080182b8 	.word	0x080182b8
 800a01c:	080181db 	.word	0x080181db
 800a020:	20000594 	.word	0x20000594
 800a024:	080181e6 	.word	0x080181e6
 800a028:	2000fd73 	.word	0x2000fd73
 800a02c:	080181f1 	.word	0x080181f1
 800a030:	08018207 	.word	0x08018207
 800a034:	0801821d 	.word	0x0801821d
 800a038:	08018233 	.word	0x08018233
 800a03c:	08018249 	.word	0x08018249
 800a040:	08018272 	.word	0x08018272
 800a044:	0801825f 	.word	0x0801825f
 800a048:	08018286 	.word	0x08018286
 800a04c:	08018297 	.word	0x08018297
 800a050:	080182b2 	.word	0x080182b2

0800a054 <EEPROM_demo>:
{
 800a054:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a056:	f04f 30ff 	mov.w	r0, #4294967295
 800a05a:	f7f8 fd43 	bl	8002ae4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a05e:	4833      	ldr	r0, [pc, #204]	; (800a12c <EEPROM_demo+0xd8>)
 800a060:	f7f8 fd10 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800a064:	f7f8 fcb4 	bl	80029d0 <BSP_LCD_GetXSize>
 800a068:	2100      	movs	r1, #0
 800a06a:	b282      	uxth	r2, r0
 800a06c:	2350      	movs	r3, #80	; 0x50
 800a06e:	4608      	mov	r0, r1
 800a070:	f7f9 f888 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	f7f8 fd04 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800a07c:	482b      	ldr	r0, [pc, #172]	; (800a12c <EEPROM_demo+0xd8>)
 800a07e:	f7f8 fd0d 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800a082:	482b      	ldr	r0, [pc, #172]	; (800a130 <EEPROM_demo+0xdc>)
 800a084:	f7f8 fd16 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"EEPROM", CENTER_MODE);
 800a088:	2100      	movs	r1, #0
 800a08a:	2301      	movs	r3, #1
 800a08c:	4a29      	ldr	r2, [pc, #164]	; (800a134 <EEPROM_demo+0xe0>)
 800a08e:	4608      	mov	r0, r1
 800a090:	f7f8 fe38 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800a094:	4828      	ldr	r0, [pc, #160]	; (800a138 <EEPROM_demo+0xe4>)
 800a096:	f7f8 fd0d 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 800a09a:	2301      	movs	r3, #1
 800a09c:	4a27      	ldr	r2, [pc, #156]	; (800a13c <EEPROM_demo+0xe8>)
 800a09e:	211e      	movs	r1, #30
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	f7f8 fe2f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"EEPROM Features, use BUTTON", CENTER_MODE);
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4a25      	ldr	r2, [pc, #148]	; (800a140 <EEPROM_demo+0xec>)
 800a0aa:	212d      	movs	r1, #45	; 0x2d
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f7f8 fe29 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"to start EEPROM data transfer", CENTER_MODE);
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	4a23      	ldr	r2, [pc, #140]	; (800a144 <EEPROM_demo+0xf0>)
 800a0b6:	213c      	movs	r1, #60	; 0x3c
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f7f8 fe23 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a0be:	481b      	ldr	r0, [pc, #108]	; (800a12c <EEPROM_demo+0xd8>)
 800a0c0:	f7f8 fce0 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800a0c4:	f7f8 fc84 	bl	80029d0 <BSP_LCD_GetXSize>
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	f7f8 fc8d 	bl	80029e8 <BSP_LCD_GetYSize>
 800a0ce:	3864      	subs	r0, #100	; 0x64
 800a0d0:	f1a4 0214 	sub.w	r2, r4, #20
 800a0d4:	215a      	movs	r1, #90	; 0x5a
 800a0d6:	b283      	uxth	r3, r0
 800a0d8:	200a      	movs	r0, #10
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	f7f8 fd7a 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800a0e0:	f7f8 fc76 	bl	80029d0 <BSP_LCD_GetXSize>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	f7f8 fc7f 	bl	80029e8 <BSP_LCD_GetYSize>
 800a0ea:	3866      	subs	r0, #102	; 0x66
 800a0ec:	f1a4 0216 	sub.w	r2, r4, #22
 800a0f0:	215b      	movs	r1, #91	; 0x5b
 800a0f2:	b283      	uxth	r3, r0
 800a0f4:	200b      	movs	r0, #11
 800a0f6:	b292      	uxth	r2, r2
  EEPROMFeature = 0;
 800a0f8:	4c13      	ldr	r4, [pc, #76]	; (800a148 <EEPROM_demo+0xf4>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800a0fa:	f7f8 fd6b 	bl	8002bd4 <BSP_LCD_DrawRect>
  EEPROMFeature = 0;
 800a0fe:	2000      	movs	r0, #0
 800a100:	f884 041e 	strb.w	r0, [r4, #1054]	; 0x41e
  EEPROM_Show_Feature (EEPROMFeature);
 800a104:	f7ff fe10 	bl	8009d28 <EEPROM_Show_Feature>
    if (CheckForUserInput() > 0)
 800a108:	f000 fff0 	bl	800b0ec <CheckForUserInput>
 800a10c:	b148      	cbz	r0, 800a122 <EEPROM_demo+0xce>
      if (++EEPROMFeature < EEPROM_FEATURES_NUM)
 800a10e:	f894 041e 	ldrb.w	r0, [r4, #1054]	; 0x41e
 800a112:	3001      	adds	r0, #1
 800a114:	b2c0      	uxtb	r0, r0
 800a116:	2801      	cmp	r0, #1
 800a118:	f884 041e 	strb.w	r0, [r4, #1054]	; 0x41e
 800a11c:	d805      	bhi.n	800a12a <EEPROM_demo+0xd6>
        EEPROM_Show_Feature (EEPROMFeature);
 800a11e:	f7ff fe03 	bl	8009d28 <EEPROM_Show_Feature>
    HAL_Delay(100);
 800a122:	2064      	movs	r0, #100	; 0x64
 800a124:	f7fa f96c 	bl	8004400 <HAL_Delay>
    if (CheckForUserInput() > 0)
 800a128:	e7ee      	b.n	800a108 <EEPROM_demo+0xb4>
}
 800a12a:	bd10      	pop	{r4, pc}
 800a12c:	ff0000ff 	.word	0xff0000ff
 800a130:	20000074 	.word	0x20000074
 800a134:	080182bd 	.word	0x080182bd
 800a138:	20000084 	.word	0x20000084
 800a13c:	080182c4 	.word	0x080182c4
 800a140:	080182e5 	.word	0x080182e5
 800a144:	08018301 	.word	0x08018301
 800a148:	2000fb64 	.word	0x2000fb64

0800a14c <BSP_EEPROM_TIMEOUT_UserCallback>:
  EEPROMConnected = 0;
 800a14c:	4b01      	ldr	r3, [pc, #4]	; (800a154 <BSP_EEPROM_TIMEOUT_UserCallback+0x8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
}
 800a152:	4770      	bx	lr
 800a154:	200000e4 	.word	0x200000e4

0800a158 <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature : feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 800a158:	b570      	push	{r4, r5, r6, lr}
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 800a15a:	4b73      	ldr	r3, [pc, #460]	; (800a328 <LCD_Show_Feature+0x1d0>)
{
 800a15c:	b086      	sub	sp, #24
 800a15e:	4604      	mov	r4, r0
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 800a160:	6859      	ldr	r1, [r3, #4]
 800a162:	466a      	mov	r2, sp
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	c203      	stmia	r2!, {r0, r1}
 800a168:	6898      	ldr	r0, [r3, #8]
  Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 800a16a:	6919      	ldr	r1, [r3, #16]
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 800a16c:	6010      	str	r0, [r2, #0]
  Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 800a16e:	aa03      	add	r2, sp, #12
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	c203      	stmia	r2!, {r0, r1}
 800a174:	6958      	ldr	r0, [r3, #20]
 800a176:	6010      	str	r0, [r2, #0]

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	f7f8 fc8e 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	f7f8 fc7e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 800a188:	f7f8 fc22 	bl	80029d0 <BSP_LCD_GetXSize>
 800a18c:	4605      	mov	r5, r0
 800a18e:	f7f8 fc2b 	bl	80029e8 <BSP_LCD_GetYSize>
 800a192:	3868      	subs	r0, #104	; 0x68
 800a194:	f1a5 0218 	sub.w	r2, r5, #24
 800a198:	215c      	movs	r1, #92	; 0x5c
 800a19a:	b283      	uxth	r3, r0
 800a19c:	200c      	movs	r0, #12
 800a19e:	b292      	uxth	r2, r2
 800a1a0:	f7f8 fff0 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a1a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a1a8:	f7f8 fc6c 	bl	8002a84 <BSP_LCD_SetTextColor>

  switch (feature)
 800a1ac:	b11c      	cbz	r4, 800a1b6 <LCD_Show_Feature+0x5e>
 800a1ae:	2c01      	cmp	r4, #1
 800a1b0:	d036      	beq.n	800a220 <LCD_Show_Feature+0xc8>
      break;

    default :
      break;
  }
}
 800a1b2:	b006      	add	sp, #24
 800a1b4:	bd70      	pop	{r4, r5, r6, pc}
      BSP_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	4a5c      	ldr	r2, [pc, #368]	; (800a32c <LCD_Show_Feature+0x1d4>)
 800a1ba:	2164      	movs	r1, #100	; 0x64
 800a1bc:	200e      	movs	r0, #14
 800a1be:	f7f8 fda1 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4a5a      	ldr	r2, [pc, #360]	; (800a330 <LCD_Show_Feature+0x1d8>)
 800a1c8:	2173      	movs	r1, #115	; 0x73
 800a1ca:	f7f8 fd9b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(14, 130, (uint8_t *)"Right aligned Text", RIGHT_MODE);
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	4a58      	ldr	r2, [pc, #352]	; (800a334 <LCD_Show_Feature+0x1dc>)
 800a1d2:	2182      	movs	r1, #130	; 0x82
 800a1d4:	200e      	movs	r0, #14
 800a1d6:	f7f8 fd95 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font24);
 800a1da:	4857      	ldr	r0, [pc, #348]	; (800a338 <LCD_Show_Feature+0x1e0>)
 800a1dc:	f7f8 fc6a 	bl	8002ab4 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	4a56      	ldr	r2, [pc, #344]	; (800a33c <LCD_Show_Feature+0x1e4>)
 800a1e4:	21b4      	movs	r1, #180	; 0xb4
 800a1e6:	200e      	movs	r0, #14
 800a1e8:	f7f8 fd8c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font20);
 800a1ec:	4854      	ldr	r0, [pc, #336]	; (800a340 <LCD_Show_Feature+0x1e8>)
 800a1ee:	f7f8 fc61 	bl	8002ab4 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() / 2 - 20, 180, (uint8_t *)"Font20", LEFT_MODE);
 800a1f2:	f7f8 fbed 	bl	80029d0 <BSP_LCD_GetXSize>
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	0840      	lsrs	r0, r0, #1
 800a1fa:	4a52      	ldr	r2, [pc, #328]	; (800a344 <LCD_Show_Feature+0x1ec>)
 800a1fc:	21b4      	movs	r1, #180	; 0xb4
 800a1fe:	3814      	subs	r0, #20
 800a200:	b280      	uxth	r0, r0
 800a202:	f7f8 fd7f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font16);
 800a206:	4850      	ldr	r0, [pc, #320]	; (800a348 <LCD_Show_Feature+0x1f0>)
 800a208:	f7f8 fc54 	bl	8002ab4 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 800a20c:	f7f8 fbe0 	bl	80029d0 <BSP_LCD_GetXSize>
 800a210:	3850      	subs	r0, #80	; 0x50
 800a212:	2303      	movs	r3, #3
 800a214:	4a4d      	ldr	r2, [pc, #308]	; (800a34c <LCD_Show_Feature+0x1f4>)
 800a216:	21b8      	movs	r1, #184	; 0xb8
 800a218:	b280      	uxth	r0, r0
 800a21a:	f7f8 fd73 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      break;
 800a21e:	e7c8      	b.n	800a1b2 <LCD_Show_Feature+0x5a>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a220:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a224:	f7f8 fc2e 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawRect(20, 100, 60 , 40);
 800a228:	2328      	movs	r3, #40	; 0x28
 800a22a:	223c      	movs	r2, #60	; 0x3c
 800a22c:	2164      	movs	r1, #100	; 0x64
 800a22e:	2014      	movs	r0, #20
 800a230:	f7f8 fcd0 	bl	8002bd4 <BSP_LCD_DrawRect>
      BSP_LCD_FillRect(100, 100, 60 , 40);
 800a234:	2164      	movs	r1, #100	; 0x64
 800a236:	2328      	movs	r3, #40	; 0x28
 800a238:	223c      	movs	r2, #60	; 0x3c
 800a23a:	4608      	mov	r0, r1
 800a23c:	f7f8 ffa2 	bl	8003184 <BSP_LCD_FillRect>
      BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 800a240:	4843      	ldr	r0, [pc, #268]	; (800a350 <LCD_Show_Feature+0x1f8>)
 800a242:	f7f8 fc1f 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 120, 20);
 800a246:	f7f8 fbc3 	bl	80029d0 <BSP_LCD_GetXSize>
 800a24a:	3878      	subs	r0, #120	; 0x78
 800a24c:	2214      	movs	r2, #20
 800a24e:	2178      	movs	r1, #120	; 0x78
 800a250:	b280      	uxth	r0, r0
 800a252:	f7f8 feb1 	bl	8002fb8 <BSP_LCD_DrawCircle>
      BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 40, 120, 20);
 800a256:	f7f8 fbbb 	bl	80029d0 <BSP_LCD_GetXSize>
 800a25a:	3828      	subs	r0, #40	; 0x28
 800a25c:	2214      	movs	r2, #20
 800a25e:	2178      	movs	r1, #120	; 0x78
 800a260:	b280      	uxth	r0, r0
 800a262:	f7f8 fff3 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800a266:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800a26a:	f7f8 fc0b 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawPolygon(Points, 3);
 800a26e:	4668      	mov	r0, sp
 800a270:	2103      	movs	r1, #3
 800a272:	f7f8 fe17 	bl	8002ea4 <BSP_LCD_DrawPolygon>
      BSP_LCD_FillPolygon(Points2, 3);
 800a276:	2103      	movs	r1, #3
 800a278:	a803      	add	r0, sp, #12
 800a27a:	f7f9 f84f 	bl	800331c <BSP_LCD_FillPolygon>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a27e:	4835      	ldr	r0, [pc, #212]	; (800a354 <LCD_Show_Feature+0x1fc>)
 800a280:	f7f8 fc00 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 120, 170, 30, 20);
 800a284:	f7f8 fba4 	bl	80029d0 <BSP_LCD_GetXSize>
 800a288:	2314      	movs	r3, #20
 800a28a:	221e      	movs	r2, #30
 800a28c:	21aa      	movs	r1, #170	; 0xaa
 800a28e:	3878      	subs	r0, #120	; 0x78
 800a290:	f7f8 ff0c 	bl	80030ac <BSP_LCD_DrawEllipse>
      BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 50, 170, 30, 20);
 800a294:	f7f8 fb9c 	bl	80029d0 <BSP_LCD_GetXSize>
 800a298:	2314      	movs	r3, #20
 800a29a:	221e      	movs	r2, #30
 800a29c:	21aa      	movs	r1, #170	; 0xaa
 800a29e:	3832      	subs	r0, #50	; 0x32
 800a2a0:	f7f9 f8bb 	bl	800341a <BSP_LCD_FillEllipse>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a2a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a2a8:	f7f8 fbec 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 800a2ac:	f7f8 fb9c 	bl	80029e8 <BSP_LCD_GetYSize>
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	f7f8 fb8d 	bl	80029d0 <BSP_LCD_GetXSize>
 800a2b6:	2205      	movs	r2, #5
 800a2b8:	f1a4 011e 	sub.w	r1, r4, #30
 800a2bc:	fbb0 f2f2 	udiv	r2, r0, r2
 800a2c0:	b289      	uxth	r1, r1
 800a2c2:	2014      	movs	r0, #20
 800a2c4:	b292      	uxth	r2, r2
 800a2c6:	f7f8 fc29 	bl	8002b1c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 20, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 50);
 800a2ca:	f7f8 fb81 	bl	80029d0 <BSP_LCD_GetXSize>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	f7f8 fb8a 	bl	80029e8 <BSP_LCD_GetYSize>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	f7f8 fb7b 	bl	80029d0 <BSP_LCD_GetXSize>
 800a2da:	4606      	mov	r6, r0
 800a2dc:	3c96      	subs	r4, #150	; 0x96
 800a2de:	f7f8 fb83 	bl	80029e8 <BSP_LCD_GetYSize>
 800a2e2:	f1a6 0214 	sub.w	r2, r6, #20
 800a2e6:	3832      	subs	r0, #50	; 0x32
 800a2e8:	f1a5 0114 	sub.w	r1, r5, #20
 800a2ec:	b283      	uxth	r3, r0
 800a2ee:	b292      	uxth	r2, r2
 800a2f0:	b289      	uxth	r1, r1
 800a2f2:	b2a0      	uxth	r0, r4
 800a2f4:	f7f8 fd6c 	bl	8002dd0 <BSP_LCD_DrawLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 50, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 20);
 800a2f8:	f7f8 fb6a 	bl	80029d0 <BSP_LCD_GetXSize>
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	f7f8 fb73 	bl	80029e8 <BSP_LCD_GetYSize>
 800a302:	4605      	mov	r5, r0
 800a304:	f7f8 fb64 	bl	80029d0 <BSP_LCD_GetXSize>
 800a308:	4606      	mov	r6, r0
 800a30a:	3c96      	subs	r4, #150	; 0x96
 800a30c:	f7f8 fb6c 	bl	80029e8 <BSP_LCD_GetYSize>
 800a310:	f1a6 0214 	sub.w	r2, r6, #20
 800a314:	3814      	subs	r0, #20
 800a316:	f1a5 0132 	sub.w	r1, r5, #50	; 0x32
 800a31a:	b283      	uxth	r3, r0
 800a31c:	b292      	uxth	r2, r2
 800a31e:	b289      	uxth	r1, r1
 800a320:	b2a0      	uxth	r0, r4
 800a322:	f7f8 fd55 	bl	8002dd0 <BSP_LCD_DrawLine>
}
 800a326:	e744      	b.n	800a1b2 <LCD_Show_Feature+0x5a>
 800a328:	08017e7c 	.word	0x08017e7c
 800a32c:	0801831f 	.word	0x0801831f
 800a330:	08018331 	.word	0x08018331
 800a334:	08018345 	.word	0x08018345
 800a338:	20000074 	.word	0x20000074
 800a33c:	08018358 	.word	0x08018358
 800a340:	20000094 	.word	0x20000094
 800a344:	0801835f 	.word	0x0801835f
 800a348:	2000008c 	.word	0x2000008c
 800a34c:	08018366 	.word	0x08018366
 800a350:	ff808080 	.word	0xff808080
 800a354:	ffff0000 	.word	0xffff0000

0800a358 <LCD_demo>:
{
 800a358:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a35a:	f04f 30ff 	mov.w	r0, #4294967295
 800a35e:	f7f8 fbc1 	bl	8002ae4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a362:	4832      	ldr	r0, [pc, #200]	; (800a42c <LCD_demo+0xd4>)
 800a364:	f7f8 fb8e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800a368:	f7f8 fb32 	bl	80029d0 <BSP_LCD_GetXSize>
 800a36c:	2100      	movs	r1, #0
 800a36e:	b282      	uxth	r2, r0
 800a370:	2350      	movs	r3, #80	; 0x50
 800a372:	4608      	mov	r0, r1
 800a374:	f7f8 ff06 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	f7f8 fb82 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800a380:	482a      	ldr	r0, [pc, #168]	; (800a42c <LCD_demo+0xd4>)
 800a382:	f7f8 fb8b 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800a386:	482a      	ldr	r0, [pc, #168]	; (800a430 <LCD_demo+0xd8>)
 800a388:	f7f8 fb94 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 800a38c:	2100      	movs	r1, #0
 800a38e:	2301      	movs	r3, #1
 800a390:	4a28      	ldr	r2, [pc, #160]	; (800a434 <LCD_demo+0xdc>)
 800a392:	4608      	mov	r0, r1
 800a394:	f7f8 fcb6 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800a398:	4827      	ldr	r0, [pc, #156]	; (800a438 <LCD_demo+0xe0>)
 800a39a:	f7f8 fb8b 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4a26      	ldr	r2, [pc, #152]	; (800a43c <LCD_demo+0xe4>)
 800a3a2:	211e      	movs	r1, #30
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f7f8 fcad 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, use BUTTON to display", CENTER_MODE);
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	4a24      	ldr	r2, [pc, #144]	; (800a440 <LCD_demo+0xe8>)
 800a3ae:	212d      	movs	r1, #45	; 0x2d
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	f7f8 fca7 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4a22      	ldr	r2, [pc, #136]	; (800a444 <LCD_demo+0xec>)
 800a3ba:	213c      	movs	r1, #60	; 0x3c
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f7f8 fca1 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a3c2:	481a      	ldr	r0, [pc, #104]	; (800a42c <LCD_demo+0xd4>)
 800a3c4:	f7f8 fb5e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800a3c8:	f7f8 fb02 	bl	80029d0 <BSP_LCD_GetXSize>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	f7f8 fb0b 	bl	80029e8 <BSP_LCD_GetYSize>
 800a3d2:	3864      	subs	r0, #100	; 0x64
 800a3d4:	f1a4 0214 	sub.w	r2, r4, #20
 800a3d8:	215a      	movs	r1, #90	; 0x5a
 800a3da:	b283      	uxth	r3, r0
 800a3dc:	200a      	movs	r0, #10
 800a3de:	b292      	uxth	r2, r2
 800a3e0:	f7f8 fbf8 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800a3e4:	f7f8 faf4 	bl	80029d0 <BSP_LCD_GetXSize>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	f7f8 fafd 	bl	80029e8 <BSP_LCD_GetYSize>
 800a3ee:	3866      	subs	r0, #102	; 0x66
 800a3f0:	f1a4 0216 	sub.w	r2, r4, #22
 800a3f4:	215b      	movs	r1, #91	; 0x5b
 800a3f6:	b283      	uxth	r3, r0
 800a3f8:	200b      	movs	r0, #11
 800a3fa:	b292      	uxth	r2, r2
  LCD_Feature = 0;
 800a3fc:	4c12      	ldr	r4, [pc, #72]	; (800a448 <LCD_demo+0xf0>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800a3fe:	f7f8 fbe9 	bl	8002bd4 <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 800a402:	2000      	movs	r0, #0
 800a404:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature);
 800a406:	f7ff fea7 	bl	800a158 <LCD_Show_Feature>
    if (CheckForUserInput() > 0)
 800a40a:	f000 fe6f 	bl	800b0ec <CheckForUserInput>
 800a40e:	b138      	cbz	r0, 800a420 <LCD_demo+0xc8>
      if (++LCD_Feature < LCD_FEATURES_NUM)
 800a410:	7820      	ldrb	r0, [r4, #0]
 800a412:	3001      	adds	r0, #1
 800a414:	b2c0      	uxtb	r0, r0
 800a416:	2802      	cmp	r0, #2
 800a418:	7020      	strb	r0, [r4, #0]
 800a41a:	d805      	bhi.n	800a428 <LCD_demo+0xd0>
        LCD_Show_Feature (LCD_Feature);
 800a41c:	f7ff fe9c 	bl	800a158 <LCD_Show_Feature>
    HAL_Delay(100);
 800a420:	2064      	movs	r0, #100	; 0x64
 800a422:	f7f9 ffed 	bl	8004400 <HAL_Delay>
    if (CheckForUserInput() > 0)
 800a426:	e7f0      	b.n	800a40a <LCD_demo+0xb2>
}
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	ff0000ff 	.word	0xff0000ff
 800a430:	20000074 	.word	0x20000074
 800a434:	0801836d 	.word	0x0801836d
 800a438:	20000084 	.word	0x20000084
 800a43c:	080182c4 	.word	0x080182c4
 800a440:	08018371 	.word	0x08018371
 800a444:	08018395 	.word	0x08018395
 800a448:	2000ff83 	.word	0x2000ff83

0800a44c <Log_demo>:
  * @brief  LCD Log demo
  * @param  None
  * @retval None
  */
void Log_demo(void)
{
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Initialize LCD Log module */
  LCD_LOG_Init();

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 800a44e:	2400      	movs	r4, #0

  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 800a450:	4d1e      	ldr	r5, [pc, #120]	; (800a4cc <Log_demo+0x80>)
 800a452:	4f1f      	ldr	r7, [pc, #124]	; (800a4d0 <Log_demo+0x84>)
  LCD_LOG_Init();
 800a454:	f002 fdc8 	bl	800cfe8 <LCD_LOG_Init>
    LCD_UsrLog ("This is Line %d \n", i);
 800a458:	4e1e      	ldr	r6, [pc, #120]	; (800a4d4 <Log_demo+0x88>)
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 800a45a:	481f      	ldr	r0, [pc, #124]	; (800a4d8 <Log_demo+0x8c>)
 800a45c:	f002 fdce 	bl	800cffc <LCD_LOG_SetHeader>
    LCD_UsrLog ("This is Line %d \n", i);
 800a460:	4621      	mov	r1, r4
  for (i = 0; i < 10; i++)
 800a462:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 800a464:	4630      	mov	r0, r6
 800a466:	602f      	str	r7, [r5, #0]
 800a468:	f004 fc86 	bl	800ed78 <iprintf>
  for (i = 0; i < 10; i++)
 800a46c:	2c0a      	cmp	r4, #10
 800a46e:	d1f7      	bne.n	800a460 <Log_demo+0x14>
  }

  HAL_Delay(500);

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 800a470:	2400      	movs	r4, #0

  /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 800a472:	4f17      	ldr	r7, [pc, #92]	; (800a4d0 <Log_demo+0x84>)
 800a474:	4e17      	ldr	r6, [pc, #92]	; (800a4d4 <Log_demo+0x88>)
  HAL_Delay(500);
 800a476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a47a:	f7f9 ffc1 	bl	8004400 <HAL_Delay>
  LCD_LOG_ClearTextZone();
 800a47e:	f002 fdf3 	bl	800d068 <LCD_LOG_ClearTextZone>
    LCD_UsrLog ("This is Line %d \n", i);
 800a482:	4621      	mov	r1, r4
  for (i = 0; i < 30; i++)
 800a484:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 800a486:	4630      	mov	r0, r6
 800a488:	602f      	str	r7, [r5, #0]
 800a48a:	f004 fc75 	bl	800ed78 <iprintf>
  for (i = 0; i < 30; i++)
 800a48e:	2c1e      	cmp	r4, #30
 800a490:	d1f7      	bne.n	800a482 <Log_demo+0x36>
  uint8_t   scroll_index = 0;
 800a492:	2400      	movs	r4, #0
  uint8_t   scroll_direction = 0;
 800a494:	4625      	mov	r5, r4
  }

  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if (scroll_direction == 0)
 800a496:	b975      	cbnz	r5, 800a4b6 <Log_demo+0x6a>
    {
      LCD_LOG_ScrollBack();
      scroll_index++;
 800a498:	3401      	adds	r4, #1
      LCD_LOG_ScrollBack();
 800a49a:	f002 fea5 	bl	800d1e8 <LCD_LOG_ScrollBack>
      scroll_index++;
 800a49e:	b2e4      	uxtb	r4, r4
      if (scroll_index > 30)
      {
        scroll_direction = 1;
 800a4a0:	2c1e      	cmp	r4, #30
 800a4a2:	bf94      	ite	ls
 800a4a4:	2500      	movls	r5, #0
 800a4a6:	2501      	movhi	r5, #1
      {
        scroll_direction = 0;
      }
    }

    if (CheckForUserInput() > 0)
 800a4a8:	f000 fe20 	bl	800b0ec <CheckForUserInput>
 800a4ac:	b960      	cbnz	r0, 800a4c8 <Log_demo+0x7c>
    {
      return;
    }
    HAL_Delay (10);
 800a4ae:	200a      	movs	r0, #10
 800a4b0:	f7f9 ffa6 	bl	8004400 <HAL_Delay>
    if (scroll_direction == 0)
 800a4b4:	e7ef      	b.n	800a496 <Log_demo+0x4a>
      scroll_index--;
 800a4b6:	3c01      	subs	r4, #1
      LCD_LOG_ScrollForward();
 800a4b8:	f002 fed6 	bl	800d268 <LCD_LOG_ScrollForward>
      if (scroll_index == 0)
 800a4bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        scroll_direction = 1;
 800a4c0:	bf14      	ite	ne
 800a4c2:	2501      	movne	r5, #1
 800a4c4:	2500      	moveq	r5, #0
 800a4c6:	e7ef      	b.n	800a4a8 <Log_demo+0x5c>
  }
}
 800a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20017af4 	.word	0x20017af4
 800a4d0:	ff000080 	.word	0xff000080
 800a4d4:	080183ab 	.word	0x080183ab
 800a4d8:	0801839f 	.word	0x0801839f

0800a4dc <drawPlay>:
        x=space_x+(i%width_image);
        BSP_LCD_DrawPixel(x,y,image[i]);
    }
}
void drawPlay(int x_left, int y_center, uint32_t RGB_Code)
{
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i;
    int w=27;
    int x1,x2,y1,y2;
    int space_y=(w-1)/2;
 800a4de:	250d      	movs	r5, #13
    BSP_LCD_SetTextColor(RGB_Code);
    for (i=0;i<w;i++)
 800a4e0:	2400      	movs	r4, #0
{
 800a4e2:	4607      	mov	r7, r0
    BSP_LCD_SetTextColor(RGB_Code);
 800a4e4:	4610      	mov	r0, r2
{
 800a4e6:	460e      	mov	r6, r1
    BSP_LCD_SetTextColor(RGB_Code);
 800a4e8:	f7f8 facc 	bl	8002a84 <BSP_LCD_SetTextColor>
        x1=x_left+i;
        x2=x1;
        y1=y_center-space_y;
        y2=y_center+space_y;

        BSP_LCD_DrawLine(x1,y1,x2,y2);
 800a4ec:	19e2      	adds	r2, r4, r7
        y2=y_center+space_y;
 800a4ee:	1973      	adds	r3, r6, r5
        y1=y_center-space_y;
 800a4f0:	1b71      	subs	r1, r6, r5
 800a4f2:	b292      	uxth	r2, r2
        BSP_LCD_DrawLine(x1,y1,x2,y2);
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	b289      	uxth	r1, r1
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7f8 fc69 	bl	8002dd0 <BSP_LCD_DrawLine>
        if (i%2==1)
 800a4fe:	07e3      	lsls	r3, r4, #31
    for (i=0;i<w;i++)
 800a500:	f104 0401 	add.w	r4, r4, #1
        {
        	space_y-=1;
 800a504:	bf48      	it	mi
 800a506:	f105 35ff 	addmi.w	r5, r5, #4294967295
    for (i=0;i<w;i++)
 800a50a:	2c1b      	cmp	r4, #27
 800a50c:	d1ee      	bne.n	800a4ec <drawPlay+0x10>
        }
    }
}
 800a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a510 <display_buttons>:
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
}


void display_buttons()
{
 800a510:	b510      	push	{r4, lr}
	BSP_LCD_SetTextColor(0xff003a65);
 800a512:	4c3d      	ldr	r4, [pc, #244]	; (800a608 <display_buttons+0xf8>)
 800a514:	4620      	mov	r0, r4
 800a516:	f7f8 fab5 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(286, 25, 134, 40); //PLAY
 800a51a:	2328      	movs	r3, #40	; 0x28
 800a51c:	2286      	movs	r2, #134	; 0x86
 800a51e:	2119      	movs	r1, #25
 800a520:	f44f 708f 	mov.w	r0, #286	; 0x11e
 800a524:	f7f8 fe2e 	bl	8003184 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(60, 25, 134, 40); //RECORD
 800a528:	2328      	movs	r3, #40	; 0x28
 800a52a:	2286      	movs	r2, #134	; 0x86
 800a52c:	2119      	movs	r1, #25
 800a52e:	203c      	movs	r0, #60	; 0x3c
 800a530:	f7f8 fe28 	bl	8003184 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(173, 86, 134, 40); //ANALYZE
 800a534:	2328      	movs	r3, #40	; 0x28
 800a536:	2286      	movs	r2, #134	; 0x86
 800a538:	2156      	movs	r1, #86	; 0x56
 800a53a:	20ad      	movs	r0, #173	; 0xad
 800a53c:	f7f8 fe22 	bl	8003184 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	f7f8 fa9e 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(0xff003a65);
 800a548:	4620      	mov	r0, r4
 800a54a:	f7f8 faa7 	bl	8002a9c <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font20);
 800a54e:	482f      	ldr	r0, [pc, #188]	; (800a60c <display_buttons+0xfc>)
 800a550:	f7f8 fab0 	bl	8002ab4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(65, 37, (uint8_t*) "RECORD", LEFT_MODE);
 800a554:	2303      	movs	r3, #3
 800a556:	4a2e      	ldr	r2, [pc, #184]	; (800a610 <display_buttons+0x100>)
 800a558:	2125      	movs	r1, #37	; 0x25
 800a55a:	2041      	movs	r0, #65	; 0x41
 800a55c:	f7f8 fbd2 	bl	8002d04 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(304, 37, (uint8_t*) "PLAY", LEFT_MODE);
 800a560:	2303      	movs	r3, #3
 800a562:	4a2c      	ldr	r2, [pc, #176]	; (800a614 <display_buttons+0x104>)
 800a564:	2125      	movs	r1, #37	; 0x25
 800a566:	f44f 7098 	mov.w	r0, #304	; 0x130
 800a56a:	f7f8 fbcb 	bl	8002d04 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(-19, 98, (uint8_t*) "MFCCs", CENTER_MODE);
 800a56e:	2301      	movs	r3, #1
 800a570:	4a29      	ldr	r2, [pc, #164]	; (800a618 <display_buttons+0x108>)
 800a572:	2162      	movs	r1, #98	; 0x62
 800a574:	f64f 70ed 	movw	r0, #65517	; 0xffed
 800a578:	f7f8 fbc4 	bl	8002d04 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawLine(155,25,155,65); // OU 156
 800a57c:	229b      	movs	r2, #155	; 0x9b
 800a57e:	2341      	movs	r3, #65	; 0x41
 800a580:	2119      	movs	r1, #25
 800a582:	4610      	mov	r0, r2
 800a584:	f7f8 fc24 	bl	8002dd0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(381,25,381,65); // OU 382
 800a588:	f240 127d 	movw	r2, #381	; 0x17d
 800a58c:	2341      	movs	r3, #65	; 0x41
 800a58e:	2119      	movs	r1, #25
 800a590:	4610      	mov	r0, r2
 800a592:	f7f8 fc1d 	bl	8002dd0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(268,86,268,126);
 800a596:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a59a:	237e      	movs	r3, #126	; 0x7e
 800a59c:	2156      	movs	r1, #86	; 0x56
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7f8 fc16 	bl	8002dd0 <BSP_LCD_DrawLine>
	drawPlay(388, 45, LCD_COLOR_WHITE);
 800a5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a8:	212d      	movs	r1, #45	; 0x2d
 800a5aa:	f44f 70c2 	mov.w	r0, #388	; 0x184
 800a5ae:	f7ff ff95 	bl	800a4dc <drawPlay>
	BSP_LCD_FillCircle(175, 45, 14);
 800a5b2:	220e      	movs	r2, #14
 800a5b4:	212d      	movs	r1, #45	; 0x2d
 800a5b6:	20af      	movs	r0, #175	; 0xaf
 800a5b8:	f7f8 fe48 	bl	800324c <BSP_LCD_FillCircle>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	f7f8 fa60 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(285, 103, 11);
 800a5c4:	220b      	movs	r2, #11
 800a5c6:	2167      	movs	r1, #103	; 0x67
 800a5c8:	f240 101d 	movw	r0, #285	; 0x11d
 800a5cc:	f7f8 fe3e 	bl	800324c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(0xff003a65);
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f7f8 fa57 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(285, 103, 8);
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	2167      	movs	r1, #103	; 0x67
 800a5da:	f240 101d 	movw	r0, #285	; 0x11d
 800a5de:	f7f8 fe35 	bl	800324c <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	f7f8 fa4d 	bl	8002a84 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(293,111,301,119);
 800a5ea:	216f      	movs	r1, #111	; 0x6f
 800a5ec:	f240 1025 	movw	r0, #293	; 0x125
 800a5f0:	2377      	movs	r3, #119	; 0x77
 800a5f2:	f240 122d 	movw	r2, #301	; 0x12d
 800a5f6:	f7f8 fbeb 	bl	8002dd0 <BSP_LCD_DrawLine>
	BSP_LCD_DrawPolygon(Points, 4);
 800a5fa:	2104      	movs	r1, #4
 800a5fc:	4807      	ldr	r0, [pc, #28]	; (800a61c <display_buttons+0x10c>)

}
 800a5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_DrawPolygon(Points, 4);
 800a602:	f7f8 bc4f 	b.w	8002ea4 <BSP_LCD_DrawPolygon>
 800a606:	bf00      	nop
 800a608:	ff003a65 	.word	0xff003a65
 800a60c:	20000094 	.word	0x20000094
 800a610:	080183bd 	.word	0x080183bd
 800a614:	080183c4 	.word	0x080183c4
 800a618:	080183c9 	.word	0x080183c9
 800a61c:	200002f0 	.word	0x200002f0

0800a620 <main>:
{
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	b09f      	sub	sp, #124	; 0x7c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a626:	f240 1501 	movw	r5, #257	; 0x101
  HAL_MPU_Disable();
 800a62a:	f7f9 ff75 	bl	8004518 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a62e:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a630:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a632:	a812      	add	r0, sp, #72	; 0x48
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a634:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a638:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a63c:	9515      	str	r5, [sp, #84]	; 0x54
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a63e:	e9cd 4313 	strd	r4, r3, [sp, #76]	; 0x4c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a642:	f7f9 ff87 	bl	8004554 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800a646:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a64a:	4bbd      	ldr	r3, [pc, #756]	; (800a940 <main+0x320>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a64c:	a812      	add	r0, sp, #72	; 0x48
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a64e:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a652:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800a656:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a65a:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a65c:	f7f9 ff7a 	bl	8004554 <HAL_MPU_ConfigRegion>

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a660:	f240 2301 	movw	r3, #513	; 0x201
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800a664:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a668:	a812      	add	r0, sp, #72	; 0x48
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a66a:	9515      	str	r5, [sp, #84]	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a66c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800a670:	4bb4      	ldr	r3, [pc, #720]	; (800a944 <main+0x324>)
 800a672:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a676:	f7f9 ff6d 	bl	8004554 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a67a:	f240 3301 	movw	r3, #769	; 0x301
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 800a67e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a682:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 800a686:	4bb0      	ldr	r3, [pc, #704]	; (800a948 <main+0x328>)
 800a688:	e9cd 0313 	strd	r0, r3, [sp, #76]	; 0x4c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a68c:	4baf      	ldr	r3, [pc, #700]	; (800a94c <main+0x32c>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a68e:	a812      	add	r0, sp, #72	; 0x48
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a690:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a692:	f7f9 ff5f 	bl	8004554 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a696:	2004      	movs	r0, #4
 800a698:	f7f9 ff4c 	bl	8004534 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a69c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6a0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a6a4:	4aaa      	ldr	r2, [pc, #680]	; (800a950 <main+0x330>)
 800a6a6:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a6aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6ae:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a6b2:	6953      	ldr	r3, [r2, #20]
 800a6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a6ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6be:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a6c2:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a6c6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a6ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a6ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a6d2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a6d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800a6da:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a6dc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a6e0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a6e2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800a6e6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a6e8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800a6ec:	d2f9      	bcs.n	800a6e2 <main+0xc2>
    } while(sets-- != 0U);
 800a6ee:	3b20      	subs	r3, #32
 800a6f0:	f113 0f20 	cmn.w	r3, #32
 800a6f4:	d1f2      	bne.n	800a6dc <main+0xbc>
 800a6f6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a6fa:	6953      	ldr	r3, [r2, #20]
 800a6fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a700:	6153      	str	r3, [r2, #20]
 800a702:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a706:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800a70a:	f7f9 fe55 	bl	80043b8 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 800a70e:	4b91      	ldr	r3, [pc, #580]	; (800a954 <main+0x334>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a710:	f04f 0a01 	mov.w	sl, #1
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a714:	f04f 0b19 	mov.w	fp, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 800a718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a71a:	a812      	add	r0, sp, #72	; 0x48
 800a71c:	4c8e      	ldr	r4, [pc, #568]	; (800a958 <main+0x338>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800a71e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a722:	641a      	str	r2, [r3, #64]	; 0x40
 800a724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a72a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a72e:	4b8b      	ldr	r3, [pc, #556]	; (800a95c <main+0x33c>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800a736:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a738:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a742:	930c      	str	r3, [sp, #48]	; 0x30
 800a744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a74a:	e9cd a312 	strd	sl, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a74e:	2302      	movs	r3, #2
 800a750:	e9cd 3218 	strd	r3, r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a754:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a756:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800a75a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a75c:	e9cd b21a 	strd	fp, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800a760:	931d      	str	r3, [sp, #116]	; 0x74
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a762:	f7fb fcdf 	bl	8006124 <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 800a766:	b110      	cbz	r0, 800a76e <main+0x14e>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	3301      	adds	r3, #1
 800a76c:	6023      	str	r3, [r4, #0]
  ret = HAL_PWREx_ActivateOverDrive();
 800a76e:	f7fb f9cd 	bl	8005b0c <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 800a772:	b110      	cbz	r0, 800a77a <main+0x15a>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	3301      	adds	r3, #1
 800a778:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a77a:	2302      	movs	r3, #2
 800a77c:	f04f 080f 	mov.w	r8, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a780:	f04f 0900 	mov.w	r9, #0
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800a784:	2105      	movs	r1, #5
 800a786:	a80d      	add	r0, sp, #52	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a788:	e9cd 830d 	strd	r8, r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a78c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a790:	e9cd 930f 	strd	r9, r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a798:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800a79a:	f7fb feaf 	bl	80064fc <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 800a79e:	b110      	cbz	r0, 800a7a6 <main+0x186>
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	6023      	str	r3, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7a6:	2214      	movs	r2, #20
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	a812      	add	r0, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ac:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7ae:	f003 fe71 	bl	800e494 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7b2:	4b68      	ldr	r3, [pc, #416]	; (800a954 <main+0x334>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a7b4:	2120      	movs	r1, #32
 800a7b6:	486a      	ldr	r0, [pc, #424]	; (800a960 <main+0x340>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ba:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a7bc:	f04f 0b0e 	mov.w	fp, #14
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a7c0:	f04f 0a08 	mov.w	sl, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7c4:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a7c8:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800a7ca:	f04f 0904 	mov.w	r9, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7ce:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a7d2:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d8:	f002 0210 	and.w	r2, r2, #16
 800a7dc:	9201      	str	r2, [sp, #4]
 800a7de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e6:	631a      	str	r2, [r3, #48]	; 0x30
 800a7e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a7ee:	9202      	str	r2, [sp, #8]
 800a7f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f4:	f042 0202 	orr.w	r2, r2, #2
 800a7f8:	631a      	str	r2, [r3, #48]	; 0x30
 800a7fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7fc:	f002 0202 	and.w	r2, r2, #2
 800a800:	9203      	str	r2, [sp, #12]
 800a802:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a806:	f042 0208 	orr.w	r2, r2, #8
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
 800a80c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a80e:	f002 0208 	and.w	r2, r2, #8
 800a812:	9204      	str	r2, [sp, #16]
 800a814:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a818:	f042 0204 	orr.w	r2, r2, #4
 800a81c:	631a      	str	r2, [r3, #48]	; 0x30
 800a81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a820:	f002 0204 	and.w	r2, r2, #4
 800a824:	9205      	str	r2, [sp, #20]
 800a826:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a82a:	f042 0201 	orr.w	r2, r2, #1
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
 800a830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a832:	f002 0201 	and.w	r2, r2, #1
 800a836:	9206      	str	r2, [sp, #24]
 800a838:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a83a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a83c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a840:	631a      	str	r2, [r3, #48]	; 0x30
 800a842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a844:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800a848:	9207      	str	r2, [sp, #28]
 800a84a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a84e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a852:	631a      	str	r2, [r3, #48]	; 0x30
 800a854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a856:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800a85a:	9208      	str	r2, [sp, #32]
 800a85c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a85e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a864:	631a      	str	r2, [r3, #48]	; 0x30
 800a866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a868:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800a86c:	9209      	str	r2, [sp, #36]	; 0x24
 800a86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a872:	f042 0220 	orr.w	r2, r2, #32
 800a876:	631a      	str	r2, [r3, #48]	; 0x30
 800a878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a87a:	f002 0220 	and.w	r2, r2, #32
 800a87e:	920a      	str	r2, [sp, #40]	; 0x28
 800a880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
 800a88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a88c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a890:	920d      	str	r2, [sp, #52]	; 0x34
 800a892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a894:	2201      	movs	r2, #1
 800a896:	f7fa fbf3 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a89a:	2200      	movs	r2, #0
 800a89c:	210c      	movs	r1, #12
 800a89e:	4831      	ldr	r0, [pc, #196]	; (800a964 <main+0x344>)
 800a8a0:	f7fa fbee 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	2108      	movs	r1, #8
 800a8a8:	482f      	ldr	r0, [pc, #188]	; (800a968 <main+0x348>)
 800a8aa:	f7fa fbe9 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8b4:	482b      	ldr	r0, [pc, #172]	; (800a964 <main+0x344>)
 800a8b6:	f7fa fbe3 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8c0:	482a      	ldr	r0, [pc, #168]	; (800a96c <main+0x34c>)
 800a8c2:	f7fa fbdd 	bl	8005080 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	21c8      	movs	r1, #200	; 0xc8
 800a8ca:	4829      	ldr	r0, [pc, #164]	; (800a970 <main+0x350>)
 800a8cc:	f7fa fbd8 	bl	8005080 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8d0:	2310      	movs	r3, #16
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800a8d2:	a912      	add	r1, sp, #72	; 0x48
 800a8d4:	4827      	ldr	r0, [pc, #156]	; (800a974 <main+0x354>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800a8d6:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8da:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8de:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800a8e2:	f7fa fa41 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a8e6:	a912      	add	r1, sp, #72	; 0x48
 800a8e8:	4822      	ldr	r0, [pc, #136]	; (800a974 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ea:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8ec:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a8f0:	f7fa fa3a 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a8f4:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800a8f6:	a912      	add	r1, sp, #72	; 0x48
 800a8f8:	481e      	ldr	r0, [pc, #120]	; (800a974 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8fa:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a8fc:	e9cd 6315 	strd	r6, r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a900:	e9cd 9512 	strd	r9, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800a904:	f7fa fa30 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800a908:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a90c:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a90e:	a912      	add	r1, sp, #72	; 0x48
 800a910:	4817      	ldr	r0, [pc, #92]	; (800a970 <main+0x350>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a912:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a914:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a918:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a91c:	f7fa fa24 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a920:	2312      	movs	r3, #18
 800a922:	f44f 7240 	mov.w	r2, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a926:	a912      	add	r1, sp, #72	; 0x48
 800a928:	4813      	ldr	r0, [pc, #76]	; (800a978 <main+0x358>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a92a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a92e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a932:	e9cd 7414 	strd	r7, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a936:	f7fa fa17 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800a93a:	f643 4223 	movw	r2, #15395	; 0x3c23
 800a93e:	e01d      	b.n	800a97c <main+0x35c>
 800a940:	03000018 	.word	0x03000018
 800a944:	03000019 	.word	0x03000019
 800a948:	0300000c 	.word	0x0300000c
 800a94c:	01000101 	.word	0x01000101
 800a950:	e000ed00 	.word	0xe000ed00
 800a954:	40023800 	.word	0x40023800
 800a958:	2000ff84 	.word	0x2000ff84
 800a95c:	40007000 	.word	0x40007000
 800a960:	40020c00 	.word	0x40020c00
 800a964:	40022000 	.word	0x40022000
 800a968:	40022800 	.word	0x40022800
 800a96c:	40021c00 	.word	0x40021c00
 800a970:	40021800 	.word	0x40021800
 800a974:	40021000 	.word	0x40021000
 800a978:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a97c:	a912      	add	r1, sp, #72	; 0x48
 800a97e:	48cd      	ldr	r0, [pc, #820]	; (800acb4 <main+0x694>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a980:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a984:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a988:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a98c:	f7fa f9ec 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800a990:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800a992:	a912      	add	r1, sp, #72	; 0x48
 800a994:	48c8      	ldr	r0, [pc, #800]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800a996:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a99a:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a99e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800a9a2:	f7fa f9e1 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a9a6:	230c      	movs	r3, #12
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800a9a8:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9ac:	a912      	add	r1, sp, #72	; 0x48
 800a9ae:	48c3      	ldr	r0, [pc, #780]	; (800acbc <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a9b0:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b2:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b6:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9ba:	f7fa f9d5 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800a9be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800a9c2:	a912      	add	r1, sp, #72	; 0x48
 800a9c4:	48be      	ldr	r0, [pc, #760]	; (800acc0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a9c6:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c8:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9cc:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800a9d0:	f7fa f9ca 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a9d4:	2260      	movs	r2, #96	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9d6:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9d8:	a912      	add	r1, sp, #72	; 0x48
 800a9da:	48ba      	ldr	r0, [pc, #744]	; (800acc4 <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9dc:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9de:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9e2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9e6:	f7fa f9bf 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800a9ea:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800a9ec:	a912      	add	r1, sp, #72	; 0x48
 800a9ee:	48b1      	ldr	r0, [pc, #708]	; (800acb4 <main+0x694>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800a9f0:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9f4:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9f8:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800a9fc:	f7fa f9b4 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800aa00:	f64e 72ff 	movw	r2, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800aa04:	a912      	add	r1, sp, #72	; 0x48
 800aa06:	48b0      	ldr	r0, [pc, #704]	; (800acc8 <main+0x6a8>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa08:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa0c:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa10:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800aa14:	f7fa f9a8 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800aa18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa1c:	a912      	add	r1, sp, #72	; 0x48
 800aa1e:	48aa      	ldr	r0, [pc, #680]	; (800acc8 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa20:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa22:	e9cd 2412 	strd	r2, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800aa26:	f7fa f99f 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800aa2a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 800aa2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800aa32:	a912      	add	r1, sp, #72	; 0x48
 800aa34:	48a0      	ldr	r0, [pc, #640]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa36:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800aa38:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800aa3c:	f7fa f994 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800aa40:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa44:	489e      	ldr	r0, [pc, #632]	; (800acc0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa46:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa4a:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa4e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa50:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa54:	f7fa f988 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800aa58:	21f0      	movs	r1, #240	; 0xf0
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aa5a:	489c      	ldr	r0, [pc, #624]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aa5c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa60:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aa64:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa66:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aa6a:	f7fa f97d 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800aa6e:	21f7      	movs	r1, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800aa70:	4897      	ldr	r0, [pc, #604]	; (800acd0 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aa72:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa76:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800aa7a:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa7c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800aa80:	f7fa f972 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800aa84:	2309      	movs	r3, #9
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800aa86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800aa8a:	a912      	add	r1, sp, #72	; 0x48
 800aa8c:	4891      	ldr	r0, [pc, #580]	; (800acd4 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800aa8e:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa90:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa94:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800aa98:	f7fa f966 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800aa9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800aaa0:	a912      	add	r1, sp, #72	; 0x48
 800aaa2:	488c      	ldr	r0, [pc, #560]	; (800acd4 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aaa4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaa8:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaac:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800aab0:	f7fa f95a 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800aab4:	2220      	movs	r2, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aab6:	a912      	add	r1, sp, #72	; 0x48
 800aab8:	487f      	ldr	r0, [pc, #508]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aaba:	e9cd 2712 	strd	r2, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aabe:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aac2:	f7fa f951 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aac6:	230d      	movs	r3, #13
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800aac8:	a912      	add	r1, sp, #72	; 0x48
 800aaca:	487b      	ldr	r0, [pc, #492]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aacc:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aace:	e9cd a512 	strd	sl, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aad2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800aad6:	f7fa f947 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800aada:	f241 020c 	movw	r2, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aade:	a912      	add	r1, sp, #72	; 0x48
 800aae0:	487a      	ldr	r0, [pc, #488]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aae2:	e9cd 2712 	strd	r2, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aae6:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aaea:	f7fa f93d 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800aaee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800aaf2:	a912      	add	r1, sp, #72	; 0x48
 800aaf4:	4871      	ldr	r0, [pc, #452]	; (800acbc <main+0x69c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf6:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aaf8:	e9cd 2412 	strd	r2, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800aafc:	f7fa f934 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800ab00:	f44f 4146 	mov.w	r1, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab04:	4871      	ldr	r0, [pc, #452]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab06:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ab0a:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab0e:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab12:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab14:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ab18:	f7fa f926 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ab1c:	a912      	add	r1, sp, #72	; 0x48
 800ab1e:	486c      	ldr	r0, [pc, #432]	; (800acd0 <main+0x6b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab20:	e9cd a712 	strd	sl, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab24:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ab28:	f7fa f91e 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800ab2c:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ab30:	230d      	movs	r3, #13
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ab32:	4868      	ldr	r0, [pc, #416]	; (800acd4 <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab34:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ab38:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ab3a:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab3c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800ab40:	f7fa f912 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800ab44:	2310      	movs	r3, #16
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ab46:	a912      	add	r1, sp, #72	; 0x48
 800ab48:	485b      	ldr	r0, [pc, #364]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4a:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab4c:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ab50:	f7fa f90a 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800ab54:	230c      	movs	r3, #12
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800ab56:	a912      	add	r1, sp, #72	; 0x48
 800ab58:	4857      	ldr	r0, [pc, #348]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800ab5a:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab5c:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab60:	e9cd 9512 	strd	r9, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800ab64:	f7fa f900 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800ab68:	f248 0104 	movw	r1, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ab6c:	485a      	ldr	r0, [pc, #360]	; (800acd8 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab6e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab70:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ab74:	a912      	add	r1, sp, #72	; 0x48
 800ab76:	f7fa f8f7 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ab7a:	a912      	add	r1, sp, #72	; 0x48
 800ab7c:	4853      	ldr	r0, [pc, #332]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ab7e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab82:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab86:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800ab8a:	f7fa f8ed 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800ab8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ab92:	a912      	add	r1, sp, #72	; 0x48
 800ab94:	4850      	ldr	r0, [pc, #320]	; (800acd8 <main+0x6b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab96:	e9cd 2712 	strd	r2, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab9a:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800ab9e:	f7fa f8e3 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800aba2:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aba6:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800aba8:	484b      	ldr	r0, [pc, #300]	; (800acd8 <main+0x6b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abaa:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800abae:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800abb0:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abb2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800abb6:	f7fa f8d7 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800abba:	a912      	add	r1, sp, #72	; 0x48
 800abbc:	4843      	ldr	r0, [pc, #268]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800abbe:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc0:	e9cd 7512 	strd	r7, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abc4:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800abc8:	f7fa f8ce 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800abcc:	f44f 7180 	mov.w	r1, #256	; 0x100
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800abd0:	483b      	ldr	r0, [pc, #236]	; (800acc0 <main+0x6a0>)
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800abd2:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abd4:	e9cd 1512 	strd	r1, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800abd8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abda:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800abde:	f7fa f8c3 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800abe2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800abe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800abea:	a912      	add	r1, sp, #72	; 0x48
 800abec:	4837      	ldr	r0, [pc, #220]	; (800accc <main+0x6ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abee:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800abf0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800abf4:	f7fa f8b8 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800abf8:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abfa:	a912      	add	r1, sp, #72	; 0x48
 800abfc:	482f      	ldr	r0, [pc, #188]	; (800acbc <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800abfe:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac02:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac06:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac0a:	f7fa f8ad 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800ac0e:	2310      	movs	r3, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ac10:	a912      	add	r1, sp, #72	; 0x48
 800ac12:	4831      	ldr	r0, [pc, #196]	; (800acd8 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ac14:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac18:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac1c:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800ac20:	f7fa f8a2 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800ac24:	22c8      	movs	r2, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ac26:	a912      	add	r1, sp, #72	; 0x48
 800ac28:	482a      	ldr	r0, [pc, #168]	; (800acd4 <main+0x6b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac2a:	e9cd 2712 	strd	r2, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac2e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ac32:	f7fa f899 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800ac36:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac3a:	a912      	add	r1, sp, #72	; 0x48
 800ac3c:	4827      	ldr	r0, [pc, #156]	; (800acdc <main+0x6bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac3e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac40:	e9cd 2612 	strd	r2, r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac44:	f7fa f890 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac48:	a912      	add	r1, sp, #72	; 0x48
 800ac4a:	481c      	ldr	r0, [pc, #112]	; (800acbc <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ac4c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac50:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac54:	e9cd b512 	strd	fp, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac58:	f7fa f886 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ac5c:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac5e:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac60:	a912      	add	r1, sp, #72	; 0x48
 800ac62:	4816      	ldr	r0, [pc, #88]	; (800acbc <main+0x69c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac64:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac66:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac6a:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac6e:	f7fa f87b 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ac72:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac74:	a912      	add	r1, sp, #72	; 0x48
 800ac76:	480f      	ldr	r0, [pc, #60]	; (800acb4 <main+0x694>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ac78:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac7a:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac7e:	e9cd 9512 	strd	r9, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac82:	f7fa f871 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800ac86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ac8a:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac8c:	a912      	add	r1, sp, #72	; 0x48
 800ac8e:	480a      	ldr	r0, [pc, #40]	; (800acb8 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ac90:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac92:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac96:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ac9a:	f7fa f865 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800ac9e:	a912      	add	r1, sp, #72	; 0x48
 800aca0:	480c      	ldr	r0, [pc, #48]	; (800acd4 <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aca2:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aca4:	e9cd 9412 	strd	r9, r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800aca8:	f7fa f85e 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800acac:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acae:	230b      	movs	r3, #11
 800acb0:	e016      	b.n	800ace0 <main+0x6c0>
 800acb2:	bf00      	nop
 800acb4:	40020400 	.word	0x40020400
 800acb8:	40020c00 	.word	0x40020c00
 800acbc:	40020800 	.word	0x40020800
 800acc0:	40020000 	.word	0x40020000
 800acc4:	40021000 	.word	0x40021000
 800acc8:	40022400 	.word	0x40022400
 800accc:	40022000 	.word	0x40022000
 800acd0:	40022800 	.word	0x40022800
 800acd4:	40021800 	.word	0x40021800
 800acd8:	40021c00 	.word	0x40021c00
 800acdc:	40021400 	.word	0x40021400
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ace0:	a912      	add	r1, sp, #72	; 0x48
 800ace2:	48ce      	ldr	r0, [pc, #824]	; (800b01c <main+0x9fc>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ace4:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ace6:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acea:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acee:	f7fa f83b 	bl	8004d68 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800acf2:	a912      	add	r1, sp, #72	; 0x48
 800acf4:	48c9      	ldr	r0, [pc, #804]	; (800b01c <main+0x9fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf6:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800acf8:	e9cd 7612 	strd	r7, r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800acfc:	f7fa f834 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800ad00:	2250      	movs	r2, #80	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ad02:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad04:	a912      	add	r1, sp, #72	; 0x48
 800ad06:	48c5      	ldr	r0, [pc, #788]	; (800b01c <main+0x9fc>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ad08:	9316      	str	r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0a:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad0e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad12:	f7fa f829 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad16:	2312      	movs	r3, #18
 800ad18:	f44f 72c0 	mov.w	r2, #384	; 0x180
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ad1c:	a912      	add	r1, sp, #72	; 0x48
 800ad1e:	48c0      	ldr	r0, [pc, #768]	; (800b020 <main+0xa00>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ad20:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad24:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad28:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ad2c:	f7fa f81c 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800ad30:	2228      	movs	r2, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad32:	a912      	add	r1, sp, #72	; 0x48
 800ad34:	48b9      	ldr	r0, [pc, #740]	; (800b01c <main+0x9fc>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ad36:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad3a:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad3e:	e9cd 4614 	strd	r4, r6, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad42:	f7fa f811 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800ad46:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800ad48:	a912      	add	r1, sp, #72	; 0x48
 800ad4a:	48b5      	ldr	r0, [pc, #724]	; (800b020 <main+0xa00>)
  huart1.Instance = USART1;
 800ad4c:	4eb5      	ldr	r6, [pc, #724]	; (800b024 <main+0xa04>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad4e:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800ad52:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad54:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800ad58:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800ad5a:	f7fa f805 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800ad5e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad62:	a912      	add	r1, sp, #72	; 0x48
 800ad64:	48b0      	ldr	r0, [pc, #704]	; (800b028 <main+0xa08>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ad66:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad6a:	e9cd 2512 	strd	r2, r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad6e:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad72:	f7f9 fff9 	bl	8004d68 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad76:	4bad      	ldr	r3, [pc, #692]	; (800b02c <main+0xa0c>)
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800ad78:	4621      	mov	r1, r4
 800ad7a:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ad82:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800ad84:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad8c:	9312      	str	r3, [sp, #72]	; 0x48
 800ad8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800ad90:	f7f9 fb5a 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800ad94:	2039      	movs	r0, #57	; 0x39
 800ad96:	f7f9 fb89 	bl	80044ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800ad9a:	4622      	mov	r2, r4
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	203a      	movs	r0, #58	; 0x3a
 800ada0:	f7f9 fb52 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ada4:	203a      	movs	r0, #58	; 0x3a
 800ada6:	f7f9 fb81 	bl	80044ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800adaa:	4622      	mov	r2, r4
 800adac:	4621      	mov	r1, r4
 800adae:	2045      	movs	r0, #69	; 0x45
 800adb0:	f7f9 fb4a 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800adb4:	2045      	movs	r0, #69	; 0x45
 800adb6:	f7f9 fb79 	bl	80044ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800adba:	4622      	mov	r2, r4
 800adbc:	4621      	mov	r1, r4
 800adbe:	2046      	movs	r0, #70	; 0x46
 800adc0:	f7f9 fb42 	bl	8004448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800adc4:	2046      	movs	r0, #70	; 0x46
 800adc6:	f7f9 fb71 	bl	80044ac <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 460800;
 800adca:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 800adce:	f8df e2a0 	ldr.w	lr, [pc, #672]	; 800b070 <main+0xa50>
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800add2:	eb06 0009 	add.w	r0, r6, r9
  huart1.Init.Parity = UART_PARITY_NONE;
 800add6:	6174      	str	r4, [r6, #20]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800add8:	62b4      	str	r4, [r6, #40]	; 0x28
  huart1.Init.BaudRate = 460800;
 800adda:	e9c6 e301 	strd	lr, r3, [r6, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800adde:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ade0:	e9c6 4403 	strd	r4, r4, [r6, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ade4:	e9c6 3406 	strd	r3, r4, [r6, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ade8:	e9c6 4408 	strd	r4, r4, [r6, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800adec:	f7fd fbb7 	bl	800855e <HAL_UART_Init>
 800adf0:	b108      	cbz	r0, 800adf6 <main+0x7d6>
  __ASM volatile ("cpsid i" : : : "memory");
 800adf2:	b672      	cpsid	i
  while (1)
 800adf4:	e7fe      	b.n	800adf4 <main+0x7d4>
  huart6.Init.BaudRate = 115200;
 800adf6:	4c8e      	ldr	r4, [pc, #568]	; (800b030 <main+0xa10>)
 800adf8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart6.Init.Parity = UART_PARITY_NONE;
 800adfc:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ae00:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
  huart6.Init.BaudRate = 115200;
 800ae04:	e9c6 4322 	strd	r4, r3, [r6, #136]	; 0x88
  huart6.Init.Mode = UART_MODE_TX_RX;
 800ae08:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 800ae0a:	e9c6 0024 	strd	r0, r0, [r6, #144]	; 0x90
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae0e:	e9c6 3027 	strd	r3, r0, [r6, #156]	; 0x9c
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ae12:	e9c6 0029 	strd	r0, r0, [r6, #164]	; 0xa4
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800ae16:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800ae1a:	f7fd fba0 	bl	800855e <HAL_UART_Init>
 800ae1e:	4604      	mov	r4, r0
 800ae20:	b108      	cbz	r0, 800ae26 <main+0x806>
 800ae22:	b672      	cpsid	i
  while (1)
 800ae24:	e7fe      	b.n	800ae24 <main+0x804>
  BSP_LED_Init(LED1);
 800ae26:	f7f6 ff87 	bl	8001d38 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f7f6 ffa7 	bl	8001d80 <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 800ae32:	f7f8 fbfd 	bl	8003630 <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 800ae36:	b110      	cbz	r0, 800ae3e <main+0x81e>
 800ae38:	6833      	ldr	r3, [r6, #0]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6033      	str	r3, [r6, #0]
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 800ae3e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800ae42:	2001      	movs	r0, #1
 800ae44:	f7f7 fddc 	bl	8002a00 <BSP_LCD_LayerDefaultInit>
	  BSP_TS_GetState(&g_ts);
 800ae48:	4c7a      	ldr	r4, [pc, #488]	; (800b034 <main+0xa14>)
  BSP_SDRAM_Init();
 800ae4a:	f7f9 f933 	bl	80040b4 <BSP_SDRAM_Init>
  __HAL_RCC_CRC_CLK_ENABLE();
 800ae4e:	4b77      	ldr	r3, [pc, #476]	; (800b02c <main+0xa0c>)
  BSP_TS_Init(480,272);
 800ae50:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ae54:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  __HAL_RCC_CRC_CLK_ENABLE();
 800ae58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
					  start=2; // ABOUT
 800ae5a:	2502      	movs	r5, #2
  __HAL_RCC_CRC_CLK_ENABLE();
 800ae5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae60:	631a      	str	r2, [r3, #48]	; 0x30
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	9b00      	ldr	r3, [sp, #0]
  BSP_TS_Init(480,272);
 800ae6c:	f7f9 f960 	bl	8004130 <BSP_TS_Init>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800ae70:	2001      	movs	r0, #1
 800ae72:	f7f7 fe01 	bl	8002a78 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800ae76:	4870      	ldr	r0, [pc, #448]	; (800b038 <main+0xa18>)
 800ae78:	f7f7 fe1c 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	f7f7 fe0c 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295
 800ae88:	f7f7 fe2c 	bl	8002ae4 <BSP_LCD_Clear>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	f7f7 fe28 	bl	8002ae4 <BSP_LCD_Clear>
  	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ae94:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ae98:	f7f7 fdf4 	bl	8002a84 <BSP_LCD_SetTextColor>
  	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800ae9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aea0:	f7f7 fdfc 	bl	8002a9c <BSP_LCD_SetBackColor>
  	BSP_LCD_SetFont(&Font20);
 800aea4:	4865      	ldr	r0, [pc, #404]	; (800b03c <main+0xa1c>)
 800aea6:	f7f7 fe05 	bl	8002ab4 <BSP_LCD_SetFont>
  	BSP_LCD_DisplayStringAt(0, 61, (uint8_t*) "BIRD AUDIO DETECTION", CENTER_MODE);
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4a64      	ldr	r2, [pc, #400]	; (800b040 <main+0xa20>)
 800aeae:	213d      	movs	r1, #61	; 0x3d
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f7f7 ff27 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_SetFont(&Font12);
 800aeb6:	4863      	ldr	r0, [pc, #396]	; (800b044 <main+0xa24>)
 800aeb8:	f7f7 fdfc 	bl	8002ab4 <BSP_LCD_SetFont>
  	BSP_LCD_DisplayStringAt(19, 139, (uint8_t*) "Done by:", LEFT_MODE);
 800aebc:	2303      	movs	r3, #3
 800aebe:	4a62      	ldr	r2, [pc, #392]	; (800b048 <main+0xa28>)
 800aec0:	218b      	movs	r1, #139	; 0x8b
 800aec2:	2013      	movs	r0, #19
 800aec4:	f7f7 ff1e 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(19, 157, (uint8_t*) "Adam CHEIKH BRAHIM", LEFT_MODE);
 800aec8:	2303      	movs	r3, #3
 800aeca:	4a60      	ldr	r2, [pc, #384]	; (800b04c <main+0xa2c>)
 800aecc:	219d      	movs	r1, #157	; 0x9d
 800aece:	2013      	movs	r0, #19
 800aed0:	f7f7 ff18 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(19, 176, (uint8_t*) "Nassim RAMI", LEFT_MODE);
 800aed4:	2303      	movs	r3, #3
 800aed6:	4a5e      	ldr	r2, [pc, #376]	; (800b050 <main+0xa30>)
 800aed8:	21b0      	movs	r1, #176	; 0xb0
 800aeda:	2013      	movs	r0, #19
 800aedc:	f7f7 ff12 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(19, 206, (uint8_t*) "Supervised by:", LEFT_MODE);
 800aee0:	2303      	movs	r3, #3
 800aee2:	4a5c      	ldr	r2, [pc, #368]	; (800b054 <main+0xa34>)
 800aee4:	21ce      	movs	r1, #206	; 0xce
 800aee6:	2013      	movs	r0, #19
 800aee8:	f7f7 ff0c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(19, 224, (uint8_t*) "Engin MASAZADE", LEFT_MODE);
 800aeec:	2303      	movs	r3, #3
 800aeee:	4a5a      	ldr	r2, [pc, #360]	; (800b058 <main+0xa38>)
 800aef0:	21e0      	movs	r1, #224	; 0xe0
 800aef2:	2013      	movs	r0, #19
 800aef4:	f7f7 ff06 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(19, 243, (uint8_t*) "Cem UNSALAN", LEFT_MODE);
 800aef8:	2303      	movs	r3, #3
 800aefa:	4a58      	ldr	r2, [pc, #352]	; (800b05c <main+0xa3c>)
 800aefc:	21f3      	movs	r1, #243	; 0xf3
 800aefe:	2013      	movs	r0, #19
 800af00:	f7f7 ff00 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_SetTextColor(0xff003a65);
 800af04:	4856      	ldr	r0, [pc, #344]	; (800b060 <main+0xa40>)
 800af06:	f7f7 fdbd 	bl	8002a84 <BSP_LCD_SetTextColor>
  	BSP_LCD_FillRect(339, 199, 92, 39);
 800af0a:	2327      	movs	r3, #39	; 0x27
 800af0c:	225c      	movs	r2, #92	; 0x5c
 800af0e:	21c7      	movs	r1, #199	; 0xc7
 800af10:	f240 1053 	movw	r0, #339	; 0x153
 800af14:	f7f8 f936 	bl	8003184 <BSP_LCD_FillRect>
  	BSP_LCD_FillRect(339, 139, 92, 39);
 800af18:	2327      	movs	r3, #39	; 0x27
 800af1a:	225c      	movs	r2, #92	; 0x5c
 800af1c:	218b      	movs	r1, #139	; 0x8b
 800af1e:	f240 1053 	movw	r0, #339	; 0x153
 800af22:	f7f8 f92f 	bl	8003184 <BSP_LCD_FillRect>
  	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800af26:	f04f 30ff 	mov.w	r0, #4294967295
 800af2a:	f7f7 fdab 	bl	8002a84 <BSP_LCD_SetTextColor>
  	BSP_LCD_SetBackColor(0xff003a65);
 800af2e:	484c      	ldr	r0, [pc, #304]	; (800b060 <main+0xa40>)
 800af30:	f7f7 fdb4 	bl	8002a9c <BSP_LCD_SetBackColor>
  	BSP_LCD_SetFont(&Font20);
 800af34:	4841      	ldr	r0, [pc, #260]	; (800b03c <main+0xa1c>)
 800af36:	f7f7 fdbd 	bl	8002ab4 <BSP_LCD_SetFont>
  	BSP_LCD_DisplayStringAt(350, 147, (uint8_t*) "START", LEFT_MODE);
 800af3a:	2303      	movs	r3, #3
 800af3c:	4a49      	ldr	r2, [pc, #292]	; (800b064 <main+0xa44>)
 800af3e:	2193      	movs	r1, #147	; 0x93
 800af40:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800af44:	f7f7 fede 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_DisplayStringAt(350, 208, (uint8_t*) "ABOUT", LEFT_MODE);
 800af48:	2303      	movs	r3, #3
 800af4a:	4a47      	ldr	r2, [pc, #284]	; (800b068 <main+0xa48>)
 800af4c:	21d0      	movs	r1, #208	; 0xd0
 800af4e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800af52:	f7f7 fed7 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800af56:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800af5a:	f7f7 fd93 	bl	8002a84 <BSP_LCD_SetTextColor>
  	BSP_LCD_SetFont(&Font12);
 800af5e:	4839      	ldr	r0, [pc, #228]	; (800b044 <main+0xa24>)
 800af60:	f7f7 fda8 	bl	8002ab4 <BSP_LCD_SetFont>
  	while (start==0) // Pour tout commencer, on attend un appui sur l'écran
 800af64:	f8d6 8144 	ldr.w	r8, [r6, #324]	; 0x144
 800af68:	f1b8 0f00 	cmp.w	r8, #0
 800af6c:	f000 8082 	beq.w	800b074 <main+0xa54>
			BSP_TS_GetState(&g_ts);
 800af70:	4f30      	ldr	r7, [pc, #192]	; (800b034 <main+0xa14>)
			else touch=0;
 800af72:	f04f 0800 	mov.w	r8, #0
	  BSP_examples[2].DemoFunc();
 800af76:	4d3d      	ldr	r5, [pc, #244]	; (800b06c <main+0xa4c>)
	  if (start==1)
 800af78:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d148      	bne.n	800b012 <main+0x9f2>
			BSP_TS_GetState(&g_ts);
 800af80:	4638      	mov	r0, r7
 800af82:	f7f9 f91f 	bl	80041c4 <BSP_TS_GetState>
			if (g_ts.touchDetected==1) // detect the touch
 800af86:	f896 110c 	ldrb.w	r1, [r6, #268]	; 0x10c
 800af8a:	2901      	cmp	r1, #1
 800af8c:	f040 80ab 	bne.w	800b0e6 <main+0xac6>
				  x=g_ts.touchX[0];
 800af90:	f8b6 210e 	ldrh.w	r2, [r6, #270]	; 0x10e
				  y=g_ts.touchY[0];
 800af94:	f8b6 3118 	ldrh.w	r3, [r6, #280]	; 0x118
				  if (recording==0)
 800af98:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
				  touch=1;
 800af9c:	f8c6 1138 	str.w	r1, [r6, #312]	; 0x138
				  x=g_ts.touchX[0];
 800afa0:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
				  y=g_ts.touchY[0];
 800afa4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
				  if (recording==0)
 800afa8:	b948      	cbnz	r0, 800afbe <main+0x99e>
					  if ((x<=189)&(x>=161))
 800afaa:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
 800afae:	281c      	cmp	r0, #28
 800afb0:	d805      	bhi.n	800afbe <main+0x99e>
						  if ((y<=78)&(y>=50))
 800afb2:	f1a3 0032 	sub.w	r0, r3, #50	; 0x32
 800afb6:	281c      	cmp	r0, #28
							  recording=1;
 800afb8:	bf98      	it	ls
 800afba:	f8c6 1148 	strls.w	r1, [r6, #328]	; 0x148
				  if (playing==0)
 800afbe:	f8d6 114c 	ldr.w	r1, [r6, #332]	; 0x14c
 800afc2:	b951      	cbnz	r1, 800afda <main+0x9ba>
				  	  if ((x<=415)&(x>=388))
 800afc4:	f5a2 71c2 	sub.w	r1, r2, #388	; 0x184
 800afc8:	291b      	cmp	r1, #27
 800afca:	d806      	bhi.n	800afda <main+0x9ba>
						  if ((y<=78)&(y>=51))
 800afcc:	f1a3 0133 	sub.w	r1, r3, #51	; 0x33
 800afd0:	291b      	cmp	r1, #27
							  playing=1;
 800afd2:	bf9c      	itt	ls
 800afd4:	2101      	movls	r1, #1
 800afd6:	f8c6 114c 	strls.w	r1, [r6, #332]	; 0x14c
				  if (analyzing==0)
 800afda:	f8d6 4150 	ldr.w	r4, [r6, #336]	; 0x150
 800afde:	b9c4      	cbnz	r4, 800b012 <main+0x9f2>
					  if ((x<=302)&(x>=274))
 800afe0:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 800afe4:	2a1c      	cmp	r2, #28
 800afe6:	d814      	bhi.n	800b012 <main+0x9f2>
						  if ((y<=120)&(y>=92))
 800afe8:	3b5c      	subs	r3, #92	; 0x5c
 800afea:	2b1c      	cmp	r3, #28
 800afec:	d811      	bhi.n	800b012 <main+0x9f2>
							  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800afee:	f04f 30ff 	mov.w	r0, #4294967295
 800aff2:	f7f7 fd47 	bl	8002a84 <BSP_LCD_SetTextColor>
							  BSP_LCD_FillRect(0,127,480,145);
 800aff6:	2391      	movs	r3, #145	; 0x91
 800aff8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800affc:	217f      	movs	r1, #127	; 0x7f
 800affe:	4620      	mov	r0, r4
 800b000:	f7f8 f8c0 	bl	8003184 <BSP_LCD_FillRect>
							  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	f7f7 fd3c 	bl	8002a84 <BSP_LCD_SetTextColor>
							  analyzing=1;
 800b00c:	2301      	movs	r3, #1
 800b00e:	f8c6 3150 	str.w	r3, [r6, #336]	; 0x150
	  BSP_examples[2].DemoFunc();
 800b012:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800b016:	4798      	blx	r3
	  if (start==1)
 800b018:	e7ae      	b.n	800af78 <main+0x958>
 800b01a:	bf00      	nop
 800b01c:	40020000 	.word	0x40020000
 800b020:	40021c00 	.word	0x40021c00
 800b024:	2000ff84 	.word	0x2000ff84
 800b028:	40020400 	.word	0x40020400
 800b02c:	40023800 	.word	0x40023800
 800b030:	40011400 	.word	0x40011400
 800b034:	20010090 	.word	0x20010090
 800b038:	20000074 	.word	0x20000074
 800b03c:	20000094 	.word	0x20000094
 800b040:	080183cf 	.word	0x080183cf
 800b044:	20000084 	.word	0x20000084
 800b048:	080183e4 	.word	0x080183e4
 800b04c:	080183ed 	.word	0x080183ed
 800b050:	08018400 	.word	0x08018400
 800b054:	0801840c 	.word	0x0801840c
 800b058:	0801841b 	.word	0x0801841b
 800b05c:	0801842a 	.word	0x0801842a
 800b060:	ff003a65 	.word	0xff003a65
 800b064:	08018436 	.word	0x08018436
 800b068:	0801843c 	.word	0x0801843c
 800b06c:	200002f0 	.word	0x200002f0
 800b070:	40011000 	.word	0x40011000
	  BSP_TS_GetState(&g_ts);
 800b074:	4620      	mov	r0, r4
 800b076:	f7f9 f8a5 	bl	80041c4 <BSP_TS_GetState>
	  if (g_ts.touchDetected==1) // detect the touch
 800b07a:	f896 710c 	ldrb.w	r7, [r6, #268]	; 0x10c
 800b07e:	2f01      	cmp	r7, #1
 800b080:	d12e      	bne.n	800b0e0 <main+0xac0>
			  x=g_ts.touchX[0];
 800b082:	f8b6 210e 	ldrh.w	r2, [r6, #270]	; 0x10e
			  if ((x<=431)&(x>=339))
 800b086:	f46f 71a9 	mvn.w	r1, #338	; 0x152
			  y=g_ts.touchY[0];
 800b08a:	f8b6 3118 	ldrh.w	r3, [r6, #280]	; 0x118
			  x=g_ts.touchX[0];
 800b08e:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
			  if ((x<=431)&(x>=339))
 800b092:	440a      	add	r2, r1
			  touch=1;
 800b094:	f8c6 7138 	str.w	r7, [r6, #312]	; 0x138
			  if ((x<=431)&(x>=339))
 800b098:	2a5c      	cmp	r2, #92	; 0x5c
			  y=g_ts.touchY[0];
 800b09a:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
			  if ((x<=431)&(x>=339))
 800b09e:	d80a      	bhi.n	800b0b6 <main+0xa96>
				  if ((y<=178)&(y>=139))
 800b0a0:	3b8b      	subs	r3, #139	; 0x8b
 800b0a2:	2b27      	cmp	r3, #39	; 0x27
 800b0a4:	d807      	bhi.n	800b0b6 <main+0xa96>
					  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0aa:	f7f7 fd1b 	bl	8002ae4 <BSP_LCD_Clear>
					  start=1; // START
 800b0ae:	f8c6 7144 	str.w	r7, [r6, #324]	; 0x144
					  display_buttons();
 800b0b2:	f7ff fa2d 	bl	800a510 <display_buttons>
			  if ((x<=431)&(x>=339))
 800b0b6:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
 800b0ba:	f46f 72a9 	mvn.w	r2, #338	; 0x152
 800b0be:	4413      	add	r3, r2
 800b0c0:	2b5c      	cmp	r3, #92	; 0x5c
 800b0c2:	f63f af4f 	bhi.w	800af64 <main+0x944>
				  if ((y<=238)&(y>=199))
 800b0c6:	f8d6 3140 	ldr.w	r3, [r6, #320]	; 0x140
 800b0ca:	3bc7      	subs	r3, #199	; 0xc7
 800b0cc:	2b27      	cmp	r3, #39	; 0x27
 800b0ce:	f63f af49 	bhi.w	800af64 <main+0x944>
					  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d6:	f7f7 fd05 	bl	8002ae4 <BSP_LCD_Clear>
					  start=2; // ABOUT
 800b0da:	f8c6 5144 	str.w	r5, [r6, #324]	; 0x144
 800b0de:	e741      	b.n	800af64 <main+0x944>
	  else touch=0;
 800b0e0:	f8c6 8138 	str.w	r8, [r6, #312]	; 0x138
 800b0e4:	e73e      	b.n	800af64 <main+0x944>
			else touch=0;
 800b0e6:	f8c6 8138 	str.w	r8, [r6, #312]	; 0x138
 800b0ea:	e792      	b.n	800b012 <main+0x9f2>

0800b0ec <CheckForUserInput>:
{
 800b0ec:	b508      	push	{r3, lr}
	if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800b0ee:	2002      	movs	r0, #2
 800b0f0:	f7f6 fe98 	bl	8001e24 <BSP_PB_GetState>
 800b0f4:	b140      	cbz	r0, 800b108 <CheckForUserInput+0x1c>
		HAL_Delay(10);
 800b0f6:	200a      	movs	r0, #10
 800b0f8:	f7f9 f982 	bl	8004400 <HAL_Delay>
		while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800b0fc:	2002      	movs	r0, #2
 800b0fe:	f7f6 fe91 	bl	8001e24 <BSP_PB_GetState>
 800b102:	2800      	cmp	r0, #0
 800b104:	d1fa      	bne.n	800b0fc <CheckForUserInput+0x10>
		return 1 ;
 800b106:	2001      	movs	r0, #1
}
 800b108:	bd08      	pop	{r3, pc}
	...

0800b10c <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == KEY_BUTTON_PIN)
 800b10c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
{
 800b110:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 800b112:	d10b      	bne.n	800b12c <HAL_GPIO_EXTI_Callback+0x20>
    if ((HAL_GetTick() - debounce_time) > 50)
 800b114:	4c06      	ldr	r4, [pc, #24]	; (800b130 <HAL_GPIO_EXTI_Callback+0x24>)
 800b116:	f7f9 f96d 	bl	80043f4 <HAL_GetTick>
 800b11a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 800b11e:	1ac0      	subs	r0, r0, r3
 800b120:	2832      	cmp	r0, #50	; 0x32
 800b122:	d903      	bls.n	800b12c <HAL_GPIO_EXTI_Callback+0x20>
      debounce_time = HAL_GetTick();
 800b124:	f7f9 f966 	bl	80043f4 <HAL_GetTick>
 800b128:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
 800b12c:	bd10      	pop	{r4, pc}
 800b12e:	bf00      	nop
 800b130:	2000ff84 	.word	0x2000ff84

0800b134 <Error_Handler>:
 800b134:	b672      	cpsid	i
  while (1)
 800b136:	e7fe      	b.n	800b136 <Error_Handler+0x2>

0800b138 <QSPI_demo>:
* @brief  QSPI Demo
* @param  None
* @retval None
*/
void QSPI_demo (void)
{ 
 800b138:	b538      	push	{r3, r4, r5, lr}
* @retval None
*/
static void QSPI_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295
 800b13e:	f7f7 fcd1 	bl	8002ae4 <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b142:	4890      	ldr	r0, [pc, #576]	; (800b384 <QSPI_demo+0x24c>)
 800b144:	f7f7 fc9e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800b148:	f7f7 fc42 	bl	80029d0 <BSP_LCD_GetXSize>
 800b14c:	2100      	movs	r1, #0
 800b14e:	b282      	uxth	r2, r0
 800b150:	2350      	movs	r3, #80	; 0x50
 800b152:	4608      	mov	r0, r1
 800b154:	f7f8 f816 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	f7f7 fc92 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 800b160:	4888      	ldr	r0, [pc, #544]	; (800b384 <QSPI_demo+0x24c>)
 800b162:	f7f7 fc9b 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800b166:	4888      	ldr	r0, [pc, #544]	; (800b388 <QSPI_demo+0x250>)
 800b168:	f7f7 fca4 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 800b16c:	2100      	movs	r1, #0
 800b16e:	2301      	movs	r3, #1
 800b170:	4a86      	ldr	r2, [pc, #536]	; (800b38c <QSPI_demo+0x254>)
 800b172:	4608      	mov	r0, r1
 800b174:	f7f7 fdc6 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800b178:	4885      	ldr	r0, [pc, #532]	; (800b390 <QSPI_demo+0x258>)
 800b17a:	f7f7 fc9b 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 800b17e:	2301      	movs	r3, #1
 800b180:	4a84      	ldr	r2, [pc, #528]	; (800b394 <QSPI_demo+0x25c>)
 800b182:	211e      	movs	r1, #30
 800b184:	2000      	movs	r0, #0
 800b186:	f7f7 fdbd 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE); 
 800b18a:	2301      	movs	r3, #1
 800b18c:	4a82      	ldr	r2, [pc, #520]	; (800b398 <QSPI_demo+0x260>)
 800b18e:	212d      	movs	r1, #45	; 0x2d
 800b190:	2000      	movs	r0, #0
 800b192:	f7f7 fdb7 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE); 
 800b196:	2301      	movs	r3, #1
 800b198:	4a80      	ldr	r2, [pc, #512]	; (800b39c <QSPI_demo+0x264>)
 800b19a:	213c      	movs	r1, #60	; 0x3c
 800b19c:	2000      	movs	r0, #0
 800b19e:	f7f7 fdb1 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 800b1a2:	4878      	ldr	r0, [pc, #480]	; (800b384 <QSPI_demo+0x24c>)
 800b1a4:	f7f7 fc6e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 800b1a8:	f7f7 fc12 	bl	80029d0 <BSP_LCD_GetXSize>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	f7f7 fc1b 	bl	80029e8 <BSP_LCD_GetYSize>
 800b1b2:	3864      	subs	r0, #100	; 0x64
 800b1b4:	f1a4 0214 	sub.w	r2, r4, #20
 800b1b8:	215a      	movs	r1, #90	; 0x5a
 800b1ba:	b283      	uxth	r3, r0
 800b1bc:	200a      	movs	r0, #10
 800b1be:	b292      	uxth	r2, r2
 800b1c0:	f7f7 fd08 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 800b1c4:	f7f7 fc04 	bl	80029d0 <BSP_LCD_GetXSize>
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	f7f7 fc0d 	bl	80029e8 <BSP_LCD_GetYSize>
 800b1ce:	3866      	subs	r0, #102	; 0x66
 800b1d0:	f1a4 0216 	sub.w	r2, r4, #22
 800b1d4:	215b      	movs	r1, #91	; 0x5b
 800b1d6:	b283      	uxth	r3, r0
 800b1d8:	200b      	movs	r0, #11
 800b1da:	b292      	uxth	r2, r2
 800b1dc:	f7f7 fcfa 	bl	8002bd4 <BSP_LCD_DrawRect>
  
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b1e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b1e4:	f7f7 fc4e 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	f7f7 fc56 	bl	8002a9c <BSP_LCD_SetBackColor>
  status = BSP_QSPI_Init();
 800b1f0:	f7f8 fc34 	bl	8003a5c <BSP_QSPI_Init>
  if (status == QSPI_NOT_SUPPORTED)
 800b1f4:	2804      	cmp	r0, #4
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 800b1f6:	f04f 0303 	mov.w	r3, #3
  if (status == QSPI_NOT_SUPPORTED)
 800b1fa:	d120      	bne.n	800b23e <QSPI_demo+0x106>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 800b1fc:	4a68      	ldr	r2, [pc, #416]	; (800b3a0 <QSPI_demo+0x268>)
 800b1fe:	2164      	movs	r1, #100	; 0x64
 800b200:	2014      	movs	r0, #20
 800b202:	f7f7 fd7f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b206:	2303      	movs	r3, #3
 800b208:	4a66      	ldr	r2, [pc, #408]	; (800b3a4 <QSPI_demo+0x26c>)
 800b20a:	2173      	movs	r1, #115	; 0x73
 800b20c:	2014      	movs	r0, #20
 800b20e:	f7f7 fd79 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 800b212:	2303      	movs	r3, #3
 800b214:	4a64      	ldr	r2, [pc, #400]	; (800b3a8 <QSPI_demo+0x270>)
 800b216:	2191      	movs	r1, #145	; 0x91
 800b218:	2014      	movs	r0, #20
 800b21a:	f7f7 fd73 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 800b21e:	2303      	movs	r3, #3
 800b220:	4a62      	ldr	r2, [pc, #392]	; (800b3ac <QSPI_demo+0x274>)
 800b222:	21a0      	movs	r1, #160	; 0xa0
 800b224:	2014      	movs	r0, #20
 800b226:	f7f7 fd6d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 800b22a:	2303      	movs	r3, #3
 800b22c:	4a60      	ldr	r2, [pc, #384]	; (800b3b0 <QSPI_demo+0x278>)
 800b22e:	21af      	movs	r1, #175	; 0xaf
 800b230:	2014      	movs	r0, #20
 800b232:	f7f7 fd67 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 800b236:	2303      	movs	r3, #3
 800b238:	4a5e      	ldr	r2, [pc, #376]	; (800b3b4 <QSPI_demo+0x27c>)
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b23a:	21be      	movs	r1, #190	; 0xbe
 800b23c:	e009      	b.n	800b252 <QSPI_demo+0x11a>
  else if (status == QSPI_ERROR)
 800b23e:	2801      	cmp	r0, #1
 800b240:	d10f      	bne.n	800b262 <QSPI_demo+0x12a>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 800b242:	4a57      	ldr	r2, [pc, #348]	; (800b3a0 <QSPI_demo+0x268>)
 800b244:	2164      	movs	r1, #100	; 0x64
 800b246:	2014      	movs	r0, #20
 800b248:	f7f7 fd5c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b24c:	2303      	movs	r3, #3
 800b24e:	4a55      	ldr	r2, [pc, #340]	; (800b3a4 <QSPI_demo+0x26c>)
 800b250:	2173      	movs	r1, #115	; 0x73
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800b252:	2014      	movs	r0, #20
 800b254:	f7f7 fd56 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    if(CheckForUserInput() > 0)
 800b258:	f7ff ff48 	bl	800b0ec <CheckForUserInput>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d0fb      	beq.n	800b258 <QSPI_demo+0x120>
}
 800b260:	bd38      	pop	{r3, r4, r5, pc}
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 800b262:	4d55      	ldr	r5, [pc, #340]	; (800b3b8 <QSPI_demo+0x280>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 800b264:	2164      	movs	r1, #100	; 0x64
 800b266:	4a55      	ldr	r2, [pc, #340]	; (800b3bc <QSPI_demo+0x284>)
 800b268:	2014      	movs	r0, #20
 800b26a:	f7f7 fd4b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 800b26e:	2300      	movs	r3, #0
    BSP_QSPI_GetInfo(&pQSPI_Info);
 800b270:	4628      	mov	r0, r5
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 800b272:	612b      	str	r3, [r5, #16]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 800b274:	e9c5 3300 	strd	r3, r3, [r5]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 800b278:	e9c5 3302 	strd	r3, r3, [r5, #8]
    BSP_QSPI_GetInfo(&pQSPI_Info);
 800b27c:	f7f8 fb4a 	bl	8003914 <BSP_QSPI_GetInfo>
    if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b286:	d10f      	bne.n	800b2a8 <QSPI_demo+0x170>
 800b288:	686b      	ldr	r3, [r5, #4]
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28e:	d10b      	bne.n	800b2a8 <QSPI_demo+0x170>
 800b290:	68eb      	ldr	r3, [r5, #12]
 800b292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b296:	d107      	bne.n	800b2a8 <QSPI_demo+0x170>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 800b298:	68ab      	ldr	r3, [r5, #8]
 800b29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29e:	d103      	bne.n	800b2a8 <QSPI_demo+0x170>
 800b2a0:	692b      	ldr	r3, [r5, #16]
 800b2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a6:	d009      	beq.n	800b2bc <QSPI_demo+0x184>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	4a45      	ldr	r2, [pc, #276]	; (800b3c0 <QSPI_demo+0x288>)
 800b2ac:	2173      	movs	r1, #115	; 0x73
 800b2ae:	2014      	movs	r0, #20
 800b2b0:	f7f7 fd28 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	4a3b      	ldr	r2, [pc, #236]	; (800b3a4 <QSPI_demo+0x26c>)
 800b2b8:	2182      	movs	r1, #130	; 0x82
 800b2ba:	e7ca      	b.n	800b252 <QSPI_demo+0x11a>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 800b2bc:	2303      	movs	r3, #3
 800b2be:	4a41      	ldr	r2, [pc, #260]	; (800b3c4 <QSPI_demo+0x28c>)
 800b2c0:	2173      	movs	r1, #115	; 0x73
 800b2c2:	2014      	movs	r0, #20
 800b2c4:	f7f7 fd1e 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 800b2c8:	2050      	movs	r0, #80	; 0x50
 800b2ca:	f7f8 faf5 	bl	80038b8 <BSP_QSPI_Erase_Block>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 800b2ce:	2303      	movs	r3, #3
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	b140      	cbz	r0, 800b2e6 <QSPI_demo+0x1ae>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 800b2d4:	4a3c      	ldr	r2, [pc, #240]	; (800b3c8 <QSPI_demo+0x290>)
 800b2d6:	2182      	movs	r1, #130	; 0x82
 800b2d8:	2014      	movs	r0, #20
 800b2da:	f7f7 fd13 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b2de:	2303      	movs	r3, #3
 800b2e0:	4a30      	ldr	r2, [pc, #192]	; (800b3a4 <QSPI_demo+0x26c>)
 800b2e2:	2191      	movs	r1, #145	; 0x91
 800b2e4:	e7b5      	b.n	800b252 <QSPI_demo+0x11a>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 800b2e6:	3514      	adds	r5, #20
 800b2e8:	4a38      	ldr	r2, [pc, #224]	; (800b3cc <QSPI_demo+0x294>)
 800b2ea:	2182      	movs	r1, #130	; 0x82
 800b2ec:	2014      	movs	r0, #20
 800b2ee:	f7f7 fd09 	bl	8002d04 <BSP_LCD_DisplayStringAt>
 800b2f2:	462b      	mov	r3, r5
  uint32_t tmpIndex = 0;
  
  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800b2f4:	f104 020f 	add.w	r2, r4, #15
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800b2fe:	f803 2b01 	strb.w	r2, [r3], #1
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800b302:	d1f7      	bne.n	800b2f4 <QSPI_demo+0x1bc>
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 800b304:	4622      	mov	r2, r4
 800b306:	2150      	movs	r1, #80	; 0x50
 800b308:	4831      	ldr	r0, [pc, #196]	; (800b3d0 <QSPI_demo+0x298>)
 800b30a:	f7f8 fa89 	bl	8003820 <BSP_QSPI_Write>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 800b30e:	2303      	movs	r3, #3
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 800b310:	b140      	cbz	r0, 800b324 <QSPI_demo+0x1ec>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 800b312:	4a30      	ldr	r2, [pc, #192]	; (800b3d4 <QSPI_demo+0x29c>)
 800b314:	2191      	movs	r1, #145	; 0x91
 800b316:	2014      	movs	r0, #20
 800b318:	f7f7 fcf4 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b31c:	2303      	movs	r3, #3
 800b31e:	4a21      	ldr	r2, [pc, #132]	; (800b3a4 <QSPI_demo+0x26c>)
 800b320:	21a0      	movs	r1, #160	; 0xa0
 800b322:	e796      	b.n	800b252 <QSPI_demo+0x11a>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 800b324:	4a2c      	ldr	r2, [pc, #176]	; (800b3d8 <QSPI_demo+0x2a0>)
 800b326:	2191      	movs	r1, #145	; 0x91
 800b328:	2014      	movs	r0, #20
 800b32a:	f7f7 fceb 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 800b32e:	4622      	mov	r2, r4
 800b330:	2150      	movs	r1, #80	; 0x50
 800b332:	482a      	ldr	r0, [pc, #168]	; (800b3dc <QSPI_demo+0x2a4>)
 800b334:	f7f8 fa36 	bl	80037a4 <BSP_QSPI_Read>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 800b338:	2303      	movs	r3, #3
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 800b33a:	b140      	cbz	r0, 800b34e <QSPI_demo+0x216>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 800b33c:	4a28      	ldr	r2, [pc, #160]	; (800b3e0 <QSPI_demo+0x2a8>)
 800b33e:	21a0      	movs	r1, #160	; 0xa0
 800b340:	2014      	movs	r0, #20
 800b342:	f7f7 fcdf 	bl	8002d04 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b346:	2303      	movs	r3, #3
 800b348:	4a16      	ldr	r2, [pc, #88]	; (800b3a4 <QSPI_demo+0x26c>)
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800b34a:	21af      	movs	r1, #175	; 0xaf
 800b34c:	e781      	b.n	800b252 <QSPI_demo+0x11a>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 800b34e:	4a25      	ldr	r2, [pc, #148]	; (800b3e4 <QSPI_demo+0x2ac>)
 800b350:	21a0      	movs	r1, #160	; 0xa0
 800b352:	2014      	movs	r0, #20
 800b354:	f7f7 fcd6 	bl	8002d04 <BSP_LCD_DisplayStringAt>
* @param  pBuffer1, pBuffer2: buffers to be compared.
* @param  BufferLength: buffer's length
* @retval 1: pBuffer identical to pBuffer1
*         0: pBuffer differs from pBuffer1
*/
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
 800b358:	4b20      	ldr	r3, [pc, #128]	; (800b3dc <QSPI_demo+0x2a4>)
{
  while (BufferLength--)
 800b35a:	3c01      	subs	r4, #1
 800b35c:	d202      	bcs.n	800b364 <QSPI_demo+0x22c>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800b35e:	2303      	movs	r3, #3
 800b360:	4a21      	ldr	r2, [pc, #132]	; (800b3e8 <QSPI_demo+0x2b0>)
 800b362:	e7f2      	b.n	800b34a <QSPI_demo+0x212>
  {
    if (*pBuffer1 != *pBuffer2)
 800b364:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b368:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b36c:	4291      	cmp	r1, r2
 800b36e:	d0f4      	beq.n	800b35a <QSPI_demo+0x222>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 800b370:	2303      	movs	r3, #3
 800b372:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <QSPI_demo+0x2b4>)
 800b374:	21af      	movs	r1, #175	; 0xaf
 800b376:	2014      	movs	r0, #20
 800b378:	f7f7 fcc4 	bl	8002d04 <BSP_LCD_DisplayStringAt>
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800b37c:	2303      	movs	r3, #3
 800b37e:	4a09      	ldr	r2, [pc, #36]	; (800b3a4 <QSPI_demo+0x26c>)
 800b380:	e75b      	b.n	800b23a <QSPI_demo+0x102>
 800b382:	bf00      	nop
 800b384:	ff0000ff 	.word	0xff0000ff
 800b388:	20000074 	.word	0x20000074
 800b38c:	08018442 	.word	0x08018442
 800b390:	20000084 	.word	0x20000084
 800b394:	08018447 	.word	0x08018447
 800b398:	08018467 	.word	0x08018467
 800b39c:	08018484 	.word	0x08018484
 800b3a0:	080184a4 	.word	0x080184a4
 800b3a4:	080184c2 	.word	0x080184c2
 800b3a8:	080184d5 	.word	0x080184d5
 800b3ac:	080184f8 	.word	0x080184f8
 800b3b0:	08018517 	.word	0x08018517
 800b3b4:	08018538 	.word	0x08018538
 800b3b8:	2001528c 	.word	0x2001528c
 800b3bc:	08018555 	.word	0x08018555
 800b3c0:	0801856f 	.word	0x0801856f
 800b3c4:	08018587 	.word	0x08018587
 800b3c8:	0801859e 	.word	0x0801859e
 800b3cc:	080185b3 	.word	0x080185b3
 800b3d0:	200152a0 	.word	0x200152a0
 800b3d4:	080185c7 	.word	0x080185c7
 800b3d8:	080185dc 	.word	0x080185dc
 800b3dc:	200154a0 	.word	0x200154a0
 800b3e0:	080185f2 	.word	0x080185f2
 800b3e4:	08018606 	.word	0x08018606
 800b3e8:	08018632 	.word	0x08018632
 800b3ec:	0801861b 	.word	0x0801861b

0800b3f0 <SD_demo>:
  * @brief  SD Demo
  * @param  None
  * @retval None
  */
void SD_demo (void)
{
 800b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  * @retval None
  */
static void SD_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	f7f7 fb74 	bl	8002ae4 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b3fc:	488e      	ldr	r0, [pc, #568]	; (800b638 <SD_demo+0x248>)
 800b3fe:	f7f7 fb41 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800b402:	f7f7 fae5 	bl	80029d0 <BSP_LCD_GetXSize>
 800b406:	2100      	movs	r1, #0
 800b408:	b282      	uxth	r2, r0
 800b40a:	2350      	movs	r3, #80	; 0x50
 800b40c:	4608      	mov	r0, r1
 800b40e:	f7f7 feb9 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b412:	f04f 30ff 	mov.w	r0, #4294967295
 800b416:	f7f7 fb35 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800b41a:	4887      	ldr	r0, [pc, #540]	; (800b638 <SD_demo+0x248>)
 800b41c:	f7f7 fb3e 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800b420:	4886      	ldr	r0, [pc, #536]	; (800b63c <SD_demo+0x24c>)
 800b422:	f7f7 fb47 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD", CENTER_MODE);
 800b426:	2100      	movs	r1, #0
 800b428:	2301      	movs	r3, #1
 800b42a:	4a85      	ldr	r2, [pc, #532]	; (800b640 <SD_demo+0x250>)
 800b42c:	4608      	mov	r0, r1
 800b42e:	f7f7 fc69 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800b432:	4884      	ldr	r0, [pc, #528]	; (800b644 <SD_demo+0x254>)
 800b434:	f7f7 fb3e 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800b438:	2301      	movs	r3, #1
 800b43a:	4a83      	ldr	r2, [pc, #524]	; (800b648 <SD_demo+0x258>)
 800b43c:	211e      	movs	r1, #30
 800b43e:	2000      	movs	r0, #0
 800b440:	f7f7 fc60 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on the microSD and also", CENTER_MODE);
 800b444:	2301      	movs	r3, #1
 800b446:	4a81      	ldr	r2, [pc, #516]	; (800b64c <SD_demo+0x25c>)
 800b448:	212d      	movs	r1, #45	; 0x2d
 800b44a:	2000      	movs	r0, #0
 800b44c:	f7f7 fc5a 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"how to detect the presence of the card", CENTER_MODE);
 800b450:	2301      	movs	r3, #1
 800b452:	4a7f      	ldr	r2, [pc, #508]	; (800b650 <SD_demo+0x260>)
 800b454:	213c      	movs	r1, #60	; 0x3c
 800b456:	2000      	movs	r0, #0
 800b458:	f7f7 fc54 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b45c:	4876      	ldr	r0, [pc, #472]	; (800b638 <SD_demo+0x248>)
 800b45e:	f7f7 fb11 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800b462:	f7f7 fab5 	bl	80029d0 <BSP_LCD_GetXSize>
 800b466:	4604      	mov	r4, r0
 800b468:	f7f7 fabe 	bl	80029e8 <BSP_LCD_GetYSize>
 800b46c:	3864      	subs	r0, #100	; 0x64
 800b46e:	f1a4 0214 	sub.w	r2, r4, #20
 800b472:	215a      	movs	r1, #90	; 0x5a
 800b474:	b283      	uxth	r3, r0
 800b476:	200a      	movs	r0, #10
 800b478:	b292      	uxth	r2, r2
 800b47a:	f7f7 fbab 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800b47e:	f7f7 faa7 	bl	80029d0 <BSP_LCD_GetXSize>
 800b482:	4604      	mov	r4, r0
 800b484:	f7f7 fab0 	bl	80029e8 <BSP_LCD_GetYSize>
 800b488:	3866      	subs	r0, #102	; 0x66
 800b48a:	f1a4 0216 	sub.w	r2, r4, #22
 800b48e:	215b      	movs	r1, #91	; 0x5b
 800b490:	b283      	uxth	r3, r0
 800b492:	200b      	movs	r0, #11
 800b494:	b292      	uxth	r2, r2
 800b496:	f7f7 fb9d 	bl	8002bd4 <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b49a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b49e:	f7f7 faf1 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	f7f7 faf9 	bl	8002a9c <BSP_LCD_SetBackColor>
  SD_state = BSP_SD_Init();
 800b4aa:	f7f8 fc8f 	bl	8003dcc <BSP_SD_Init>
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 800b4ae:	2303      	movs	r3, #3
  if (SD_state != MSD_OK)
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	b380      	cbz	r0, 800b516 <SD_demo+0x126>
    if(SD_state == MSD_ERROR_SD_NOT_PRESENT)
 800b4b4:	2802      	cmp	r0, #2
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 800b4b6:	f04f 0164 	mov.w	r1, #100	; 0x64
 800b4ba:	f04f 0014 	mov.w	r0, #20
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 800b4be:	bf0c      	ite	eq
 800b4c0:	4a64      	ldreq	r2, [pc, #400]	; (800b654 <SD_demo+0x264>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 800b4c2:	4a65      	ldrne	r2, [pc, #404]	; (800b658 <SD_demo+0x268>)
 800b4c4:	f7f7 fc1e 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	4a64      	ldr	r2, [pc, #400]	; (800b65c <SD_demo+0x26c>)
 800b4cc:	2173      	movs	r1, #115	; 0x73
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 800b4ce:	2402      	movs	r4, #2
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 800b4d0:	4e63      	ldr	r6, [pc, #396]	; (800b660 <SD_demo+0x270>)
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800b4d2:	4f64      	ldr	r7, [pc, #400]	; (800b664 <SD_demo+0x274>)
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b4d4:	2014      	movs	r0, #20
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 800b4d6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b698 <SD_demo+0x2a8>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b4da:	f7f7 fc13 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    if (BSP_SD_IsDetected() != SD_PRESENT)
 800b4de:	f7f8 fb55 	bl	8003b8c <BSP_SD_IsDetected>
 800b4e2:	2801      	cmp	r0, #1
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	f000 8095 	beq.w	800b614 <SD_demo+0x224>
      if(prev_status != SD_NOT_PRESENT)
 800b4ea:	b174      	cbz	r4, 800b50a <SD_demo+0x11a>
        BSP_SD_Init();
 800b4ec:	f7f8 fc6e 	bl	8003dcc <BSP_SD_Init>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7f7 fac7 	bl	8002a84 <BSP_LCD_SetTextColor>
        prev_status = SD_NOT_PRESENT; 
 800b4f6:	2400      	movs	r4, #0
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 800b4f8:	f7f7 fa76 	bl	80029e8 <BSP_LCD_GetYSize>
 800b4fc:	381e      	subs	r0, #30
 800b4fe:	2303      	movs	r3, #3
 800b500:	4642      	mov	r2, r8
 800b502:	b281      	uxth	r1, r0
 800b504:	2014      	movs	r0, #20
 800b506:	f7f7 fbfd 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 800b50a:	f7ff fdef 	bl	800b0ec <CheckForUserInput>
 800b50e:	2800      	cmp	r0, #0
 800b510:	d0e5      	beq.n	800b4de <SD_demo+0xee>
}
 800b512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : OK.", LEFT_MODE);
 800b516:	4a54      	ldr	r2, [pc, #336]	; (800b668 <SD_demo+0x278>)
 800b518:	2164      	movs	r1, #100	; 0x64
 800b51a:	2014      	movs	r0, #20
 800b51c:	f7f7 fbf2 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    SD_state = BSP_SD_Erase(BLOCK_START_ADDR, BLOCK_START_ADDR + NUM_OF_BLOCKS - 1);
 800b520:	4620      	mov	r0, r4
 800b522:	2104      	movs	r1, #4
 800b524:	f7f8 fb68 	bl	8003bf8 <BSP_SD_Erase>
 800b528:	4604      	mov	r4, r0
    while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800b52a:	f7f8 fc7b 	bl	8003e24 <BSP_SD_GetCardState>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d1fb      	bne.n	800b52a <SD_demo+0x13a>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 800b532:	2303      	movs	r3, #3
    if (SD_state != MSD_OK)
 800b534:	b144      	cbz	r4, 800b548 <SD_demo+0x158>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 800b536:	4a4d      	ldr	r2, [pc, #308]	; (800b66c <SD_demo+0x27c>)
 800b538:	2173      	movs	r1, #115	; 0x73
 800b53a:	2014      	movs	r0, #20
 800b53c:	f7f7 fbe2 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b540:	2303      	movs	r3, #3
 800b542:	4a46      	ldr	r2, [pc, #280]	; (800b65c <SD_demo+0x26c>)
 800b544:	2182      	movs	r1, #130	; 0x82
 800b546:	e7c2      	b.n	800b4ce <SD_demo+0xde>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : OK.", LEFT_MODE);
 800b548:	4d49      	ldr	r5, [pc, #292]	; (800b670 <SD_demo+0x280>)
 800b54a:	2173      	movs	r1, #115	; 0x73
 800b54c:	4a49      	ldr	r2, [pc, #292]	; (800b674 <SD_demo+0x284>)
 800b54e:	2014      	movs	r0, #20
 800b550:	f7f7 fbd8 	bl	8002d04 <BSP_LCD_DisplayStringAt>
 800b554:	462a      	mov	r2, r5
 800b556:	f44f 530c 	mov.w	r3, #8960	; 0x2300
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800b55a:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800b55e:	3301      	adds	r3, #1
 800b560:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800b564:	d1f9      	bne.n	800b55a <SD_demo+0x16a>
      SD_state = BSP_SD_WriteBlocks(aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 800b566:	f242 7310 	movw	r3, #10000	; 0x2710
 800b56a:	2205      	movs	r2, #5
 800b56c:	2100      	movs	r1, #0
 800b56e:	4840      	ldr	r0, [pc, #256]	; (800b670 <SD_demo+0x280>)
 800b570:	f7f8 fb32 	bl	8003bd8 <BSP_SD_WriteBlocks>
 800b574:	4604      	mov	r4, r0
      while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800b576:	f7f8 fc55 	bl	8003e24 <BSP_SD_GetCardState>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d1fb      	bne.n	800b576 <SD_demo+0x186>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 800b57e:	2303      	movs	r3, #3
      if (SD_state != MSD_OK)
 800b580:	b144      	cbz	r4, 800b594 <SD_demo+0x1a4>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 800b582:	4a3d      	ldr	r2, [pc, #244]	; (800b678 <SD_demo+0x288>)
 800b584:	2182      	movs	r1, #130	; 0x82
 800b586:	2014      	movs	r0, #20
 800b588:	f7f7 fbbc 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b58c:	2303      	movs	r3, #3
 800b58e:	4a33      	ldr	r2, [pc, #204]	; (800b65c <SD_demo+0x26c>)
 800b590:	2191      	movs	r1, #145	; 0x91
 800b592:	e79c      	b.n	800b4ce <SD_demo+0xde>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : OK.", LEFT_MODE);
 800b594:	4a39      	ldr	r2, [pc, #228]	; (800b67c <SD_demo+0x28c>)
 800b596:	2182      	movs	r1, #130	; 0x82
 800b598:	2014      	movs	r0, #20
 800b59a:	f7f7 fbb3 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        SD_state = BSP_SD_ReadBlocks(aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 800b59e:	4621      	mov	r1, r4
 800b5a0:	f242 7310 	movw	r3, #10000	; 0x2710
 800b5a4:	2205      	movs	r2, #5
 800b5a6:	4836      	ldr	r0, [pc, #216]	; (800b680 <SD_demo+0x290>)
 800b5a8:	f7f8 fb06 	bl	8003bb8 <BSP_SD_ReadBlocks>
 800b5ac:	4604      	mov	r4, r0
        while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800b5ae:	f7f8 fc39 	bl	8003e24 <BSP_SD_GetCardState>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1fb      	bne.n	800b5ae <SD_demo+0x1be>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 800b5b6:	2303      	movs	r3, #3
        if (SD_state != MSD_OK)
 800b5b8:	b144      	cbz	r4, 800b5cc <SD_demo+0x1dc>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 800b5ba:	4a32      	ldr	r2, [pc, #200]	; (800b684 <SD_demo+0x294>)
 800b5bc:	2191      	movs	r1, #145	; 0x91
 800b5be:	2014      	movs	r0, #20
 800b5c0:	f7f7 fba0 	bl	8002d04 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	4a25      	ldr	r2, [pc, #148]	; (800b65c <SD_demo+0x26c>)
 800b5c8:	21a0      	movs	r1, #160	; 0xa0
 800b5ca:	e780      	b.n	800b4ce <SD_demo+0xde>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 800b5cc:	4a2e      	ldr	r2, [pc, #184]	; (800b688 <SD_demo+0x298>)
 800b5ce:	2191      	movs	r1, #145	; 0x91
 800b5d0:	2014      	movs	r0, #20
 800b5d2:	f7f7 fb97 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
 800b5d6:	4a2a      	ldr	r2, [pc, #168]	; (800b680 <SD_demo+0x290>)
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 800b5d8:	f240 2381 	movw	r3, #641	; 0x281
{
  while (BufferLength--)
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	b94b      	cbnz	r3, 800b5f6 <SD_demo+0x206>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test : OK.", LEFT_MODE);
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	4a29      	ldr	r2, [pc, #164]	; (800b68c <SD_demo+0x29c>)
 800b5e6:	21a0      	movs	r1, #160	; 0xa0
 800b5e8:	2014      	movs	r0, #20
 800b5ea:	f7f7 fb8b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD can be removed.", LEFT_MODE);
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	4a27      	ldr	r2, [pc, #156]	; (800b690 <SD_demo+0x2a0>)
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b5f2:	21af      	movs	r1, #175	; 0xaf
 800b5f4:	e76b      	b.n	800b4ce <SD_demo+0xde>
  {
    if (*pBuffer1 != *pBuffer2)
 800b5f6:	f855 0b04 	ldr.w	r0, [r5], #4
 800b5fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5fe:	4288      	cmp	r0, r1
 800b600:	d0ec      	beq.n	800b5dc <SD_demo+0x1ec>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD COMPARE : FAILED.", LEFT_MODE);
 800b602:	2303      	movs	r3, #3
 800b604:	4a23      	ldr	r2, [pc, #140]	; (800b694 <SD_demo+0x2a4>)
 800b606:	21a0      	movs	r1, #160	; 0xa0
 800b608:	2014      	movs	r0, #20
 800b60a:	f7f7 fb7b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800b60e:	2303      	movs	r3, #3
 800b610:	4a12      	ldr	r2, [pc, #72]	; (800b65c <SD_demo+0x26c>)
 800b612:	e7ee      	b.n	800b5f2 <SD_demo+0x202>
    else if (prev_status != SD_PRESENT)
 800b614:	2c01      	cmp	r4, #1
 800b616:	f43f af78 	beq.w	800b50a <SD_demo+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800b61a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
      prev_status = SD_PRESENT;
 800b61e:	462c      	mov	r4, r5
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800b620:	f7f7 fa30 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 800b624:	f7f7 f9e0 	bl	80029e8 <BSP_LCD_GetYSize>
 800b628:	381e      	subs	r0, #30
 800b62a:	2303      	movs	r3, #3
 800b62c:	4632      	mov	r2, r6
 800b62e:	b281      	uxth	r1, r0
 800b630:	2014      	movs	r0, #20
 800b632:	f7f7 fb67 	bl	8002d04 <BSP_LCD_DisplayStringAt>
      prev_status = SD_PRESENT;
 800b636:	e768      	b.n	800b50a <SD_demo+0x11a>
 800b638:	ff0000ff 	.word	0xff0000ff
 800b63c:	20000074 	.word	0x20000074
 800b640:	08018647 	.word	0x08018647
 800b644:	20000084 	.word	0x20000084
 800b648:	08018447 	.word	0x08018447
 800b64c:	0801864a 	.word	0x0801864a
 800b650:	08018670 	.word	0x08018670
 800b654:	08018697 	.word	0x08018697
 800b658:	080186c0 	.word	0x080186c0
 800b65c:	080186da 	.word	0x080186da
 800b660:	08018778 	.word	0x08018778
 800b664:	ffff0000 	.word	0xffff0000
 800b668:	080186eb 	.word	0x080186eb
 800b66c:	08018703 	.word	0x08018703
 800b670:	200156a0 	.word	0x200156a0
 800b674:	08018716 	.word	0x08018716
 800b678:	08018725 	.word	0x08018725
 800b67c:	08018738 	.word	0x08018738
 800b680:	200160a0 	.word	0x200160a0
 800b684:	08018747 	.word	0x08018747
 800b688:	08018759 	.word	0x08018759
 800b68c:	08018789 	.word	0x08018789
 800b690:	08018797 	.word	0x08018797
 800b694:	080187aa 	.word	0x080187aa
 800b698:	08018767 	.word	0x08018767

0800b69c <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 800b69c:	b510      	push	{r4, lr}
  * @retval None
  */
static void SDRAM_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a2:	f7f7 fa1f 	bl	8002ae4 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b6a6:	485d      	ldr	r0, [pc, #372]	; (800b81c <SDRAM_demo+0x180>)
 800b6a8:	f7f7 f9ec 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800b6ac:	f7f7 f990 	bl	80029d0 <BSP_LCD_GetXSize>
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	b282      	uxth	r2, r0
 800b6b4:	2350      	movs	r3, #80	; 0x50
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	f7f7 fd64 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	f7f7 f9e0 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800b6c4:	4855      	ldr	r0, [pc, #340]	; (800b81c <SDRAM_demo+0x180>)
 800b6c6:	f7f7 f9e9 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800b6ca:	4855      	ldr	r0, [pc, #340]	; (800b820 <SDRAM_demo+0x184>)
 800b6cc:	f7f7 f9f2 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4a53      	ldr	r2, [pc, #332]	; (800b824 <SDRAM_demo+0x188>)
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	f7f7 fb14 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800b6dc:	4852      	ldr	r0, [pc, #328]	; (800b828 <SDRAM_demo+0x18c>)
 800b6de:	f7f7 f9e9 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4a51      	ldr	r2, [pc, #324]	; (800b82c <SDRAM_demo+0x190>)
 800b6e6:	211e      	movs	r1, #30
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	f7f7 fb0b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4a4f      	ldr	r2, [pc, #316]	; (800b830 <SDRAM_demo+0x194>)
 800b6f2:	212d      	movs	r1, #45	; 0x2d
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f7f7 fb05 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b6fa:	4848      	ldr	r0, [pc, #288]	; (800b81c <SDRAM_demo+0x180>)
 800b6fc:	f7f7 f9c2 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800b700:	f7f7 f966 	bl	80029d0 <BSP_LCD_GetXSize>
 800b704:	4604      	mov	r4, r0
 800b706:	f7f7 f96f 	bl	80029e8 <BSP_LCD_GetYSize>
 800b70a:	3864      	subs	r0, #100	; 0x64
 800b70c:	f1a4 0214 	sub.w	r2, r4, #20
 800b710:	215a      	movs	r1, #90	; 0x5a
 800b712:	b283      	uxth	r3, r0
 800b714:	200a      	movs	r0, #10
 800b716:	b292      	uxth	r2, r2
 800b718:	f7f7 fa5c 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800b71c:	f7f7 f958 	bl	80029d0 <BSP_LCD_GetXSize>
 800b720:	4604      	mov	r4, r0
 800b722:	f7f7 f961 	bl	80029e8 <BSP_LCD_GetYSize>
 800b726:	3866      	subs	r0, #102	; 0x66
 800b728:	f1a4 0216 	sub.w	r2, r4, #22
 800b72c:	215b      	movs	r1, #91	; 0x5b
 800b72e:	b283      	uxth	r3, r0
 800b730:	200b      	movs	r0, #11
 800b732:	b292      	uxth	r2, r2
 800b734:	f7f7 fa4e 	bl	8002bd4 <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b738:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b73c:	f7f7 f9a2 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	f7f7 f9aa 	bl	8002a9c <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800b748:	f7f8 fcb4 	bl	80040b4 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800b74c:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800b74e:	2800      	cmp	r0, #0
 800b750:	d043      	beq.n	800b7da <SDRAM_demo+0x13e>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800b752:	4a38      	ldr	r2, [pc, #224]	; (800b834 <SDRAM_demo+0x198>)
 800b754:	2173      	movs	r1, #115	; 0x73
 800b756:	2014      	movs	r0, #20
 800b758:	f7f7 fad4 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b75c:	2303      	movs	r3, #3
 800b75e:	4a36      	ldr	r2, [pc, #216]	; (800b838 <SDRAM_demo+0x19c>)
 800b760:	2182      	movs	r1, #130	; 0x82
 800b762:	4c36      	ldr	r4, [pc, #216]	; (800b83c <SDRAM_demo+0x1a0>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800b764:	2014      	movs	r0, #20
 800b766:	f7f7 facd 	bl	8002d04 <BSP_LCD_DisplayStringAt>
{
 800b76a:	4b35      	ldr	r3, [pc, #212]	; (800b840 <SDRAM_demo+0x1a4>)
 800b76c:	4622      	mov	r2, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800b76e:	4935      	ldr	r1, [pc, #212]	; (800b844 <SDRAM_demo+0x1a8>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800b770:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800b774:	3301      	adds	r3, #1
 800b776:	428b      	cmp	r3, r1
 800b778:	d1fa      	bne.n	800b770 <SDRAM_demo+0xd4>
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800b77a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b77e:	492f      	ldr	r1, [pc, #188]	; (800b83c <SDRAM_demo+0x1a0>)
 800b780:	4831      	ldr	r0, [pc, #196]	; (800b848 <SDRAM_demo+0x1ac>)
 800b782:	f7f8 fbbd 	bl	8003f00 <BSP_SDRAM_WriteData>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 800b786:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800b788:	b350      	cbz	r0, 800b7e0 <SDRAM_demo+0x144>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 800b78a:	4a30      	ldr	r2, [pc, #192]	; (800b84c <SDRAM_demo+0x1b0>)
 800b78c:	2173      	movs	r1, #115	; 0x73
 800b78e:	2014      	movs	r0, #20
 800b790:	f7f7 fab8 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b794:	2303      	movs	r3, #3
 800b796:	4a28      	ldr	r2, [pc, #160]	; (800b838 <SDRAM_demo+0x19c>)
 800b798:	2182      	movs	r1, #130	; 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 800b79a:	2014      	movs	r0, #20
 800b79c:	f7f7 fab2 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800b7a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7a4:	492a      	ldr	r1, [pc, #168]	; (800b850 <SDRAM_demo+0x1b4>)
 800b7a6:	4828      	ldr	r0, [pc, #160]	; (800b848 <SDRAM_demo+0x1ac>)
 800b7a8:	f7f8 fb8e 	bl	8003ec8 <BSP_SDRAM_ReadData>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800b7ac:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800b7ae:	b1d0      	cbz	r0, 800b7e6 <SDRAM_demo+0x14a>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800b7b0:	4a28      	ldr	r2, [pc, #160]	; (800b854 <SDRAM_demo+0x1b8>)
 800b7b2:	2182      	movs	r1, #130	; 0x82
 800b7b4:	2014      	movs	r0, #20
 800b7b6:	f7f7 faa5 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	4a1e      	ldr	r2, [pc, #120]	; (800b838 <SDRAM_demo+0x19c>)
 800b7be:	2191      	movs	r1, #145	; 0x91
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800b7c0:	2014      	movs	r0, #20
 800b7c2:	f7f7 fa9f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  * @param  pBuffer1, pBuffer2: buffers to be compared.
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
 800b7c6:	4a22      	ldr	r2, [pc, #136]	; (800b850 <SDRAM_demo+0x1b4>)
{
 800b7c8:	f240 1301 	movw	r3, #257	; 0x101
{
  while (BufferLength--)
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	b963      	cbnz	r3, 800b7ec <SDRAM_demo+0x150>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	4a20      	ldr	r2, [pc, #128]	; (800b858 <SDRAM_demo+0x1bc>)
 800b7d6:	2191      	movs	r1, #145	; 0x91
 800b7d8:	e017      	b.n	800b80a <SDRAM_demo+0x16e>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800b7da:	4a20      	ldr	r2, [pc, #128]	; (800b85c <SDRAM_demo+0x1c0>)
 800b7dc:	2164      	movs	r1, #100	; 0x64
 800b7de:	e7c0      	b.n	800b762 <SDRAM_demo+0xc6>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 800b7e0:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <SDRAM_demo+0x1c4>)
 800b7e2:	2173      	movs	r1, #115	; 0x73
 800b7e4:	e7d9      	b.n	800b79a <SDRAM_demo+0xfe>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800b7e6:	4a1f      	ldr	r2, [pc, #124]	; (800b864 <SDRAM_demo+0x1c8>)
 800b7e8:	2182      	movs	r1, #130	; 0x82
 800b7ea:	e7e9      	b.n	800b7c0 <SDRAM_demo+0x124>
  {
    if (*pBuffer1 != *pBuffer2)
 800b7ec:	f854 0b04 	ldr.w	r0, [r4], #4
 800b7f0:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7f4:	4288      	cmp	r0, r1
 800b7f6:	d0e9      	beq.n	800b7cc <SDRAM_demo+0x130>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	4a1b      	ldr	r2, [pc, #108]	; (800b868 <SDRAM_demo+0x1cc>)
 800b7fc:	2191      	movs	r1, #145	; 0x91
 800b7fe:	2014      	movs	r0, #20
 800b800:	f7f7 fa80 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b804:	2303      	movs	r3, #3
 800b806:	4a0c      	ldr	r2, [pc, #48]	; (800b838 <SDRAM_demo+0x19c>)
 800b808:	21a0      	movs	r1, #160	; 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 800b80a:	2014      	movs	r0, #20
 800b80c:	f7f7 fa7a 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 800b810:	f7ff fc6c 	bl	800b0ec <CheckForUserInput>
 800b814:	2800      	cmp	r0, #0
 800b816:	d0fb      	beq.n	800b810 <SDRAM_demo+0x174>
}
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	bf00      	nop
 800b81c:	ff0000ff 	.word	0xff0000ff
 800b820:	20000074 	.word	0x20000074
 800b824:	080187d0 	.word	0x080187d0
 800b828:	20000084 	.word	0x20000084
 800b82c:	08018447 	.word	0x08018447
 800b830:	080187bf 	.word	0x080187bf
 800b834:	080187d6 	.word	0x080187d6
 800b838:	080187f5 	.word	0x080187f5
 800b83c:	20016aa0 	.word	0x20016aa0
 800b840:	a244250f 	.word	0xa244250f
 800b844:	a244260f 	.word	0xa244260f
 800b848:	c0116000 	.word	0xc0116000
 800b84c:	08018824 	.word	0x08018824
 800b850:	20016ea0 	.word	0x20016ea0
 800b854:	0801884c 	.word	0x0801884c
 800b858:	0801888a 	.word	0x0801888a
 800b85c:	08018809 	.word	0x08018809
 800b860:	0801883a 	.word	0x0801883a
 800b864:	08018861 	.word	0x08018861
 800b868:	08018872 	.word	0x08018872

0800b86c <SDRAM_DMA_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_DMA_demo (void)
{
 800b86c:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
static void SDRAM_DMA_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
 800b872:	f7f7 f937 	bl	8002ae4 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b876:	487a      	ldr	r0, [pc, #488]	; (800ba60 <SDRAM_DMA_demo+0x1f4>)
 800b878:	f7f7 f904 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800b87c:	f7f7 f8a8 	bl	80029d0 <BSP_LCD_GetXSize>
 800b880:	2100      	movs	r1, #0
 800b882:	b282      	uxth	r2, r0
 800b884:	2350      	movs	r3, #80	; 0x50
 800b886:	4608      	mov	r0, r1
 800b888:	f7f7 fc7c 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	f7f7 f8f8 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800b894:	4872      	ldr	r0, [pc, #456]	; (800ba60 <SDRAM_DMA_demo+0x1f4>)
 800b896:	f7f7 f901 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800b89a:	4872      	ldr	r0, [pc, #456]	; (800ba64 <SDRAM_DMA_demo+0x1f8>)
 800b89c:	f7f7 f90a 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM DMA", CENTER_MODE);
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4a70      	ldr	r2, [pc, #448]	; (800ba68 <SDRAM_DMA_demo+0x1fc>)
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	f7f7 fa2c 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800b8ac:	486f      	ldr	r0, [pc, #444]	; (800ba6c <SDRAM_DMA_demo+0x200>)
 800b8ae:	f7f7 f901 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4a6e      	ldr	r2, [pc, #440]	; (800ba70 <SDRAM_DMA_demo+0x204>)
 800b8b6:	211e      	movs	r1, #30
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f7f7 fa23 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 800b8be:	2301      	movs	r3, #1
 800b8c0:	4a6c      	ldr	r2, [pc, #432]	; (800ba74 <SDRAM_DMA_demo+0x208>)
 800b8c2:	212d      	movs	r1, #45	; 0x2d
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	f7f7 fa1d 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800b8ca:	4865      	ldr	r0, [pc, #404]	; (800ba60 <SDRAM_DMA_demo+0x1f4>)
 800b8cc:	f7f7 f8da 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800b8d0:	f7f7 f87e 	bl	80029d0 <BSP_LCD_GetXSize>
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	f7f7 f887 	bl	80029e8 <BSP_LCD_GetYSize>
 800b8da:	3864      	subs	r0, #100	; 0x64
 800b8dc:	f1a4 0214 	sub.w	r2, r4, #20
 800b8e0:	215a      	movs	r1, #90	; 0x5a
 800b8e2:	b283      	uxth	r3, r0
 800b8e4:	200a      	movs	r0, #10
 800b8e6:	b292      	uxth	r2, r2
 800b8e8:	f7f7 f974 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800b8ec:	f7f7 f870 	bl	80029d0 <BSP_LCD_GetXSize>
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	f7f7 f879 	bl	80029e8 <BSP_LCD_GetYSize>
 800b8f6:	3866      	subs	r0, #102	; 0x66
 800b8f8:	f1a4 0216 	sub.w	r2, r4, #22
 800b8fc:	215b      	movs	r1, #91	; 0x5b
 800b8fe:	b283      	uxth	r3, r0
 800b900:	200b      	movs	r0, #11
 800b902:	b292      	uxth	r2, r2
 800b904:	f7f7 f966 	bl	8002bd4 <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800b908:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b90c:	f7f7 f8ba 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	f7f7 f8c2 	bl	8002a9c <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800b918:	f7f8 fbcc 	bl	80040b4 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800b91c:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800b91e:	2800      	cmp	r0, #0
 800b920:	d07e      	beq.n	800ba20 <SDRAM_DMA_demo+0x1b4>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800b922:	4a55      	ldr	r2, [pc, #340]	; (800ba78 <SDRAM_DMA_demo+0x20c>)
 800b924:	2173      	movs	r1, #115	; 0x73
 800b926:	2014      	movs	r0, #20
 800b928:	f7f7 f9ec 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b92c:	2303      	movs	r3, #3
 800b92e:	4a53      	ldr	r2, [pc, #332]	; (800ba7c <SDRAM_DMA_demo+0x210>)
 800b930:	2182      	movs	r1, #130	; 0x82
 800b932:	4c53      	ldr	r4, [pc, #332]	; (800ba80 <SDRAM_DMA_demo+0x214>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800b934:	2014      	movs	r0, #20
 800b936:	f7f7 f9e5 	bl	8002d04 <BSP_LCD_DisplayStringAt>
{
 800b93a:	4b52      	ldr	r3, [pc, #328]	; (800ba84 <SDRAM_DMA_demo+0x218>)
 800b93c:	4622      	mov	r2, r4
 800b93e:	4625      	mov	r5, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 800b940:	4951      	ldr	r1, [pc, #324]	; (800ba88 <SDRAM_DMA_demo+0x21c>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800b942:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 800b946:	3301      	adds	r3, #1
 800b948:	428b      	cmp	r3, r1
 800b94a:	d1fa      	bne.n	800b942 <SDRAM_DMA_demo+0xd6>
  __ASM volatile ("dsb 0xF":::"memory");
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	2300      	movs	r3, #0
      SCB->DCCMVAC = op_addr;
 800b952:	4a4e      	ldr	r2, [pc, #312]	; (800ba8c <SDRAM_DMA_demo+0x220>)
 800b954:	1919      	adds	r1, r3, r4
    while (op_size > 0) {
 800b956:	3320      	adds	r3, #32
 800b958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SCB->DCCMVAC = op_addr;
 800b95c:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    while (op_size > 0) {
 800b960:	d1f8      	bne.n	800b954 <SDRAM_DMA_demo+0xe8>
 800b962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b966:	f3bf 8f6f 	isb	sy
  uwDMA_Transfer_Complete = 0;
 800b96a:	2300      	movs	r3, #0
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b96c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b970:	4943      	ldr	r1, [pc, #268]	; (800ba80 <SDRAM_DMA_demo+0x214>)
 800b972:	4847      	ldr	r0, [pc, #284]	; (800ba90 <SDRAM_DMA_demo+0x224>)
  uwDMA_Transfer_Complete = 0;
 800b974:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b978:	f7f8 fad0 	bl	8003f1c <BSP_SDRAM_WriteData_DMA>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 800b97c:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b97e:	2800      	cmp	r0, #0
 800b980:	d051      	beq.n	800ba26 <SDRAM_DMA_demo+0x1ba>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 800b982:	4a44      	ldr	r2, [pc, #272]	; (800ba94 <SDRAM_DMA_demo+0x228>)
 800b984:	2173      	movs	r1, #115	; 0x73
 800b986:	2014      	movs	r0, #20
 800b988:	f7f7 f9bc 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800b98c:	2303      	movs	r3, #3
 800b98e:	4a3b      	ldr	r2, [pc, #236]	; (800ba7c <SDRAM_DMA_demo+0x210>)
 800b990:	2182      	movs	r1, #130	; 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 800b992:	2014      	movs	r0, #20
 800b994:	f7f7 f9b6 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 800b998:	f8d5 3400 	ldr.w	r3, [r5, #1024]	; 0x400
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0fb      	beq.n	800b998 <SDRAM_DMA_demo+0x12c>
  BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM WRITE DMA : COMPLETED", LEFT_MODE);
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	4a3d      	ldr	r2, [pc, #244]	; (800ba98 <SDRAM_DMA_demo+0x22c>)
 800b9a4:	2182      	movs	r1, #130	; 0x82
 800b9a6:	2014      	movs	r0, #20
 800b9a8:	f7f7 f9ac 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  uwDMA_Transfer_Complete = 0;
 800b9ac:	2300      	movs	r3, #0
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b9ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9b2:	493a      	ldr	r1, [pc, #232]	; (800ba9c <SDRAM_DMA_demo+0x230>)
 800b9b4:	4836      	ldr	r0, [pc, #216]	; (800ba90 <SDRAM_DMA_demo+0x224>)
  uwDMA_Transfer_Complete = 0;
 800b9b6:	f8c5 3400 	str.w	r3, [r5, #1024]	; 0x400
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b9ba:	f7f8 fa93 	bl	8003ee4 <BSP_SDRAM_ReadData_DMA>
 800b9be:	4e37      	ldr	r6, [pc, #220]	; (800ba9c <SDRAM_DMA_demo+0x230>)
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 800b9c0:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 800b9c2:	b398      	cbz	r0, 800ba2c <SDRAM_DMA_demo+0x1c0>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 800b9c4:	4a36      	ldr	r2, [pc, #216]	; (800baa0 <SDRAM_DMA_demo+0x234>)
 800b9c6:	2191      	movs	r1, #145	; 0x91
 800b9c8:	2014      	movs	r0, #20
 800b9ca:	f7f7 f99b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM  Test Aborted", LEFT_MODE);
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	4a34      	ldr	r2, [pc, #208]	; (800baa4 <SDRAM_DMA_demo+0x238>)
 800b9d2:	21a0      	movs	r1, #160	; 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 800b9d4:	2014      	movs	r0, #20
 800b9d6:	f7f7 f995 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 800b9da:	f8d5 3400 	ldr.w	r3, [r5, #1024]	; 0x400
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0fb      	beq.n	800b9da <SDRAM_DMA_demo+0x16e>
  BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM READ  DMA : COMPLETED", LEFT_MODE);
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	4a30      	ldr	r2, [pc, #192]	; (800baa8 <SDRAM_DMA_demo+0x23c>)
 800b9e6:	21a0      	movs	r1, #160	; 0xa0
 800b9e8:	2014      	movs	r0, #20
 800b9ea:	f7f7 f98b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    uint32_t op_addr = (uint32_t)addr;
 800b9ee:	4a2b      	ldr	r2, [pc, #172]	; (800ba9c <SDRAM_DMA_demo+0x230>)
  __ASM volatile ("dsb 0xF":::"memory");
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	2300      	movs	r3, #0
      SCB->DCIMVAC = op_addr;
 800b9f6:	4925      	ldr	r1, [pc, #148]	; (800ba8c <SDRAM_DMA_demo+0x220>)
 800b9f8:	18f0      	adds	r0, r6, r3
    while (op_size > 0) {
 800b9fa:	3320      	adds	r3, #32
 800b9fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SCB->DCIMVAC = op_addr;
 800ba00:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
    while (op_size > 0) {
 800ba04:	d1f8      	bne.n	800b9f8 <SDRAM_DMA_demo+0x18c>
 800ba06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ba0a:	f3bf 8f6f 	isb	sy
}
 800ba0e:	f240 1301 	movw	r3, #257	; 0x101
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
  /* Invalidate Data Cache to get the updated content of the SRAM */
  SCB_InvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);

  while (BufferLength--)
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	b963      	cbnz	r3, 800ba32 <SDRAM_DMA_demo+0x1c6>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFULL", LEFT_MODE);
 800ba18:	2303      	movs	r3, #3
 800ba1a:	4a24      	ldr	r2, [pc, #144]	; (800baac <SDRAM_DMA_demo+0x240>)
 800ba1c:	21af      	movs	r1, #175	; 0xaf
 800ba1e:	e017      	b.n	800ba50 <SDRAM_DMA_demo+0x1e4>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800ba20:	4a23      	ldr	r2, [pc, #140]	; (800bab0 <SDRAM_DMA_demo+0x244>)
 800ba22:	2164      	movs	r1, #100	; 0x64
 800ba24:	e785      	b.n	800b932 <SDRAM_DMA_demo+0xc6>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 800ba26:	4a23      	ldr	r2, [pc, #140]	; (800bab4 <SDRAM_DMA_demo+0x248>)
 800ba28:	2173      	movs	r1, #115	; 0x73
 800ba2a:	e7b2      	b.n	800b992 <SDRAM_DMA_demo+0x126>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 800ba2c:	4a22      	ldr	r2, [pc, #136]	; (800bab8 <SDRAM_DMA_demo+0x24c>)
 800ba2e:	2191      	movs	r1, #145	; 0x91
 800ba30:	e7d0      	b.n	800b9d4 <SDRAM_DMA_demo+0x168>
  {
    if (*pBuffer1 != *pBuffer2)
 800ba32:	f854 0b04 	ldr.w	r0, [r4], #4
 800ba36:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba3a:	4288      	cmp	r0, r1
 800ba3c:	d0e9      	beq.n	800ba12 <SDRAM_DMA_demo+0x1a6>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 800ba3e:	2303      	movs	r3, #3
 800ba40:	4a1e      	ldr	r2, [pc, #120]	; (800babc <SDRAM_DMA_demo+0x250>)
 800ba42:	21af      	movs	r1, #175	; 0xaf
 800ba44:	2014      	movs	r0, #20
 800ba46:	f7f7 f95d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	4a0b      	ldr	r2, [pc, #44]	; (800ba7c <SDRAM_DMA_demo+0x210>)
 800ba4e:	21be      	movs	r1, #190	; 0xbe
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFULL", LEFT_MODE);
 800ba50:	2014      	movs	r0, #20
 800ba52:	f7f7 f957 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 800ba56:	f7ff fb49 	bl	800b0ec <CheckForUserInput>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d0fb      	beq.n	800ba56 <SDRAM_DMA_demo+0x1ea>
}
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}
 800ba60:	ff0000ff 	.word	0xff0000ff
 800ba64:	20000074 	.word	0x20000074
 800ba68:	0801889b 	.word	0x0801889b
 800ba6c:	20000084 	.word	0x20000084
 800ba70:	08018447 	.word	0x08018447
 800ba74:	080187bf 	.word	0x080187bf
 800ba78:	080187d6 	.word	0x080187d6
 800ba7c:	080187f5 	.word	0x080187f5
 800ba80:	200172a0 	.word	0x200172a0
 800ba84:	a244250f 	.word	0xa244250f
 800ba88:	a244260f 	.word	0xa244260f
 800ba8c:	e000ed00 	.word	0xe000ed00
 800ba90:	c0116000 	.word	0xc0116000
 800ba94:	080188a5 	.word	0x080188a5
 800ba98:	080188db 	.word	0x080188db
 800ba9c:	200176c0 	.word	0x200176c0
 800baa0:	080188f7 	.word	0x080188f7
 800baa4:	08018910 	.word	0x08018910
 800baa8:	08018940 	.word	0x08018940
 800baac:	0801895c 	.word	0x0801895c
 800bab0:	08018809 	.word	0x08018809
 800bab4:	080188bf 	.word	0x080188bf
 800bab8:	08018924 	.word	0x08018924
 800babc:	08018872 	.word	0x08018872

0800bac0 <HAL_SDRAM_DMA_XferCpltCallback>:
  uwDMA_Transfer_Complete = 1;
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <HAL_SDRAM_DMA_XferCpltCallback+0xc>)
 800bac2:	2201      	movs	r2, #1
 800bac4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200172a0 	.word	0x200172a0

0800bad0 <HAL_SDRAM_DMA_XferErrorCallback>:
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800bad0:	4805      	ldr	r0, [pc, #20]	; (800bae8 <HAL_SDRAM_DMA_XferErrorCallback+0x18>)
{
 800bad2:	b510      	push	{r4, lr}
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800bad4:	f7f6 ffd6 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 800bad8:	2303      	movs	r3, #3
 800bada:	4a04      	ldr	r2, [pc, #16]	; (800baec <HAL_SDRAM_DMA_XferErrorCallback+0x1c>)
 800badc:	21d7      	movs	r1, #215	; 0xd7
 800bade:	2014      	movs	r0, #20
}
 800bae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 800bae4:	f7f7 b90e 	b.w	8002d04 <BSP_LCD_DisplayStringAt>
 800bae8:	ffff0000 	.word	0xffff0000
 800baec:	0801897a 	.word	0x0801897a

0800baf0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800baf0:	4b0a      	ldr	r3, [pc, #40]	; (800bb1c <HAL_MspInit+0x2c>)
{
 800baf2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800baf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baf6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bafa:	641a      	str	r2, [r3, #64]	; 0x40
 800bafc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bafe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800bb02:	9200      	str	r2, [sp, #0]
 800bb04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44
 800bb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb18:	b002      	add	sp, #8
 800bb1a:	4770      	bx	lr
 800bb1c:	40023800 	.word	0x40023800

0800bb20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb22:	b0ad      	sub	sp, #180	; 0xb4
 800bb24:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb26:	2214      	movs	r2, #20
 800bb28:	2100      	movs	r1, #0
 800bb2a:	a806      	add	r0, sp, #24
 800bb2c:	f002 fcb2 	bl	800e494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb30:	2284      	movs	r2, #132	; 0x84
 800bb32:	2100      	movs	r1, #0
 800bb34:	a80b      	add	r0, sp, #44	; 0x2c
 800bb36:	f002 fcad 	bl	800e494 <memset>
  if(huart->Instance==USART1)
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	4a5e      	ldr	r2, [pc, #376]	; (800bcb8 <HAL_UART_MspInit+0x198>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d16f      	bne.n	800bc22 <HAL_UART_MspInit+0x102>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bb42:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb44:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bb46:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb48:	f7fa fd98 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 800bb4c:	b108      	cbz	r0, 800bb52 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800bb4e:	f7ff faf1 	bl	800b134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb52:	4b5a      	ldr	r3, [pc, #360]	; (800bcbc <HAL_UART_MspInit+0x19c>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb54:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb56:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bb58:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800bb5c:	a906      	add	r1, sp, #24
 800bb5e:	4858      	ldr	r0, [pc, #352]	; (800bcc0 <HAL_UART_MspInit+0x1a0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800bb60:	f042 0210 	orr.w	r2, r2, #16
 800bb64:	645a      	str	r2, [r3, #68]	; 0x44
 800bb66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb68:	f002 0210 	and.w	r2, r2, #16
 800bb6c:	9201      	str	r2, [sp, #4]
 800bb6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb72:	f042 0202 	orr.w	r2, r2, #2
 800bb76:	631a      	str	r2, [r3, #48]	; 0x30
 800bb78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb7a:	f002 0202 	and.w	r2, r2, #2
 800bb7e:	9202      	str	r2, [sp, #8]
 800bb80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb84:	f042 0201 	orr.w	r2, r2, #1
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
 800bb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bb8c:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb96:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb98:	e9cd 6608 	strd	r6, r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb9c:	e9cd 3706 	strd	r3, r7, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800bba0:	f7f9 f8e2 	bl	8004d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800bba4:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800bba8:	4846      	ldr	r0, [pc, #280]	; (800bcc4 <HAL_UART_MspInit+0x1a4>)
 800bbaa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bbac:	940a      	str	r4, [sp, #40]	; 0x28

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800bbae:	4c46      	ldr	r4, [pc, #280]	; (800bcc8 <HAL_UART_MspInit+0x1a8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbb0:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbb4:	e9cd 6608 	strd	r6, r6, [sp, #32]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800bbb8:	4f44      	ldr	r7, [pc, #272]	; (800bccc <HAL_UART_MspInit+0x1ac>)
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800bbba:	f7f9 f8d5 	bl	8004d68 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800bbbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800bbc2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800bbc4:	e9c4 7300 	strd	r7, r3, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbcc:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbd0:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800bbd4:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bbd8:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800bbdc:	f7f8 fcfc 	bl	80045d8 <HAL_DMA_Init>
 800bbe0:	b108      	cbz	r0, 800bbe6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800bbe2:	f7ff faa7 	bl	800b134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800bbe6:	4b3a      	ldr	r3, [pc, #232]	; (800bcd0 <HAL_UART_MspInit+0x1b0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800bbe8:	672c      	str	r4, [r5, #112]	; 0x70
 800bbea:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800bbec:	4c39      	ldr	r4, [pc, #228]	; (800bcd4 <HAL_UART_MspInit+0x1b4>)
 800bbee:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800bbf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbf4:	2240      	movs	r2, #64	; 0x40
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800bbf6:	6063      	str	r3, [r4, #4]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbf8:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800bbfa:	4620      	mov	r0, r4
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbfc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bc00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800bc04:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bc08:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bc0c:	e9c4 3308 	strd	r3, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800bc10:	f7f8 fce2 	bl	80045d8 <HAL_DMA_Init>
 800bc14:	b108      	cbz	r0, 800bc1a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800bc16:	f7ff fa8d 	bl	800b134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800bc1a:	66ec      	str	r4, [r5, #108]	; 0x6c
 800bc1c:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800bc1e:	b02d      	add	sp, #180	; 0xb4
 800bc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART6)
 800bc22:	4a2d      	ldr	r2, [pc, #180]	; (800bcd8 <HAL_UART_MspInit+0x1b8>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d1fa      	bne.n	800bc1e <HAL_UART_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800bc28:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc2c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800bc2e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc30:	f7fa fd24 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 800bc34:	b108      	cbz	r0, 800bc3a <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800bc36:	f7ff fa7d 	bl	800b134 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800bc3a:	4b20      	ldr	r3, [pc, #128]	; (800bcbc <HAL_UART_MspInit+0x19c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc3c:	21c0      	movs	r1, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc3e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc40:	4826      	ldr	r0, [pc, #152]	; (800bcdc <HAL_UART_MspInit+0x1bc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800bc42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800bc44:	4c26      	ldr	r4, [pc, #152]	; (800bce0 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800bc46:	f042 0220 	orr.w	r2, r2, #32
 800bc4a:	645a      	str	r2, [r3, #68]	; 0x44
 800bc4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc4e:	f002 0220 	and.w	r2, r2, #32
 800bc52:	9204      	str	r2, [sp, #16]
 800bc54:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc58:	f042 0204 	orr.w	r2, r2, #4
 800bc5c:	631a      	str	r2, [r3, #48]	; 0x30
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc60:	f003 0304 	and.w	r3, r3, #4
 800bc64:	9305      	str	r3, [sp, #20]
 800bc66:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc68:	2302      	movs	r3, #2
 800bc6a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc6e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc70:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc72:	e9cd 6308 	strd	r6, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800bc76:	2308      	movs	r3, #8
 800bc78:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bc7a:	f7f9 f875 	bl	8004d68 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800bc7e:	4819      	ldr	r0, [pc, #100]	; (800bce4 <HAL_UART_MspInit+0x1c4>)
 800bc80:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800bc84:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bc88:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800bc8c:	4620      	mov	r0, r4
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bc8e:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bc92:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800bc96:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bc9a:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800bc9e:	f7f8 fc9b 	bl	80045d8 <HAL_DMA_Init>
 800bca2:	b108      	cbz	r0, 800bca8 <HAL_UART_MspInit+0x188>
      Error_Handler();
 800bca4:	f7ff fa46 	bl	800b134 <Error_Handler>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800bca8:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <HAL_UART_MspInit+0x1c8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800bcaa:	672c      	str	r4, [r5, #112]	; 0x70
 800bcac:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800bcae:	4c0f      	ldr	r4, [pc, #60]	; (800bcec <HAL_UART_MspInit+0x1cc>)
 800bcb0:	6023      	str	r3, [r4, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800bcb2:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800bcb6:	e79d      	b.n	800bbf4 <HAL_UART_MspInit+0xd4>
 800bcb8:	40011000 	.word	0x40011000
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	40020400 	.word	0x40020400
 800bcc4:	40020000 	.word	0x40020000
 800bcc8:	2001522c 	.word	0x2001522c
 800bccc:	40026440 	.word	0x40026440
 800bcd0:	400264b8 	.word	0x400264b8
 800bcd4:	200151cc 	.word	0x200151cc
 800bcd8:	40011400 	.word	0x40011400
 800bcdc:	40020800 	.word	0x40020800
 800bce0:	2001516c 	.word	0x2001516c
 800bce4:	40026428 	.word	0x40026428
 800bce8:	400264a0 	.word	0x400264a0
 800bcec:	2001510c 	.word	0x2001510c

0800bcf0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800bcf2:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800bcf4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800bcf6:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800bcf8:	4b29      	ldr	r3, [pc, #164]	; (800bda0 <HAL_SDRAM_MspInit+0xb0>)
 800bcfa:	681e      	ldr	r6, [r3, #0]
 800bcfc:	2e00      	cmp	r6, #0
 800bcfe:	d14d      	bne.n	800bd9c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 800bd00:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd02:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd04:	2503      	movs	r5, #3
 800bd06:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800bd08:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bd0a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800bd0c:	4b25      	ldr	r3, [pc, #148]	; (800bda4 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bd0e:	4826      	ldr	r0, [pc, #152]	; (800bda8 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800bd10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	639a      	str	r2, [r3, #56]	; 0x38
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd22:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd26:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd2a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bd2e:	f7f9 f81b 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800bd32:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd36:	a901      	add	r1, sp, #4
 800bd38:	481c      	ldr	r0, [pc, #112]	; (800bdac <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd3a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd3c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd40:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd44:	f7f9 f810 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800bd48:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bd4c:	a901      	add	r1, sp, #4
 800bd4e:	4818      	ldr	r0, [pc, #96]	; (800bdb0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd50:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd52:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd56:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bd5a:	f7f9 f805 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800bd5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bd62:	a901      	add	r1, sp, #4
 800bd64:	4813      	ldr	r0, [pc, #76]	; (800bdb4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd66:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd68:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd6c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bd70:	f7f8 fffa 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800bd74:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bd76:	a901      	add	r1, sp, #4
 800bd78:	480f      	ldr	r0, [pc, #60]	; (800bdb8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd7a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd7c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd80:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bd84:	f7f8 fff0 	bl	8004d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800bd88:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800bd8a:	a901      	add	r1, sp, #4
 800bd8c:	480b      	ldr	r0, [pc, #44]	; (800bdbc <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bd8e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd90:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd94:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800bd98:	f7f8 ffe6 	bl	8004d68 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800bd9c:	b007      	add	sp, #28
 800bd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda0:	20017ac0 	.word	0x20017ac0
 800bda4:	40023800 	.word	0x40023800
 800bda8:	40021000 	.word	0x40021000
 800bdac:	40021800 	.word	0x40021800
 800bdb0:	40020c00 	.word	0x40020c00
 800bdb4:	40021400 	.word	0x40021400
 800bdb8:	40021c00 	.word	0x40021c00
 800bdbc:	40020800 	.word	0x40020800

0800bdc0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800bdc0:	4770      	bx	lr

0800bdc2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800bdc2:	e7fe      	b.n	800bdc2 <HardFault_Handler>

0800bdc4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800bdc4:	e7fe      	b.n	800bdc4 <MemManage_Handler>

0800bdc6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800bdc6:	e7fe      	b.n	800bdc6 <BusFault_Handler>

0800bdc8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800bdc8:	e7fe      	b.n	800bdc8 <UsageFault_Handler>

0800bdca <SVC_Handler>:
 800bdca:	4770      	bx	lr

0800bdcc <DebugMon_Handler>:
 800bdcc:	4770      	bx	lr

0800bdce <PendSV_Handler>:
 800bdce:	4770      	bx	lr

0800bdd0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800bdd0:	f7f8 bb04 	b.w	80043dc <HAL_IncTick>

0800bdd4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 800bdd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bdd8:	f7f9 b958 	b.w	800508c <HAL_GPIO_EXTI_IRQHandler>

0800bddc <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800bddc:	2004      	movs	r0, #4
 800bdde:	f7f9 b955 	b.w	800508c <HAL_GPIO_EXTI_IRQHandler>
	...

0800bde4 <EXTI15_10_IRQHandler>:
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 800bde4:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <EXTI15_10_IRQHandler+0x14>)
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	049b      	lsls	r3, r3, #18
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 800bdea:	bf4c      	ite	mi
 800bdec:	f44f 4020 	movmi.w	r0, #40960	; 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800bdf0:	f44f 6000 	movpl.w	r0, #2048	; 0x800
 800bdf4:	f7f9 b94a 	b.w	800508c <HAL_GPIO_EXTI_IRQHandler>
 800bdf8:	40013c00 	.word	0x40013c00

0800bdfc <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800bdfc:	4b01      	ldr	r3, [pc, #4]	; (800be04 <DMA2_Stream7_IRQHandler+0x8>)
 800bdfe:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800be00:	f7f8 bd16 	b.w	8004830 <HAL_DMA_IRQHandler>
 800be04:	200008c8 	.word	0x200008c8

0800be08 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
 800be08:	4b01      	ldr	r3, [pc, #4]	; (800be10 <DMA2_Stream0_IRQHandler+0x8>)
 800be0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be0c:	f7f8 bd10 	b.w	8004830 <HAL_DMA_IRQHandler>
 800be10:	20000eac 	.word	0x20000eac

0800be14 <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
 800be14:	e7fe      	b.n	800be14 <DMA2_Stream1_IRQHandler>
	...

0800be18 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800be18:	4b01      	ldr	r3, [pc, #4]	; (800be20 <DMA2_Stream4_IRQHandler+0x8>)
 800be1a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800be1c:	f7f8 bd08 	b.w	8004830 <HAL_DMA_IRQHandler>
 800be20:	20000844 	.word	0x20000844

0800be24 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
  BSP_CAMERA_IRQHandler();
 800be24:	e7fe      	b.n	800be24 <DCMI_IRQHandler>

0800be26 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  BSP_LCD_DMA2D_IRQHandler();
 800be26:	f7fd bf61 	b.w	8009cec <BSP_LCD_DMA2D_IRQHandler>
	...

0800be2c <Touchscreen_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
static void Touchscreen_DrawBackground (uint8_t state)
{
 800be2c:	b570      	push	{r4, r5, r6, lr}

  switch (state)
 800be2e:	2808      	cmp	r0, #8
 800be30:	f200 810e 	bhi.w	800c050 <Touchscreen_DrawBackground+0x224>
 800be34:	e8df f010 	tbh	[pc, r0, lsl #1]
 800be38:	008e0009 	.word	0x008e0009
 800be3c:	010c00ac 	.word	0x010c00ac
 800be40:	010c00cc 	.word	0x010c00cc
 800be44:	010c010c 	.word	0x010c010c
 800be48:	00ed      	.short	0x00ed
  {

    case 0:
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800be4a:	4882      	ldr	r0, [pc, #520]	; (800c054 <Touchscreen_DrawBackground+0x228>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 800be4c:	2405      	movs	r4, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800be4e:	f7f6 fe19 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 800be52:	f7f6 fdbd 	bl	80029d0 <BSP_LCD_GetXSize>
 800be56:	4605      	mov	r5, r0
 800be58:	f7f6 fdc6 	bl	80029e8 <BSP_LCD_GetYSize>
 800be5c:	385a      	subs	r0, #90	; 0x5a
 800be5e:	221e      	movs	r2, #30
 800be60:	b281      	uxth	r1, r0
 800be62:	fbb5 f5f4 	udiv	r5, r5, r4
 800be66:	b2a8      	uxth	r0, r5
 800be68:	f7f7 f9f0 	bl	800324c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800be6c:	487a      	ldr	r0, [pc, #488]	; (800c058 <Touchscreen_DrawBackground+0x22c>)
 800be6e:	f7f6 fe09 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 800be72:	f7f6 fdad 	bl	80029d0 <BSP_LCD_GetXSize>
 800be76:	4605      	mov	r5, r0
 800be78:	f7f6 fdb6 	bl	80029e8 <BSP_LCD_GetYSize>
 800be7c:	385a      	subs	r0, #90	; 0x5a
 800be7e:	006d      	lsls	r5, r5, #1
 800be80:	221e      	movs	r2, #30
 800be82:	b281      	uxth	r1, r0
 800be84:	fbb5 f5f4 	udiv	r5, r5, r4
 800be88:	b2a8      	uxth	r0, r5
 800be8a:	f7f7 f9df 	bl	800324c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800be8e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800be92:	f7f6 fdf7 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800be96:	f7f6 fd9b 	bl	80029d0 <BSP_LCD_GetXSize>
 800be9a:	4605      	mov	r5, r0
 800be9c:	f7f6 fda4 	bl	80029e8 <BSP_LCD_GetYSize>
 800bea0:	385a      	subs	r0, #90	; 0x5a
 800bea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bea6:	221e      	movs	r2, #30
 800bea8:	b281      	uxth	r1, r0
 800beaa:	fbb5 f5f4 	udiv	r5, r5, r4
 800beae:	b2a8      	uxth	r0, r5
 800beb0:	f7f7 f9cc 	bl	800324c <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800beb4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800beb8:	f7f6 fde4 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800bebc:	f7f6 fd88 	bl	80029d0 <BSP_LCD_GetXSize>
 800bec0:	4605      	mov	r5, r0
 800bec2:	f7f6 fd91 	bl	80029e8 <BSP_LCD_GetYSize>
 800bec6:	385a      	subs	r0, #90	; 0x5a
 800bec8:	00ad      	lsls	r5, r5, #2
 800beca:	221e      	movs	r2, #30
 800becc:	b281      	uxth	r1, r0
 800bece:	fbb5 f5f4 	udiv	r5, r5, r4
 800bed2:	b2a8      	uxth	r0, r5
 800bed4:	f7f7 f9ba 	bl	800324c <BSP_LCD_FillCircle>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800bed8:	f04f 30ff 	mov.w	r0, #4294967295
 800bedc:	f7f6 fdd2 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 800bee0:	f7f6 fd76 	bl	80029d0 <BSP_LCD_GetXSize>
 800bee4:	4605      	mov	r5, r0
 800bee6:	f7f6 fd7f 	bl	80029e8 <BSP_LCD_GetYSize>
 800beea:	385a      	subs	r0, #90	; 0x5a
 800beec:	221c      	movs	r2, #28
 800beee:	b281      	uxth	r1, r0
 800bef0:	fbb5 f5f4 	udiv	r5, r5, r4
 800bef4:	b2a8      	uxth	r0, r5
 800bef6:	f7f7 f9a9 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 800befa:	f7f6 fd69 	bl	80029d0 <BSP_LCD_GetXSize>
 800befe:	4605      	mov	r5, r0
 800bf00:	f7f6 fd72 	bl	80029e8 <BSP_LCD_GetYSize>
 800bf04:	385a      	subs	r0, #90	; 0x5a
 800bf06:	006d      	lsls	r5, r5, #1
 800bf08:	221c      	movs	r2, #28
 800bf0a:	b281      	uxth	r1, r0
 800bf0c:	fbb5 f5f4 	udiv	r5, r5, r4
 800bf10:	b2a8      	uxth	r0, r5
 800bf12:	f7f7 f99b 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 800bf16:	f7f6 fd5b 	bl	80029d0 <BSP_LCD_GetXSize>
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	f7f6 fd64 	bl	80029e8 <BSP_LCD_GetYSize>
 800bf20:	385a      	subs	r0, #90	; 0x5a
 800bf22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf26:	221c      	movs	r2, #28
 800bf28:	b281      	uxth	r1, r0
 800bf2a:	fbb5 f5f4 	udiv	r5, r5, r4
 800bf2e:	b2a8      	uxth	r0, r5
 800bf30:	f7f7 f98c 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 800bf34:	f7f6 fd4c 	bl	80029d0 <BSP_LCD_GetXSize>
 800bf38:	4605      	mov	r5, r0
 800bf3a:	f7f6 fd55 	bl	80029e8 <BSP_LCD_GetYSize>
 800bf3e:	385a      	subs	r0, #90	; 0x5a
 800bf40:	00ad      	lsls	r5, r5, #2
 800bf42:	fbb5 f4f4 	udiv	r4, r5, r4

    case 8:
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 800bf46:	b281      	uxth	r1, r0
 800bf48:	221c      	movs	r2, #28
 800bf4a:	b2a0      	uxth	r0, r4
      break;

  }
}
 800bf4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 800bf50:	f7f7 b97c 	b.w	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800bf54:	483f      	ldr	r0, [pc, #252]	; (800c054 <Touchscreen_DrawBackground+0x228>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 800bf56:	2605      	movs	r6, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800bf58:	f7f6 fd94 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 800bf5c:	f7f6 fd38 	bl	80029d0 <BSP_LCD_GetXSize>
 800bf60:	4605      	mov	r5, r0
 800bf62:	f7f6 fd41 	bl	80029e8 <BSP_LCD_GetYSize>
 800bf66:	385a      	subs	r0, #90	; 0x5a
 800bf68:	221e      	movs	r2, #30
 800bf6a:	b281      	uxth	r1, r0
 800bf6c:	fbb5 f5f6 	udiv	r5, r5, r6
 800bf70:	b2a8      	uxth	r0, r5
 800bf72:	f7f7 f96b 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7a:	f7f6 fd83 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 800bf7e:	f7f6 fd27 	bl	80029d0 <BSP_LCD_GetXSize>
 800bf82:	4604      	mov	r4, r0
 800bf84:	f7f6 fd30 	bl	80029e8 <BSP_LCD_GetYSize>
 800bf88:	385a      	subs	r0, #90	; 0x5a
 800bf8a:	fbb4 f4f6 	udiv	r4, r4, r6
 800bf8e:	e7da      	b.n	800bf46 <Touchscreen_DrawBackground+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800bf90:	4831      	ldr	r0, [pc, #196]	; (800c058 <Touchscreen_DrawBackground+0x22c>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 800bf92:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800bf94:	f7f6 fd76 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 800bf98:	f7f6 fd1a 	bl	80029d0 <BSP_LCD_GetXSize>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	f7f6 fd23 	bl	80029e8 <BSP_LCD_GetYSize>
 800bfa2:	385a      	subs	r0, #90	; 0x5a
 800bfa4:	0063      	lsls	r3, r4, #1
 800bfa6:	221e      	movs	r2, #30
 800bfa8:	b281      	uxth	r1, r0
 800bfaa:	fbb3 f3f5 	udiv	r3, r3, r5
 800bfae:	b298      	uxth	r0, r3
 800bfb0:	f7f7 f94c 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb8:	f7f6 fd64 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 800bfbc:	f7f6 fd08 	bl	80029d0 <BSP_LCD_GetXSize>
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	f7f6 fd11 	bl	80029e8 <BSP_LCD_GetYSize>
 800bfc6:	385a      	subs	r0, #90	; 0x5a
 800bfc8:	0064      	lsls	r4, r4, #1
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 800bfca:	fbb4 f4f5 	udiv	r4, r4, r5
 800bfce:	e7ba      	b.n	800bf46 <Touchscreen_DrawBackground+0x11a>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800bfd0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800bfd4:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800bfd6:	f7f6 fd55 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800bfda:	f7f6 fcf9 	bl	80029d0 <BSP_LCD_GetXSize>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	f7f6 fd02 	bl	80029e8 <BSP_LCD_GetYSize>
 800bfe4:	385a      	subs	r0, #90	; 0x5a
 800bfe6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800bfea:	221e      	movs	r2, #30
 800bfec:	b281      	uxth	r1, r0
 800bfee:	fbb4 f4f5 	udiv	r4, r4, r5
 800bff2:	b2a0      	uxth	r0, r4
 800bff4:	f7f7 f92a 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	f7f6 fd42 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 800c000:	f7f6 fce6 	bl	80029d0 <BSP_LCD_GetXSize>
 800c004:	4604      	mov	r4, r0
 800c006:	f7f6 fcef 	bl	80029e8 <BSP_LCD_GetYSize>
 800c00a:	385a      	subs	r0, #90	; 0x5a
 800c00c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c010:	e7db      	b.n	800bfca <Touchscreen_DrawBackground+0x19e>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800c012:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 800c016:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800c018:	f7f6 fd34 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 800c01c:	f7f6 fcd8 	bl	80029d0 <BSP_LCD_GetXSize>
 800c020:	4604      	mov	r4, r0
 800c022:	f7f6 fce1 	bl	80029e8 <BSP_LCD_GetYSize>
 800c026:	385a      	subs	r0, #90	; 0x5a
 800c028:	00a3      	lsls	r3, r4, #2
 800c02a:	221e      	movs	r2, #30
 800c02c:	b281      	uxth	r1, r0
 800c02e:	fbb3 f3f5 	udiv	r3, r3, r5
 800c032:	b298      	uxth	r0, r3
 800c034:	f7f7 f90a 	bl	800324c <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	f7f6 fd22 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 800c040:	f7f6 fcc6 	bl	80029d0 <BSP_LCD_GetXSize>
 800c044:	4604      	mov	r4, r0
 800c046:	f7f6 fccf 	bl	80029e8 <BSP_LCD_GetYSize>
 800c04a:	385a      	subs	r0, #90	; 0x5a
 800c04c:	00a4      	lsls	r4, r4, #2
 800c04e:	e7bc      	b.n	800bfca <Touchscreen_DrawBackground+0x19e>
}
 800c050:	bd70      	pop	{r4, r5, r6, pc}
 800c052:	bf00      	nop
 800c054:	ff0000ff 	.word	0xff0000ff
 800c058:	ffff0000 	.word	0xffff0000

0800c05c <Touchscreen_demo>:
{
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
{
 800c064:	b089      	sub	sp, #36	; 0x24
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800c066:	f7f6 fd3d 	bl	8002ae4 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c06a:	48cf      	ldr	r0, [pc, #828]	; (800c3a8 <Touchscreen_demo+0x34c>)
 800c06c:	f7f6 fd0a 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 800c070:	f7f6 fcae 	bl	80029d0 <BSP_LCD_GetXSize>
 800c074:	2100      	movs	r1, #0
 800c076:	b282      	uxth	r2, r0
 800c078:	2350      	movs	r3, #80	; 0x50
 800c07a:	4608      	mov	r0, r1
 800c07c:	f7f7 f882 	bl	8003184 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	f7f6 fcfe 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800c088:	48c7      	ldr	r0, [pc, #796]	; (800c3a8 <Touchscreen_demo+0x34c>)
 800c08a:	f7f6 fd07 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800c08e:	48c7      	ldr	r0, [pc, #796]	; (800c3ac <Touchscreen_demo+0x350>)
 800c090:	f7f6 fd10 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen", CENTER_MODE);
 800c094:	2100      	movs	r1, #0
 800c096:	2301      	movs	r3, #1
 800c098:	4ac5      	ldr	r2, [pc, #788]	; (800c3b0 <Touchscreen_demo+0x354>)
 800c09a:	4608      	mov	r0, r1
 800c09c:	f7f6 fe32 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800c0a0:	48c4      	ldr	r0, [pc, #784]	; (800c3b4 <Touchscreen_demo+0x358>)
 800c0a2:	f7f6 fd07 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4ac3      	ldr	r2, [pc, #780]	; (800c3b8 <Touchscreen_demo+0x35c>)
 800c0aa:	211e      	movs	r1, #30
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f7f6 fe29 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"fill the colored circles according to pressure applied", CENTER_MODE);
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	4ac1      	ldr	r2, [pc, #772]	; (800c3bc <Touchscreen_demo+0x360>)
 800c0b6:	212d      	movs	r1, #45	; 0x2d
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f7f6 fe23 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Up to 5 finger touch coordinates are displayed", CENTER_MODE);
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4abf      	ldr	r2, [pc, #764]	; (800c3c0 <Touchscreen_demo+0x364>)
 800c0c2:	213c      	movs	r1, #60	; 0x3c
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	f7f6 fe1d 	bl	8002d04 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c0ca:	48b7      	ldr	r0, [pc, #732]	; (800c3a8 <Touchscreen_demo+0x34c>)
 800c0cc:	f7f6 fcda 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 800c0d0:	f7f6 fc7e 	bl	80029d0 <BSP_LCD_GetXSize>
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	f7f6 fc87 	bl	80029e8 <BSP_LCD_GetYSize>
 800c0da:	3864      	subs	r0, #100	; 0x64
 800c0dc:	f1a4 0214 	sub.w	r2, r4, #20
 800c0e0:	215a      	movs	r1, #90	; 0x5a
 800c0e2:	b283      	uxth	r3, r0
 800c0e4:	200a      	movs	r0, #10
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	f7f6 fd74 	bl	8002bd4 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800c0ec:	f7f6 fc70 	bl	80029d0 <BSP_LCD_GetXSize>
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	f7f6 fc79 	bl	80029e8 <BSP_LCD_GetYSize>
 800c0f6:	3866      	subs	r0, #102	; 0x66
 800c0f8:	f1a4 0216 	sub.w	r2, r4, #22
 800c0fc:	215b      	movs	r1, #91	; 0x5b
 800c0fe:	b283      	uxth	r3, r0
 800c100:	200b      	movs	r0, #11
 800c102:	b292      	uxth	r2, r2
 800c104:	f7f6 fd66 	bl	8002bd4 <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800c108:	f7f6 fc62 	bl	80029d0 <BSP_LCD_GetXSize>
 800c10c:	4604      	mov	r4, r0
 800c10e:	f7f6 fc6b 	bl	80029e8 <BSP_LCD_GetYSize>
 800c112:	b281      	uxth	r1, r0
 800c114:	b2a0      	uxth	r0, r4
 800c116:	f7f8 f80b 	bl	8004130 <BSP_TS_Init>
  if (status != TS_OK)
 800c11a:	4681      	mov	r9, r0
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f000 813f 	beq.w	800c3a0 <Touchscreen_demo+0x344>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c122:	f04f 30ff 	mov.w	r0, #4294967295
 800c126:	f7f6 fcb9 	bl	8002a9c <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c12a:	48a6      	ldr	r0, [pc, #664]	; (800c3c4 <Touchscreen_demo+0x368>)
 800c12c:	f7f6 fcaa 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 800c130:	f7f6 fc5a 	bl	80029e8 <BSP_LCD_GetYSize>
 800c134:	385f      	subs	r0, #95	; 0x5f
 800c136:	2301      	movs	r3, #1
 800c138:	4aa3      	ldr	r2, [pc, #652]	; (800c3c8 <Touchscreen_demo+0x36c>)
 800c13a:	b281      	uxth	r1, r0
 800c13c:	2000      	movs	r0, #0
 800c13e:	f7f6 fde1 	bl	8002d04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 800c142:	f7f6 fc51 	bl	80029e8 <BSP_LCD_GetYSize>
 800c146:	3850      	subs	r0, #80	; 0x50
 800c148:	2301      	movs	r3, #1
 800c14a:	4aa0      	ldr	r2, [pc, #640]	; (800c3cc <Touchscreen_demo+0x370>)
 800c14c:	b281      	uxth	r1, r0
 800c14e:	2000      	movs	r0, #0
 800c150:	f7f6 fdd8 	bl	8002d04 <BSP_LCD_DisplayStringAt>
{
 800c154:	2700      	movs	r7, #0
      BSP_TS_GetState(&TS_State);
 800c156:	4d9e      	ldr	r5, [pc, #632]	; (800c3d0 <Touchscreen_demo+0x374>)
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 800c158:	f8df b28c 	ldr.w	fp, [pc, #652]	; 800c3e8 <Touchscreen_demo+0x38c>
{
 800c15c:	463e      	mov	r6, r7
    if (status == TS_OK)
 800c15e:	f1b9 0f00 	cmp.w	r9, #0
 800c162:	f040 8114 	bne.w	800c38e <Touchscreen_demo+0x332>
      BSP_TS_GetState(&TS_State);
 800c166:	489a      	ldr	r0, [pc, #616]	; (800c3d0 <Touchscreen_demo+0x374>)
 800c168:	f7f8 f82c 	bl	80041c4 <BSP_TS_GetState>
      if(TS_State.touchDetected)
 800c16c:	782b      	ldrb	r3, [r5, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 810d 	beq.w	800c38e <Touchscreen_demo+0x332>
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c174:	f04f 30ff 	mov.w	r0, #4294967295
        x = TS_State.touchX[0];
 800c178:	f8b5 8002 	ldrh.w	r8, [r5, #2]
        y = TS_State.touchY[0];
 800c17c:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c180:	f7f6 fc8c 	bl	8002a9c <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c184:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c188:	f7f6 fc7c 	bl	8002a84 <BSP_LCD_SetTextColor>
        sprintf((char*)text, "Nb touch detected = %d", TS_State.touchDetected);
 800c18c:	782a      	ldrb	r2, [r5, #0]
 800c18e:	4991      	ldr	r1, [pc, #580]	; (800c3d4 <Touchscreen_demo+0x378>)
 800c190:	4668      	mov	r0, sp
 800c192:	f002 fe3d 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt(15, BSP_LCD_GetYSize() - 40, (uint8_t *)&text, LEFT_MODE);
 800c196:	f7f6 fc27 	bl	80029e8 <BSP_LCD_GetYSize>
 800c19a:	3828      	subs	r0, #40	; 0x28
 800c19c:	2303      	movs	r3, #3
 800c19e:	466a      	mov	r2, sp
 800c1a0:	b281      	uxth	r1, r0
 800c1a2:	200f      	movs	r0, #15
 800c1a4:	f7f6 fdae 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 800c1a8:	4653      	mov	r3, sl
 800c1aa:	4642      	mov	r2, r8
 800c1ac:	4659      	mov	r1, fp
 800c1ae:	4668      	mov	r0, sp
 800c1b0:	f002 fe2e 	bl	800ee10 <siprintf>
                                BSP_LCD_GetYSize() - 25,
 800c1b4:	f7f6 fc18 	bl	80029e8 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt(15,
 800c1b8:	3819      	subs	r0, #25
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	466a      	mov	r2, sp
 800c1be:	b281      	uxth	r1, r0
 800c1c0:	200f      	movs	r0, #15
 800c1c2:	f7f6 fd9f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 2)  /* Display 2nd touch detected coordinates if applicable */
 800c1c6:	782b      	ldrb	r3, [r5, #0]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	f240 810f 	bls.w	800c3ec <Touchscreen_demo+0x390>
          sprintf((char*)text, "2[%d,%d]    ", TS_State.touchX[1], TS_State.touchY[1]);
 800c1ce:	89eb      	ldrh	r3, [r5, #14]
 800c1d0:	4668      	mov	r0, sp
 800c1d2:	88aa      	ldrh	r2, [r5, #4]
 800c1d4:	4980      	ldr	r1, [pc, #512]	; (800c3d8 <Touchscreen_demo+0x37c>)
 800c1d6:	f002 fe1b 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800c1da:	f7f6 fbf9 	bl	80029d0 <BSP_LCD_GetXSize>
 800c1de:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800c1e0:	f7f6 fc02 	bl	80029e8 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800c1e4:	2305      	movs	r3, #5
 800c1e6:	3c1e      	subs	r4, #30
 800c1e8:	3819      	subs	r0, #25
 800c1ea:	466a      	mov	r2, sp
 800c1ec:	b281      	uxth	r1, r0
 800c1ee:	fbb4 f4f3 	udiv	r4, r4, r3
 800c1f2:	340f      	adds	r4, #15
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	b2a0      	uxth	r0, r4
 800c1f8:	f7f6 fd84 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 3)  /* Display 3rd touch detected coordinates if applicable */
 800c1fc:	782b      	ldrb	r3, [r5, #0]
 800c1fe:	2b02      	cmp	r3, #2
 800c200:	f240 80f9 	bls.w	800c3f6 <Touchscreen_demo+0x39a>
          sprintf((char*)text, "3[%d,%d]    ", TS_State.touchX[2], TS_State.touchY[2]);
 800c204:	8a2b      	ldrh	r3, [r5, #16]
 800c206:	4668      	mov	r0, sp
 800c208:	88ea      	ldrh	r2, [r5, #6]
 800c20a:	4974      	ldr	r1, [pc, #464]	; (800c3dc <Touchscreen_demo+0x380>)
 800c20c:	f002 fe00 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800c210:	f7f6 fbde 	bl	80029d0 <BSP_LCD_GetXSize>
 800c214:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800c216:	f7f6 fbe7 	bl	80029e8 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800c21a:	2305      	movs	r3, #5
 800c21c:	3c1e      	subs	r4, #30
 800c21e:	3819      	subs	r0, #25
 800c220:	466a      	mov	r2, sp
 800c222:	0064      	lsls	r4, r4, #1
 800c224:	b281      	uxth	r1, r0
 800c226:	fbb4 f4f3 	udiv	r4, r4, r3
 800c22a:	340f      	adds	r4, #15
 800c22c:	2303      	movs	r3, #3
 800c22e:	b2a0      	uxth	r0, r4
 800c230:	f7f6 fd68 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 4)  /* Display 4th touch detected coordinates if applicable */
 800c234:	782b      	ldrb	r3, [r5, #0]
 800c236:	2b03      	cmp	r3, #3
 800c238:	f240 80e2 	bls.w	800c400 <Touchscreen_demo+0x3a4>
          sprintf((char*)text, "4[%d,%d]    ", TS_State.touchX[3], TS_State.touchY[3]);
 800c23c:	8a6b      	ldrh	r3, [r5, #18]
 800c23e:	4668      	mov	r0, sp
 800c240:	892a      	ldrh	r2, [r5, #8]
 800c242:	4967      	ldr	r1, [pc, #412]	; (800c3e0 <Touchscreen_demo+0x384>)
 800c244:	f002 fde4 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800c248:	f7f6 fbc2 	bl	80029d0 <BSP_LCD_GetXSize>
 800c24c:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800c24e:	f7f6 fbcb 	bl	80029e8 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800c252:	2305      	movs	r3, #5
 800c254:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c258:	3819      	subs	r0, #25
 800c25a:	466a      	mov	r2, sp
 800c25c:	3c5a      	subs	r4, #90	; 0x5a
 800c25e:	b281      	uxth	r1, r0
 800c260:	fbb4 f4f3 	udiv	r4, r4, r3
 800c264:	340f      	adds	r4, #15
 800c266:	2303      	movs	r3, #3
 800c268:	b2a0      	uxth	r0, r4
 800c26a:	f7f6 fd4b 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 5)  /* Display 5th touch detected coordinates if applicable */
 800c26e:	782b      	ldrb	r3, [r5, #0]
 800c270:	2b04      	cmp	r3, #4
 800c272:	f240 80ca 	bls.w	800c40a <Touchscreen_demo+0x3ae>
          sprintf((char*)text, "5[%d,%d]    ", TS_State.touchX[4], TS_State.touchY[4]);
 800c276:	8aab      	ldrh	r3, [r5, #20]
 800c278:	4668      	mov	r0, sp
 800c27a:	896a      	ldrh	r2, [r5, #10]
 800c27c:	4959      	ldr	r1, [pc, #356]	; (800c3e4 <Touchscreen_demo+0x388>)
 800c27e:	f002 fdc7 	bl	800ee10 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800c282:	f7f6 fba5 	bl	80029d0 <BSP_LCD_GetXSize>
 800c286:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800c288:	f7f6 fbae 	bl	80029e8 <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800c28c:	2305      	movs	r3, #5
 800c28e:	3c1e      	subs	r4, #30
 800c290:	3819      	subs	r0, #25
 800c292:	466a      	mov	r2, sp
 800c294:	00a4      	lsls	r4, r4, #2
 800c296:	b281      	uxth	r1, r0
 800c298:	fbb4 f4f3 	udiv	r4, r4, r3
 800c29c:	340f      	adds	r4, #15
 800c29e:	2303      	movs	r3, #3
 800c2a0:	b2a0      	uxth	r0, r4
 800c2a2:	f7f6 fd2f 	bl	8002d04 <BSP_LCD_DisplayStringAt>
        radius = TS_State.touchWeight[0]/3;
 800c2a6:	7dac      	ldrb	r4, [r5, #22]
        if (radius > CIRCLE_RADIUS)
 800c2a8:	2c5c      	cmp	r4, #92	; 0x5c
 800c2aa:	f200 80b3 	bhi.w	800c414 <Touchscreen_demo+0x3b8>
        else if (radius < 1)
 800c2ae:	2c02      	cmp	r4, #2
 800c2b0:	f240 80b2 	bls.w	800c418 <Touchscreen_demo+0x3bc>
        radius = TS_State.touchWeight[0]/3;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	fbb4 f4f3 	udiv	r4, r4, r3
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800c2ba:	f7f6 fb95 	bl	80029e8 <BSP_LCD_GetYSize>
 800c2be:	3878      	subs	r0, #120	; 0x78
 800c2c0:	4582      	cmp	sl, r0
 800c2c2:	d964      	bls.n	800c38e <Touchscreen_demo+0x332>
            (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 800c2c4:	f7f6 fb90 	bl	80029e8 <BSP_LCD_GetYSize>
 800c2c8:	383c      	subs	r0, #60	; 0x3c
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800c2ca:	4582      	cmp	sl, r0
 800c2cc:	d25f      	bcs.n	800c38e <Touchscreen_demo+0x332>
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800c2ce:	f04f 0a05 	mov.w	sl, #5
 800c2d2:	f7f6 fb7d 	bl	80029d0 <BSP_LCD_GetXSize>
 800c2d6:	fbb0 f0fa 	udiv	r0, r0, sl
 800c2da:	381e      	subs	r0, #30
 800c2dc:	4580      	cmp	r8, r0
 800c2de:	d90c      	bls.n	800c2fa <Touchscreen_demo+0x29e>
              (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 800c2e0:	f7f6 fb76 	bl	80029d0 <BSP_LCD_GetXSize>
 800c2e4:	fbb0 f0fa 	udiv	r0, r0, sl
 800c2e8:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800c2ea:	4580      	cmp	r8, r0
 800c2ec:	d205      	bcs.n	800c2fa <Touchscreen_demo+0x29e>
            if ((radius != radius_previous) || (state != 1))
 800c2ee:	42bc      	cmp	r4, r7
 800c2f0:	f040 8094 	bne.w	800c41c <Touchscreen_demo+0x3c0>
 800c2f4:	2e01      	cmp	r6, #1
 800c2f6:	f040 8093 	bne.w	800c420 <Touchscreen_demo+0x3c4>
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800c2fa:	f7f6 fb69 	bl	80029d0 <BSP_LCD_GetXSize>
 800c2fe:	f04f 0a05 	mov.w	sl, #5
 800c302:	0040      	lsls	r0, r0, #1
 800c304:	fbb0 f0fa 	udiv	r0, r0, sl
 800c308:	381e      	subs	r0, #30
 800c30a:	4580      	cmp	r8, r0
 800c30c:	d90d      	bls.n	800c32a <Touchscreen_demo+0x2ce>
              (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 800c30e:	f7f6 fb5f 	bl	80029d0 <BSP_LCD_GetXSize>
 800c312:	0040      	lsls	r0, r0, #1
 800c314:	fbb0 f0fa 	udiv	r0, r0, sl
 800c318:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800c31a:	4580      	cmp	r8, r0
 800c31c:	d205      	bcs.n	800c32a <Touchscreen_demo+0x2ce>
            if ((radius != radius_previous) || (state != 2))
 800c31e:	42bc      	cmp	r4, r7
 800c320:	f040 8095 	bne.w	800c44e <Touchscreen_demo+0x3f2>
 800c324:	2e02      	cmp	r6, #2
 800c326:	f040 8094 	bne.w	800c452 <Touchscreen_demo+0x3f6>
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800c32a:	f7f6 fb51 	bl	80029d0 <BSP_LCD_GetXSize>
 800c32e:	f04f 0a05 	mov.w	sl, #5
 800c332:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c336:	fbb0 f0fa 	udiv	r0, r0, sl
 800c33a:	381e      	subs	r0, #30
 800c33c:	4580      	cmp	r8, r0
 800c33e:	d90e      	bls.n	800c35e <Touchscreen_demo+0x302>
              (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 800c340:	f7f6 fb46 	bl	80029d0 <BSP_LCD_GetXSize>
 800c344:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800c348:	fbb0 f0fa 	udiv	r0, r0, sl
 800c34c:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800c34e:	4580      	cmp	r8, r0
 800c350:	d205      	bcs.n	800c35e <Touchscreen_demo+0x302>
            if ((radius != radius_previous) || (state != 4))
 800c352:	42bc      	cmp	r4, r7
 800c354:	f040 8095 	bne.w	800c482 <Touchscreen_demo+0x426>
 800c358:	2e04      	cmp	r6, #4
 800c35a:	f040 8094 	bne.w	800c486 <Touchscreen_demo+0x42a>
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800c35e:	f7f6 fb37 	bl	80029d0 <BSP_LCD_GetXSize>
 800c362:	f04f 0a05 	mov.w	sl, #5
 800c366:	0080      	lsls	r0, r0, #2
 800c368:	fbb0 f0fa 	udiv	r0, r0, sl
 800c36c:	381e      	subs	r0, #30
 800c36e:	4580      	cmp	r8, r0
 800c370:	d90d      	bls.n	800c38e <Touchscreen_demo+0x332>
              (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 800c372:	f7f6 fb2d 	bl	80029d0 <BSP_LCD_GetXSize>
 800c376:	0080      	lsls	r0, r0, #2
 800c378:	fbb0 f0fa 	udiv	r0, r0, sl
 800c37c:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800c37e:	4580      	cmp	r8, r0
 800c380:	d205      	bcs.n	800c38e <Touchscreen_demo+0x332>
            if ((radius != radius_previous) || (state != 8))
 800c382:	42bc      	cmp	r4, r7
 800c384:	f040 8099 	bne.w	800c4ba <Touchscreen_demo+0x45e>
 800c388:	2e08      	cmp	r6, #8
 800c38a:	f040 8098 	bne.w	800c4be <Touchscreen_demo+0x462>
    if (CheckForUserInput() > 0)
 800c38e:	f7fe fead 	bl	800b0ec <CheckForUserInput>
 800c392:	2800      	cmp	r0, #0
 800c394:	f040 80ac 	bne.w	800c4f0 <Touchscreen_demo+0x494>
    HAL_Delay(10);
 800c398:	200a      	movs	r0, #10
 800c39a:	f7f8 f831 	bl	8004400 <HAL_Delay>
    if (status == TS_OK)
 800c39e:	e6de      	b.n	800c15e <Touchscreen_demo+0x102>
    Touchscreen_DrawBackground(state);
 800c3a0:	f7ff fd44 	bl	800be2c <Touchscreen_DrawBackground>
 800c3a4:	e6d6      	b.n	800c154 <Touchscreen_demo+0xf8>
 800c3a6:	bf00      	nop
 800c3a8:	ff0000ff 	.word	0xff0000ff
 800c3ac:	20000074 	.word	0x20000074
 800c3b0:	08018984 	.word	0x08018984
 800c3b4:	20000084 	.word	0x20000084
 800c3b8:	08018990 	.word	0x08018990
 800c3bc:	080189ae 	.word	0x080189ae
 800c3c0:	080189e5 	.word	0x080189e5
 800c3c4:	ffff0000 	.word	0xffff0000
 800c3c8:	0801897e 	.word	0x0801897e
 800c3cc:	08017ff7 	.word	0x08017ff7
 800c3d0:	20017ac8 	.word	0x20017ac8
 800c3d4:	08018a14 	.word	0x08018a14
 800c3d8:	08018a38 	.word	0x08018a38
 800c3dc:	08018a54 	.word	0x08018a54
 800c3e0:	08018a61 	.word	0x08018a61
 800c3e4:	08018a6e 	.word	0x08018a6e
 800c3e8:	08018a2b 	.word	0x08018a2b
          sprintf((char*)text, "              ");
 800c3ec:	4942      	ldr	r1, [pc, #264]	; (800c4f8 <Touchscreen_demo+0x49c>)
 800c3ee:	4668      	mov	r0, sp
 800c3f0:	f002 fd2e 	bl	800ee50 <strcpy>
 800c3f4:	e6f1      	b.n	800c1da <Touchscreen_demo+0x17e>
          sprintf((char*)text, "              ");
 800c3f6:	4940      	ldr	r1, [pc, #256]	; (800c4f8 <Touchscreen_demo+0x49c>)
 800c3f8:	4668      	mov	r0, sp
 800c3fa:	f002 fd29 	bl	800ee50 <strcpy>
 800c3fe:	e707      	b.n	800c210 <Touchscreen_demo+0x1b4>
          sprintf((char*)text, "              ");
 800c400:	493d      	ldr	r1, [pc, #244]	; (800c4f8 <Touchscreen_demo+0x49c>)
 800c402:	4668      	mov	r0, sp
 800c404:	f002 fd24 	bl	800ee50 <strcpy>
 800c408:	e71e      	b.n	800c248 <Touchscreen_demo+0x1ec>
          sprintf((char*)text, "              ");
 800c40a:	493b      	ldr	r1, [pc, #236]	; (800c4f8 <Touchscreen_demo+0x49c>)
 800c40c:	4668      	mov	r0, sp
 800c40e:	f002 fd1f 	bl	800ee50 <strcpy>
 800c412:	e736      	b.n	800c282 <Touchscreen_demo+0x226>
          radius = CIRCLE_RADIUS;
 800c414:	241e      	movs	r4, #30
 800c416:	e750      	b.n	800c2ba <Touchscreen_demo+0x25e>
          radius = 1;
 800c418:	2401      	movs	r4, #1
 800c41a:	e74e      	b.n	800c2ba <Touchscreen_demo+0x25e>
              if (state != 1) /* Erase previous filled circle */
 800c41c:	2e01      	cmp	r6, #1
 800c41e:	d002      	beq.n	800c426 <Touchscreen_demo+0x3ca>
                Touchscreen_DrawBackground(state);
 800c420:	4630      	mov	r0, r6
 800c422:	f7ff fd03 	bl	800be2c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c426:	4835      	ldr	r0, [pc, #212]	; (800c4fc <Touchscreen_demo+0x4a0>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800c428:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800c42a:	f7f6 fb2b 	bl	8002a84 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800c42e:	f7f6 facf 	bl	80029d0 <BSP_LCD_GetXSize>
 800c432:	4606      	mov	r6, r0
 800c434:	f7f6 fad8 	bl	80029e8 <BSP_LCD_GetYSize>
 800c438:	2305      	movs	r3, #5
 800c43a:	385a      	subs	r0, #90	; 0x5a
 800c43c:	4622      	mov	r2, r4
 800c43e:	fbb6 f6f3 	udiv	r6, r6, r3
 800c442:	b281      	uxth	r1, r0
 800c444:	b2b0      	uxth	r0, r6
              state = 1;
 800c446:	2601      	movs	r6, #1
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800c448:	f7f6 ff00 	bl	800324c <BSP_LCD_FillCircle>
              state = 1;
 800c44c:	e755      	b.n	800c2fa <Touchscreen_demo+0x29e>
              if (state != 2) /* Erase previous filled circle */
 800c44e:	2e02      	cmp	r6, #2
 800c450:	d002      	beq.n	800c458 <Touchscreen_demo+0x3fc>
                Touchscreen_DrawBackground(state);
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff fcea 	bl	800be2c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c458:	4829      	ldr	r0, [pc, #164]	; (800c500 <Touchscreen_demo+0x4a4>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800c45a:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800c45c:	f7f6 fb12 	bl	8002a84 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800c460:	f7f6 fab6 	bl	80029d0 <BSP_LCD_GetXSize>
 800c464:	4606      	mov	r6, r0
 800c466:	f7f6 fabf 	bl	80029e8 <BSP_LCD_GetYSize>
 800c46a:	2305      	movs	r3, #5
 800c46c:	0076      	lsls	r6, r6, #1
 800c46e:	385a      	subs	r0, #90	; 0x5a
 800c470:	4622      	mov	r2, r4
 800c472:	b281      	uxth	r1, r0
 800c474:	fbb6 f6f3 	udiv	r6, r6, r3
 800c478:	b2b0      	uxth	r0, r6
              state = 2;
 800c47a:	2602      	movs	r6, #2
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800c47c:	f7f6 fee6 	bl	800324c <BSP_LCD_FillCircle>
              state = 2;
 800c480:	e753      	b.n	800c32a <Touchscreen_demo+0x2ce>
              if (state != 4) /* Erase previous filled circle */
 800c482:	2e04      	cmp	r6, #4
 800c484:	d002      	beq.n	800c48c <Touchscreen_demo+0x430>
                Touchscreen_DrawBackground(state);
 800c486:	4630      	mov	r0, r6
 800c488:	f7ff fcd0 	bl	800be2c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800c48c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800c490:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800c492:	f7f6 faf7 	bl	8002a84 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800c496:	f7f6 fa9b 	bl	80029d0 <BSP_LCD_GetXSize>
 800c49a:	4606      	mov	r6, r0
 800c49c:	f7f6 faa4 	bl	80029e8 <BSP_LCD_GetYSize>
 800c4a0:	2305      	movs	r3, #5
 800c4a2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800c4a6:	385a      	subs	r0, #90	; 0x5a
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	b281      	uxth	r1, r0
 800c4ac:	fbb6 f6f3 	udiv	r6, r6, r3
 800c4b0:	b2b0      	uxth	r0, r6
              state = 4;
 800c4b2:	2604      	movs	r6, #4
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800c4b4:	f7f6 feca 	bl	800324c <BSP_LCD_FillCircle>
              state = 4;
 800c4b8:	e751      	b.n	800c35e <Touchscreen_demo+0x302>
              if (state != 8) /* Erase previous filled circle */
 800c4ba:	2e08      	cmp	r6, #8
 800c4bc:	d002      	beq.n	800c4c4 <Touchscreen_demo+0x468>
                Touchscreen_DrawBackground(state);
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff fcb4 	bl	800be2c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800c4c4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800c4c8:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800c4ca:	f7f6 fadb 	bl	8002a84 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800c4ce:	f7f6 fa7f 	bl	80029d0 <BSP_LCD_GetXSize>
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	f7f6 fa88 	bl	80029e8 <BSP_LCD_GetYSize>
 800c4d8:	2305      	movs	r3, #5
 800c4da:	00b6      	lsls	r6, r6, #2
 800c4dc:	385a      	subs	r0, #90	; 0x5a
 800c4de:	4622      	mov	r2, r4
 800c4e0:	b281      	uxth	r1, r0
 800c4e2:	fbb6 f6f3 	udiv	r6, r6, r3
 800c4e6:	b2b0      	uxth	r0, r6
              state = 8;
 800c4e8:	2608      	movs	r6, #8
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800c4ea:	f7f6 feaf 	bl	800324c <BSP_LCD_FillCircle>
              state = 8;
 800c4ee:	e74e      	b.n	800c38e <Touchscreen_demo+0x332>
}
 800c4f0:	b009      	add	sp, #36	; 0x24
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	bf00      	nop
 800c4f8:	08018a45 	.word	0x08018a45
 800c4fc:	ff0000ff 	.word	0xff0000ff
 800c500:	ffff0000 	.word	0xffff0000
 800c504:	00000000 	.word	0x00000000

0800c508 <DCT_Init>:
 *
 * @param      *S    points to an instance of the floating-point DCT structure.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t DCT_Init(DCT_InstanceTypeDef *S)
{
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t status;
  uint32_t n_filters = S->NumFilters;
 800c50c:	6803      	ldr	r3, [r0, #0]
  uint32_t n_inputs = S->NumInputs;
 800c50e:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800c512:	ed2d 8b02 	vpush	{d8}
  float64_t normalizer;

  uint32_t shift;

  /* RemoveDCTZero only implemented for DCT Type-III non-normalized with COS tables */
  if (S->RemoveDCTZero != 0)
 800c516:	e9d0 4b03 	ldrd	r4, fp, [r0, #12]
{
 800c51a:	b085      	sub	sp, #20
  uint32_t n_filters = S->NumFilters;
 800c51c:	9301      	str	r3, [sp, #4]
  {
    if (S->Type != DCT_TYPE_III)
 800c51e:	7a03      	ldrb	r3, [r0, #8]
  if (S->RemoveDCTZero != 0)
 800c520:	b364      	cbz	r4, 800c57c <DCT_Init+0x74>
    if (S->Type != DCT_TYPE_III)
 800c522:	2b04      	cmp	r3, #4
 800c524:	f040 81c4 	bne.w	800c8b0 <DCT_Init+0x3a8>
    {
      status = -1;
      return status;
    }
    shift = 1;
 800c528:	2401      	movs	r4, #1
 800c52a:	9b01      	ldr	r3, [sp, #4]

    case DCT_TYPE_III:
      for (uint32_t i = 0; i < n_filters; i++)
      {
        sample = M_PI * (i + shift + 0.5) / n_inputs;
        for (uint32_t j = 0; j < n_inputs; j++)
 800c52c:	f04f 0800 	mov.w	r8, #0
 800c530:	4423      	add	r3, r4
 800c532:	4699      	mov	r9, r3
      for (uint32_t i = 0; i < n_filters; i++)
 800c534:	45a1      	cmp	r9, r4
 800c536:	d06d      	beq.n	800c614 <DCT_Init+0x10c>
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 800c538:	4620      	mov	r0, r4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c53a:	2500      	movs	r5, #0
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 800c53c:	f7f4 f862 	bl	8000604 <__aeabi_ui2d>
 800c540:	2200      	movs	r2, #0
 800c542:	4bdf      	ldr	r3, [pc, #892]	; (800c8c0 <DCT_Init+0x3b8>)
 800c544:	f7f3 ff22 	bl	800038c <__adddf3>
 800c548:	a3db      	add	r3, pc, #876	; (adr r3, 800c8b8 <DCT_Init+0x3b0>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f4 f8d3 	bl	80006f8 <__aeabi_dmul>
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	4650      	mov	r0, sl
 800c558:	f7f4 f854 	bl	8000604 <__aeabi_ui2d>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4630      	mov	r0, r6
 800c562:	4639      	mov	r1, r7
 800c564:	eb0b 0688 	add.w	r6, fp, r8, lsl #2
 800c568:	f7f4 f9f0 	bl	800094c <__aeabi_ddiv>
 800c56c:	ec41 0b18 	vmov	d8, r0, r1
        for (uint32_t j = 0; j < n_inputs; j++)
 800c570:	4555      	cmp	r5, sl
 800c572:	f040 8120 	bne.w	800c7b6 <DCT_Init+0x2ae>
      for (uint32_t i = 0; i < n_filters; i++)
 800c576:	3401      	adds	r4, #1
 800c578:	44d0      	add	r8, sl
 800c57a:	e7db      	b.n	800c534 <DCT_Init+0x2c>
  switch (S->Type)
 800c57c:	3b01      	subs	r3, #1
 800c57e:	2b04      	cmp	r3, #4
 800c580:	f200 8196 	bhi.w	800c8b0 <DCT_Init+0x3a8>
 800c584:	a201      	add	r2, pc, #4	; (adr r2, 800c58c <DCT_Init+0x84>)
 800c586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58a:	bf00      	nop
 800c58c:	0800c621 	.word	0x0800c621
 800c590:	0800c62f 	.word	0x0800c62f
 800c594:	0800c715 	.word	0x0800c715
 800c598:	0800c52b 	.word	0x0800c52b
 800c59c:	0800c7e7 	.word	0x0800c7e7
          sample = M_PI * (j + 0.5) / n_inputs;
 800c5a0:	4620      	mov	r0, r4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c5a2:	3401      	adds	r4, #1
          sample = M_PI * (j + 0.5) / n_inputs;
 800c5a4:	f7f4 f82e 	bl	8000604 <__aeabi_ui2d>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4bc5      	ldr	r3, [pc, #788]	; (800c8c0 <DCT_Init+0x3b8>)
 800c5ac:	f7f3 feee 	bl	800038c <__adddf3>
 800c5b0:	a3c1      	add	r3, pc, #772	; (adr r3, 800c8b8 <DCT_Init+0x3b0>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f7f4 f89f 	bl	80006f8 <__aeabi_dmul>
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	460f      	mov	r7, r1
 800c5be:	4650      	mov	r0, sl
 800c5c0:	f7f4 f820 	bl	8000604 <__aeabi_ui2d>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f7f4 f9be 	bl	800094c <__aeabi_ddiv>
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	f7f4 f815 	bl	8000604 <__aeabi_ui2d>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	f7f4 f889 	bl	80006f8 <__aeabi_dmul>
 800c5e6:	ec41 0b10 	vmov	d0, r0, r1
 800c5ea:	f006 f989 	bl	8012900 <cos>
 800c5ee:	ee10 0a10 	vmov	r0, s0
 800c5f2:	ec53 2b10 	vmov	r2, r3, d0
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	f7f3 fec8 	bl	800038c <__adddf3>
 800c5fc:	f7f4 fb74 	bl	8000ce8 <__aeabi_d2f>
 800c600:	f849 0b04 	str.w	r0, [r9], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c604:	4554      	cmp	r4, sl
 800c606:	d1cb      	bne.n	800c5a0 <DCT_Init+0x98>
      for (uint32_t i = 0; i < n_filters; i++)
 800c608:	f108 0801 	add.w	r8, r8, #1
 800c60c:	4455      	add	r5, sl
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	4598      	cmp	r8, r3
 800c612:	d108      	bne.n	800c626 <DCT_Init+0x11e>
      status = 0;
 800c614:	2000      	movs	r0, #0
      status = -1;
      break;
  }

  return status;
}
 800c616:	b005      	add	sp, #20
 800c618:	ecbd 8b02 	vpop	{d8}
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (S->Type)
 800c620:	2500      	movs	r5, #0
 800c622:	46a8      	mov	r8, r5
 800c624:	e7f3      	b.n	800c60e <DCT_Init+0x106>
 800c626:	eb0b 0985 	add.w	r9, fp, r5, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 800c62a:	2400      	movs	r4, #0
 800c62c:	e7ea      	b.n	800c604 <DCT_Init+0xfc>
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 800c62e:	ea4f 048a 	mov.w	r4, sl, lsl #2
      for (uint32_t i = 0; i < n_inputs; i++)
 800c632:	465d      	mov	r5, fp
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 800c634:	4620      	mov	r0, r4
 800c636:	445c      	add	r4, fp
 800c638:	f7f3 ffe4 	bl	8000604 <__aeabi_ui2d>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	2000      	movs	r0, #0
 800c642:	49a0      	ldr	r1, [pc, #640]	; (800c8c4 <DCT_Init+0x3bc>)
 800c644:	f7f4 f982 	bl	800094c <__aeabi_ddiv>
 800c648:	ec41 0b10 	vmov	d0, r0, r1
 800c64c:	f006 f9ac 	bl	80129a8 <sqrt>
 800c650:	ee10 0a10 	vmov	r0, s0
 800c654:	ec53 2b10 	vmov	r2, r3, d0
 800c658:	4619      	mov	r1, r3
 800c65a:	f7f3 fe97 	bl	800038c <__adddf3>
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
      for (uint32_t i = 0; i < n_inputs; i++)
 800c662:	42a5      	cmp	r5, r4
 800c664:	d119      	bne.n	800c69a <DCT_Init+0x192>
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c666:	ea4f 004a 	mov.w	r0, sl, lsl #1
  uint32_t n_inputs = S->NumInputs;
 800c66a:	4656      	mov	r6, sl
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c66c:	f7f3 ffca 	bl	8000604 <__aeabi_ui2d>
      for (uint32_t i = 1; i < n_filters; i++)
 800c670:	2501      	movs	r5, #1
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c672:	ec41 0b10 	vmov	d0, r0, r1
 800c676:	f006 f997 	bl	80129a8 <sqrt>
 800c67a:	2000      	movs	r0, #0
 800c67c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c680:	ec53 2b10 	vmov	r2, r3, d0
 800c684:	f7f4 f962 	bl	800094c <__aeabi_ddiv>
 800c688:	ec41 0b18 	vmov	d8, r0, r1
      for (uint32_t i = 1; i < n_filters; i++)
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	429d      	cmp	r5, r3
 800c690:	d2c0      	bcs.n	800c614 <DCT_Init+0x10c>
 800c692:	eb0b 0786 	add.w	r7, fp, r6, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 800c696:	2400      	movs	r4, #0
 800c698:	e037      	b.n	800c70a <DCT_Init+0x202>
        M[i] = normalizer;
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f4 fb23 	bl	8000ce8 <__aeabi_d2f>
 800c6a2:	f845 0b04 	str.w	r0, [r5], #4
      for (uint32_t i = 0; i < n_inputs; i++)
 800c6a6:	e7dc      	b.n	800c662 <DCT_Init+0x15a>
          sample = M_PI * (j + 0.5) / n_inputs;
 800c6a8:	4620      	mov	r0, r4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c6aa:	3401      	adds	r4, #1
          sample = M_PI * (j + 0.5) / n_inputs;
 800c6ac:	f7f3 ffaa 	bl	8000604 <__aeabi_ui2d>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	4b83      	ldr	r3, [pc, #524]	; (800c8c0 <DCT_Init+0x3b8>)
 800c6b4:	f7f3 fe6a 	bl	800038c <__adddf3>
 800c6b8:	a37f      	add	r3, pc, #508	; (adr r3, 800c8b8 <DCT_Init+0x3b0>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f4 f81b 	bl	80006f8 <__aeabi_dmul>
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	4650      	mov	r0, sl
 800c6c8:	f7f3 ff9c 	bl	8000604 <__aeabi_ui2d>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f4 f93a 	bl	800094c <__aeabi_ddiv>
 800c6d8:	4680      	mov	r8, r0
 800c6da:	4689      	mov	r9, r1
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7f3 ff91 	bl	8000604 <__aeabi_ui2d>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f4 f805 	bl	80006f8 <__aeabi_dmul>
 800c6ee:	ec41 0b10 	vmov	d0, r0, r1
 800c6f2:	f006 f905 	bl	8012900 <cos>
 800c6f6:	ec53 2b18 	vmov	r2, r3, d8
 800c6fa:	ec51 0b10 	vmov	r0, r1, d0
 800c6fe:	f7f3 fffb 	bl	80006f8 <__aeabi_dmul>
 800c702:	f7f4 faf1 	bl	8000ce8 <__aeabi_d2f>
 800c706:	f847 0b04 	str.w	r0, [r7], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c70a:	4554      	cmp	r4, sl
 800c70c:	d1cc      	bne.n	800c6a8 <DCT_Init+0x1a0>
      for (uint32_t i = 1; i < n_filters; i++)
 800c70e:	3501      	adds	r5, #1
 800c710:	4456      	add	r6, sl
 800c712:	e7bb      	b.n	800c68c <DCT_Init+0x184>
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c714:	ea4f 004a 	mov.w	r0, sl, lsl #1
      for (uint32_t i = 0; i < n_filters; i++)
 800c718:	2500      	movs	r5, #0
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c71a:	f7f3 ff73 	bl	8000604 <__aeabi_ui2d>
      for (uint32_t i = 0; i < n_filters; i++)
 800c71e:	462e      	mov	r6, r5
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800c720:	ec41 0b10 	vmov	d0, r0, r1
 800c724:	f006 f940 	bl	80129a8 <sqrt>
 800c728:	2000      	movs	r0, #0
 800c72a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c72e:	ec53 2b10 	vmov	r2, r3, d0
 800c732:	f7f4 f90b 	bl	800094c <__aeabi_ddiv>
 800c736:	ec41 0b18 	vmov	d8, r0, r1
      for (uint32_t i = 0; i < n_filters; i++)
 800c73a:	9b01      	ldr	r3, [sp, #4]
 800c73c:	429e      	cmp	r6, r3
 800c73e:	f43f af69 	beq.w	800c614 <DCT_Init+0x10c>
 800c742:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
        for (uint32_t j = 0; j < n_inputs; j++)
 800c746:	2400      	movs	r4, #0
 800c748:	e030      	b.n	800c7ac <DCT_Init+0x2a4>
          sample = M_PI * (j + 0.5) / n_inputs;
 800c74a:	4620      	mov	r0, r4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c74c:	3401      	adds	r4, #1
          sample = M_PI * (j + 0.5) / n_inputs;
 800c74e:	f7f3 ff59 	bl	8000604 <__aeabi_ui2d>
 800c752:	2200      	movs	r2, #0
 800c754:	4b5a      	ldr	r3, [pc, #360]	; (800c8c0 <DCT_Init+0x3b8>)
 800c756:	f7f3 fe19 	bl	800038c <__adddf3>
 800c75a:	a357      	add	r3, pc, #348	; (adr r3, 800c8b8 <DCT_Init+0x3b0>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	f7f3 ffca 	bl	80006f8 <__aeabi_dmul>
 800c764:	4680      	mov	r8, r0
 800c766:	4689      	mov	r9, r1
 800c768:	4650      	mov	r0, sl
 800c76a:	f7f3 ff4b 	bl	8000604 <__aeabi_ui2d>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4640      	mov	r0, r8
 800c774:	4649      	mov	r1, r9
 800c776:	f7f4 f8e9 	bl	800094c <__aeabi_ddiv>
 800c77a:	4680      	mov	r8, r0
 800c77c:	4689      	mov	r9, r1
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800c77e:	4630      	mov	r0, r6
 800c780:	f7f3 ff40 	bl	8000604 <__aeabi_ui2d>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f3 ffb4 	bl	80006f8 <__aeabi_dmul>
 800c790:	ec41 0b10 	vmov	d0, r0, r1
 800c794:	f006 f8b4 	bl	8012900 <cos>
 800c798:	ec53 2b18 	vmov	r2, r3, d8
 800c79c:	ec51 0b10 	vmov	r0, r1, d0
 800c7a0:	f7f3 ffaa 	bl	80006f8 <__aeabi_dmul>
 800c7a4:	f7f4 faa0 	bl	8000ce8 <__aeabi_d2f>
 800c7a8:	f847 0b04 	str.w	r0, [r7], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c7ac:	4554      	cmp	r4, sl
 800c7ae:	d1cc      	bne.n	800c74a <DCT_Init+0x242>
      for (uint32_t i = 0; i < n_filters; i++)
 800c7b0:	3601      	adds	r6, #1
 800c7b2:	4455      	add	r5, sl
 800c7b4:	e7c1      	b.n	800c73a <DCT_Init+0x232>
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 800c7b6:	4628      	mov	r0, r5
        for (uint32_t j = 0; j < n_inputs; j++)
 800c7b8:	3501      	adds	r5, #1
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 800c7ba:	f7f3 ff23 	bl	8000604 <__aeabi_ui2d>
 800c7be:	ec53 2b18 	vmov	r2, r3, d8
 800c7c2:	f7f3 ff99 	bl	80006f8 <__aeabi_dmul>
 800c7c6:	ec41 0b10 	vmov	d0, r0, r1
 800c7ca:	f006 f899 	bl	8012900 <cos>
 800c7ce:	ee10 0a10 	vmov	r0, s0
 800c7d2:	ec53 2b10 	vmov	r2, r3, d0
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	f7f3 fdd8 	bl	800038c <__adddf3>
 800c7dc:	f7f4 fa84 	bl	8000ce8 <__aeabi_d2f>
 800c7e0:	f846 0b04 	str.w	r0, [r6], #4
        for (uint32_t j = 0; j < n_inputs; j++)
 800c7e4:	e6c4      	b.n	800c570 <DCT_Init+0x68>
      normalizer = 1.0 / sqrt(n_inputs);
 800c7e6:	4650      	mov	r0, sl
 800c7e8:	eb0b 088a 	add.w	r8, fp, sl, lsl #2
 800c7ec:	f7f3 ff0a 	bl	8000604 <__aeabi_ui2d>
      for (uint32_t i = 0; i < n_inputs; i++)
 800c7f0:	465d      	mov	r5, fp
      normalizer = 1.0 / sqrt(n_inputs);
 800c7f2:	ec41 0b10 	vmov	d0, r0, r1
 800c7f6:	ec41 0b18 	vmov	d8, r0, r1
 800c7fa:	f006 f8d5 	bl	80129a8 <sqrt>
 800c7fe:	2000      	movs	r0, #0
 800c800:	4930      	ldr	r1, [pc, #192]	; (800c8c4 <DCT_Init+0x3bc>)
 800c802:	ec53 2b10 	vmov	r2, r3, d0
 800c806:	f7f4 f8a1 	bl	800094c <__aeabi_ddiv>
 800c80a:	4606      	mov	r6, r0
 800c80c:	460f      	mov	r7, r1
      for (uint32_t i = 0; i < n_inputs; i++)
 800c80e:	4545      	cmp	r5, r8
 800c810:	d118      	bne.n	800c844 <DCT_Init+0x33c>
      normalizer = sqrt(2.0 / n_inputs);
 800c812:	2000      	movs	r0, #0
 800c814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      for (uint32_t i = 0; i < n_filters; i++)
 800c818:	f04f 0800 	mov.w	r8, #0
 800c81c:	f10b 0b04 	add.w	fp, fp, #4
      normalizer = sqrt(2.0 / n_inputs);
 800c820:	ec53 2b18 	vmov	r2, r3, d8
 800c824:	f7f4 f892 	bl	800094c <__aeabi_ddiv>
 800c828:	ec41 0b10 	vmov	d0, r0, r1
 800c82c:	f006 f8bc 	bl	80129a8 <sqrt>
 800c830:	ed8d 0b02 	vstr	d0, [sp, #8]
      for (uint32_t i = 0; i < n_filters; i++)
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	429c      	cmp	r4, r3
 800c838:	f43f aeec 	beq.w	800c614 <DCT_Init+0x10c>
 800c83c:	eb0b 0988 	add.w	r9, fp, r8, lsl #2
        for (uint32_t j = 1; j < n_inputs; j++)
 800c840:	2501      	movs	r5, #1
 800c842:	e030      	b.n	800c8a6 <DCT_Init+0x39e>
        M[i] = normalizer;
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f4 fa4e 	bl	8000ce8 <__aeabi_d2f>
 800c84c:	f845 0b04 	str.w	r0, [r5], #4
      for (uint32_t i = 0; i < n_inputs; i++)
 800c850:	e7dd      	b.n	800c80e <DCT_Init+0x306>
          sample = M_PI * (i + 0.5) / n_inputs;
 800c852:	4620      	mov	r0, r4
 800c854:	f7f3 fed6 	bl	8000604 <__aeabi_ui2d>
 800c858:	2200      	movs	r2, #0
 800c85a:	4b19      	ldr	r3, [pc, #100]	; (800c8c0 <DCT_Init+0x3b8>)
 800c85c:	f7f3 fd96 	bl	800038c <__adddf3>
 800c860:	a315      	add	r3, pc, #84	; (adr r3, 800c8b8 <DCT_Init+0x3b0>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 ff47 	bl	80006f8 <__aeabi_dmul>
 800c86a:	ec53 2b18 	vmov	r2, r3, d8
 800c86e:	f7f4 f86d 	bl	800094c <__aeabi_ddiv>
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 800c876:	4628      	mov	r0, r5
 800c878:	f7f3 fec4 	bl	8000604 <__aeabi_ui2d>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4630      	mov	r0, r6
 800c882:	4639      	mov	r1, r7
        for (uint32_t j = 1; j < n_inputs; j++)
 800c884:	3501      	adds	r5, #1
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 800c886:	f7f3 ff37 	bl	80006f8 <__aeabi_dmul>
 800c88a:	ec41 0b10 	vmov	d0, r0, r1
 800c88e:	f006 f837 	bl	8012900 <cos>
 800c892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c896:	ec51 0b10 	vmov	r0, r1, d0
 800c89a:	f7f3 ff2d 	bl	80006f8 <__aeabi_dmul>
 800c89e:	f7f4 fa23 	bl	8000ce8 <__aeabi_d2f>
 800c8a2:	f849 0b04 	str.w	r0, [r9], #4
        for (uint32_t j = 1; j < n_inputs; j++)
 800c8a6:	4555      	cmp	r5, sl
 800c8a8:	d3d3      	bcc.n	800c852 <DCT_Init+0x34a>
      for (uint32_t i = 0; i < n_filters; i++)
 800c8aa:	3401      	adds	r4, #1
 800c8ac:	44d0      	add	r8, sl
 800c8ae:	e7c1      	b.n	800c834 <DCT_Init+0x32c>
  switch (S->Type)
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	e6af      	b.n	800c616 <DCT_Init+0x10e>
 800c8b6:	bf00      	nop
 800c8b8:	54442d18 	.word	0x54442d18
 800c8bc:	400921fb 	.word	0x400921fb
 800c8c0:	3fe00000 	.word	0x3fe00000
 800c8c4:	3ff00000 	.word	0x3ff00000

0800c8c8 <DCT>:
 * @param      *pIn  points to state buffer.
 * @param      *pOut points to the output buffer.
 * @return none.
 */
void DCT(DCT_InstanceTypeDef *S, float32_t *pIn, float32_t *pOut)
{
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum;
  uint32_t n_inputs = S->NumInputs;
  uint32_t n_filters = S->NumFilters;

#ifndef USE_NAIVE_DCT
  float32_t *cosFact = S->pDCTCoefs;
 800c8ca:	6903      	ldr	r3, [r0, #16]
  uint32_t n_filters = S->NumFilters;
 800c8cc:	e9d0 4500 	ldrd	r4, r5, [r0]
#else
  float32_t normalizer;
#endif /* USE_NAIVE_DCT */

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 800c8d0:	7a00      	ldrb	r0, [r0, #8]
 800c8d2:	3801      	subs	r0, #1
 800c8d4:	2804      	cmp	r0, #4
 800c8d6:	d852      	bhi.n	800c97e <DCT+0xb6>
 800c8d8:	e8df f000 	tbb	[pc, r0]
 800c8dc:	03192b48 	.word	0x03192b48
 800c8e0:	89          	.byte	0x89
 800c8e1:	00          	.byte	0x00
 800c8e2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] + 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 800c8ec:	42a2      	cmp	r2, r4
 800c8ee:	d046      	beq.n	800c97e <DCT+0xb6>
      {
        sum = 0.0f;
        row = k * n_inputs;
        for (uint32_t n = 1; n < n_inputs; n++)
 800c8f0:	1d0e      	adds	r6, r1, #4
 800c8f2:	461f      	mov	r7, r3
 800c8f4:	2001      	movs	r0, #1
        sum = 0.0f;
 800c8f6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800ca30 <DCT+0x168>
        for (uint32_t n = 1; n < n_inputs; n++)
 800c8fa:	42a8      	cmp	r0, r5
 800c8fc:	d36f      	bcc.n	800c9de <DCT+0x116>
        {
          // sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
          sum += pIn[n] * cosFact[row + n];
        }
        pOut[k] = pIn[0] + sum;
 800c8fe:	edd1 7a00 	vldr	s15, [r1]
 800c902:	4463      	add	r3, ip
 800c904:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c908:	ece2 7a01 	vstmia	r2!, {s15}
      for (uint32_t k = 0; k < n_filters; k++)
 800c90c:	e7ee      	b.n	800c8ec <DCT+0x24>
 800c90e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
  switch (S->Type)
 800c912:	2000      	movs	r0, #0
 800c914:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
        pOut[k] = 0.0f;
 800c918:	f04f 0e00 	mov.w	lr, #0
      for (uint32_t k = 0; k < n_filters; k++)
 800c91c:	42a2      	cmp	r2, r4
 800c91e:	d02e      	beq.n	800c97e <DCT+0xb6>
        pOut[k] = 0.0f;
 800c920:	eb03 0780 	add.w	r7, r3, r0, lsl #2
        for (uint32_t n = 0; n < n_inputs; n++)
 800c924:	460e      	mov	r6, r1
        pOut[k] = 0.0f;
 800c926:	f842 eb04 	str.w	lr, [r2], #4
        for (uint32_t n = 0; n < n_inputs; n++)
 800c92a:	4566      	cmp	r6, ip
 800c92c:	d14c      	bne.n	800c9c8 <DCT+0x100>
      for (uint32_t k = 0; k < n_filters; k++)
 800c92e:	4428      	add	r0, r5
 800c930:	e7f4      	b.n	800c91c <DCT+0x54>
      sum = 0.0f;
 800c932:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ca30 <DCT+0x168>
 800c936:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
  switch (S->Type)
 800c93a:	4608      	mov	r0, r1
 800c93c:	eef0 6a67 	vmov.f32	s13, s15
      for (uint32_t n = 0; n < n_inputs; n++)
 800c940:	4560      	cmp	r0, ip
 800c942:	d131      	bne.n	800c9a8 <DCT+0xe0>
      pOut[0] = cosFact[0] * sum;
 800c944:	ed93 7a00 	vldr	s14, [r3]
  uint32_t n_inputs = S->NumInputs;
 800c948:	462e      	mov	r6, r5
      for (uint32_t k = 1; k < n_filters; k++)
 800c94a:	2001      	movs	r0, #1
      pOut[0] = cosFact[0] * sum;
 800c94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c950:	ece2 7a01 	vstmia	r2!, {s15}
      for (uint32_t k = 1; k < n_filters; k++)
 800c954:	42a0      	cmp	r0, r4
 800c956:	d212      	bcs.n	800c97e <DCT+0xb6>
        pOut[k] = 0.0f;
 800c958:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
        for (uint32_t n = 0; n < n_inputs; n++)
 800c95c:	460f      	mov	r7, r1
        pOut[k] = 0.0f;
 800c95e:	ece2 6a01 	vstmia	r2!, {s13}
        for (uint32_t n = 0; n < n_inputs; n++)
 800c962:	4567      	cmp	r7, ip
 800c964:	d125      	bne.n	800c9b2 <DCT+0xea>
      for (uint32_t k = 1; k < n_filters; k++)
 800c966:	3001      	adds	r0, #1
 800c968:	442e      	add	r6, r5
 800c96a:	e7f3      	b.n	800c954 <DCT+0x8c>
 800c96c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
  switch (S->Type)
 800c970:	2000      	movs	r0, #0
 800c972:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
        pOut[k] = 0.0f;
 800c976:	f04f 0e00 	mov.w	lr, #0
      for (uint32_t k = 0; k < n_filters; k++)
 800c97a:	42a2      	cmp	r2, r4
 800c97c:	d100      	bne.n	800c980 <DCT+0xb8>
      break;

    default:
      break;
  }
}
 800c97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pOut[k] = 0.0f;
 800c980:	eb03 0780 	add.w	r7, r3, r0, lsl #2
        for (uint32_t n = 0; n < n_inputs; n++)
 800c984:	460e      	mov	r6, r1
        pOut[k] = 0.0f;
 800c986:	f842 eb04 	str.w	lr, [r2], #4
        for (uint32_t n = 0; n < n_inputs; n++)
 800c98a:	45b4      	cmp	ip, r6
 800c98c:	d101      	bne.n	800c992 <DCT+0xca>
      for (uint32_t k = 0; k < n_filters; k++)
 800c98e:	4428      	add	r0, r5
 800c990:	e7f3      	b.n	800c97a <DCT+0xb2>
          pOut[k] += pIn[n] * cosFact[row + n];
 800c992:	ecf6 6a01 	vldmia	r6!, {s13}
 800c996:	ecb7 7a01 	vldmia	r7!, {s14}
 800c99a:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c99e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9a2:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 800c9a6:	e7f0      	b.n	800c98a <DCT+0xc2>
        sum += pIn[n];
 800c9a8:	ecb0 7a01 	vldmia	r0!, {s14}
 800c9ac:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (uint32_t n = 0; n < n_inputs; n++)
 800c9b0:	e7c6      	b.n	800c940 <DCT+0x78>
          pOut[k] += pIn[n] * cosFact[row + n];
 800c9b2:	ecb7 6a01 	vldmia	r7!, {s12}
 800c9b6:	ecbe 7a01 	vldmia	lr!, {s14}
 800c9ba:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c9be:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c9c2:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 800c9c6:	e7cc      	b.n	800c962 <DCT+0x9a>
          pOut[k] += pIn[n] * cosFact[row + n];
 800c9c8:	ecf6 6a01 	vldmia	r6!, {s13}
 800c9cc:	ecb7 7a01 	vldmia	r7!, {s14}
 800c9d0:	ed52 7a01 	vldr	s15, [r2, #-4]
 800c9d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c9d8:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (uint32_t n = 0; n < n_inputs; n++)
 800c9dc:	e7a5      	b.n	800c92a <DCT+0x62>
          sum += pIn[n] * cosFact[row + n];
 800c9de:	ecf6 6a01 	vldmia	r6!, {s13}
        for (uint32_t n = 1; n < n_inputs; n++)
 800c9e2:	3001      	adds	r0, #1
          sum += pIn[n] * cosFact[row + n];
 800c9e4:	ecf7 7a01 	vldmia	r7!, {s15}
 800c9e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
        for (uint32_t n = 1; n < n_inputs; n++)
 800c9ec:	e785      	b.n	800c8fa <DCT+0x32>
      sum = pIn[0] * cosFact[0];
 800c9ee:	edd1 7a00 	vldr	s15, [r1]
 800c9f2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800c9f6:	ecb3 7a01 	vldmia	r3!, {s14}
 800c9fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800c9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
      for (uint32_t k = 0; k < n_filters; k++)
 800ca02:	42a2      	cmp	r2, r4
 800ca04:	d0bb      	beq.n	800c97e <DCT+0xb6>
        pOut[k] = sum;
 800ca06:	1d0e      	adds	r6, r1, #4
        for (uint32_t n = 1; n < n_inputs; n++)
 800ca08:	461f      	mov	r7, r3
 800ca0a:	2001      	movs	r0, #1
        pOut[k] = sum;
 800ca0c:	ece2 7a01 	vstmia	r2!, {s15}
        for (uint32_t n = 1; n < n_inputs; n++)
 800ca10:	42a8      	cmp	r0, r5
 800ca12:	d301      	bcc.n	800ca18 <DCT+0x150>
      for (uint32_t k = 0; k < n_filters; k++)
 800ca14:	4463      	add	r3, ip
 800ca16:	e7f4      	b.n	800ca02 <DCT+0x13a>
          pOut[k] += pIn[n] * cosFact[row + n];
 800ca18:	ecb6 6a01 	vldmia	r6!, {s12}
        for (uint32_t n = 1; n < n_inputs; n++)
 800ca1c:	3001      	adds	r0, #1
          pOut[k] += pIn[n] * cosFact[row + n];
 800ca1e:	ecf7 6a01 	vldmia	r7!, {s13}
 800ca22:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ca26:	eea6 7a26 	vfma.f32	s14, s12, s13
 800ca2a:	ed02 7a01 	vstr	s14, [r2, #-4]
        for (uint32_t n = 1; n < n_inputs; n++)
 800ca2e:	e7ef      	b.n	800ca10 <DCT+0x148>
 800ca30:	00000000 	.word	0x00000000

0800ca34 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t frame_len = S->FrameLen;
  uint32_t n_fft = S->FFTLen;
 800ca38:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
{
 800ca3c:	460f      	mov	r7, r1
  float32_t *scratch_buffer = S->pScratch;
 800ca3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 800ca42:	4605      	mov	r5, r0
 800ca44:	4614      	mov	r4, r2
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800ca46:	464b      	mov	r3, r9
 800ca48:	460a      	mov	r2, r1
 800ca4a:	6881      	ldr	r1, [r0, #8]
 800ca4c:	4638      	mov	r0, r7
{
 800ca4e:	ed2d 8b02 	vpush	{d8}
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800ca52:	f001 f9ab 	bl	800ddac <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800ca56:	eba6 0209 	sub.w	r2, r6, r9
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	eb07 0089 	add.w	r0, r7, r9, lsl #2
 800ca60:	f001 fd18 	bl	800e494 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 800ca64:	2300      	movs	r3, #0
 800ca66:	4639      	mov	r1, r7
 800ca68:	4642      	mov	r2, r8
 800ca6a:	6828      	ldr	r0, [r5, #0]

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
  last_energy = scratch_buffer[1] * scratch_buffer[1];
  pOutCol[0] = first_energy;
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800ca6c:	0876      	lsrs	r6, r6, #1
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 800ca6e:	f000 fce1 	bl	800d434 <arm_rfft_fast_f32>
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800ca72:	ed98 7a00 	vldr	s14, [r8]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 800ca76:	edd8 7a01 	vldr	s15, [r8, #4]
  pOutCol[0] = first_energy;
 800ca7a:	4627      	mov	r7, r4
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800ca7c:	ee27 7a07 	vmul.f32	s14, s14, s14
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800ca80:	1e72      	subs	r2, r6, #1
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 800ca82:	ee27 8aa7 	vmul.f32	s16, s15, s15
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800ca86:	f108 0008 	add.w	r0, r8, #8
  pOutCol[0] = first_energy;
 800ca8a:	eca7 7a01 	vstmia	r7!, {s14}
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800ca8e:	4639      	mov	r1, r7
 800ca90:	f001 f934 	bl	800dcfc <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 800ca94:	00b1      	lsls	r1, r6, #2
 800ca96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ca9a:	ed86 8a00 	vstr	s16, [r6]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 800ca9e:	792b      	ldrb	r3, [r5, #4]
 800caa0:	b973      	cbnz	r3, 800cac0 <SpectrogramColumn+0x8c>
 800caa2:	440f      	add	r7, r1
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800caa4:	2500      	movs	r5, #0
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 800caa6:	ecb4 0a01 	vldmia	r4!, {s0}
 800caaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	db09      	blt.n	800cac8 <SpectrogramColumn+0x94>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800cab4:	f006 f836 	bl	8012b24 <sqrtf>
 800cab8:	ed04 0a01 	vstr	s0, [r4, #-4]
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800cabc:	42bc      	cmp	r4, r7
 800cabe:	d1f2      	bne.n	800caa6 <SpectrogramColumn+0x72>
    }
  }
}
 800cac0:	ecbd 8b02 	vpop	{d8}
 800cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800cac8:	f844 5c04 	str.w	r5, [r4, #-4]
      return (ARM_MATH_ARGUMENT_ERROR);
 800cacc:	e7f6      	b.n	800cabc <SpectrogramColumn+0x88>

0800cace <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800cace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800cad0:	6803      	ldr	r3, [r0, #0]
{
 800cad2:	4607      	mov	r7, r0
 800cad4:	4614      	mov	r4, r2
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800cad6:	685a      	ldr	r2, [r3, #4]
{
 800cad8:	ed2d 8b02 	vpush	{d8}
  float32_t top_dB = S->TopdB;
 800cadc:	ed90 8a03 	vldr	s16, [r0, #12]
  float32_t ref = S->Ref;
 800cae0:	edd0 8a02 	vldr	s17, [r0, #8]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 800cae4:	6818      	ldr	r0, [r3, #0]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800cae6:	6916      	ldr	r6, [r2, #16]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 800cae8:	6985      	ldr	r5, [r0, #24]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 800caea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800caee:	462a      	mov	r2, r5
 800caf0:	f7ff ffa0 	bl	800ca34 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	4629      	mov	r1, r5
 800caf8:	4622      	mov	r2, r4
 800cafa:	6858      	ldr	r0, [r3, #4]
 800cafc:	4625      	mov	r5, r4
 800cafe:	f000 f993 	bl	800ce28 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 800cb02:	4623      	mov	r3, r4
 800cb04:	42b3      	cmp	r3, r6
 800cb06:	d10f      	bne.n	800cb28 <LogMelSpectrogramColumn+0x5a>
 800cb08:	4623      	mov	r3, r4
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
    if (pOutCol[i] <= 0.0f) {
      pOutCol[i] = FLT_MIN;
 800cb0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  for (uint32_t i = 0; i < n_mels; i++) {
 800cb0e:	42b3      	cmp	r3, r6
 800cb10:	d111      	bne.n	800cb36 <LogMelSpectrogramColumn+0x68>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 800cb12:	793b      	ldrb	r3, [r7, #4]
 800cb14:	b34b      	cbz	r3, 800cb6a <LogMelSpectrogramColumn+0x9c>
    }
  }
  else
  {
    /* Convert power spectrogram to log scale */
    for (uint32_t i = 0; i < n_mels; i++) {
 800cb16:	42b5      	cmp	r5, r6
 800cb18:	d024      	beq.n	800cb64 <LogMelSpectrogramColumn+0x96>
      pOutCol[i] = logf(pOutCol[i]);
 800cb1a:	ed95 0a00 	vldr	s0, [r5]
 800cb1e:	f005 ffa5 	bl	8012a6c <logf>
 800cb22:	eca5 0a01 	vstmia	r5!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 800cb26:	e7f6      	b.n	800cb16 <LogMelSpectrogramColumn+0x48>
    pOutCol[i] /= ref;
 800cb28:	ed93 7a00 	vldr	s14, [r3]
 800cb2c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cb30:	ece3 7a01 	vstmia	r3!, {s15}
  for (uint32_t i = 0; i < n_mels; i++) {
 800cb34:	e7e6      	b.n	800cb04 <LogMelSpectrogramColumn+0x36>
    if (pOutCol[i] <= 0.0f) {
 800cb36:	edd3 7a00 	vldr	s15, [r3]
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      pOutCol[i] = FLT_MIN;
 800cb44:	bf98      	it	ls
 800cb46:	f843 2c04 	strls.w	r2, [r3, #-4]
  for (uint32_t i = 0; i < n_mels; i++) {
 800cb4a:	e7e0      	b.n	800cb0e <LogMelSpectrogramColumn+0x40>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800cb4c:	ed94 0a00 	vldr	s0, [r4]
 800cb50:	f005 ffba 	bl	8012ac8 <log10f>
 800cb54:	ee20 0a28 	vmul.f32	s0, s0, s17
 800cb58:	eca4 0a01 	vstmia	r4!, {s0}
    for (uint32_t i = 0; i < n_mels; i++) {
 800cb5c:	42b4      	cmp	r4, r6
 800cb5e:	d1f5      	bne.n	800cb4c <LogMelSpectrogramColumn+0x7e>
    for (uint32_t i = 0; i < n_mels; i++) {
 800cb60:	42b5      	cmp	r5, r6
 800cb62:	d105      	bne.n	800cb70 <LogMelSpectrogramColumn+0xa2>
    }
  }

}
 800cb64:	ecbd 8b02 	vpop	{d8}
 800cb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800cb6a:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 800cb6e:	e7f5      	b.n	800cb5c <LogMelSpectrogramColumn+0x8e>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 800cb70:	eef1 7a48 	vneg.f32	s15, s16
 800cb74:	ed95 7a00 	vldr	s14, [r5]
 800cb78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb80:	bf58      	it	pl
 800cb82:	eef0 7a47 	vmovpl.f32	s15, s14
 800cb86:	ece5 7a01 	vstmia	r5!, {s15}
    for (uint32_t i = 0; i < n_mels; i++) {
 800cb8a:	e7e9      	b.n	800cb60 <LogMelSpectrogramColumn+0x92>

0800cb8c <MfccColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output MFCC spectrogram column.
 * @return     None
 */
void MfccColumn(MfccTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800cb8c:	b570      	push	{r4, r5, r6, lr}
  float32_t *tmp_buffer = S->pScratch;
 800cb8e:	68c6      	ldr	r6, [r0, #12]
{
 800cb90:	4604      	mov	r4, r0
 800cb92:	4615      	mov	r5, r2

  LogMelSpectrogramColumn(S->LogMelConf, pInSignal, tmp_buffer);
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	4632      	mov	r2, r6
 800cb98:	f7ff ff99 	bl	800cace <LogMelSpectrogramColumn>

  /* DCT for computing MFCCs from spectrogram slice. */
  DCT(S->pDCT, tmp_buffer, pOutCol);
 800cb9c:	462a      	mov	r2, r5
 800cb9e:	4631      	mov	r1, r6
 800cba0:	6860      	ldr	r0, [r4, #4]
}
 800cba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  DCT(S->pDCT, tmp_buffer, pOutCol);
 800cba6:	f7ff be8f 	b.w	800c8c8 <DCT>
	...

0800cbac <InverseMelScale>:
  }
}

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800cbac:	eeb0 7a40 	vmov.f32	s14, s0
 800cbb0:	b508      	push	{r3, lr}
  if (type != MEL_HTK) {
 800cbb2:	b1e0      	cbz	r0, 800cbee <InverseMelScale+0x42>
    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region

    if (mel_freq >= min_log_mel)
 800cbb4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800cc08 <InverseMelScale+0x5c>
 800cbb8:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800cbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc0:	da08      	bge.n	800cbd4 <InverseMelScale+0x28>
    float freq = f_min + f_sp * mel_freq;
 800cbc2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800cc0c <InverseMelScale+0x60>
 800cbc6:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cc10 <InverseMelScale+0x64>
 800cbca:	eee7 7a26 	vfma.f32	s15, s14, s13
 800cbce:	eeb0 0a67 	vmov.f32	s0, s15
    return freq;
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
  }
}
 800cbd2:	bd08      	pop	{r3, pc}
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800cbd4:	ee37 7a40 	vsub.f32	s14, s14, s0
 800cbd8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cc14 <InverseMelScale+0x68>
 800cbdc:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cbe0:	f005 ff0e 	bl	8012a00 <expf>
 800cbe4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800cc18 <InverseMelScale+0x6c>
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800cbe8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cbec:	e7f1      	b.n	800cbd2 <InverseMelScale+0x26>
 800cbee:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800cc1c <InverseMelScale+0x70>
 800cbf2:	ee87 0a00 	vdiv.f32	s0, s14, s0
 800cbf6:	f005 ff03 	bl	8012a00 <expf>
 800cbfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cbfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc02:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cc20 <InverseMelScale+0x74>
 800cc06:	e7ef      	b.n	800cbe8 <InverseMelScale+0x3c>
 800cc08:	41700001 	.word	0x41700001
 800cc0c:	42855555 	.word	0x42855555
 800cc10:	00000000 	.word	0x00000000
 800cc14:	3d8ccdbb 	.word	0x3d8ccdbb
 800cc18:	447a0000 	.word	0x447a0000
 800cc1c:	448ce000 	.word	0x448ce000
 800cc20:	442f0000 	.word	0x442f0000

0800cc24 <MelScale>:
{
 800cc24:	eef0 7a40 	vmov.f32	s15, s0
 800cc28:	b508      	push	{r3, lr}
  if (type != MEL_HTK) {
 800cc2a:	b1c0      	cbz	r0, 800cc5e <MelScale+0x3a>
    if (freq >= min_log_hz)
 800cc2c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800cc7c <MelScale+0x58>
 800cc30:	eef4 7ac0 	vcmpe.f32	s15, s0
 800cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc38:	da04      	bge.n	800cc44 <MelScale+0x20>
    float mels = (freq - f_min) / f_sp;
 800cc3a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800cc80 <MelScale+0x5c>
 800cc3e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 800cc42:	bd08      	pop	{r3, pc}
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800cc44:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800cc48:	f005 ff10 	bl	8012a6c <logf>
 800cc4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800cc84 <MelScale+0x60>
 800cc50:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cc54:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800cc88 <MelScale+0x64>
 800cc58:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc5c:	e7f1      	b.n	800cc42 <MelScale+0x1e>
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800cc5e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800cc8c <MelScale+0x68>
 800cc62:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800cc66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc6e:	f005 fefd 	bl	8012a6c <logf>
 800cc72:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cc90 <MelScale+0x6c>
 800cc76:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cc7a:	e7e2      	b.n	800cc42 <MelScale+0x1e>
 800cc7c:	447a0000 	.word	0x447a0000
 800cc80:	42855555 	.word	0x42855555
 800cc84:	3d8ccdbb 	.word	0x3d8ccdbb
 800cc88:	41700001 	.word	0x41700001
 800cc8c:	442f0000 	.word	0x442f0000
 800cc90:	448ce000 	.word	0x448ce000

0800cc94 <MelFilterbank_Init>:
{
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t normalize = MelFilterStruct->Normalize;
 800cc98:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800cc9a:	4604      	mov	r4, r0
  uint32_t sr = MelFilterStruct->SampRate;
 800cc9c:	6985      	ldr	r5, [r0, #24]
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 800cc9e:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
  mel_min = MelScale(f_min, formula);
 800cca2:	ed94 0a07 	vldr	s0, [r4, #28]
{
 800cca6:	ed2d 8b0a 	vpush	{d8-d12}
 800ccaa:	b085      	sub	sp, #20
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800ccac:	f890 7024 	ldrb.w	r7, [r0, #36]	; 0x24
  float32_t f_max =  MelFilterStruct->FMax;
 800ccb0:	edd0 8a08 	vldr	s17, [r0, #32]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 800ccb4:	eef0 ba00 	vmov.f32	s23, #0	; 0x40000000  2.0
  uint32_t normalize = MelFilterStruct->Normalize;
 800ccb8:	9300      	str	r3, [sp, #0]
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 800ccba:	6803      	ldr	r3, [r0, #0]
  uint32_t n_fft = MelFilterStruct->FFTLen;
 800ccbc:	e9d0 8a04 	ldrd	r8, sl, [r0, #16]
  float32_t *weights = MelFilterStruct->pCoefficients;
 800ccc0:	e9d0 b601 	ldrd	fp, r6, [r0, #4]
  mel_min = MelScale(f_min, formula);
 800ccc4:	4638      	mov	r0, r7
  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 800ccc6:	9301      	str	r3, [sp, #4]
  mel_min = MelScale(f_min, formula);
 800ccc8:	f7ff ffac 	bl	800cc24 <MelScale>
  mel_max = MelScale(f_max, formula);
 800cccc:	4638      	mov	r0, r7
  mel_min = MelScale(f_min, formula);
 800ccce:	eeb0 8a40 	vmov.f32	s16, s0
  mel_max = MelScale(f_max, formula);
 800ccd2:	eeb0 0a68 	vmov.f32	s0, s17
 800ccd6:	f7ff ffa5 	bl	800cc24 <MelScale>
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800ccda:	f108 0301 	add.w	r3, r8, #1
 800ccde:	ee30 0a48 	vsub.f32	s0, s0, s16
 800cce2:	ee07 3a90 	vmov	s15, r3
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800cce6:	ea4f 035a 	mov.w	r3, sl, lsr #1
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800ccea:	eef8 7a67 	vcvt.f32.u32	s15, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800ccee:	ee0a 3a10 	vmov	s20, r3
 800ccf2:	eeb8 7aca 	vcvt.f32.s32	s14, s20
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800ccf6:	eec0 9a27 	vdiv.f32	s19, s0, s15
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800ccfa:	ee07 5a90 	vmov	s15, r5
  *n_coefficients = 0;
 800ccfe:	2500      	movs	r5, #0
 800cd00:	60e5      	str	r5, [r4, #12]
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800cd02:	eefb 7aef 	vcvt.f32.u32	s15, s15, #1
 800cd06:	ee87 ba87 	vdiv.f32	s22, s15, s14
  for (uint32_t i = 0; i < n_mels; i++)
 800cd0a:	45a8      	cmp	r8, r5
 800cd0c:	d104      	bne.n	800cd18 <MelFilterbank_Init+0x84>
}
 800cd0e:	b005      	add	sp, #20
 800cd10:	ecbd 8b0a 	vpop	{d8-d12}
 800cd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (mel_2_f != 0) {
 800cd18:	1c6b      	adds	r3, r5, #1
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800cd1a:	ee07 5a90 	vmov	s15, r5
 800cd1e:	eef0 8a48 	vmov.f32	s17, s16
 800cd22:	ee0a 3a90 	vmov	s21, r3
 800cd26:	1cab      	adds	r3, r5, #2
 800cd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2c:	ee0c 3a90 	vmov	s25, r3
 800cd30:	eeb8 ca6a 	vcvt.f32.u32	s24, s21
 800cd34:	eee9 8aa7 	vfma.f32	s17, s19, s15
 800cd38:	eef8 ca6c 	vcvt.f32.u32	s25, s25
    if (mel_2_f != 0) {
 800cd3c:	f1b9 0f00 	cmp.w	r9, #0
 800cd40:	d028      	beq.n	800cd94 <MelFilterbank_Init+0x100>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800cd42:	eeb0 0a68 	vmov.f32	s0, s17
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7ff ff30 	bl	800cbac <InverseMelScale>
 800cd4c:	eef0 8a40 	vmov.f32	s17, s0
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 800cd50:	eeb0 0a48 	vmov.f32	s0, s16
 800cd54:	4638      	mov	r0, r7
 800cd56:	eeac 0a29 	vfma.f32	s0, s24, s19
 800cd5a:	f7ff ff27 	bl	800cbac <InverseMelScale>
 800cd5e:	eeb0 9a40 	vmov.f32	s18, s0
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 800cd62:	eeb0 0a48 	vmov.f32	s0, s16
 800cd66:	4638      	mov	r0, r7
 800cd68:	eeac 0aa9 	vfma.f32	s0, s25, s19
 800cd6c:	f7ff ff1e 	bl	800cbac <InverseMelScale>
 800cd70:	eeb0 ca40 	vmov.f32	s24, s0
    stop_index = -1;
 800cd74:	f04f 33ff 	mov.w	r3, #4294967295
    fdiff_lower = mel_f_center - mel_f_lower;
 800cd78:	ee79 ca68 	vsub.f32	s25, s18, s17
    fdiff_upper = mel_f_upper - mel_f_center;
 800cd7c:	ee3c 9a49 	vsub.f32	s18, s24, s18
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800cd80:	f04f 0a00 	mov.w	sl, #0
    start_index = -1;
 800cd84:	4619      	mov	r1, r3
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800cd86:	ee1a 2a10 	vmov	r2, s20
 800cd8a:	4552      	cmp	r2, sl
 800cd8c:	d10b      	bne.n	800cda6 <MelFilterbank_Init+0x112>
 800cd8e:	ee1a 5a90 	vmov	r5, s21
 800cd92:	e7ba      	b.n	800cd0a <MelFilterbank_Init+0x76>
      mel_f_center = mel_step * (i + 1) + mel_min;
 800cd94:	eeb0 9a48 	vmov.f32	s18, s16
 800cd98:	eeac 9a29 	vfma.f32	s18, s24, s19
      mel_f_upper = mel_step * (i + 2) + mel_min;
 800cd9c:	eeb0 ca48 	vmov.f32	s24, s16
 800cda0:	eeac caa9 	vfma.f32	s24, s25, s19
 800cda4:	e7e6      	b.n	800cd74 <MelFilterbank_Init+0xe0>
        fftfreq = j * fftfreqs_step;
 800cda6:	ee07 aa90 	vmov	s15, sl
 800cdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdae:	ee27 0a8b 	vmul.f32	s0, s15, s22
      if (mel_2_f != 0) {
 800cdb2:	f1b9 0f00 	cmp.w	r9, #0
 800cdb6:	d106      	bne.n	800cdc6 <MelFilterbank_Init+0x132>
        fftfreq = MelScale(j * fftfreqs_step, formula);
 800cdb8:	4638      	mov	r0, r7
 800cdba:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800cdbe:	f7ff ff31 	bl	800cc24 <MelScale>
 800cdc2:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
      ramp_lower = mel_f_lower - fftfreq;
 800cdc6:	ee78 6ac0 	vsub.f32	s13, s17, s0
      ramp_upper = mel_f_upper - fftfreq;
 800cdca:	ee7c 7a40 	vsub.f32	s15, s24, s0
      lower = -ramp_lower / fdiff_lower;
 800cdce:	eef1 6a66 	vneg.f32	s13, s13
 800cdd2:	ee86 7aac 	vdiv.f32	s14, s13, s25
      upper =  ramp_upper / fdiff_upper;
 800cdd6:	eec7 6a89 	vdiv.f32	s13, s15, s18
      else min = upper;
 800cdda:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	bf58      	it	pl
 800cde4:	eeb0 7a66 	vmovpl.f32	s14, s13
      if (min > 0)
 800cde8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	dd11      	ble.n	800ce16 <MelFilterbank_Init+0x182>
        if (normalize != 0)
 800cdf2:	9b00      	ldr	r3, [sp, #0]
 800cdf4:	b12b      	cbz	r3, 800ce02 <MelFilterbank_Init+0x16e>
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 800cdf6:	ee7c 6a68 	vsub.f32	s13, s24, s17
 800cdfa:	eecb 7aa6 	vdiv.f32	s15, s23, s13
          weight *= enorm;
 800cdfe:	ee27 7a27 	vmul.f32	s14, s14, s15
        *n_coefficients = *n_coefficients + 1;
 800ce02:	68e3      	ldr	r3, [r4, #12]
          start_index = j;
 800ce04:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ce08:	bf08      	it	eq
 800ce0a:	4651      	moveq	r1, sl
        *weights++ = weight;
 800ce0c:	eca6 7a01 	vstmia	r6!, {s14}
        *n_coefficients = *n_coefficients + 1;
 800ce10:	3301      	adds	r3, #1
 800ce12:	60e3      	str	r3, [r4, #12]
        stop_index = j;
 800ce14:	4653      	mov	r3, sl
      fft_bin_numbers_start[i] = start_index;
 800ce16:	9a01      	ldr	r2, [sp, #4]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800ce18:	f10a 0a01 	add.w	sl, sl, #1
      fft_bin_numbers_start[i] = start_index;
 800ce1c:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
      fft_bin_numbers_stop[i] = stop_index;
 800ce20:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800ce24:	e7af      	b.n	800cd86 <MelFilterbank_Init+0xf2>
	...

0800ce28 <MelFilterbank>:
{
 800ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2a:	6804      	ldr	r4, [r0, #0]
 800ce2c:	6845      	ldr	r5, [r0, #4]
  float32_t *pCoefs = M->pCoefficients;
 800ce2e:	6887      	ldr	r7, [r0, #8]
  for (uint32_t i = 0; i < n_mels; i++)
 800ce30:	3c04      	subs	r4, #4
 800ce32:	6900      	ldr	r0, [r0, #16]
 800ce34:	3d04      	subs	r5, #4
 800ce36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ce3a:	4282      	cmp	r2, r0
 800ce3c:	d100      	bne.n	800ce40 <MelFilterbank+0x18>
}
 800ce3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stop_idx = pStop_idxs[i];
 800ce40:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800ce44:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800ce48:	b29b      	uxth	r3, r3
    sum = 0.0f;
 800ce4a:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ce70 <MelFilterbank+0x48>
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800ce4e:	b2b6      	uxth	r6, r6
 800ce50:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800ce54:	42b3      	cmp	r3, r6
 800ce56:	d902      	bls.n	800ce5e <MelFilterbank+0x36>
    pMelCol[i] = sum;
 800ce58:	ece2 7a01 	vstmia	r2!, {s15}
  for (uint32_t i = 0; i < n_mels; i++)
 800ce5c:	e7ed      	b.n	800ce3a <MelFilterbank+0x12>
      sum += pSpectrCol[j] * (*pCoefs++);
 800ce5e:	ecfc 6a01 	vldmia	ip!, {s13}
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800ce62:	3301      	adds	r3, #1
      sum += pSpectrCol[j] * (*pCoefs++);
 800ce64:	ecb7 7a01 	vldmia	r7!, {s14}
 800ce68:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800ce6c:	e7f2      	b.n	800ce54 <MelFilterbank+0x2c>
 800ce6e:	bf00      	nop
	...

0800ce78 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 800ce78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	4682      	mov	sl, r0
 800ce7e:	b088      	sub	sp, #32
 800ce80:	460c      	mov	r4, r1

  for (uint32_t i = 0; i < len; i++)
 800ce82:	2500      	movs	r5, #0
{
 800ce84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce88:	ed8d 1b04 	vstr	d1, [sp, #16]
 800ce8c:	ed8d 2b06 	vstr	d2, [sp, #24]
  for (uint32_t i = 0; i < len; i++)
 800ce90:	42a5      	cmp	r5, r4
 800ce92:	d102      	bne.n	800ce9a <cosine_sum_window_create+0x22>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
  }
}
 800ce94:	b008      	add	sp, #32
 800ce96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800ce9a:	4628      	mov	r0, r5
  for (uint32_t i = 0; i < len; i++)
 800ce9c:	3501      	adds	r5, #1
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800ce9e:	f7f3 fbb1 	bl	8000604 <__aeabi_ui2d>
 800cea2:	4680      	mov	r8, r0
 800cea4:	4689      	mov	r9, r1
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7f3 fbac 	bl	8000604 <__aeabi_ui2d>
 800ceac:	4606      	mov	r6, r0
 800ceae:	460f      	mov	r7, r1
 800ceb0:	4640      	mov	r0, r8
 800ceb2:	4649      	mov	r1, r9
 800ceb4:	a320      	add	r3, pc, #128	; (adr r3, 800cf38 <cosine_sum_window_create+0xc0>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 fc1d 	bl	80006f8 <__aeabi_dmul>
 800cebe:	4632      	mov	r2, r6
 800cec0:	463b      	mov	r3, r7
 800cec2:	f7f3 fd43 	bl	800094c <__aeabi_ddiv>
 800cec6:	ec41 0b10 	vmov	d0, r0, r1
 800ceca:	f005 fd19 	bl	8012900 <cos>
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800cece:	4640      	mov	r0, r8
 800ced0:	4649      	mov	r1, r9
 800ced2:	a31b      	add	r3, pc, #108	; (adr r3, 800cf40 <cosine_sum_window_create+0xc8>)
 800ced4:	e9d3 2300 	ldrd	r2, r3, [r3]
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800ced8:	ed8d 0b00 	vstr	d0, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800cedc:	f7f3 fc0c 	bl	80006f8 <__aeabi_dmul>
 800cee0:	4632      	mov	r2, r6
 800cee2:	463b      	mov	r3, r7
 800cee4:	f7f3 fd32 	bl	800094c <__aeabi_ddiv>
 800cee8:	ec41 0b10 	vmov	d0, r0, r1
 800ceec:	f005 fd08 	bl	8012900 <cos>
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800cef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef4:	e9dd 0100 	ldrd	r0, r1, [sp]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800cef8:	ec59 8b10 	vmov	r8, r9, d0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800cefc:	f7f3 fbfc 	bl	80006f8 <__aeabi_dmul>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf08:	f7f3 fa3e 	bl	8000388 <__aeabi_dsub>
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	460f      	mov	r7, r1
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800cf10:	4640      	mov	r0, r8
 800cf12:	4649      	mov	r1, r9
 800cf14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf18:	f7f3 fbee 	bl	80006f8 <__aeabi_dmul>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 fa32 	bl	800038c <__adddf3>
 800cf28:	f7f3 fede 	bl	8000ce8 <__aeabi_d2f>
 800cf2c:	f84a 0b04 	str.w	r0, [sl], #4
  for (uint32_t i = 0; i < len; i++)
 800cf30:	e7ae      	b.n	800ce90 <cosine_sum_window_create+0x18>
 800cf32:	bf00      	nop
 800cf34:	f3af 8000 	nop.w
 800cf38:	54442d18 	.word	0x54442d18
 800cf3c:	401921fb 	.word	0x401921fb
 800cf40:	54442d18 	.word	0x54442d18
 800cf44:	402921fb 	.word	0x402921fb

0800cf48 <Window_Init>:
  switch (type)
 800cf48:	2a01      	cmp	r2, #1
{
 800cf4a:	b510      	push	{r4, lr}
  switch (type)
 800cf4c:	d00e      	beq.n	800cf6c <Window_Init+0x24>
 800cf4e:	2a02      	cmp	r2, #2
 800cf50:	d013      	beq.n	800cf7a <Window_Init+0x32>
 800cf52:	b9ca      	cbnz	r2, 800cf88 <Window_Init+0x40>
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 800cf54:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 800cf90 <Window_Init+0x48>
 800cf58:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 800cf98 <Window_Init+0x50>
 800cf5c:	eeb0 0a41 	vmov.f32	s0, s2
 800cf60:	eef0 0a61 	vmov.f32	s1, s3
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800cf64:	f7ff ff88 	bl	800ce78 <cosine_sum_window_create>
  int32_t status = 0;
 800cf68:	2000      	movs	r0, #0
}
 800cf6a:	bd10      	pop	{r4, pc}
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800cf6c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 800cf98 <Window_Init+0x50>
 800cf70:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 800cfa0 <Window_Init+0x58>
 800cf74:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 800cfa8 <Window_Init+0x60>
 800cf78:	e7f4      	b.n	800cf64 <Window_Init+0x1c>
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800cf7a:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 800cfb0 <Window_Init+0x68>
 800cf7e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 800cf90 <Window_Init+0x48>
 800cf82:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800cfb8 <Window_Init+0x70>
 800cf86:	e7ed      	b.n	800cf64 <Window_Init+0x1c>
  switch (type)
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295
  return status;
 800cf8c:	e7ed      	b.n	800cf6a <Window_Init+0x22>
 800cf8e:	bf00      	nop
 800cf90:	00000000 	.word	0x00000000
 800cf94:	3fe00000 	.word	0x3fe00000
	...
 800cfa0:	d70a3d71 	.word	0xd70a3d71
 800cfa4:	3fdd70a3 	.word	0x3fdd70a3
 800cfa8:	147ae148 	.word	0x147ae148
 800cfac:	3fe147ae 	.word	0x3fe147ae
 800cfb0:	47ae147b 	.word	0x47ae147b
 800cfb4:	3fb47ae1 	.word	0x3fb47ae1
 800cfb8:	ae147ae1 	.word	0xae147ae1
 800cfbc:	3fdae147 	.word	0x3fdae147

0800cfc0 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <LCD_LOG_DeInit+0x20>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800cfc2:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800cfc4:	4a07      	ldr	r2, [pc, #28]	; (800cfe4 <LCD_LOG_DeInit+0x24>)
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800cfc6:	7399      	strb	r1, [r3, #14]
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800cfc8:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800cfca:	2200      	movs	r2, #0
 800cfcc:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 800cfce:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 800cfd0:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800cfd2:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800cfd4:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
 800cfd6:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 800cfd8:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 800cfda:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 800cfdc:	825a      	strh	r2, [r3, #18]
}
 800cfde:	4770      	bx	lr
 800cfe0:	20017af4 	.word	0x20017af4
 800cfe4:	ff000080 	.word	0xff000080

0800cfe8 <LCD_LOG_Init>:
{
 800cfe8:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800cfea:	f7ff ffe9 	bl	800cfc0 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800cfee:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800cff6:	f7f5 bd75 	b.w	8002ae4 <BSP_LCD_Clear>
	...

0800cffc <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800cffc:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800cffe:	4c16      	ldr	r4, [pc, #88]	; (800d058 <LCD_LOG_SetHeader+0x5c>)
{
 800d000:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800d002:	4e16      	ldr	r6, [pc, #88]	; (800d05c <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800d004:	4620      	mov	r0, r4
 800d006:	f7f5 fd55 	bl	8002ab4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800d00a:	4630      	mov	r0, r6
 800d00c:	f7f5 fd3a 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800d010:	f7f5 fcde 	bl	80029d0 <BSP_LCD_GetXSize>
 800d014:	88e3      	ldrh	r3, [r4, #6]
 800d016:	2100      	movs	r1, #0
 800d018:	b282      	uxth	r2, r0
 800d01a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d01e:	4608      	mov	r0, r1
 800d020:	b29b      	uxth	r3, r3
 800d022:	f7f6 f8af 	bl	8003184 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800d026:	f04f 30ff 	mov.w	r0, #4294967295
 800d02a:	f7f5 fd2b 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800d02e:	4630      	mov	r0, r6
 800d030:	f7f5 fd34 	bl	8002a9c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800d034:	462a      	mov	r2, r5
 800d036:	88e1      	ldrh	r1, [r4, #6]
 800d038:	2301      	movs	r3, #1
 800d03a:	2000      	movs	r0, #0
 800d03c:	f7f5 fe62 	bl	8002d04 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800d040:	f04f 30ff 	mov.w	r0, #4294967295
 800d044:	f7f5 fd2a 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800d048:	4805      	ldr	r0, [pc, #20]	; (800d060 <LCD_LOG_SetHeader+0x64>)
 800d04a:	f7f5 fd1b 	bl	8002a84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800d04e:	4805      	ldr	r0, [pc, #20]	; (800d064 <LCD_LOG_SetHeader+0x68>)
}
 800d050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800d054:	f7f5 bd2e 	b.w	8002ab4 <BSP_LCD_SetFont>
 800d058:	2000008c 	.word	0x2000008c
 800d05c:	ff0000ff 	.word	0xff0000ff
 800d060:	ff000080 	.word	0xff000080
 800d064:	20000084 	.word	0x20000084

0800d068 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 800d068:	b510      	push	{r4, lr}
 800d06a:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800d06c:	4620      	mov	r0, r4
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800d06e:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800d070:	f7f6 f8c4 	bl	80031fc <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800d074:	2c15      	cmp	r4, #21
 800d076:	d1f9      	bne.n	800d06c <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 800d078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 800d07c:	f7ff bfa0 	b.w	800cfc0 <LCD_LOG_DeInit>

0800d080 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800d080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800d084:	4c1b      	ldr	r4, [pc, #108]	; (800d0f4 <LCD_LOG_UpdateDisplay+0x74>)
 800d086:	4f1c      	ldr	r7, [pc, #112]	; (800d0f8 <LCD_LOG_UpdateDisplay+0x78>)
 800d088:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800d08a:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800d08c:	2b0f      	cmp	r3, #15
 800d08e:	d811      	bhi.n	800d0b4 <LCD_LOG_UpdateDisplay+0x34>
 800d090:	4293      	cmp	r3, r2
 800d092:	d311      	bcc.n	800d0b8 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800d094:	2584      	movs	r5, #132	; 0x84
 800d096:	fb05 7303 	mla	r3, r5, r3, r7
 800d09a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d09e:	f7f5 fcf1 	bl	8002a84 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800d0a2:	8921      	ldrh	r1, [r4, #8]
 800d0a4:	1d08      	adds	r0, r1, #4
 800d0a6:	fb05 7101 	mla	r1, r5, r1, r7
 800d0aa:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 800d0ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800d0b0:	f7f5 be7c 	b.w	8002dac <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d201      	bcs.n	800d0bc <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800d0b8:	3375      	adds	r3, #117	; 0x75
 800d0ba:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800d0bc:	3b10      	subs	r3, #16
 800d0be:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800d0c0:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800d0c4:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800d0c8:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800d0ca:	19a5      	adds	r5, r4, r6
 800d0cc:	fbb5 f1f8 	udiv	r1, r5, r8
 800d0d0:	fb08 5511 	mls	r5, r8, r1, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800d0d4:	fb09 7505 	mla	r5, r9, r5, r7
 800d0d8:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800d0dc:	f7f5 fcd2 	bl	8002a84 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800d0e0:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800d0e2:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	b280      	uxth	r0, r0
 800d0e8:	f7f5 fe60 	bl	8002dac <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800d0ec:	2e11      	cmp	r6, #17
 800d0ee:	d1ec      	bne.n	800d0ca <LCD_LOG_UpdateDisplay+0x4a>
}
 800d0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f4:	20017af4 	.word	0x20017af4
 800d0f8:	20017b08 	.word	0x20017b08

0800d0fc <__io_putchar>:
{
 800d0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 800d100:	4c37      	ldr	r4, [pc, #220]	; (800d1e0 <__io_putchar+0xe4>)
{
 800d102:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800d104:	f7f5 fce2 	bl	8002acc <BSP_LCD_GetFont>
 800d108:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 800d10a:	7c23      	ldrb	r3, [r4, #16]
 800d10c:	b9e3      	cbnz	r3, 800d148 <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 800d10e:	7be2      	ldrb	r2, [r4, #15]
 800d110:	2a01      	cmp	r2, #1
 800d112:	d106      	bne.n	800d122 <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800d114:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 800d116:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800d118:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800d11a:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 800d11c:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800d11e:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 800d120:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800d122:	88a6      	ldrh	r6, [r4, #4]
 800d124:	f7f5 fc54 	bl	80029d0 <BSP_LCD_GetXSize>
 800d128:	88bb      	ldrh	r3, [r7, #4]
 800d12a:	fbb0 f0f3 	udiv	r0, r0, r3
 800d12e:	4286      	cmp	r6, r0
 800d130:	4e2c      	ldr	r6, [pc, #176]	; (800d1e4 <__io_putchar+0xe8>)
 800d132:	d20c      	bcs.n	800d14e <__io_putchar+0x52>
 800d134:	2d0a      	cmp	r5, #10
 800d136:	d00a      	beq.n	800d14e <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800d138:	88a2      	ldrh	r2, [r4, #4]
 800d13a:	8923      	ldrh	r3, [r4, #8]
 800d13c:	1c51      	adds	r1, r2, #1
 800d13e:	80a1      	strh	r1, [r4, #4]
 800d140:	2184      	movs	r1, #132	; 0x84
 800d142:	fb01 6603 	mla	r6, r1, r3, r6
 800d146:	54b5      	strb	r5, [r6, r2]
}
 800d148:	4628      	mov	r0, r5
 800d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800d14e:	88e3      	ldrh	r3, [r4, #6]
 800d150:	8922      	ldrh	r2, [r4, #8]
 800d152:	429a      	cmp	r2, r3
 800d154:	d808      	bhi.n	800d168 <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800d156:	7ba2      	ldrb	r2, [r4, #14]
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d133      	bne.n	800d1c4 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 800d15c:	3301      	adds	r3, #1
 800d15e:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800d160:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 800d162:	bf14      	ite	ne
 800d164:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 800d166:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800d168:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800d16c:	f04f 0984 	mov.w	r9, #132	; 0x84
 800d170:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800d174:	f7f5 fc2c 	bl	80029d0 <BSP_LCD_GetXSize>
 800d178:	88bb      	ldrh	r3, [r7, #4]
 800d17a:	fbb0 f0f3 	udiv	r0, r0, r3
 800d17e:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800d180:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800d182:	d822      	bhi.n	800d1ca <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800d184:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 800d186:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800d188:	fb02 6303 	mla	r3, r2, r3, r6
 800d18c:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 800d18e:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800d190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 800d194:	f7ff ff74 	bl	800d080 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 800d198:	8923      	ldrh	r3, [r4, #8]
 800d19a:	3301      	adds	r3, #1
 800d19c:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800d19e:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 800d1a0:	bf09      	itett	eq
 800d1a2:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 800d1a4:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 800d1a6:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 800d1a8:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800d1aa:	bf08      	it	eq
 800d1ac:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 800d1ae:	2d0a      	cmp	r5, #10
 800d1b0:	d0ca      	beq.n	800d148 <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800d1b2:	88a3      	ldrh	r3, [r4, #4]
 800d1b4:	8922      	ldrh	r2, [r4, #8]
 800d1b6:	1c59      	adds	r1, r3, #1
 800d1b8:	80a1      	strh	r1, [r4, #4]
 800d1ba:	2184      	movs	r1, #132	; 0x84
 800d1bc:	fb01 6602 	mla	r6, r1, r2, r6
 800d1c0:	54f5      	strb	r5, [r6, r3]
 800d1c2:	e7c1      	b.n	800d148 <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73a3      	strb	r3, [r4, #14]
 800d1c8:	e7ce      	b.n	800d168 <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800d1ca:	88a2      	ldrh	r2, [r4, #4]
 800d1cc:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800d1d0:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800d1d4:	1c51      	adds	r1, r2, #1
 800d1d6:	f803 a002 	strb.w	sl, [r3, r2]
 800d1da:	80a1      	strh	r1, [r4, #4]
 800d1dc:	e7ca      	b.n	800d174 <__io_putchar+0x78>
 800d1de:	bf00      	nop
 800d1e0:	20017af4 	.word	0x20017af4
 800d1e4:	20017b08 	.word	0x20017b08

0800d1e8 <LCD_LOG_ScrollBack>:
  * @brief  Display previous text frame
  * @param  None
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollBack(void)
{
 800d1e8:	b510      	push	{r4, lr}
    
  if(LCD_ScrollActive == DISABLE)
 800d1ea:	4c1e      	ldr	r4, [pc, #120]	; (800d264 <LCD_LOG_ScrollBack+0x7c>)
 800d1ec:	7be3      	ldrb	r3, [r4, #15]
 800d1ee:	bb43      	cbnz	r3, 800d242 <LCD_LOG_ScrollBack+0x5a>
  {
    
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800d1f0:	8923      	ldrh	r3, [r4, #8]
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800d1f2:	88e2      	ldrh	r2, [r4, #6]
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800d1f4:	81a3      	strh	r3, [r4, #12]
    
    
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d1f6:	4293      	cmp	r3, r2
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800d1f8:	8162      	strh	r2, [r4, #10]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d1fa:	d906      	bls.n	800d20a <LCD_LOG_ScrollBack+0x22>
    {
      
      if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800d1fc:	1a99      	subs	r1, r3, r2
 800d1fe:	2911      	cmp	r1, #17
 800d200:	dc03      	bgt.n	800d20a <LCD_LOG_ScrollBack+0x22>
      {
        LCD_Lock = DISABLE;
 800d202:	2300      	movs	r3, #0
        return ERROR;
 800d204:	2001      	movs	r0, #1
        LCD_Lock = DISABLE;
 800d206:	7423      	strb	r3, [r4, #16]
    LCD_ScrollBackStep++;
    LCD_LOG_UpdateDisplay();
    LCD_Lock = DISABLE;
  }
  return SUCCESS;
}
 800d208:	bd10      	pop	{r4, pc}
    LCD_ScrollActive = ENABLE;
 800d20a:	2101      	movs	r1, #1
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800d20c:	4293      	cmp	r3, r2
    LCD_ScrollActive = ENABLE;
 800d20e:	73e1      	strb	r1, [r4, #15]
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800d210:	d904      	bls.n	800d21c <LCD_LOG_ScrollBack+0x34>
 800d212:	7c62      	ldrb	r2, [r4, #17]
 800d214:	b912      	cbnz	r2, 800d21c <LCD_LOG_ScrollBack+0x34>
      LCD_CacheBuffer_yptr_bottom--;
 800d216:	3b01      	subs	r3, #1
      LCD_Scrolled = ENABLE;
 800d218:	7461      	strb	r1, [r4, #17]
      LCD_CacheBuffer_yptr_bottom--;
 800d21a:	8123      	strh	r3, [r4, #8]
    LCD_Lock = ENABLE;
 800d21c:	2301      	movs	r3, #1
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d21e:	88e2      	ldrh	r2, [r4, #6]
    LCD_Lock = ENABLE;
 800d220:	7423      	strb	r3, [r4, #16]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d222:	8923      	ldrh	r3, [r4, #8]
 800d224:	4293      	cmp	r3, r2
 800d226:	d810      	bhi.n	800d24a <LCD_LOG_ScrollBack+0x62>
      if((LCD_CACHE_DEPTH  - LCD_CacheBuffer_yptr_top + LCD_CacheBuffer_yptr_bottom) < YWINDOW_SIZE)
 800d228:	f1c2 0275 	rsb	r2, r2, #117	; 0x75
 800d22c:	441a      	add	r2, r3
 800d22e:	2a10      	cmp	r2, #16
 800d230:	dde7      	ble.n	800d202 <LCD_LOG_ScrollBack+0x1a>
      LCD_CacheBuffer_yptr_bottom --;
 800d232:	3b01      	subs	r3, #1
      if(LCD_CacheBuffer_yptr_bottom == 0xFFFF)
 800d234:	f64f 72ff 	movw	r2, #65535	; 0xffff
      LCD_CacheBuffer_yptr_bottom --;
 800d238:	b29b      	uxth	r3, r3
      if(LCD_CacheBuffer_yptr_bottom == 0xFFFF)
 800d23a:	4293      	cmp	r3, r2
        LCD_CacheBuffer_yptr_bottom = LCD_CACHE_DEPTH - 2;
 800d23c:	bf08      	it	eq
 800d23e:	2373      	moveq	r3, #115	; 0x73
 800d240:	e007      	b.n	800d252 <LCD_LOG_ScrollBack+0x6a>
  if(LCD_ScrollActive == ENABLE)
 800d242:	2b01      	cmp	r3, #1
 800d244:	d0ea      	beq.n	800d21c <LCD_LOG_ScrollBack+0x34>
  return SUCCESS;
 800d246:	2000      	movs	r0, #0
 800d248:	e7de      	b.n	800d208 <LCD_LOG_ScrollBack+0x20>
      if((LCD_CacheBuffer_yptr_bottom  - LCD_CacheBuffer_yptr_top) <  YWINDOW_SIZE )
 800d24a:	1a9a      	subs	r2, r3, r2
 800d24c:	2a10      	cmp	r2, #16
 800d24e:	ddd8      	ble.n	800d202 <LCD_LOG_ScrollBack+0x1a>
      LCD_CacheBuffer_yptr_bottom --;
 800d250:	3b01      	subs	r3, #1
        LCD_CacheBuffer_yptr_bottom = LCD_CACHE_DEPTH - 2;
 800d252:	8123      	strh	r3, [r4, #8]
    LCD_ScrollBackStep++;
 800d254:	8a63      	ldrh	r3, [r4, #18]
 800d256:	3301      	adds	r3, #1
 800d258:	8263      	strh	r3, [r4, #18]
    LCD_LOG_UpdateDisplay();
 800d25a:	f7ff ff11 	bl	800d080 <LCD_LOG_UpdateDisplay>
    LCD_Lock = DISABLE;
 800d25e:	2000      	movs	r0, #0
 800d260:	7420      	strb	r0, [r4, #16]
 800d262:	e7d1      	b.n	800d208 <LCD_LOG_ScrollBack+0x20>
 800d264:	20017af4 	.word	0x20017af4

0800d268 <LCD_LOG_ScrollForward>:
  * @brief  Display next text frame
  * @param  None
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollForward(void)
{
 800d268:	b510      	push	{r4, lr}
  
  if(LCD_ScrollBackStep != 0)
 800d26a:	4c17      	ldr	r4, [pc, #92]	; (800d2c8 <LCD_LOG_ScrollForward+0x60>)
 800d26c:	8a62      	ldrh	r2, [r4, #18]
 800d26e:	b152      	cbz	r2, 800d286 <LCD_LOG_ScrollForward+0x1e>
  {
    if(LCD_ScrollActive == DISABLE)
 800d270:	7be3      	ldrb	r3, [r4, #15]
 800d272:	bb2b      	cbnz	r3, 800d2c0 <LCD_LOG_ScrollForward+0x58>
    {
      
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800d274:	8923      	ldrh	r3, [r4, #8]
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800d276:	88e1      	ldrh	r1, [r4, #6]
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800d278:	81a3      	strh	r3, [r4, #12]
      
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d27a:	428b      	cmp	r3, r1
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800d27c:	8161      	strh	r1, [r4, #10]
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800d27e:	d906      	bls.n	800d28e <LCD_LOG_ScrollForward+0x26>
      {
        
        if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800d280:	1a58      	subs	r0, r3, r1
 800d282:	2811      	cmp	r0, #17
 800d284:	dc03      	bgt.n	800d28e <LCD_LOG_ScrollForward+0x26>
        {
          LCD_Lock = DISABLE;
 800d286:	2300      	movs	r3, #0
          return ERROR;
 800d288:	2001      	movs	r0, #1
          LCD_Lock = DISABLE;
 800d28a:	7423      	strb	r3, [r4, #16]
  else // LCD_ScrollBackStep == 0 
  {
    LCD_Lock = DISABLE;
    return ERROR;
  }  
}
 800d28c:	bd10      	pop	{r4, pc}
      LCD_ScrollActive = ENABLE;
 800d28e:	2001      	movs	r0, #1
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800d290:	428b      	cmp	r3, r1
      LCD_ScrollActive = ENABLE;
 800d292:	73e0      	strb	r0, [r4, #15]
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800d294:	d904      	bls.n	800d2a0 <LCD_LOG_ScrollForward+0x38>
 800d296:	7c61      	ldrb	r1, [r4, #17]
 800d298:	b911      	cbnz	r1, 800d2a0 <LCD_LOG_ScrollForward+0x38>
        LCD_CacheBuffer_yptr_bottom--;
 800d29a:	3b01      	subs	r3, #1
        LCD_Scrolled = ENABLE;
 800d29c:	7460      	strb	r0, [r4, #17]
        LCD_CacheBuffer_yptr_bottom--;
 800d29e:	8123      	strh	r3, [r4, #8]
      LCD_Lock = ENABLE;
 800d2a0:	2301      	movs	r3, #1
      LCD_ScrollBackStep--;
 800d2a2:	3a01      	subs	r2, #1
      LCD_Lock = ENABLE;
 800d2a4:	7423      	strb	r3, [r4, #16]
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800d2a6:	8923      	ldrh	r3, [r4, #8]
      LCD_ScrollBackStep--;
 800d2a8:	8262      	strh	r2, [r4, #18]
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	2b75      	cmp	r3, #117	; 0x75
 800d2b0:	d100      	bne.n	800d2b4 <LCD_LOG_ScrollForward+0x4c>
        LCD_CacheBuffer_yptr_bottom = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	8123      	strh	r3, [r4, #8]
      LCD_LOG_UpdateDisplay();
 800d2b6:	f7ff fee3 	bl	800d080 <LCD_LOG_UpdateDisplay>
      LCD_Lock = DISABLE;
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	7420      	strb	r0, [r4, #16]
 800d2be:	e7e5      	b.n	800d28c <LCD_LOG_ScrollForward+0x24>
    if(LCD_ScrollActive == ENABLE)
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d0ed      	beq.n	800d2a0 <LCD_LOG_ScrollForward+0x38>
    return SUCCESS;
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e7e1      	b.n	800d28c <LCD_LOG_ScrollForward+0x24>
 800d2c8:	20017af4 	.word	0x20017af4

0800d2cc <arm_rfft_fast_init_f32>:
 800d2cc:	084b      	lsrs	r3, r1, #1
 800d2ce:	2b80      	cmp	r3, #128	; 0x80
 800d2d0:	b430      	push	{r4, r5}
 800d2d2:	8201      	strh	r1, [r0, #16]
 800d2d4:	8003      	strh	r3, [r0, #0]
 800d2d6:	d070      	beq.n	800d3ba <arm_rfft_fast_init_f32+0xee>
 800d2d8:	d916      	bls.n	800d308 <arm_rfft_fast_init_f32+0x3c>
 800d2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2de:	d05f      	beq.n	800d3a0 <arm_rfft_fast_init_f32+0xd4>
 800d2e0:	d936      	bls.n	800d350 <arm_rfft_fast_init_f32+0x84>
 800d2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2e6:	d026      	beq.n	800d336 <arm_rfft_fast_init_f32+0x6a>
 800d2e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ec:	d112      	bne.n	800d314 <arm_rfft_fast_init_f32+0x48>
 800d2ee:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800d2f2:	4c38      	ldr	r4, [pc, #224]	; (800d3d4 <arm_rfft_fast_init_f32+0x108>)
 800d2f4:	4938      	ldr	r1, [pc, #224]	; (800d3d8 <arm_rfft_fast_init_f32+0x10c>)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	4a38      	ldr	r2, [pc, #224]	; (800d3dc <arm_rfft_fast_init_f32+0x110>)
 800d2fa:	8185      	strh	r5, [r0, #12]
 800d2fc:	6084      	str	r4, [r0, #8]
 800d2fe:	6041      	str	r1, [r0, #4]
 800d300:	6142      	str	r2, [r0, #20]
 800d302:	4618      	mov	r0, r3
 800d304:	bc30      	pop	{r4, r5}
 800d306:	4770      	bx	lr
 800d308:	2b20      	cmp	r3, #32
 800d30a:	d031      	beq.n	800d370 <arm_rfft_fast_init_f32+0xa4>
 800d30c:	2b40      	cmp	r3, #64	; 0x40
 800d30e:	d006      	beq.n	800d31e <arm_rfft_fast_init_f32+0x52>
 800d310:	2b10      	cmp	r3, #16
 800d312:	d039      	beq.n	800d388 <arm_rfft_fast_init_f32+0xbc>
 800d314:	f04f 33ff 	mov.w	r3, #4294967295
 800d318:	bc30      	pop	{r4, r5}
 800d31a:	4618      	mov	r0, r3
 800d31c:	4770      	bx	lr
 800d31e:	2538      	movs	r5, #56	; 0x38
 800d320:	4c2f      	ldr	r4, [pc, #188]	; (800d3e0 <arm_rfft_fast_init_f32+0x114>)
 800d322:	4930      	ldr	r1, [pc, #192]	; (800d3e4 <arm_rfft_fast_init_f32+0x118>)
 800d324:	2300      	movs	r3, #0
 800d326:	4a30      	ldr	r2, [pc, #192]	; (800d3e8 <arm_rfft_fast_init_f32+0x11c>)
 800d328:	8185      	strh	r5, [r0, #12]
 800d32a:	6084      	str	r4, [r0, #8]
 800d32c:	6041      	str	r1, [r0, #4]
 800d32e:	6142      	str	r2, [r0, #20]
 800d330:	4618      	mov	r0, r3
 800d332:	bc30      	pop	{r4, r5}
 800d334:	4770      	bx	lr
 800d336:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800d33a:	4c2c      	ldr	r4, [pc, #176]	; (800d3ec <arm_rfft_fast_init_f32+0x120>)
 800d33c:	492c      	ldr	r1, [pc, #176]	; (800d3f0 <arm_rfft_fast_init_f32+0x124>)
 800d33e:	2300      	movs	r3, #0
 800d340:	4a2c      	ldr	r2, [pc, #176]	; (800d3f4 <arm_rfft_fast_init_f32+0x128>)
 800d342:	8185      	strh	r5, [r0, #12]
 800d344:	6084      	str	r4, [r0, #8]
 800d346:	6041      	str	r1, [r0, #4]
 800d348:	6142      	str	r2, [r0, #20]
 800d34a:	4618      	mov	r0, r3
 800d34c:	bc30      	pop	{r4, r5}
 800d34e:	4770      	bx	lr
 800d350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d354:	d1de      	bne.n	800d314 <arm_rfft_fast_init_f32+0x48>
 800d356:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800d35a:	4c27      	ldr	r4, [pc, #156]	; (800d3f8 <arm_rfft_fast_init_f32+0x12c>)
 800d35c:	4927      	ldr	r1, [pc, #156]	; (800d3fc <arm_rfft_fast_init_f32+0x130>)
 800d35e:	2300      	movs	r3, #0
 800d360:	4a27      	ldr	r2, [pc, #156]	; (800d400 <arm_rfft_fast_init_f32+0x134>)
 800d362:	8185      	strh	r5, [r0, #12]
 800d364:	6084      	str	r4, [r0, #8]
 800d366:	6041      	str	r1, [r0, #4]
 800d368:	6142      	str	r2, [r0, #20]
 800d36a:	4618      	mov	r0, r3
 800d36c:	bc30      	pop	{r4, r5}
 800d36e:	4770      	bx	lr
 800d370:	2530      	movs	r5, #48	; 0x30
 800d372:	4c24      	ldr	r4, [pc, #144]	; (800d404 <arm_rfft_fast_init_f32+0x138>)
 800d374:	4924      	ldr	r1, [pc, #144]	; (800d408 <arm_rfft_fast_init_f32+0x13c>)
 800d376:	2300      	movs	r3, #0
 800d378:	4a24      	ldr	r2, [pc, #144]	; (800d40c <arm_rfft_fast_init_f32+0x140>)
 800d37a:	8185      	strh	r5, [r0, #12]
 800d37c:	6084      	str	r4, [r0, #8]
 800d37e:	6041      	str	r1, [r0, #4]
 800d380:	6142      	str	r2, [r0, #20]
 800d382:	4618      	mov	r0, r3
 800d384:	bc30      	pop	{r4, r5}
 800d386:	4770      	bx	lr
 800d388:	2514      	movs	r5, #20
 800d38a:	4c21      	ldr	r4, [pc, #132]	; (800d410 <arm_rfft_fast_init_f32+0x144>)
 800d38c:	4921      	ldr	r1, [pc, #132]	; (800d414 <arm_rfft_fast_init_f32+0x148>)
 800d38e:	2300      	movs	r3, #0
 800d390:	4a21      	ldr	r2, [pc, #132]	; (800d418 <arm_rfft_fast_init_f32+0x14c>)
 800d392:	8185      	strh	r5, [r0, #12]
 800d394:	6084      	str	r4, [r0, #8]
 800d396:	6041      	str	r1, [r0, #4]
 800d398:	6142      	str	r2, [r0, #20]
 800d39a:	4618      	mov	r0, r3
 800d39c:	bc30      	pop	{r4, r5}
 800d39e:	4770      	bx	lr
 800d3a0:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800d3a4:	4c1d      	ldr	r4, [pc, #116]	; (800d41c <arm_rfft_fast_init_f32+0x150>)
 800d3a6:	491e      	ldr	r1, [pc, #120]	; (800d420 <arm_rfft_fast_init_f32+0x154>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4a1e      	ldr	r2, [pc, #120]	; (800d424 <arm_rfft_fast_init_f32+0x158>)
 800d3ac:	8185      	strh	r5, [r0, #12]
 800d3ae:	6084      	str	r4, [r0, #8]
 800d3b0:	6041      	str	r1, [r0, #4]
 800d3b2:	6142      	str	r2, [r0, #20]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	bc30      	pop	{r4, r5}
 800d3b8:	4770      	bx	lr
 800d3ba:	25d0      	movs	r5, #208	; 0xd0
 800d3bc:	4c1a      	ldr	r4, [pc, #104]	; (800d428 <arm_rfft_fast_init_f32+0x15c>)
 800d3be:	491b      	ldr	r1, [pc, #108]	; (800d42c <arm_rfft_fast_init_f32+0x160>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4a1b      	ldr	r2, [pc, #108]	; (800d430 <arm_rfft_fast_init_f32+0x164>)
 800d3c4:	8185      	strh	r5, [r0, #12]
 800d3c6:	6084      	str	r4, [r0, #8]
 800d3c8:	6041      	str	r1, [r0, #4]
 800d3ca:	6142      	str	r2, [r0, #20]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	bc30      	pop	{r4, r5}
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	08027884 	.word	0x08027884
 800d3d8:	08018a7c 	.word	0x08018a7c
 800d3dc:	0801ebec 	.word	0x0801ebec
 800d3e0:	0801cb7c 	.word	0x0801cb7c
 800d3e4:	08029644 	.word	0x08029644
 800d3e8:	0802bb34 	.word	0x0802bb34
 800d3ec:	0802556c 	.word	0x0802556c
 800d3f0:	0802346c 	.word	0x0802346c
 800d3f4:	0801cbec 	.word	0x0801cbec
 800d3f8:	0802b7c4 	.word	0x0802b7c4
 800d3fc:	08022bec 	.word	0x08022bec
 800d400:	08029844 	.word	0x08029844
 800d404:	08026424 	.word	0x08026424
 800d408:	0802546c 	.word	0x0802546c
 800d40c:	0801ca7c 	.word	0x0801ca7c
 800d410:	0802637c 	.word	0x0802637c
 800d414:	080233ec 	.word	0x080233ec
 800d418:	080263a4 	.word	0x080263a4
 800d41c:	0802a044 	.word	0x0802a044
 800d420:	08026884 	.word	0x08026884
 800d424:	0802a3c4 	.word	0x0802a3c4
 800d428:	0802bd34 	.word	0x0802bd34
 800d42c:	08026484 	.word	0x08026484
 800d430:	0802b3c4 	.word	0x0802b3c4

0800d434 <arm_rfft_fast_f32>:
 800d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	8a05      	ldrh	r5, [r0, #16]
 800d43a:	4606      	mov	r6, r0
 800d43c:	4617      	mov	r7, r2
 800d43e:	460c      	mov	r4, r1
 800d440:	086d      	lsrs	r5, r5, #1
 800d442:	8005      	strh	r5, [r0, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d15e      	bne.n	800d506 <arm_rfft_fast_f32+0xd2>
 800d448:	461a      	mov	r2, r3
 800d44a:	2301      	movs	r3, #1
 800d44c:	f000 fbde 	bl	800dc0c <arm_cfft_f32>
 800d450:	edd4 7a00 	vldr	s15, [r4]
 800d454:	ed94 7a01 	vldr	s14, [r4, #4]
 800d458:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d45c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d460:	8832      	ldrh	r2, [r6, #0]
 800d462:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d466:	6975      	ldr	r5, [r6, #20]
 800d468:	3a01      	subs	r2, #1
 800d46a:	eeb0 3a46 	vmov.f32	s6, s12
 800d46e:	3510      	adds	r5, #16
 800d470:	f107 0610 	add.w	r6, r7, #16
 800d474:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d478:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800d47c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d480:	f104 0310 	add.w	r3, r4, #16
 800d484:	3808      	subs	r0, #8
 800d486:	ee26 7a86 	vmul.f32	s14, s13, s12
 800d48a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d48e:	ed87 7a00 	vstr	s14, [r7]
 800d492:	edc7 7a01 	vstr	s15, [r7, #4]
 800d496:	ed90 7a02 	vldr	s14, [r0, #8]
 800d49a:	3a01      	subs	r2, #1
 800d49c:	ed53 6a02 	vldr	s13, [r3, #-8]
 800d4a0:	f1a0 0008 	sub.w	r0, r0, #8
 800d4a4:	ed15 6a02 	vldr	s12, [r5, #-8]
 800d4a8:	f103 0308 	add.w	r3, r3, #8
 800d4ac:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d4b0:	edd0 3a05 	vldr	s7, [r0, #20]
 800d4b4:	ed13 5a03 	vldr	s10, [r3, #-12]
 800d4b8:	ee77 4a26 	vadd.f32	s9, s14, s13
 800d4bc:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d4c0:	f106 0608 	add.w	r6, r6, #8
 800d4c4:	ee66 6a27 	vmul.f32	s13, s12, s15
 800d4c8:	f105 0508 	add.w	r5, r5, #8
 800d4cc:	ee33 4a85 	vadd.f32	s8, s7, s10
 800d4d0:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800d4d4:	ee35 5a63 	vsub.f32	s10, s10, s7
 800d4d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d4dc:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d4e0:	ee77 7a05 	vadd.f32	s15, s14, s10
 800d4e4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d4e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d4ec:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800d4f0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d4f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d4f8:	ed46 7a03 	vstr	s15, [r6, #-12]
 800d4fc:	ed06 7a04 	vstr	s14, [r6, #-16]
 800d500:	d1c9      	bne.n	800d496 <arm_rfft_fast_f32+0x62>
 800d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d506:	edd1 7a00 	vldr	s15, [r1]
 800d50a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800d50e:	edd1 6a01 	vldr	s13, [r1, #4]
 800d512:	1e68      	subs	r0, r5, #1
 800d514:	6975      	ldr	r5, [r6, #20]
 800d516:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d51a:	00c1      	lsls	r1, r0, #3
 800d51c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d520:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d524:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d528:	ed82 7a00 	vstr	s14, [r2]
 800d52c:	edc2 7a01 	vstr	s15, [r2, #4]
 800d530:	b3e0      	cbz	r0, 800d5ac <arm_rfft_fast_f32+0x178>
 800d532:	3908      	subs	r1, #8
 800d534:	f104 0210 	add.w	r2, r4, #16
 800d538:	3510      	adds	r5, #16
 800d53a:	440c      	add	r4, r1
 800d53c:	f107 0110 	add.w	r1, r7, #16
 800d540:	ed94 7a02 	vldr	s14, [r4, #8]
 800d544:	3801      	subs	r0, #1
 800d546:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d54a:	f1a4 0408 	sub.w	r4, r4, #8
 800d54e:	ed15 6a02 	vldr	s12, [r5, #-8]
 800d552:	f102 0208 	add.w	r2, r2, #8
 800d556:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800d55a:	ed94 4a05 	vldr	s8, [r4, #20]
 800d55e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800d562:	ee77 6a26 	vadd.f32	s13, s14, s13
 800d566:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d56a:	f101 0108 	add.w	r1, r1, #8
 800d56e:	ee26 3a27 	vmul.f32	s6, s12, s15
 800d572:	f105 0508 	add.w	r5, r5, #8
 800d576:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d57a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800d57e:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d582:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d586:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d58a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800d58e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d592:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d596:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800d59a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800d59e:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d5a2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d5a6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d5aa:	d1c9      	bne.n	800d540 <arm_rfft_fast_f32+0x10c>
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	f000 bb28 	b.w	800dc0c <arm_cfft_f32>

0800d5bc <arm_cfft_radix8by2_f32>:
 800d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	ed2d 8b06 	vpush	{d8-d10}
 800d5c8:	f8b7 e000 	ldrh.w	lr, [r7]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800d5d2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800d5d6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800d5da:	f000 80b0 	beq.w	800d73e <arm_cfft_radix8by2_f32+0x182>
 800d5de:	008b      	lsls	r3, r1, #2
 800d5e0:	3210      	adds	r2, #16
 800d5e2:	f100 0610 	add.w	r6, r0, #16
 800d5e6:	f108 0510 	add.w	r5, r8, #16
 800d5ea:	3310      	adds	r3, #16
 800d5ec:	18c4      	adds	r4, r0, r3
 800d5ee:	4443      	add	r3, r8
 800d5f0:	ed55 6a04 	vldr	s13, [r5, #-16]
 800d5f4:	f1be 0e01 	subs.w	lr, lr, #1
 800d5f8:	ed56 4a04 	vldr	s9, [r6, #-16]
 800d5fc:	f104 0410 	add.w	r4, r4, #16
 800d600:	ed15 7a03 	vldr	s14, [r5, #-12]
 800d604:	f106 0610 	add.w	r6, r6, #16
 800d608:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800d60c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800d610:	ed55 2a01 	vldr	s5, [r5, #-4]
 800d614:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800d618:	ed53 0a04 	vldr	s1, [r3, #-16]
 800d61c:	f102 0210 	add.w	r2, r2, #16
 800d620:	ed13 5a03 	vldr	s10, [r3, #-12]
 800d624:	f105 0510 	add.w	r5, r5, #16
 800d628:	ed13 3a02 	vldr	s6, [r3, #-8]
 800d62c:	f103 0310 	add.w	r3, r3, #16
 800d630:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800d634:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800d638:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800d63c:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d640:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800d644:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800d648:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d64c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800d650:	ee76 aa87 	vadd.f32	s21, s13, s14
 800d654:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800d658:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d65c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800d660:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800d664:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800d668:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d66c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d670:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800d674:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d678:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d67c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d680:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800d684:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800d688:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d68c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800d690:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d694:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800d698:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d69c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800d6a0:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d6a4:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800d6a8:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800d6ac:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800d6b0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d6b4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d6b8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d6bc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d6c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d6c4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d6c8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d6cc:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d6d0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d6d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d6d8:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d6dc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d6e0:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800d6e4:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800d6e8:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800d6ec:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800d6f0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800d6f4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800d6f8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d6fc:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d700:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d704:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d708:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d70c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d710:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d714:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d718:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d71c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d720:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d724:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d728:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800d72c:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800d730:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800d734:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800d738:	f47f af5a 	bne.w	800d5f0 <arm_cfft_radix8by2_f32+0x34>
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	b28c      	uxth	r4, r1
 800d740:	2302      	movs	r3, #2
 800d742:	4621      	mov	r1, r4
 800d744:	f000 fb78 	bl	800de38 <arm_radix8_butterfly_f32>
 800d748:	4621      	mov	r1, r4
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	4640      	mov	r0, r8
 800d74e:	2302      	movs	r3, #2
 800d750:	ecbd 8b06 	vpop	{d8-d10}
 800d754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d758:	f000 bb6e 	b.w	800de38 <arm_radix8_butterfly_f32>

0800d75c <arm_cfft_radix8by4_f32>:
 800d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d760:	ed2d 8b06 	vpush	{d8-d10}
 800d764:	8804      	ldrh	r4, [r0, #0]
 800d766:	b08f      	sub	sp, #60	; 0x3c
 800d768:	ed91 6a00 	vldr	s12, [r1]
 800d76c:	460a      	mov	r2, r1
 800d76e:	0864      	lsrs	r4, r4, #1
 800d770:	ed91 7a01 	vldr	s14, [r1, #4]
 800d774:	9101      	str	r1, [sp, #4]
 800d776:	00a3      	lsls	r3, r4, #2
 800d778:	6841      	ldr	r1, [r0, #4]
 800d77a:	0864      	lsrs	r4, r4, #1
 800d77c:	900c      	str	r0, [sp, #48]	; 0x30
 800d77e:	9205      	str	r2, [sp, #20]
 800d780:	f101 0610 	add.w	r6, r1, #16
 800d784:	4625      	mov	r5, r4
 800d786:	940b      	str	r4, [sp, #44]	; 0x2c
 800d788:	f101 0408 	add.w	r4, r1, #8
 800d78c:	9602      	str	r6, [sp, #8]
 800d78e:	9407      	str	r4, [sp, #28]
 800d790:	18d4      	adds	r4, r2, r3
 800d792:	1eaa      	subs	r2, r5, #2
 800d794:	f101 0518 	add.w	r5, r1, #24
 800d798:	18e0      	adds	r0, r4, r3
 800d79a:	edd4 4a00 	vldr	s9, [r4]
 800d79e:	ed94 4a01 	vldr	s8, [r4, #4]
 800d7a2:	46a6      	mov	lr, r4
 800d7a4:	edd0 6a00 	vldr	s13, [r0]
 800d7a8:	18c7      	adds	r7, r0, r3
 800d7aa:	edd0 7a01 	vldr	s15, [r0, #4]
 800d7ae:	46a0      	mov	r8, r4
 800d7b0:	ee76 5a26 	vadd.f32	s11, s12, s13
 800d7b4:	ed97 5a00 	vldr	s10, [r7]
 800d7b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d7bc:	4604      	mov	r4, r0
 800d7be:	9506      	str	r5, [sp, #24]
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800d7c6:	900a      	str	r0, [sp, #40]	; 0x28
 800d7c8:	9801      	ldr	r0, [sp, #4]
 800d7ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7d2:	ed97 3a01 	vldr	s6, [r7, #4]
 800d7d6:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d7da:	46bc      	mov	ip, r7
 800d7dc:	ee76 3a84 	vadd.f32	s7, s13, s8
 800d7e0:	9704      	str	r7, [sp, #16]
 800d7e2:	ee36 7a44 	vsub.f32	s14, s12, s8
 800d7e6:	f8cd e00c 	str.w	lr, [sp, #12]
 800d7ea:	ee12 9a90 	vmov	r9, s5
 800d7ee:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d7f2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800d7f6:	1f3e      	subs	r6, r7, #4
 800d7f8:	f840 9b08 	str.w	r9, [r0], #8
 800d7fc:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800d800:	edde 2a01 	vldr	s5, [lr, #4]
 800d804:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800d808:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d80c:	eddc 4a01 	vldr	s9, [ip, #4]
 800d810:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d814:	9001      	str	r0, [sp, #4]
 800d816:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d81a:	9805      	ldr	r0, [sp, #20]
 800d81c:	ee13 9a90 	vmov	r9, s7
 800d820:	ee37 7a43 	vsub.f32	s14, s14, s6
 800d824:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d828:	f1ae 0704 	sub.w	r7, lr, #4
 800d82c:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d830:	ee76 6a83 	vadd.f32	s13, s13, s6
 800d834:	ed80 6a01 	vstr	s12, [r0, #4]
 800d838:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d83c:	f848 9b08 	str.w	r9, [r8], #8
 800d840:	edce 4a01 	vstr	s9, [lr, #4]
 800d844:	ee15 ea90 	vmov	lr, s11
 800d848:	f844 eb08 	str.w	lr, [r4], #8
 800d84c:	ee16 ea90 	vmov	lr, s13
 800d850:	9408      	str	r4, [sp, #32]
 800d852:	462c      	mov	r4, r5
 800d854:	ed85 7a01 	vstr	s14, [r5, #4]
 800d858:	9d04      	ldr	r5, [sp, #16]
 800d85a:	f84c eb08 	str.w	lr, [ip], #8
 800d85e:	edc5 7a01 	vstr	s15, [r5, #4]
 800d862:	0855      	lsrs	r5, r2, #1
 800d864:	9509      	str	r5, [sp, #36]	; 0x24
 800d866:	f000 8130 	beq.w	800daca <arm_cfft_radix8by4_f32+0x36e>
 800d86a:	9805      	ldr	r0, [sp, #20]
 800d86c:	3b08      	subs	r3, #8
 800d86e:	46ab      	mov	fp, r5
 800d870:	f1a4 020c 	sub.w	r2, r4, #12
 800d874:	f100 0510 	add.w	r5, r0, #16
 800d878:	f101 0920 	add.w	r9, r1, #32
 800d87c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800d880:	f8dd a008 	ldr.w	sl, [sp, #8]
 800d884:	4433      	add	r3, r6
 800d886:	3410      	adds	r4, #16
 800d888:	4660      	mov	r0, ip
 800d88a:	4641      	mov	r1, r8
 800d88c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800d890:	ed54 6a02 	vldr	s13, [r4, #-8]
 800d894:	f1bb 0b01 	subs.w	fp, fp, #1
 800d898:	ed55 5a02 	vldr	s11, [r5, #-8]
 800d89c:	f10a 0a08 	add.w	sl, sl, #8
 800d8a0:	edd1 7a00 	vldr	s15, [r1]
 800d8a4:	f105 0508 	add.w	r5, r5, #8
 800d8a8:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800d8ac:	edd0 2a00 	vldr	s5, [r0]
 800d8b0:	ed14 7a01 	vldr	s14, [r4, #-4]
 800d8b4:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d8b8:	ed55 6a03 	vldr	s13, [r5, #-12]
 800d8bc:	f1a2 0208 	sub.w	r2, r2, #8
 800d8c0:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800d8c4:	ed90 2a01 	vldr	s4, [r0, #4]
 800d8c8:	ee36 5a87 	vadd.f32	s10, s13, s14
 800d8cc:	ed91 6a01 	vldr	s12, [r1, #4]
 800d8d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d8d4:	f109 0910 	add.w	r9, r9, #16
 800d8d8:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800d8dc:	f104 0408 	add.w	r4, r4, #8
 800d8e0:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800d8e4:	f10e 0e18 	add.w	lr, lr, #24
 800d8e8:	ee37 3a67 	vsub.f32	s6, s14, s15
 800d8ec:	f1a3 0308 	sub.w	r3, r3, #8
 800d8f0:	ed45 6a04 	vstr	s13, [r5, #-16]
 800d8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8f8:	edd1 6a01 	vldr	s13, [r1, #4]
 800d8fc:	ee75 1a86 	vadd.f32	s3, s11, s12
 800d900:	edd0 4a01 	vldr	s9, [r0, #4]
 800d904:	ee33 3a22 	vadd.f32	s6, s6, s5
 800d908:	ee75 6a26 	vadd.f32	s13, s10, s13
 800d90c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800d910:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800d914:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d918:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800d91c:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d920:	ed45 6a03 	vstr	s13, [r5, #-12]
 800d924:	ee36 2a02 	vadd.f32	s4, s12, s4
 800d928:	edd6 7a00 	vldr	s15, [r6]
 800d92c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800d930:	ed97 1a00 	vldr	s2, [r7]
 800d934:	ee77 2a62 	vsub.f32	s5, s14, s5
 800d938:	ed92 8a04 	vldr	s16, [r2, #16]
 800d93c:	ee71 8a27 	vadd.f32	s17, s2, s15
 800d940:	ed93 aa04 	vldr	s20, [r3, #16]
 800d944:	ed16 7a01 	vldr	s14, [r6, #-4]
 800d948:	ee71 7a67 	vsub.f32	s15, s2, s15
 800d94c:	ed57 0a01 	vldr	s1, [r7, #-4]
 800d950:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800d954:	ee38 6a88 	vadd.f32	s12, s17, s16
 800d958:	edd3 9a03 	vldr	s19, [r3, #12]
 800d95c:	ee30 0a87 	vadd.f32	s0, s1, s14
 800d960:	ed92 9a03 	vldr	s18, [r2, #12]
 800d964:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800d968:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800d96c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800d970:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800d974:	ee16 ca10 	vmov	ip, s12
 800d978:	ee30 6a49 	vsub.f32	s12, s0, s18
 800d97c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800d980:	f847 c908 	str.w	ip, [r7], #-8
 800d984:	ee34 4a29 	vadd.f32	s8, s8, s19
 800d988:	edd2 8a03 	vldr	s17, [r2, #12]
 800d98c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800d990:	ed93 8a03 	vldr	s16, [r3, #12]
 800d994:	ee71 0a47 	vsub.f32	s1, s2, s14
 800d998:	ee30 0a28 	vadd.f32	s0, s0, s17
 800d99c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800d9a0:	ee36 6a69 	vsub.f32	s12, s12, s19
 800d9a4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800d9a8:	ee75 5aca 	vsub.f32	s11, s11, s20
 800d9ac:	ed87 0a01 	vstr	s0, [r7, #4]
 800d9b0:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800d9b4:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800d9b8:	ee21 8a80 	vmul.f32	s16, s3, s0
 800d9bc:	ee23 7a26 	vmul.f32	s14, s6, s13
 800d9c0:	ee64 7a26 	vmul.f32	s15, s8, s13
 800d9c4:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d9c8:	ee24 4a00 	vmul.f32	s8, s8, s0
 800d9cc:	ee23 3a00 	vmul.f32	s6, s6, s0
 800d9d0:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800d9d4:	ee24 0a80 	vmul.f32	s0, s9, s0
 800d9d8:	ee38 7a07 	vadd.f32	s14, s16, s14
 800d9dc:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d9e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d9e4:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d9e8:	ee17 ca10 	vmov	ip, s14
 800d9ec:	f841 cb08 	str.w	ip, [r1], #8
 800d9f0:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d9f4:	ed82 0a04 	vstr	s0, [r2, #16]
 800d9f8:	edc2 6a03 	vstr	s13, [r2, #12]
 800d9fc:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800da00:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800da04:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800da08:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800da0c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800da10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800da14:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800da18:	ee66 7a27 	vmul.f32	s15, s12, s15
 800da1c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800da20:	ee66 6a26 	vmul.f32	s13, s12, s13
 800da24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da28:	ee34 6a24 	vadd.f32	s12, s8, s9
 800da2c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800da30:	ee35 5a63 	vsub.f32	s10, s10, s7
 800da34:	ee17 ca90 	vmov	ip, s15
 800da38:	ed04 6a04 	vstr	s12, [r4, #-16]
 800da3c:	ed04 5a03 	vstr	s10, [r4, #-12]
 800da40:	f846 c908 	str.w	ip, [r6], #-8
 800da44:	edc6 6a01 	vstr	s13, [r6, #4]
 800da48:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800da4c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800da50:	ee62 5a27 	vmul.f32	s11, s4, s15
 800da54:	ee22 6a87 	vmul.f32	s12, s5, s14
 800da58:	ee22 2a07 	vmul.f32	s4, s4, s14
 800da5c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800da60:	ee61 6a07 	vmul.f32	s13, s2, s14
 800da64:	ee20 7a87 	vmul.f32	s14, s1, s14
 800da68:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800da6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800da70:	ee35 6a86 	vadd.f32	s12, s11, s12
 800da74:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800da78:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800da7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da80:	ee16 ca10 	vmov	ip, s12
 800da84:	f840 cb08 	str.w	ip, [r0], #8
 800da88:	ed40 2a01 	vstr	s5, [r0, #-4]
 800da8c:	edc3 0a04 	vstr	s1, [r3, #16]
 800da90:	edc3 7a03 	vstr	s15, [r3, #12]
 800da94:	f47f aefc 	bne.w	800d890 <arm_cfft_radix8by4_f32+0x134>
 800da98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da9a:	9802      	ldr	r0, [sp, #8]
 800da9c:	00cb      	lsls	r3, r1, #3
 800da9e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800daa2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800daa6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800daaa:	4498      	add	r8, r3
 800daac:	449c      	add	ip, r3
 800daae:	9102      	str	r1, [sp, #8]
 800dab0:	9901      	ldr	r1, [sp, #4]
 800dab2:	4419      	add	r1, r3
 800dab4:	9101      	str	r1, [sp, #4]
 800dab6:	9907      	ldr	r1, [sp, #28]
 800dab8:	4419      	add	r1, r3
 800daba:	9107      	str	r1, [sp, #28]
 800dabc:	9908      	ldr	r1, [sp, #32]
 800dabe:	4419      	add	r1, r3
 800dac0:	9b06      	ldr	r3, [sp, #24]
 800dac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dac6:	9108      	str	r1, [sp, #32]
 800dac8:	9306      	str	r3, [sp, #24]
 800daca:	9a01      	ldr	r2, [sp, #4]
 800dacc:	2304      	movs	r3, #4
 800dace:	9e08      	ldr	r6, [sp, #32]
 800dad0:	edd2 7a00 	vldr	s15, [r2]
 800dad4:	ed96 7a00 	vldr	s14, [r6]
 800dad8:	edd8 2a00 	vldr	s5, [r8]
 800dadc:	ee77 5a87 	vadd.f32	s11, s15, s14
 800dae0:	ed9c 3a00 	vldr	s6, [ip]
 800dae4:	ed92 6a01 	vldr	s12, [r2, #4]
 800dae8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800daec:	edd6 6a01 	vldr	s13, [r6, #4]
 800daf0:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800daf4:	ed9c 2a01 	vldr	s4, [ip, #4]
 800daf8:	ee36 5a26 	vadd.f32	s10, s12, s13
 800dafc:	edd8 7a01 	vldr	s15, [r8, #4]
 800db00:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db04:	9d02      	ldr	r5, [sp, #8]
 800db06:	ee34 6a83 	vadd.f32	s12, s9, s6
 800db0a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800db0e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800db12:	9805      	ldr	r0, [sp, #20]
 800db14:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800db18:	4621      	mov	r1, r4
 800db1a:	ed82 6a00 	vstr	s12, [r2]
 800db1e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800db22:	edd8 3a01 	vldr	s7, [r8, #4]
 800db26:	ee75 5a67 	vsub.f32	s11, s10, s15
 800db2a:	eddc 1a01 	vldr	s3, [ip, #4]
 800db2e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800db32:	ee75 3a23 	vadd.f32	s7, s10, s7
 800db36:	ee74 4a83 	vadd.f32	s9, s9, s6
 800db3a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800db3e:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800db42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db46:	ee36 6a43 	vsub.f32	s12, s12, s6
 800db4a:	ed82 5a01 	vstr	s10, [r2, #4]
 800db4e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800db52:	9a07      	ldr	r2, [sp, #28]
 800db54:	ee77 7a02 	vadd.f32	s15, s14, s4
 800db58:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800db5c:	edd2 2a00 	vldr	s5, [r2]
 800db60:	ed92 5a01 	vldr	s10, [r2, #4]
 800db64:	ee64 3a22 	vmul.f32	s7, s8, s5
 800db68:	ee24 4a05 	vmul.f32	s8, s8, s10
 800db6c:	ee24 5a85 	vmul.f32	s10, s9, s10
 800db70:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800db74:	ee33 5a85 	vadd.f32	s10, s7, s10
 800db78:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800db7c:	ed88 5a00 	vstr	s10, [r8]
 800db80:	edc8 4a01 	vstr	s9, [r8, #4]
 800db84:	edd5 4a01 	vldr	s9, [r5, #4]
 800db88:	edd5 6a00 	vldr	s13, [r5]
 800db8c:	9d06      	ldr	r5, [sp, #24]
 800db8e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800db92:	ee26 6a24 	vmul.f32	s12, s12, s9
 800db96:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800db9a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800db9e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800dba2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800dba6:	ed86 6a01 	vstr	s12, [r6, #4]
 800dbaa:	edc6 5a00 	vstr	s11, [r6]
 800dbae:	edd5 5a01 	vldr	s11, [r5, #4]
 800dbb2:	edd5 6a00 	vldr	s13, [r5]
 800dbb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dbb8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800dbbc:	ee67 6a26 	vmul.f32	s13, s14, s13
 800dbc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dbc4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dbc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dbcc:	ee36 7a07 	vadd.f32	s14, s12, s14
 800dbd0:	edcc 7a01 	vstr	s15, [ip, #4]
 800dbd4:	ed8c 7a00 	vstr	s14, [ip]
 800dbd8:	6872      	ldr	r2, [r6, #4]
 800dbda:	f000 f92d 	bl	800de38 <arm_radix8_butterfly_f32>
 800dbde:	9803      	ldr	r0, [sp, #12]
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	6872      	ldr	r2, [r6, #4]
 800dbe4:	2304      	movs	r3, #4
 800dbe6:	f000 f927 	bl	800de38 <arm_radix8_butterfly_f32>
 800dbea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbec:	4621      	mov	r1, r4
 800dbee:	6872      	ldr	r2, [r6, #4]
 800dbf0:	2304      	movs	r3, #4
 800dbf2:	f000 f921 	bl	800de38 <arm_radix8_butterfly_f32>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	6872      	ldr	r2, [r6, #4]
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	9804      	ldr	r0, [sp, #16]
 800dbfe:	b00f      	add	sp, #60	; 0x3c
 800dc00:	ecbd 8b06 	vpop	{d8-d10}
 800dc04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc08:	f000 b916 	b.w	800de38 <arm_radix8_butterfly_f32>

0800dc0c <arm_cfft_f32>:
 800dc0c:	2a01      	cmp	r2, #1
 800dc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc12:	4606      	mov	r6, r0
 800dc14:	4617      	mov	r7, r2
 800dc16:	460c      	mov	r4, r1
 800dc18:	4698      	mov	r8, r3
 800dc1a:	8805      	ldrh	r5, [r0, #0]
 800dc1c:	d053      	beq.n	800dcc6 <arm_cfft_f32+0xba>
 800dc1e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800dc22:	d04b      	beq.n	800dcbc <arm_cfft_f32+0xb0>
 800dc24:	d916      	bls.n	800dc54 <arm_cfft_f32+0x48>
 800dc26:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800dc2a:	d01a      	beq.n	800dc62 <arm_cfft_f32+0x56>
 800dc2c:	d95a      	bls.n	800dce4 <arm_cfft_f32+0xd8>
 800dc2e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800dc32:	d043      	beq.n	800dcbc <arm_cfft_f32+0xb0>
 800dc34:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800dc38:	d105      	bne.n	800dc46 <arm_cfft_f32+0x3a>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	6872      	ldr	r2, [r6, #4]
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 f8f9 	bl	800de38 <arm_radix8_butterfly_f32>
 800dc46:	f1b8 0f00 	cmp.w	r8, #0
 800dc4a:	d111      	bne.n	800dc70 <arm_cfft_f32+0x64>
 800dc4c:	2f01      	cmp	r7, #1
 800dc4e:	d016      	beq.n	800dc7e <arm_cfft_f32+0x72>
 800dc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc54:	2d20      	cmp	r5, #32
 800dc56:	d031      	beq.n	800dcbc <arm_cfft_f32+0xb0>
 800dc58:	d948      	bls.n	800dcec <arm_cfft_f32+0xe0>
 800dc5a:	2d40      	cmp	r5, #64	; 0x40
 800dc5c:	d0ed      	beq.n	800dc3a <arm_cfft_f32+0x2e>
 800dc5e:	2d80      	cmp	r5, #128	; 0x80
 800dc60:	d1f1      	bne.n	800dc46 <arm_cfft_f32+0x3a>
 800dc62:	4621      	mov	r1, r4
 800dc64:	4630      	mov	r0, r6
 800dc66:	f7ff fca9 	bl	800d5bc <arm_cfft_radix8by2_f32>
 800dc6a:	f1b8 0f00 	cmp.w	r8, #0
 800dc6e:	d0ed      	beq.n	800dc4c <arm_cfft_f32+0x40>
 800dc70:	68b2      	ldr	r2, [r6, #8]
 800dc72:	4620      	mov	r0, r4
 800dc74:	89b1      	ldrh	r1, [r6, #12]
 800dc76:	f7f2 facb 	bl	8000210 <arm_bitreversal_32>
 800dc7a:	2f01      	cmp	r7, #1
 800dc7c:	d1e8      	bne.n	800dc50 <arm_cfft_f32+0x44>
 800dc7e:	ee07 5a90 	vmov	s15, r5
 800dc82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dc8e:	2d00      	cmp	r5, #0
 800dc90:	d0de      	beq.n	800dc50 <arm_cfft_f32+0x44>
 800dc92:	f104 0108 	add.w	r1, r4, #8
 800dc96:	2300      	movs	r3, #0
 800dc98:	ed11 7a02 	vldr	s14, [r1, #-8]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800dca2:	3108      	adds	r1, #8
 800dca4:	429d      	cmp	r5, r3
 800dca6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dcaa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dcae:	ed01 7a04 	vstr	s14, [r1, #-16]
 800dcb2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800dcb6:	d1ef      	bne.n	800dc98 <arm_cfft_f32+0x8c>
 800dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7ff fd4c 	bl	800d75c <arm_cfft_radix8by4_f32>
 800dcc4:	e7bf      	b.n	800dc46 <arm_cfft_f32+0x3a>
 800dcc6:	b1a5      	cbz	r5, 800dcf2 <arm_cfft_f32+0xe6>
 800dcc8:	f101 030c 	add.w	r3, r1, #12
 800dccc:	2200      	movs	r2, #0
 800dcce:	ed53 7a02 	vldr	s15, [r3, #-8]
 800dcd2:	3201      	adds	r2, #1
 800dcd4:	3308      	adds	r3, #8
 800dcd6:	eef1 7a67 	vneg.f32	s15, s15
 800dcda:	4295      	cmp	r5, r2
 800dcdc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800dce0:	d1f5      	bne.n	800dcce <arm_cfft_f32+0xc2>
 800dce2:	e79c      	b.n	800dc1e <arm_cfft_f32+0x12>
 800dce4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800dce8:	d0a7      	beq.n	800dc3a <arm_cfft_f32+0x2e>
 800dcea:	e7ac      	b.n	800dc46 <arm_cfft_f32+0x3a>
 800dcec:	2d10      	cmp	r5, #16
 800dcee:	d0b8      	beq.n	800dc62 <arm_cfft_f32+0x56>
 800dcf0:	e7a9      	b.n	800dc46 <arm_cfft_f32+0x3a>
 800dcf2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800dcf6:	d896      	bhi.n	800dc26 <arm_cfft_f32+0x1a>
 800dcf8:	e7ac      	b.n	800dc54 <arm_cfft_f32+0x48>
 800dcfa:	bf00      	nop

0800dcfc <arm_cmplx_mag_squared_f32>:
 800dcfc:	b470      	push	{r4, r5, r6}
 800dcfe:	0896      	lsrs	r6, r2, #2
 800dd00:	d03e      	beq.n	800dd80 <arm_cmplx_mag_squared_f32+0x84>
 800dd02:	f100 0320 	add.w	r3, r0, #32
 800dd06:	f101 0410 	add.w	r4, r1, #16
 800dd0a:	4635      	mov	r5, r6
 800dd0c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800dd10:	3d01      	subs	r5, #1
 800dd12:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800dd16:	f104 0410 	add.w	r4, r4, #16
 800dd1a:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800dd1e:	ee27 5a07 	vmul.f32	s10, s14, s14
 800dd22:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800dd26:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dd2a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800dd2e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800dd32:	ed13 4a03 	vldr	s8, [r3, #-12]
 800dd36:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800dd3a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800dd3e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dd42:	ed53 4a01 	vldr	s9, [r3, #-4]
 800dd46:	ee24 4a04 	vmul.f32	s8, s8, s8
 800dd4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dd4e:	f103 0320 	add.w	r3, r3, #32
 800dd52:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800dd56:	ee75 5a25 	vadd.f32	s11, s10, s11
 800dd5a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dd5e:	ee37 7a04 	vadd.f32	s14, s14, s8
 800dd62:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800dd66:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 800dd6a:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800dd6e:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 800dd72:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800dd76:	d1c9      	bne.n	800dd0c <arm_cmplx_mag_squared_f32+0x10>
 800dd78:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800dd7c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800dd80:	f012 0203 	ands.w	r2, r2, #3
 800dd84:	d010      	beq.n	800dda8 <arm_cmplx_mag_squared_f32+0xac>
 800dd86:	3008      	adds	r0, #8
 800dd88:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dd8c:	3a01      	subs	r2, #1
 800dd8e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800dd92:	f100 0008 	add.w	r0, r0, #8
 800dd96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dd9a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dd9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dda2:	ece1 7a01 	vstmia	r1!, {s15}
 800dda6:	d1ef      	bne.n	800dd88 <arm_cmplx_mag_squared_f32+0x8c>
 800dda8:	bc70      	pop	{r4, r5, r6}
 800ddaa:	4770      	bx	lr

0800ddac <arm_mult_f32>:
 800ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddae:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ddb2:	d033      	beq.n	800de1c <arm_mult_f32+0x70>
 800ddb4:	f100 0610 	add.w	r6, r0, #16
 800ddb8:	f101 0510 	add.w	r5, r1, #16
 800ddbc:	f102 0410 	add.w	r4, r2, #16
 800ddc0:	4677      	mov	r7, lr
 800ddc2:	ed16 7a04 	vldr	s14, [r6, #-16]
 800ddc6:	3f01      	subs	r7, #1
 800ddc8:	ed15 6a04 	vldr	s12, [r5, #-16]
 800ddcc:	f106 0610 	add.w	r6, r6, #16
 800ddd0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800ddd4:	f105 0510 	add.w	r5, r5, #16
 800ddd8:	ee27 6a06 	vmul.f32	s12, s14, s12
 800dddc:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800dde0:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800dde4:	f104 0410 	add.w	r4, r4, #16
 800dde8:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800ddec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ddf0:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800ddf4:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800ddf8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ddfc:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800de00:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800de04:	ee67 7a86 	vmul.f32	s15, s15, s12
 800de08:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800de0c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800de10:	d1d7      	bne.n	800ddc2 <arm_mult_f32+0x16>
 800de12:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800de16:	4420      	add	r0, r4
 800de18:	4421      	add	r1, r4
 800de1a:	4422      	add	r2, r4
 800de1c:	f013 0303 	ands.w	r3, r3, #3
 800de20:	d009      	beq.n	800de36 <arm_mult_f32+0x8a>
 800de22:	ecf0 7a01 	vldmia	r0!, {s15}
 800de26:	3b01      	subs	r3, #1
 800de28:	ecb1 7a01 	vldmia	r1!, {s14}
 800de2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de30:	ece2 7a01 	vstmia	r2!, {s15}
 800de34:	d1f5      	bne.n	800de22 <arm_mult_f32+0x76>
 800de36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de38 <arm_radix8_butterfly_f32>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4603      	mov	r3, r0
 800de40:	468a      	mov	sl, r1
 800de42:	468b      	mov	fp, r1
 800de44:	3304      	adds	r3, #4
 800de46:	ed2d 8b10 	vpush	{d8-d15}
 800de4a:	469c      	mov	ip, r3
 800de4c:	b09d      	sub	sp, #116	; 0x74
 800de4e:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800e15c <arm_radix8_butterfly_f32+0x324>
 800de52:	9019      	str	r0, [sp, #100]	; 0x64
 800de54:	921a      	str	r2, [sp, #104]	; 0x68
 800de56:	931b      	str	r3, [sp, #108]	; 0x6c
 800de58:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800de5c:	f04f 0800 	mov.w	r8, #0
 800de60:	461a      	mov	r2, r3
 800de62:	9311      	str	r3, [sp, #68]	; 0x44
 800de64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de68:	4611      	mov	r1, r2
 800de6a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	0053      	lsls	r3, r2, #1
 800de72:	18d5      	adds	r5, r2, r3
 800de74:	9301      	str	r3, [sp, #4]
 800de76:	0113      	lsls	r3, r2, #4
 800de78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800de7a:	194c      	adds	r4, r1, r5
 800de7c:	eb02 0609 	add.w	r6, r2, r9
 800de80:	9302      	str	r3, [sp, #8]
 800de82:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800de86:	4613      	mov	r3, r2
 800de88:	190a      	adds	r2, r1, r4
 800de8a:	eb06 0709 	add.w	r7, r6, r9
 800de8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800de92:	1888      	adds	r0, r1, r2
 800de94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800de98:	4401      	add	r1, r0
 800de9a:	3204      	adds	r2, #4
 800de9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800dea0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800dea4:	9b00      	ldr	r3, [sp, #0]
 800dea6:	3104      	adds	r1, #4
 800dea8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800deac:	44d8      	add	r8, fp
 800deae:	ed90 7a00 	vldr	s14, [r0]
 800deb2:	ed94 5a00 	vldr	s10, [r4]
 800deb6:	45c2      	cmp	sl, r8
 800deb8:	edd7 3a00 	vldr	s7, [r7]
 800debc:	ed96 6a00 	vldr	s12, [r6]
 800dec0:	ee37 1a85 	vadd.f32	s2, s15, s10
 800dec4:	ed52 6a01 	vldr	s13, [r2, #-4]
 800dec8:	ee73 4a87 	vadd.f32	s9, s7, s14
 800decc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ded0:	edd5 7a00 	vldr	s15, [r5]
 800ded4:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ded8:	ed11 7a01 	vldr	s14, [r1, #-4]
 800dedc:	ee36 2a26 	vadd.f32	s4, s12, s13
 800dee0:	ee37 4a87 	vadd.f32	s8, s15, s14
 800dee4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dee8:	ee71 5a24 	vadd.f32	s11, s2, s9
 800deec:	ee32 6a04 	vadd.f32	s12, s4, s8
 800def0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800def4:	ee31 1a64 	vsub.f32	s2, s2, s9
 800def8:	ee75 4a86 	vadd.f32	s9, s11, s12
 800defc:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800df00:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800df04:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800df08:	ee32 2a44 	vsub.f32	s4, s4, s8
 800df0c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800df10:	ed94 0a01 	vldr	s0, [r4, #4]
 800df14:	edc4 5a00 	vstr	s11, [r4]
 800df18:	ee36 7a87 	vadd.f32	s14, s13, s14
 800df1c:	edd6 5a01 	vldr	s11, [r6, #4]
 800df20:	edd5 2a01 	vldr	s5, [r5, #4]
 800df24:	ee75 1a27 	vadd.f32	s3, s10, s15
 800df28:	ed92 4a00 	vldr	s8, [r2]
 800df2c:	ee75 7a67 	vsub.f32	s15, s10, s15
 800df30:	edd1 4a00 	vldr	s9, [r1]
 800df34:	ee27 7a09 	vmul.f32	s14, s14, s18
 800df38:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800df3c:	ed9c 6a00 	vldr	s12, [ip]
 800df40:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800df44:	edd0 0a01 	vldr	s1, [r0, #4]
 800df48:	ed97 5a01 	vldr	s10, [r7, #4]
 800df4c:	ee35 4a84 	vadd.f32	s8, s11, s8
 800df50:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800df54:	ee73 5a26 	vadd.f32	s11, s6, s13
 800df58:	ee76 2a00 	vadd.f32	s5, s12, s0
 800df5c:	ee73 6a66 	vsub.f32	s13, s6, s13
 800df60:	ee36 6a40 	vsub.f32	s12, s12, s0
 800df64:	ee35 0a20 	vadd.f32	s0, s10, s1
 800df68:	ee65 5a89 	vmul.f32	s11, s11, s18
 800df6c:	ee35 5a60 	vsub.f32	s10, s10, s1
 800df70:	ee32 3a80 	vadd.f32	s6, s5, s0
 800df74:	ee74 0a24 	vadd.f32	s1, s8, s9
 800df78:	ee66 6a89 	vmul.f32	s13, s13, s18
 800df7c:	ee74 4a64 	vsub.f32	s9, s8, s9
 800df80:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800df84:	ee75 2a25 	vadd.f32	s5, s10, s11
 800df88:	ee33 0a20 	vadd.f32	s0, s6, s1
 800df8c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800df90:	ee33 3a60 	vsub.f32	s6, s6, s1
 800df94:	ee36 5a26 	vadd.f32	s10, s12, s13
 800df98:	ed8c 0a00 	vstr	s0, [ip]
 800df9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dfa0:	449c      	add	ip, r3
 800dfa2:	ee33 6a87 	vadd.f32	s12, s7, s14
 800dfa6:	ed84 3a01 	vstr	s6, [r4, #4]
 800dfaa:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800dfae:	441c      	add	r4, r3
 800dfb0:	ee71 3a24 	vadd.f32	s7, s2, s9
 800dfb4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800dfb8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800dfbc:	edc7 3a00 	vstr	s7, [r7]
 800dfc0:	ee34 1a42 	vsub.f32	s2, s8, s4
 800dfc4:	edc0 4a00 	vstr	s9, [r0]
 800dfc8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800dfcc:	ee75 4a46 	vsub.f32	s9, s10, s12
 800dfd0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800dfd4:	ed87 1a01 	vstr	s2, [r7, #4]
 800dfd8:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800dfdc:	441f      	add	r7, r3
 800dfde:	ee32 4a04 	vadd.f32	s8, s4, s8
 800dfe2:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800dfe6:	ee36 6a05 	vadd.f32	s12, s12, s10
 800dfea:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dfee:	ed80 4a01 	vstr	s8, [r0, #4]
 800dff2:	ed86 3a00 	vstr	s6, [r6]
 800dff6:	4418      	add	r0, r3
 800dff8:	ed41 1a01 	vstr	s3, [r1, #-4]
 800dffc:	ed42 3a01 	vstr	s7, [r2, #-4]
 800e000:	edc5 7a00 	vstr	s15, [r5]
 800e004:	edc6 4a01 	vstr	s9, [r6, #4]
 800e008:	441e      	add	r6, r3
 800e00a:	ed81 6a00 	vstr	s12, [r1]
 800e00e:	4419      	add	r1, r3
 800e010:	edc2 5a00 	vstr	s11, [r2]
 800e014:	441a      	add	r2, r3
 800e016:	ed85 7a01 	vstr	s14, [r5, #4]
 800e01a:	441d      	add	r5, r3
 800e01c:	f63f af44 	bhi.w	800dea8 <arm_radix8_butterfly_f32+0x70>
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e024:	2b07      	cmp	r3, #7
 800e026:	f240 81f4 	bls.w	800e412 <arm_radix8_butterfly_f32+0x5da>
 800e02a:	9901      	ldr	r1, [sp, #4]
 800e02c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800e030:	9d02      	ldr	r5, [sp, #8]
 800e032:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800e036:	3101      	adds	r1, #1
 800e038:	eb04 000e 	add.w	r0, r4, lr
 800e03c:	00e4      	lsls	r4, r4, #3
 800e03e:	3508      	adds	r5, #8
 800e040:	4419      	add	r1, r3
 800e042:	eb00 0c0e 	add.w	ip, r0, lr
 800e046:	9413      	str	r4, [sp, #76]	; 0x4c
 800e048:	00c0      	lsls	r0, r0, #3
 800e04a:	185e      	adds	r6, r3, r1
 800e04c:	4617      	mov	r7, r2
 800e04e:	9218      	str	r2, [sp, #96]	; 0x60
 800e050:	f109 0908 	add.w	r9, r9, #8
 800e054:	199c      	adds	r4, r3, r6
 800e056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e058:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e05a:	9012      	str	r0, [sp, #72]	; 0x48
 800e05c:	195d      	adds	r5, r3, r5
 800e05e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e060:	443a      	add	r2, r7
 800e062:	950c      	str	r5, [sp, #48]	; 0x30
 800e064:	4698      	mov	r8, r3
 800e066:	4420      	add	r0, r4
 800e068:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e06a:	19d7      	adds	r7, r2, r7
 800e06c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e070:	4405      	add	r5, r0
 800e072:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e076:	9710      	str	r7, [sp, #64]	; 0x40
 800e078:	eb0c 070e 	add.w	r7, ip, lr
 800e07c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800e080:	3404      	adds	r4, #4
 800e082:	3004      	adds	r0, #4
 800e084:	44c8      	add	r8, r9
 800e086:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800e08a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e08c:	940a      	str	r4, [sp, #40]	; 0x28
 800e08e:	9009      	str	r0, [sp, #36]	; 0x24
 800e090:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e094:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800e096:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e09a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e09c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800e0a0:	eb07 080e 	add.w	r8, r7, lr
 800e0a4:	eb04 0900 	add.w	r9, r4, r0
 800e0a8:	00f8      	lsls	r0, r7, #3
 800e0aa:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800e0ae:	3504      	adds	r5, #4
 800e0b0:	4607      	mov	r7, r0
 800e0b2:	9017      	str	r0, [sp, #92]	; 0x5c
 800e0b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800e0bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e0be:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800e0c2:	18e3      	adds	r3, r4, r3
 800e0c4:	9508      	str	r5, [sp, #32]
 800e0c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800e0c8:	910e      	str	r1, [sp, #56]	; 0x38
 800e0ca:	4621      	mov	r1, r4
 800e0cc:	eb04 0805 	add.w	r8, r4, r5
 800e0d0:	9304      	str	r3, [sp, #16]
 800e0d2:	19e5      	adds	r5, r4, r7
 800e0d4:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800e0d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800e0da:	9316      	str	r3, [sp, #88]	; 0x58
 800e0dc:	190b      	adds	r3, r1, r4
 800e0de:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800e0e0:	9505      	str	r5, [sp, #20]
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	f100 0308 	add.w	r3, r0, #8
 800e0e8:	9707      	str	r7, [sp, #28]
 800e0ea:	4638      	mov	r0, r7
 800e0ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	9306      	str	r3, [sp, #24]
 800e0f2:	9b00      	ldr	r3, [sp, #0]
 800e0f4:	ed90 fa00 	vldr	s30, [r0]
 800e0f8:	edd0 ba01 	vldr	s23, [r0, #4]
 800e0fc:	9803      	ldr	r0, [sp, #12]
 800e0fe:	9903      	ldr	r1, [sp, #12]
 800e100:	ed90 ba01 	vldr	s22, [r0, #4]
 800e104:	9804      	ldr	r0, [sp, #16]
 800e106:	edd1 ea00 	vldr	s29, [r1]
 800e10a:	edd0 aa01 	vldr	s21, [r0, #4]
 800e10e:	9805      	ldr	r0, [sp, #20]
 800e110:	9905      	ldr	r1, [sp, #20]
 800e112:	edd0 7a01 	vldr	s15, [r0, #4]
 800e116:	ed91 da00 	vldr	s26, [r1]
 800e11a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e11c:	9c04      	ldr	r4, [sp, #16]
 800e11e:	edcd 7a01 	vstr	s15, [sp, #4]
 800e122:	edd8 7a01 	vldr	s15, [r8, #4]
 800e126:	9100      	str	r1, [sp, #0]
 800e128:	edd2 fa00 	vldr	s31, [r2]
 800e12c:	ed94 ea00 	vldr	s28, [r4]
 800e130:	ed92 ca01 	vldr	s24, [r2, #4]
 800e134:	f8dd e020 	ldr.w	lr, [sp, #32]
 800e138:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e13a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e13c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e13e:	edd9 da00 	vldr	s27, [r9]
 800e142:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e144:	edd8 ca00 	vldr	s25, [r8]
 800e148:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e14a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e14c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800e150:	ed99 aa01 	vldr	s20, [r9, #4]
 800e154:	edcd 7a02 	vstr	s15, [sp, #8]
 800e158:	9800      	ldr	r0, [sp, #0]
 800e15a:	e001      	b.n	800e160 <arm_radix8_butterfly_f32+0x328>
 800e15c:	3f3504f3 	.word	0x3f3504f3
 800e160:	edd5 3a00 	vldr	s7, [r5]
 800e164:	44dc      	add	ip, fp
 800e166:	ed91 7a00 	vldr	s14, [r1]
 800e16a:	edd4 8a00 	vldr	s17, [r4]
 800e16e:	45e2      	cmp	sl, ip
 800e170:	ed57 7a01 	vldr	s15, [r7, #-4]
 800e174:	ed90 5a00 	vldr	s10, [r0]
 800e178:	ed56 5a01 	vldr	s11, [r6, #-4]
 800e17c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800e180:	ed92 1a00 	vldr	s2, [r2]
 800e184:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800e188:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800e18c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800e190:	ee31 3a07 	vadd.f32	s6, s2, s14
 800e194:	ed92 8a01 	vldr	s16, [r2, #4]
 800e198:	ee73 6a84 	vadd.f32	s13, s7, s8
 800e19c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800e1a0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800e1a4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e1a8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800e1ac:	ee75 7a84 	vadd.f32	s15, s11, s8
 800e1b0:	ee31 1a47 	vsub.f32	s2, s2, s14
 800e1b4:	ee31 7a85 	vadd.f32	s14, s3, s10
 800e1b8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800e1bc:	ee33 3a46 	vsub.f32	s6, s6, s12
 800e1c0:	ed82 7a00 	vstr	s14, [r2]
 800e1c4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800e1c8:	ed96 6a00 	vldr	s12, [r6]
 800e1cc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800e1d0:	edd5 3a01 	vldr	s7, [r5, #4]
 800e1d4:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800e1d8:	ed90 7a01 	vldr	s14, [r0, #4]
 800e1dc:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800e1e0:	edde 4a00 	vldr	s9, [lr]
 800e1e4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800e1e8:	ee77 2a46 	vsub.f32	s5, s14, s12
 800e1ec:	edd1 6a01 	vldr	s13, [r1, #4]
 800e1f0:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800e1f4:	edd7 0a00 	vldr	s1, [r7]
 800e1f8:	ee77 5a06 	vadd.f32	s11, s14, s12
 800e1fc:	ed94 7a01 	vldr	s14, [r4, #4]
 800e200:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800e204:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800e208:	ee78 4a66 	vsub.f32	s9, s16, s13
 800e20c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800e210:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800e214:	ee77 6a20 	vadd.f32	s13, s14, s1
 800e218:	ee24 4a09 	vmul.f32	s8, s8, s18
 800e21c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800e220:	ee20 8a09 	vmul.f32	s16, s0, s18
 800e224:	ee75 0a86 	vadd.f32	s1, s11, s12
 800e228:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800e22c:	ee62 2a89 	vmul.f32	s5, s5, s18
 800e230:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800e234:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800e238:	ee77 7a62 	vsub.f32	s15, s14, s5
 800e23c:	ee74 5a88 	vadd.f32	s11, s9, s16
 800e240:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800e244:	ee77 4a22 	vadd.f32	s9, s14, s5
 800e248:	ee71 2a04 	vadd.f32	s5, s2, s8
 800e24c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800e250:	ee30 1a60 	vsub.f32	s2, s0, s1
 800e254:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e258:	ee33 6a46 	vsub.f32	s12, s6, s12
 800e25c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800e260:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800e264:	ee38 4a68 	vsub.f32	s8, s16, s17
 800e268:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800e26c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800e270:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e274:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e278:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e27c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e280:	ee78 7a88 	vadd.f32	s15, s17, s16
 800e284:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800e288:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800e28c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800e290:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800e294:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800e298:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e29c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800e2a0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800e2a4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800e2a8:	edc2 0a01 	vstr	s1, [r2, #4]
 800e2ac:	ee38 8a88 	vadd.f32	s16, s17, s16
 800e2b0:	441a      	add	r2, r3
 800e2b2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800e2b6:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e2ba:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800e2be:	ed81 8a00 	vstr	s16, [r1]
 800e2c2:	ee39 0a80 	vadd.f32	s0, s19, s0
 800e2c6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e2ca:	ed81 5a01 	vstr	s10, [r1, #4]
 800e2ce:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800e2d2:	edcd 3a00 	vstr	s7, [sp]
 800e2d6:	ed9d 5a02 	vldr	s10, [sp, #8]
 800e2da:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800e2de:	eddd 3a01 	vldr	s7, [sp, #4]
 800e2e2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800e2e6:	ed84 0a00 	vstr	s0, [r4]
 800e2ea:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e2ee:	ed84 3a01 	vstr	s6, [r4, #4]
 800e2f2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e2f6:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e2fa:	eddd 3a00 	vldr	s7, [sp]
 800e2fe:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e302:	4419      	add	r1, r3
 800e304:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800e308:	441c      	add	r4, r3
 800e30a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800e30e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800e312:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800e316:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800e31a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800e31e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800e322:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800e326:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800e32a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800e32e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800e332:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800e336:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e33a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800e33e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e342:	ee39 5a85 	vadd.f32	s10, s19, s10
 800e346:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e34a:	ed07 8a01 	vstr	s16, [r7, #-4]
 800e34e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e352:	ed87 6a00 	vstr	s12, [r7]
 800e356:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e35a:	edc0 0a00 	vstr	s1, [r0]
 800e35e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800e362:	edc0 3a01 	vstr	s7, [r0, #4]
 800e366:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e36a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800e36e:	edce 4a00 	vstr	s9, [lr]
 800e372:	4418      	add	r0, r3
 800e374:	ed06 0a01 	vstr	s0, [r6, #-4]
 800e378:	441f      	add	r7, r3
 800e37a:	edc6 2a00 	vstr	s5, [r6]
 800e37e:	449e      	add	lr, r3
 800e380:	ed85 3a00 	vstr	s6, [r5]
 800e384:	441e      	add	r6, r3
 800e386:	ed85 7a01 	vstr	s14, [r5, #4]
 800e38a:	441d      	add	r5, r3
 800e38c:	f63f aee8 	bhi.w	800e160 <arm_radix8_butterfly_f32+0x328>
 800e390:	9a06      	ldr	r2, [sp, #24]
 800e392:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e394:	3201      	adds	r2, #1
 800e396:	4611      	mov	r1, r2
 800e398:	9206      	str	r2, [sp, #24]
 800e39a:	9a07      	ldr	r2, [sp, #28]
 800e39c:	4402      	add	r2, r0
 800e39e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e3a0:	9207      	str	r2, [sp, #28]
 800e3a2:	9a03      	ldr	r2, [sp, #12]
 800e3a4:	4402      	add	r2, r0
 800e3a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e3a8:	9203      	str	r2, [sp, #12]
 800e3aa:	9a04      	ldr	r2, [sp, #16]
 800e3ac:	4402      	add	r2, r0
 800e3ae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e3b0:	9204      	str	r2, [sp, #16]
 800e3b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e3b4:	4491      	add	r9, r2
 800e3b6:	9a05      	ldr	r2, [sp, #20]
 800e3b8:	4402      	add	r2, r0
 800e3ba:	9205      	str	r2, [sp, #20]
 800e3bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3be:	4490      	add	r8, r2
 800e3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e3c2:	3208      	adds	r2, #8
 800e3c4:	920f      	str	r2, [sp, #60]	; 0x3c
 800e3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3c8:	3208      	adds	r2, #8
 800e3ca:	920e      	str	r2, [sp, #56]	; 0x38
 800e3cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3ce:	3208      	adds	r2, #8
 800e3d0:	920d      	str	r2, [sp, #52]	; 0x34
 800e3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3d4:	3208      	adds	r2, #8
 800e3d6:	920c      	str	r2, [sp, #48]	; 0x30
 800e3d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3da:	3208      	adds	r2, #8
 800e3dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800e3de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3e0:	3208      	adds	r2, #8
 800e3e2:	920a      	str	r2, [sp, #40]	; 0x28
 800e3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3e6:	3208      	adds	r2, #8
 800e3e8:	9209      	str	r2, [sp, #36]	; 0x24
 800e3ea:	9a08      	ldr	r2, [sp, #32]
 800e3ec:	3208      	adds	r2, #8
 800e3ee:	9208      	str	r2, [sp, #32]
 800e3f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e3f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e3f4:	4622      	mov	r2, r4
 800e3f6:	4288      	cmp	r0, r1
 800e3f8:	d005      	beq.n	800e406 <arm_radix8_butterfly_f32+0x5ce>
 800e3fa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4401      	add	r1, r0
 800e400:	9807      	ldr	r0, [sp, #28]
 800e402:	9110      	str	r1, [sp, #64]	; 0x40
 800e404:	e676      	b.n	800e0f4 <arm_radix8_butterfly_f32+0x2bc>
 800e406:	4683      	mov	fp, r0
 800e408:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800e40c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800e410:	e522      	b.n	800de58 <arm_radix8_butterfly_f32+0x20>
 800e412:	b01d      	add	sp, #116	; 0x74
 800e414:	ecbd 8b10 	vpop	{d8-d15}
 800e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e41c <atof>:
 800e41c:	2100      	movs	r1, #0
 800e41e:	f001 bb41 	b.w	800faa4 <strtod>
	...

0800e424 <__errno>:
 800e424:	4b01      	ldr	r3, [pc, #4]	; (800e42c <__errno+0x8>)
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	2000059c 	.word	0x2000059c

0800e430 <__libc_init_array>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4d0d      	ldr	r5, [pc, #52]	; (800e468 <__libc_init_array+0x38>)
 800e434:	4c0d      	ldr	r4, [pc, #52]	; (800e46c <__libc_init_array+0x3c>)
 800e436:	1b64      	subs	r4, r4, r5
 800e438:	10a4      	asrs	r4, r4, #2
 800e43a:	2600      	movs	r6, #0
 800e43c:	42a6      	cmp	r6, r4
 800e43e:	d109      	bne.n	800e454 <__libc_init_array+0x24>
 800e440:	4d0b      	ldr	r5, [pc, #44]	; (800e470 <__libc_init_array+0x40>)
 800e442:	4c0c      	ldr	r4, [pc, #48]	; (800e474 <__libc_init_array+0x44>)
 800e444:	f005 fe7c 	bl	8014140 <_init>
 800e448:	1b64      	subs	r4, r4, r5
 800e44a:	10a4      	asrs	r4, r4, #2
 800e44c:	2600      	movs	r6, #0
 800e44e:	42a6      	cmp	r6, r4
 800e450:	d105      	bne.n	800e45e <__libc_init_array+0x2e>
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	f855 3b04 	ldr.w	r3, [r5], #4
 800e458:	4798      	blx	r3
 800e45a:	3601      	adds	r6, #1
 800e45c:	e7ee      	b.n	800e43c <__libc_init_array+0xc>
 800e45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e462:	4798      	blx	r3
 800e464:	3601      	adds	r6, #1
 800e466:	e7f2      	b.n	800e44e <__libc_init_array+0x1e>
 800e468:	0802c570 	.word	0x0802c570
 800e46c:	0802c570 	.word	0x0802c570
 800e470:	0802c570 	.word	0x0802c570
 800e474:	0802c574 	.word	0x0802c574

0800e478 <memcpy>:
 800e478:	440a      	add	r2, r1
 800e47a:	4291      	cmp	r1, r2
 800e47c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e480:	d100      	bne.n	800e484 <memcpy+0xc>
 800e482:	4770      	bx	lr
 800e484:	b510      	push	{r4, lr}
 800e486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e48e:	4291      	cmp	r1, r2
 800e490:	d1f9      	bne.n	800e486 <memcpy+0xe>
 800e492:	bd10      	pop	{r4, pc}

0800e494 <memset>:
 800e494:	4402      	add	r2, r0
 800e496:	4603      	mov	r3, r0
 800e498:	4293      	cmp	r3, r2
 800e49a:	d100      	bne.n	800e49e <memset+0xa>
 800e49c:	4770      	bx	lr
 800e49e:	f803 1b01 	strb.w	r1, [r3], #1
 800e4a2:	e7f9      	b.n	800e498 <memset+0x4>

0800e4a4 <__cvt>:
 800e4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a8:	ec55 4b10 	vmov	r4, r5, d0
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	460e      	mov	r6, r1
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	bfbb      	ittet	lt
 800e4b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e4ba:	461d      	movlt	r5, r3
 800e4bc:	2300      	movge	r3, #0
 800e4be:	232d      	movlt	r3, #45	; 0x2d
 800e4c0:	700b      	strb	r3, [r1, #0]
 800e4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e4c8:	4691      	mov	r9, r2
 800e4ca:	f023 0820 	bic.w	r8, r3, #32
 800e4ce:	bfbc      	itt	lt
 800e4d0:	4622      	movlt	r2, r4
 800e4d2:	4614      	movlt	r4, r2
 800e4d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4d8:	d005      	beq.n	800e4e6 <__cvt+0x42>
 800e4da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4de:	d100      	bne.n	800e4e2 <__cvt+0x3e>
 800e4e0:	3601      	adds	r6, #1
 800e4e2:	2102      	movs	r1, #2
 800e4e4:	e000      	b.n	800e4e8 <__cvt+0x44>
 800e4e6:	2103      	movs	r1, #3
 800e4e8:	ab03      	add	r3, sp, #12
 800e4ea:	9301      	str	r3, [sp, #4]
 800e4ec:	ab02      	add	r3, sp, #8
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	ec45 4b10 	vmov	d0, r4, r5
 800e4f4:	4653      	mov	r3, sl
 800e4f6:	4632      	mov	r2, r6
 800e4f8:	f001 fb6e 	bl	800fbd8 <_dtoa_r>
 800e4fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e500:	4607      	mov	r7, r0
 800e502:	d102      	bne.n	800e50a <__cvt+0x66>
 800e504:	f019 0f01 	tst.w	r9, #1
 800e508:	d022      	beq.n	800e550 <__cvt+0xac>
 800e50a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e50e:	eb07 0906 	add.w	r9, r7, r6
 800e512:	d110      	bne.n	800e536 <__cvt+0x92>
 800e514:	783b      	ldrb	r3, [r7, #0]
 800e516:	2b30      	cmp	r3, #48	; 0x30
 800e518:	d10a      	bne.n	800e530 <__cvt+0x8c>
 800e51a:	2200      	movs	r2, #0
 800e51c:	2300      	movs	r3, #0
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f2 fb51 	bl	8000bc8 <__aeabi_dcmpeq>
 800e526:	b918      	cbnz	r0, 800e530 <__cvt+0x8c>
 800e528:	f1c6 0601 	rsb	r6, r6, #1
 800e52c:	f8ca 6000 	str.w	r6, [sl]
 800e530:	f8da 3000 	ldr.w	r3, [sl]
 800e534:	4499      	add	r9, r3
 800e536:	2200      	movs	r2, #0
 800e538:	2300      	movs	r3, #0
 800e53a:	4620      	mov	r0, r4
 800e53c:	4629      	mov	r1, r5
 800e53e:	f7f2 fb43 	bl	8000bc8 <__aeabi_dcmpeq>
 800e542:	b108      	cbz	r0, 800e548 <__cvt+0xa4>
 800e544:	f8cd 900c 	str.w	r9, [sp, #12]
 800e548:	2230      	movs	r2, #48	; 0x30
 800e54a:	9b03      	ldr	r3, [sp, #12]
 800e54c:	454b      	cmp	r3, r9
 800e54e:	d307      	bcc.n	800e560 <__cvt+0xbc>
 800e550:	9b03      	ldr	r3, [sp, #12]
 800e552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e554:	1bdb      	subs	r3, r3, r7
 800e556:	4638      	mov	r0, r7
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	b004      	add	sp, #16
 800e55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e560:	1c59      	adds	r1, r3, #1
 800e562:	9103      	str	r1, [sp, #12]
 800e564:	701a      	strb	r2, [r3, #0]
 800e566:	e7f0      	b.n	800e54a <__cvt+0xa6>

0800e568 <__exponent>:
 800e568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e56a:	4603      	mov	r3, r0
 800e56c:	2900      	cmp	r1, #0
 800e56e:	bfb8      	it	lt
 800e570:	4249      	neglt	r1, r1
 800e572:	f803 2b02 	strb.w	r2, [r3], #2
 800e576:	bfb4      	ite	lt
 800e578:	222d      	movlt	r2, #45	; 0x2d
 800e57a:	222b      	movge	r2, #43	; 0x2b
 800e57c:	2909      	cmp	r1, #9
 800e57e:	7042      	strb	r2, [r0, #1]
 800e580:	dd2a      	ble.n	800e5d8 <__exponent+0x70>
 800e582:	f10d 0407 	add.w	r4, sp, #7
 800e586:	46a4      	mov	ip, r4
 800e588:	270a      	movs	r7, #10
 800e58a:	46a6      	mov	lr, r4
 800e58c:	460a      	mov	r2, r1
 800e58e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e592:	fb07 1516 	mls	r5, r7, r6, r1
 800e596:	3530      	adds	r5, #48	; 0x30
 800e598:	2a63      	cmp	r2, #99	; 0x63
 800e59a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e59e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	dcf1      	bgt.n	800e58a <__exponent+0x22>
 800e5a6:	3130      	adds	r1, #48	; 0x30
 800e5a8:	f1ae 0502 	sub.w	r5, lr, #2
 800e5ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e5b0:	1c44      	adds	r4, r0, #1
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	4561      	cmp	r1, ip
 800e5b6:	d30a      	bcc.n	800e5ce <__exponent+0x66>
 800e5b8:	f10d 0209 	add.w	r2, sp, #9
 800e5bc:	eba2 020e 	sub.w	r2, r2, lr
 800e5c0:	4565      	cmp	r5, ip
 800e5c2:	bf88      	it	hi
 800e5c4:	2200      	movhi	r2, #0
 800e5c6:	4413      	add	r3, r2
 800e5c8:	1a18      	subs	r0, r3, r0
 800e5ca:	b003      	add	sp, #12
 800e5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e5d6:	e7ed      	b.n	800e5b4 <__exponent+0x4c>
 800e5d8:	2330      	movs	r3, #48	; 0x30
 800e5da:	3130      	adds	r1, #48	; 0x30
 800e5dc:	7083      	strb	r3, [r0, #2]
 800e5de:	70c1      	strb	r1, [r0, #3]
 800e5e0:	1d03      	adds	r3, r0, #4
 800e5e2:	e7f1      	b.n	800e5c8 <__exponent+0x60>

0800e5e4 <_printf_float>:
 800e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	ed2d 8b02 	vpush	{d8}
 800e5ec:	b08d      	sub	sp, #52	; 0x34
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5f4:	4616      	mov	r6, r2
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	f002 fd3f 	bl	801107c <_localeconv_r>
 800e5fe:	f8d0 a000 	ldr.w	sl, [r0]
 800e602:	4650      	mov	r0, sl
 800e604:	f7f1 fe64 	bl	80002d0 <strlen>
 800e608:	2300      	movs	r3, #0
 800e60a:	930a      	str	r3, [sp, #40]	; 0x28
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	9305      	str	r3, [sp, #20]
 800e610:	f8d8 3000 	ldr.w	r3, [r8]
 800e614:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e618:	3307      	adds	r3, #7
 800e61a:	f023 0307 	bic.w	r3, r3, #7
 800e61e:	f103 0208 	add.w	r2, r3, #8
 800e622:	f8c8 2000 	str.w	r2, [r8]
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e62e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e636:	9307      	str	r3, [sp, #28]
 800e638:	f8cd 8018 	str.w	r8, [sp, #24]
 800e63c:	ee08 0a10 	vmov	s16, r0
 800e640:	4b9f      	ldr	r3, [pc, #636]	; (800e8c0 <_printf_float+0x2dc>)
 800e642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e646:	f04f 32ff 	mov.w	r2, #4294967295
 800e64a:	f7f2 faef 	bl	8000c2c <__aeabi_dcmpun>
 800e64e:	bb88      	cbnz	r0, 800e6b4 <_printf_float+0xd0>
 800e650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e654:	4b9a      	ldr	r3, [pc, #616]	; (800e8c0 <_printf_float+0x2dc>)
 800e656:	f04f 32ff 	mov.w	r2, #4294967295
 800e65a:	f7f2 fac9 	bl	8000bf0 <__aeabi_dcmple>
 800e65e:	bb48      	cbnz	r0, 800e6b4 <_printf_float+0xd0>
 800e660:	2200      	movs	r2, #0
 800e662:	2300      	movs	r3, #0
 800e664:	4640      	mov	r0, r8
 800e666:	4649      	mov	r1, r9
 800e668:	f7f2 fab8 	bl	8000bdc <__aeabi_dcmplt>
 800e66c:	b110      	cbz	r0, 800e674 <_printf_float+0x90>
 800e66e:	232d      	movs	r3, #45	; 0x2d
 800e670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e674:	4b93      	ldr	r3, [pc, #588]	; (800e8c4 <_printf_float+0x2e0>)
 800e676:	4894      	ldr	r0, [pc, #592]	; (800e8c8 <_printf_float+0x2e4>)
 800e678:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e67c:	bf94      	ite	ls
 800e67e:	4698      	movls	r8, r3
 800e680:	4680      	movhi	r8, r0
 800e682:	2303      	movs	r3, #3
 800e684:	6123      	str	r3, [r4, #16]
 800e686:	9b05      	ldr	r3, [sp, #20]
 800e688:	f023 0204 	bic.w	r2, r3, #4
 800e68c:	6022      	str	r2, [r4, #0]
 800e68e:	f04f 0900 	mov.w	r9, #0
 800e692:	9700      	str	r7, [sp, #0]
 800e694:	4633      	mov	r3, r6
 800e696:	aa0b      	add	r2, sp, #44	; 0x2c
 800e698:	4621      	mov	r1, r4
 800e69a:	4628      	mov	r0, r5
 800e69c:	f000 f9d8 	bl	800ea50 <_printf_common>
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	f040 8090 	bne.w	800e7c6 <_printf_float+0x1e2>
 800e6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6aa:	b00d      	add	sp, #52	; 0x34
 800e6ac:	ecbd 8b02 	vpop	{d8}
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	4642      	mov	r2, r8
 800e6b6:	464b      	mov	r3, r9
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f2 fab6 	bl	8000c2c <__aeabi_dcmpun>
 800e6c0:	b140      	cbz	r0, 800e6d4 <_printf_float+0xf0>
 800e6c2:	464b      	mov	r3, r9
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bfbc      	itt	lt
 800e6c8:	232d      	movlt	r3, #45	; 0x2d
 800e6ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e6ce:	487f      	ldr	r0, [pc, #508]	; (800e8cc <_printf_float+0x2e8>)
 800e6d0:	4b7f      	ldr	r3, [pc, #508]	; (800e8d0 <_printf_float+0x2ec>)
 800e6d2:	e7d1      	b.n	800e678 <_printf_float+0x94>
 800e6d4:	6863      	ldr	r3, [r4, #4]
 800e6d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6da:	9206      	str	r2, [sp, #24]
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	d13f      	bne.n	800e760 <_printf_float+0x17c>
 800e6e0:	2306      	movs	r3, #6
 800e6e2:	6063      	str	r3, [r4, #4]
 800e6e4:	9b05      	ldr	r3, [sp, #20]
 800e6e6:	6861      	ldr	r1, [r4, #4]
 800e6e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	9303      	str	r3, [sp, #12]
 800e6f0:	ab0a      	add	r3, sp, #40	; 0x28
 800e6f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e6f6:	ab09      	add	r3, sp, #36	; 0x24
 800e6f8:	ec49 8b10 	vmov	d0, r8, r9
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	6022      	str	r2, [r4, #0]
 800e700:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e704:	4628      	mov	r0, r5
 800e706:	f7ff fecd 	bl	800e4a4 <__cvt>
 800e70a:	9b06      	ldr	r3, [sp, #24]
 800e70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e70e:	2b47      	cmp	r3, #71	; 0x47
 800e710:	4680      	mov	r8, r0
 800e712:	d108      	bne.n	800e726 <_printf_float+0x142>
 800e714:	1cc8      	adds	r0, r1, #3
 800e716:	db02      	blt.n	800e71e <_printf_float+0x13a>
 800e718:	6863      	ldr	r3, [r4, #4]
 800e71a:	4299      	cmp	r1, r3
 800e71c:	dd41      	ble.n	800e7a2 <_printf_float+0x1be>
 800e71e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e722:	fa5f fb8b 	uxtb.w	fp, fp
 800e726:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e72a:	d820      	bhi.n	800e76e <_printf_float+0x18a>
 800e72c:	3901      	subs	r1, #1
 800e72e:	465a      	mov	r2, fp
 800e730:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e734:	9109      	str	r1, [sp, #36]	; 0x24
 800e736:	f7ff ff17 	bl	800e568 <__exponent>
 800e73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e73c:	1813      	adds	r3, r2, r0
 800e73e:	2a01      	cmp	r2, #1
 800e740:	4681      	mov	r9, r0
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	dc02      	bgt.n	800e74c <_printf_float+0x168>
 800e746:	6822      	ldr	r2, [r4, #0]
 800e748:	07d2      	lsls	r2, r2, #31
 800e74a:	d501      	bpl.n	800e750 <_printf_float+0x16c>
 800e74c:	3301      	adds	r3, #1
 800e74e:	6123      	str	r3, [r4, #16]
 800e750:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e754:	2b00      	cmp	r3, #0
 800e756:	d09c      	beq.n	800e692 <_printf_float+0xae>
 800e758:	232d      	movs	r3, #45	; 0x2d
 800e75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e75e:	e798      	b.n	800e692 <_printf_float+0xae>
 800e760:	9a06      	ldr	r2, [sp, #24]
 800e762:	2a47      	cmp	r2, #71	; 0x47
 800e764:	d1be      	bne.n	800e6e4 <_printf_float+0x100>
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1bc      	bne.n	800e6e4 <_printf_float+0x100>
 800e76a:	2301      	movs	r3, #1
 800e76c:	e7b9      	b.n	800e6e2 <_printf_float+0xfe>
 800e76e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e772:	d118      	bne.n	800e7a6 <_printf_float+0x1c2>
 800e774:	2900      	cmp	r1, #0
 800e776:	6863      	ldr	r3, [r4, #4]
 800e778:	dd0b      	ble.n	800e792 <_printf_float+0x1ae>
 800e77a:	6121      	str	r1, [r4, #16]
 800e77c:	b913      	cbnz	r3, 800e784 <_printf_float+0x1a0>
 800e77e:	6822      	ldr	r2, [r4, #0]
 800e780:	07d0      	lsls	r0, r2, #31
 800e782:	d502      	bpl.n	800e78a <_printf_float+0x1a6>
 800e784:	3301      	adds	r3, #1
 800e786:	440b      	add	r3, r1
 800e788:	6123      	str	r3, [r4, #16]
 800e78a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e78c:	f04f 0900 	mov.w	r9, #0
 800e790:	e7de      	b.n	800e750 <_printf_float+0x16c>
 800e792:	b913      	cbnz	r3, 800e79a <_printf_float+0x1b6>
 800e794:	6822      	ldr	r2, [r4, #0]
 800e796:	07d2      	lsls	r2, r2, #31
 800e798:	d501      	bpl.n	800e79e <_printf_float+0x1ba>
 800e79a:	3302      	adds	r3, #2
 800e79c:	e7f4      	b.n	800e788 <_printf_float+0x1a4>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e7f2      	b.n	800e788 <_printf_float+0x1a4>
 800e7a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	db05      	blt.n	800e7b8 <_printf_float+0x1d4>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	6121      	str	r1, [r4, #16]
 800e7b0:	07d8      	lsls	r0, r3, #31
 800e7b2:	d5ea      	bpl.n	800e78a <_printf_float+0x1a6>
 800e7b4:	1c4b      	adds	r3, r1, #1
 800e7b6:	e7e7      	b.n	800e788 <_printf_float+0x1a4>
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	bfd4      	ite	le
 800e7bc:	f1c1 0202 	rsble	r2, r1, #2
 800e7c0:	2201      	movgt	r2, #1
 800e7c2:	4413      	add	r3, r2
 800e7c4:	e7e0      	b.n	800e788 <_printf_float+0x1a4>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	055a      	lsls	r2, r3, #21
 800e7ca:	d407      	bmi.n	800e7dc <_printf_float+0x1f8>
 800e7cc:	6923      	ldr	r3, [r4, #16]
 800e7ce:	4642      	mov	r2, r8
 800e7d0:	4631      	mov	r1, r6
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b8      	blx	r7
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	d12c      	bne.n	800e834 <_printf_float+0x250>
 800e7da:	e764      	b.n	800e6a6 <_printf_float+0xc2>
 800e7dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7e0:	f240 80e0 	bls.w	800e9a4 <_printf_float+0x3c0>
 800e7e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f7f2 f9ec 	bl	8000bc8 <__aeabi_dcmpeq>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	d034      	beq.n	800e85e <_printf_float+0x27a>
 800e7f4:	4a37      	ldr	r2, [pc, #220]	; (800e8d4 <_printf_float+0x2f0>)
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	47b8      	blx	r7
 800e7fe:	3001      	adds	r0, #1
 800e800:	f43f af51 	beq.w	800e6a6 <_printf_float+0xc2>
 800e804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e808:	429a      	cmp	r2, r3
 800e80a:	db02      	blt.n	800e812 <_printf_float+0x22e>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	07d8      	lsls	r0, r3, #31
 800e810:	d510      	bpl.n	800e834 <_printf_float+0x250>
 800e812:	ee18 3a10 	vmov	r3, s16
 800e816:	4652      	mov	r2, sl
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	f43f af41 	beq.w	800e6a6 <_printf_float+0xc2>
 800e824:	f04f 0800 	mov.w	r8, #0
 800e828:	f104 091a 	add.w	r9, r4, #26
 800e82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e82e:	3b01      	subs	r3, #1
 800e830:	4543      	cmp	r3, r8
 800e832:	dc09      	bgt.n	800e848 <_printf_float+0x264>
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	079b      	lsls	r3, r3, #30
 800e838:	f100 8105 	bmi.w	800ea46 <_printf_float+0x462>
 800e83c:	68e0      	ldr	r0, [r4, #12]
 800e83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e840:	4298      	cmp	r0, r3
 800e842:	bfb8      	it	lt
 800e844:	4618      	movlt	r0, r3
 800e846:	e730      	b.n	800e6aa <_printf_float+0xc6>
 800e848:	2301      	movs	r3, #1
 800e84a:	464a      	mov	r2, r9
 800e84c:	4631      	mov	r1, r6
 800e84e:	4628      	mov	r0, r5
 800e850:	47b8      	blx	r7
 800e852:	3001      	adds	r0, #1
 800e854:	f43f af27 	beq.w	800e6a6 <_printf_float+0xc2>
 800e858:	f108 0801 	add.w	r8, r8, #1
 800e85c:	e7e6      	b.n	800e82c <_printf_float+0x248>
 800e85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e860:	2b00      	cmp	r3, #0
 800e862:	dc39      	bgt.n	800e8d8 <_printf_float+0x2f4>
 800e864:	4a1b      	ldr	r2, [pc, #108]	; (800e8d4 <_printf_float+0x2f0>)
 800e866:	2301      	movs	r3, #1
 800e868:	4631      	mov	r1, r6
 800e86a:	4628      	mov	r0, r5
 800e86c:	47b8      	blx	r7
 800e86e:	3001      	adds	r0, #1
 800e870:	f43f af19 	beq.w	800e6a6 <_printf_float+0xc2>
 800e874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e878:	4313      	orrs	r3, r2
 800e87a:	d102      	bne.n	800e882 <_printf_float+0x29e>
 800e87c:	6823      	ldr	r3, [r4, #0]
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d5d8      	bpl.n	800e834 <_printf_float+0x250>
 800e882:	ee18 3a10 	vmov	r3, s16
 800e886:	4652      	mov	r2, sl
 800e888:	4631      	mov	r1, r6
 800e88a:	4628      	mov	r0, r5
 800e88c:	47b8      	blx	r7
 800e88e:	3001      	adds	r0, #1
 800e890:	f43f af09 	beq.w	800e6a6 <_printf_float+0xc2>
 800e894:	f04f 0900 	mov.w	r9, #0
 800e898:	f104 0a1a 	add.w	sl, r4, #26
 800e89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e89e:	425b      	negs	r3, r3
 800e8a0:	454b      	cmp	r3, r9
 800e8a2:	dc01      	bgt.n	800e8a8 <_printf_float+0x2c4>
 800e8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8a6:	e792      	b.n	800e7ce <_printf_float+0x1ea>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f43f aef7 	beq.w	800e6a6 <_printf_float+0xc2>
 800e8b8:	f109 0901 	add.w	r9, r9, #1
 800e8bc:	e7ee      	b.n	800e89c <_printf_float+0x2b8>
 800e8be:	bf00      	nop
 800e8c0:	7fefffff 	.word	0x7fefffff
 800e8c4:	0802bed8 	.word	0x0802bed8
 800e8c8:	0802bedc 	.word	0x0802bedc
 800e8cc:	0802bee4 	.word	0x0802bee4
 800e8d0:	0802bee0 	.word	0x0802bee0
 800e8d4:	08018364 	.word	0x08018364
 800e8d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	bfa8      	it	ge
 800e8e0:	461a      	movge	r2, r3
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	4691      	mov	r9, r2
 800e8e6:	dc37      	bgt.n	800e958 <_printf_float+0x374>
 800e8e8:	f04f 0b00 	mov.w	fp, #0
 800e8ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8f0:	f104 021a 	add.w	r2, r4, #26
 800e8f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8f6:	9305      	str	r3, [sp, #20]
 800e8f8:	eba3 0309 	sub.w	r3, r3, r9
 800e8fc:	455b      	cmp	r3, fp
 800e8fe:	dc33      	bgt.n	800e968 <_printf_float+0x384>
 800e900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e904:	429a      	cmp	r2, r3
 800e906:	db3b      	blt.n	800e980 <_printf_float+0x39c>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	07da      	lsls	r2, r3, #31
 800e90c:	d438      	bmi.n	800e980 <_printf_float+0x39c>
 800e90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e910:	9a05      	ldr	r2, [sp, #20]
 800e912:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e914:	1a9a      	subs	r2, r3, r2
 800e916:	eba3 0901 	sub.w	r9, r3, r1
 800e91a:	4591      	cmp	r9, r2
 800e91c:	bfa8      	it	ge
 800e91e:	4691      	movge	r9, r2
 800e920:	f1b9 0f00 	cmp.w	r9, #0
 800e924:	dc35      	bgt.n	800e992 <_printf_float+0x3ae>
 800e926:	f04f 0800 	mov.w	r8, #0
 800e92a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e92e:	f104 0a1a 	add.w	sl, r4, #26
 800e932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e936:	1a9b      	subs	r3, r3, r2
 800e938:	eba3 0309 	sub.w	r3, r3, r9
 800e93c:	4543      	cmp	r3, r8
 800e93e:	f77f af79 	ble.w	800e834 <_printf_float+0x250>
 800e942:	2301      	movs	r3, #1
 800e944:	4652      	mov	r2, sl
 800e946:	4631      	mov	r1, r6
 800e948:	4628      	mov	r0, r5
 800e94a:	47b8      	blx	r7
 800e94c:	3001      	adds	r0, #1
 800e94e:	f43f aeaa 	beq.w	800e6a6 <_printf_float+0xc2>
 800e952:	f108 0801 	add.w	r8, r8, #1
 800e956:	e7ec      	b.n	800e932 <_printf_float+0x34e>
 800e958:	4613      	mov	r3, r2
 800e95a:	4631      	mov	r1, r6
 800e95c:	4642      	mov	r2, r8
 800e95e:	4628      	mov	r0, r5
 800e960:	47b8      	blx	r7
 800e962:	3001      	adds	r0, #1
 800e964:	d1c0      	bne.n	800e8e8 <_printf_float+0x304>
 800e966:	e69e      	b.n	800e6a6 <_printf_float+0xc2>
 800e968:	2301      	movs	r3, #1
 800e96a:	4631      	mov	r1, r6
 800e96c:	4628      	mov	r0, r5
 800e96e:	9205      	str	r2, [sp, #20]
 800e970:	47b8      	blx	r7
 800e972:	3001      	adds	r0, #1
 800e974:	f43f ae97 	beq.w	800e6a6 <_printf_float+0xc2>
 800e978:	9a05      	ldr	r2, [sp, #20]
 800e97a:	f10b 0b01 	add.w	fp, fp, #1
 800e97e:	e7b9      	b.n	800e8f4 <_printf_float+0x310>
 800e980:	ee18 3a10 	vmov	r3, s16
 800e984:	4652      	mov	r2, sl
 800e986:	4631      	mov	r1, r6
 800e988:	4628      	mov	r0, r5
 800e98a:	47b8      	blx	r7
 800e98c:	3001      	adds	r0, #1
 800e98e:	d1be      	bne.n	800e90e <_printf_float+0x32a>
 800e990:	e689      	b.n	800e6a6 <_printf_float+0xc2>
 800e992:	9a05      	ldr	r2, [sp, #20]
 800e994:	464b      	mov	r3, r9
 800e996:	4442      	add	r2, r8
 800e998:	4631      	mov	r1, r6
 800e99a:	4628      	mov	r0, r5
 800e99c:	47b8      	blx	r7
 800e99e:	3001      	adds	r0, #1
 800e9a0:	d1c1      	bne.n	800e926 <_printf_float+0x342>
 800e9a2:	e680      	b.n	800e6a6 <_printf_float+0xc2>
 800e9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9a6:	2a01      	cmp	r2, #1
 800e9a8:	dc01      	bgt.n	800e9ae <_printf_float+0x3ca>
 800e9aa:	07db      	lsls	r3, r3, #31
 800e9ac:	d538      	bpl.n	800ea20 <_printf_float+0x43c>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	4642      	mov	r2, r8
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	47b8      	blx	r7
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	f43f ae74 	beq.w	800e6a6 <_printf_float+0xc2>
 800e9be:	ee18 3a10 	vmov	r3, s16
 800e9c2:	4652      	mov	r2, sl
 800e9c4:	4631      	mov	r1, r6
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	f43f ae6b 	beq.w	800e6a6 <_printf_float+0xc2>
 800e9d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f7f2 f8f6 	bl	8000bc8 <__aeabi_dcmpeq>
 800e9dc:	b9d8      	cbnz	r0, 800ea16 <_printf_float+0x432>
 800e9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9e0:	f108 0201 	add.w	r2, r8, #1
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	47b8      	blx	r7
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	d10e      	bne.n	800ea0e <_printf_float+0x42a>
 800e9f0:	e659      	b.n	800e6a6 <_printf_float+0xc2>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	4652      	mov	r2, sl
 800e9f6:	4631      	mov	r1, r6
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b8      	blx	r7
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	f43f ae52 	beq.w	800e6a6 <_printf_float+0xc2>
 800ea02:	f108 0801 	add.w	r8, r8, #1
 800ea06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	4543      	cmp	r3, r8
 800ea0c:	dcf1      	bgt.n	800e9f2 <_printf_float+0x40e>
 800ea0e:	464b      	mov	r3, r9
 800ea10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea14:	e6dc      	b.n	800e7d0 <_printf_float+0x1ec>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	f104 0a1a 	add.w	sl, r4, #26
 800ea1e:	e7f2      	b.n	800ea06 <_printf_float+0x422>
 800ea20:	2301      	movs	r3, #1
 800ea22:	4642      	mov	r2, r8
 800ea24:	e7df      	b.n	800e9e6 <_printf_float+0x402>
 800ea26:	2301      	movs	r3, #1
 800ea28:	464a      	mov	r2, r9
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	47b8      	blx	r7
 800ea30:	3001      	adds	r0, #1
 800ea32:	f43f ae38 	beq.w	800e6a6 <_printf_float+0xc2>
 800ea36:	f108 0801 	add.w	r8, r8, #1
 800ea3a:	68e3      	ldr	r3, [r4, #12]
 800ea3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea3e:	1a5b      	subs	r3, r3, r1
 800ea40:	4543      	cmp	r3, r8
 800ea42:	dcf0      	bgt.n	800ea26 <_printf_float+0x442>
 800ea44:	e6fa      	b.n	800e83c <_printf_float+0x258>
 800ea46:	f04f 0800 	mov.w	r8, #0
 800ea4a:	f104 0919 	add.w	r9, r4, #25
 800ea4e:	e7f4      	b.n	800ea3a <_printf_float+0x456>

0800ea50 <_printf_common>:
 800ea50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea54:	4616      	mov	r6, r2
 800ea56:	4699      	mov	r9, r3
 800ea58:	688a      	ldr	r2, [r1, #8]
 800ea5a:	690b      	ldr	r3, [r1, #16]
 800ea5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea60:	4293      	cmp	r3, r2
 800ea62:	bfb8      	it	lt
 800ea64:	4613      	movlt	r3, r2
 800ea66:	6033      	str	r3, [r6, #0]
 800ea68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea6c:	4607      	mov	r7, r0
 800ea6e:	460c      	mov	r4, r1
 800ea70:	b10a      	cbz	r2, 800ea76 <_printf_common+0x26>
 800ea72:	3301      	adds	r3, #1
 800ea74:	6033      	str	r3, [r6, #0]
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	0699      	lsls	r1, r3, #26
 800ea7a:	bf42      	ittt	mi
 800ea7c:	6833      	ldrmi	r3, [r6, #0]
 800ea7e:	3302      	addmi	r3, #2
 800ea80:	6033      	strmi	r3, [r6, #0]
 800ea82:	6825      	ldr	r5, [r4, #0]
 800ea84:	f015 0506 	ands.w	r5, r5, #6
 800ea88:	d106      	bne.n	800ea98 <_printf_common+0x48>
 800ea8a:	f104 0a19 	add.w	sl, r4, #25
 800ea8e:	68e3      	ldr	r3, [r4, #12]
 800ea90:	6832      	ldr	r2, [r6, #0]
 800ea92:	1a9b      	subs	r3, r3, r2
 800ea94:	42ab      	cmp	r3, r5
 800ea96:	dc26      	bgt.n	800eae6 <_printf_common+0x96>
 800ea98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea9c:	1e13      	subs	r3, r2, #0
 800ea9e:	6822      	ldr	r2, [r4, #0]
 800eaa0:	bf18      	it	ne
 800eaa2:	2301      	movne	r3, #1
 800eaa4:	0692      	lsls	r2, r2, #26
 800eaa6:	d42b      	bmi.n	800eb00 <_printf_common+0xb0>
 800eaa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eaac:	4649      	mov	r1, r9
 800eaae:	4638      	mov	r0, r7
 800eab0:	47c0      	blx	r8
 800eab2:	3001      	adds	r0, #1
 800eab4:	d01e      	beq.n	800eaf4 <_printf_common+0xa4>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	68e5      	ldr	r5, [r4, #12]
 800eaba:	6832      	ldr	r2, [r6, #0]
 800eabc:	f003 0306 	and.w	r3, r3, #6
 800eac0:	2b04      	cmp	r3, #4
 800eac2:	bf08      	it	eq
 800eac4:	1aad      	subeq	r5, r5, r2
 800eac6:	68a3      	ldr	r3, [r4, #8]
 800eac8:	6922      	ldr	r2, [r4, #16]
 800eaca:	bf0c      	ite	eq
 800eacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ead0:	2500      	movne	r5, #0
 800ead2:	4293      	cmp	r3, r2
 800ead4:	bfc4      	itt	gt
 800ead6:	1a9b      	subgt	r3, r3, r2
 800ead8:	18ed      	addgt	r5, r5, r3
 800eada:	2600      	movs	r6, #0
 800eadc:	341a      	adds	r4, #26
 800eade:	42b5      	cmp	r5, r6
 800eae0:	d11a      	bne.n	800eb18 <_printf_common+0xc8>
 800eae2:	2000      	movs	r0, #0
 800eae4:	e008      	b.n	800eaf8 <_printf_common+0xa8>
 800eae6:	2301      	movs	r3, #1
 800eae8:	4652      	mov	r2, sl
 800eaea:	4649      	mov	r1, r9
 800eaec:	4638      	mov	r0, r7
 800eaee:	47c0      	blx	r8
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d103      	bne.n	800eafc <_printf_common+0xac>
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eafc:	3501      	adds	r5, #1
 800eafe:	e7c6      	b.n	800ea8e <_printf_common+0x3e>
 800eb00:	18e1      	adds	r1, r4, r3
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	2030      	movs	r0, #48	; 0x30
 800eb06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb0a:	4422      	add	r2, r4
 800eb0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb14:	3302      	adds	r3, #2
 800eb16:	e7c7      	b.n	800eaa8 <_printf_common+0x58>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	4622      	mov	r2, r4
 800eb1c:	4649      	mov	r1, r9
 800eb1e:	4638      	mov	r0, r7
 800eb20:	47c0      	blx	r8
 800eb22:	3001      	adds	r0, #1
 800eb24:	d0e6      	beq.n	800eaf4 <_printf_common+0xa4>
 800eb26:	3601      	adds	r6, #1
 800eb28:	e7d9      	b.n	800eade <_printf_common+0x8e>
	...

0800eb2c <_printf_i>:
 800eb2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb30:	7e0f      	ldrb	r7, [r1, #24]
 800eb32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb34:	2f78      	cmp	r7, #120	; 0x78
 800eb36:	4691      	mov	r9, r2
 800eb38:	4680      	mov	r8, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	469a      	mov	sl, r3
 800eb3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb42:	d807      	bhi.n	800eb54 <_printf_i+0x28>
 800eb44:	2f62      	cmp	r7, #98	; 0x62
 800eb46:	d80a      	bhi.n	800eb5e <_printf_i+0x32>
 800eb48:	2f00      	cmp	r7, #0
 800eb4a:	f000 80d8 	beq.w	800ecfe <_printf_i+0x1d2>
 800eb4e:	2f58      	cmp	r7, #88	; 0x58
 800eb50:	f000 80a3 	beq.w	800ec9a <_printf_i+0x16e>
 800eb54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb5c:	e03a      	b.n	800ebd4 <_printf_i+0xa8>
 800eb5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb62:	2b15      	cmp	r3, #21
 800eb64:	d8f6      	bhi.n	800eb54 <_printf_i+0x28>
 800eb66:	a101      	add	r1, pc, #4	; (adr r1, 800eb6c <_printf_i+0x40>)
 800eb68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb6c:	0800ebc5 	.word	0x0800ebc5
 800eb70:	0800ebd9 	.word	0x0800ebd9
 800eb74:	0800eb55 	.word	0x0800eb55
 800eb78:	0800eb55 	.word	0x0800eb55
 800eb7c:	0800eb55 	.word	0x0800eb55
 800eb80:	0800eb55 	.word	0x0800eb55
 800eb84:	0800ebd9 	.word	0x0800ebd9
 800eb88:	0800eb55 	.word	0x0800eb55
 800eb8c:	0800eb55 	.word	0x0800eb55
 800eb90:	0800eb55 	.word	0x0800eb55
 800eb94:	0800eb55 	.word	0x0800eb55
 800eb98:	0800ece5 	.word	0x0800ece5
 800eb9c:	0800ec09 	.word	0x0800ec09
 800eba0:	0800ecc7 	.word	0x0800ecc7
 800eba4:	0800eb55 	.word	0x0800eb55
 800eba8:	0800eb55 	.word	0x0800eb55
 800ebac:	0800ed07 	.word	0x0800ed07
 800ebb0:	0800eb55 	.word	0x0800eb55
 800ebb4:	0800ec09 	.word	0x0800ec09
 800ebb8:	0800eb55 	.word	0x0800eb55
 800ebbc:	0800eb55 	.word	0x0800eb55
 800ebc0:	0800eccf 	.word	0x0800eccf
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	1d1a      	adds	r2, r3, #4
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	602a      	str	r2, [r5, #0]
 800ebcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e0a3      	b.n	800ed20 <_printf_i+0x1f4>
 800ebd8:	6820      	ldr	r0, [r4, #0]
 800ebda:	6829      	ldr	r1, [r5, #0]
 800ebdc:	0606      	lsls	r6, r0, #24
 800ebde:	f101 0304 	add.w	r3, r1, #4
 800ebe2:	d50a      	bpl.n	800ebfa <_printf_i+0xce>
 800ebe4:	680e      	ldr	r6, [r1, #0]
 800ebe6:	602b      	str	r3, [r5, #0]
 800ebe8:	2e00      	cmp	r6, #0
 800ebea:	da03      	bge.n	800ebf4 <_printf_i+0xc8>
 800ebec:	232d      	movs	r3, #45	; 0x2d
 800ebee:	4276      	negs	r6, r6
 800ebf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebf4:	485e      	ldr	r0, [pc, #376]	; (800ed70 <_printf_i+0x244>)
 800ebf6:	230a      	movs	r3, #10
 800ebf8:	e019      	b.n	800ec2e <_printf_i+0x102>
 800ebfa:	680e      	ldr	r6, [r1, #0]
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec02:	bf18      	it	ne
 800ec04:	b236      	sxthne	r6, r6
 800ec06:	e7ef      	b.n	800ebe8 <_printf_i+0xbc>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	6820      	ldr	r0, [r4, #0]
 800ec0c:	1d19      	adds	r1, r3, #4
 800ec0e:	6029      	str	r1, [r5, #0]
 800ec10:	0601      	lsls	r1, r0, #24
 800ec12:	d501      	bpl.n	800ec18 <_printf_i+0xec>
 800ec14:	681e      	ldr	r6, [r3, #0]
 800ec16:	e002      	b.n	800ec1e <_printf_i+0xf2>
 800ec18:	0646      	lsls	r6, r0, #25
 800ec1a:	d5fb      	bpl.n	800ec14 <_printf_i+0xe8>
 800ec1c:	881e      	ldrh	r6, [r3, #0]
 800ec1e:	4854      	ldr	r0, [pc, #336]	; (800ed70 <_printf_i+0x244>)
 800ec20:	2f6f      	cmp	r7, #111	; 0x6f
 800ec22:	bf0c      	ite	eq
 800ec24:	2308      	moveq	r3, #8
 800ec26:	230a      	movne	r3, #10
 800ec28:	2100      	movs	r1, #0
 800ec2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec2e:	6865      	ldr	r5, [r4, #4]
 800ec30:	60a5      	str	r5, [r4, #8]
 800ec32:	2d00      	cmp	r5, #0
 800ec34:	bfa2      	ittt	ge
 800ec36:	6821      	ldrge	r1, [r4, #0]
 800ec38:	f021 0104 	bicge.w	r1, r1, #4
 800ec3c:	6021      	strge	r1, [r4, #0]
 800ec3e:	b90e      	cbnz	r6, 800ec44 <_printf_i+0x118>
 800ec40:	2d00      	cmp	r5, #0
 800ec42:	d04d      	beq.n	800ece0 <_printf_i+0x1b4>
 800ec44:	4615      	mov	r5, r2
 800ec46:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec4a:	fb03 6711 	mls	r7, r3, r1, r6
 800ec4e:	5dc7      	ldrb	r7, [r0, r7]
 800ec50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec54:	4637      	mov	r7, r6
 800ec56:	42bb      	cmp	r3, r7
 800ec58:	460e      	mov	r6, r1
 800ec5a:	d9f4      	bls.n	800ec46 <_printf_i+0x11a>
 800ec5c:	2b08      	cmp	r3, #8
 800ec5e:	d10b      	bne.n	800ec78 <_printf_i+0x14c>
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	07de      	lsls	r6, r3, #31
 800ec64:	d508      	bpl.n	800ec78 <_printf_i+0x14c>
 800ec66:	6923      	ldr	r3, [r4, #16]
 800ec68:	6861      	ldr	r1, [r4, #4]
 800ec6a:	4299      	cmp	r1, r3
 800ec6c:	bfde      	ittt	le
 800ec6e:	2330      	movle	r3, #48	; 0x30
 800ec70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec78:	1b52      	subs	r2, r2, r5
 800ec7a:	6122      	str	r2, [r4, #16]
 800ec7c:	f8cd a000 	str.w	sl, [sp]
 800ec80:	464b      	mov	r3, r9
 800ec82:	aa03      	add	r2, sp, #12
 800ec84:	4621      	mov	r1, r4
 800ec86:	4640      	mov	r0, r8
 800ec88:	f7ff fee2 	bl	800ea50 <_printf_common>
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d14c      	bne.n	800ed2a <_printf_i+0x1fe>
 800ec90:	f04f 30ff 	mov.w	r0, #4294967295
 800ec94:	b004      	add	sp, #16
 800ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9a:	4835      	ldr	r0, [pc, #212]	; (800ed70 <_printf_i+0x244>)
 800ec9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eca0:	6829      	ldr	r1, [r5, #0]
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	f851 6b04 	ldr.w	r6, [r1], #4
 800eca8:	6029      	str	r1, [r5, #0]
 800ecaa:	061d      	lsls	r5, r3, #24
 800ecac:	d514      	bpl.n	800ecd8 <_printf_i+0x1ac>
 800ecae:	07df      	lsls	r7, r3, #31
 800ecb0:	bf44      	itt	mi
 800ecb2:	f043 0320 	orrmi.w	r3, r3, #32
 800ecb6:	6023      	strmi	r3, [r4, #0]
 800ecb8:	b91e      	cbnz	r6, 800ecc2 <_printf_i+0x196>
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	f023 0320 	bic.w	r3, r3, #32
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	2310      	movs	r3, #16
 800ecc4:	e7b0      	b.n	800ec28 <_printf_i+0xfc>
 800ecc6:	6823      	ldr	r3, [r4, #0]
 800ecc8:	f043 0320 	orr.w	r3, r3, #32
 800eccc:	6023      	str	r3, [r4, #0]
 800ecce:	2378      	movs	r3, #120	; 0x78
 800ecd0:	4828      	ldr	r0, [pc, #160]	; (800ed74 <_printf_i+0x248>)
 800ecd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecd6:	e7e3      	b.n	800eca0 <_printf_i+0x174>
 800ecd8:	0659      	lsls	r1, r3, #25
 800ecda:	bf48      	it	mi
 800ecdc:	b2b6      	uxthmi	r6, r6
 800ecde:	e7e6      	b.n	800ecae <_printf_i+0x182>
 800ece0:	4615      	mov	r5, r2
 800ece2:	e7bb      	b.n	800ec5c <_printf_i+0x130>
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	6826      	ldr	r6, [r4, #0]
 800ece8:	6961      	ldr	r1, [r4, #20]
 800ecea:	1d18      	adds	r0, r3, #4
 800ecec:	6028      	str	r0, [r5, #0]
 800ecee:	0635      	lsls	r5, r6, #24
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	d501      	bpl.n	800ecf8 <_printf_i+0x1cc>
 800ecf4:	6019      	str	r1, [r3, #0]
 800ecf6:	e002      	b.n	800ecfe <_printf_i+0x1d2>
 800ecf8:	0670      	lsls	r0, r6, #25
 800ecfa:	d5fb      	bpl.n	800ecf4 <_printf_i+0x1c8>
 800ecfc:	8019      	strh	r1, [r3, #0]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	4615      	mov	r5, r2
 800ed04:	e7ba      	b.n	800ec7c <_printf_i+0x150>
 800ed06:	682b      	ldr	r3, [r5, #0]
 800ed08:	1d1a      	adds	r2, r3, #4
 800ed0a:	602a      	str	r2, [r5, #0]
 800ed0c:	681d      	ldr	r5, [r3, #0]
 800ed0e:	6862      	ldr	r2, [r4, #4]
 800ed10:	2100      	movs	r1, #0
 800ed12:	4628      	mov	r0, r5
 800ed14:	f7f1 fae4 	bl	80002e0 <memchr>
 800ed18:	b108      	cbz	r0, 800ed1e <_printf_i+0x1f2>
 800ed1a:	1b40      	subs	r0, r0, r5
 800ed1c:	6060      	str	r0, [r4, #4]
 800ed1e:	6863      	ldr	r3, [r4, #4]
 800ed20:	6123      	str	r3, [r4, #16]
 800ed22:	2300      	movs	r3, #0
 800ed24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed28:	e7a8      	b.n	800ec7c <_printf_i+0x150>
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4640      	mov	r0, r8
 800ed32:	47d0      	blx	sl
 800ed34:	3001      	adds	r0, #1
 800ed36:	d0ab      	beq.n	800ec90 <_printf_i+0x164>
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	079b      	lsls	r3, r3, #30
 800ed3c:	d413      	bmi.n	800ed66 <_printf_i+0x23a>
 800ed3e:	68e0      	ldr	r0, [r4, #12]
 800ed40:	9b03      	ldr	r3, [sp, #12]
 800ed42:	4298      	cmp	r0, r3
 800ed44:	bfb8      	it	lt
 800ed46:	4618      	movlt	r0, r3
 800ed48:	e7a4      	b.n	800ec94 <_printf_i+0x168>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	4649      	mov	r1, r9
 800ed50:	4640      	mov	r0, r8
 800ed52:	47d0      	blx	sl
 800ed54:	3001      	adds	r0, #1
 800ed56:	d09b      	beq.n	800ec90 <_printf_i+0x164>
 800ed58:	3501      	adds	r5, #1
 800ed5a:	68e3      	ldr	r3, [r4, #12]
 800ed5c:	9903      	ldr	r1, [sp, #12]
 800ed5e:	1a5b      	subs	r3, r3, r1
 800ed60:	42ab      	cmp	r3, r5
 800ed62:	dcf2      	bgt.n	800ed4a <_printf_i+0x21e>
 800ed64:	e7eb      	b.n	800ed3e <_printf_i+0x212>
 800ed66:	2500      	movs	r5, #0
 800ed68:	f104 0619 	add.w	r6, r4, #25
 800ed6c:	e7f5      	b.n	800ed5a <_printf_i+0x22e>
 800ed6e:	bf00      	nop
 800ed70:	0802bee8 	.word	0x0802bee8
 800ed74:	0802bef9 	.word	0x0802bef9

0800ed78 <iprintf>:
 800ed78:	b40f      	push	{r0, r1, r2, r3}
 800ed7a:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <iprintf+0x2c>)
 800ed7c:	b513      	push	{r0, r1, r4, lr}
 800ed7e:	681c      	ldr	r4, [r3, #0]
 800ed80:	b124      	cbz	r4, 800ed8c <iprintf+0x14>
 800ed82:	69a3      	ldr	r3, [r4, #24]
 800ed84:	b913      	cbnz	r3, 800ed8c <iprintf+0x14>
 800ed86:	4620      	mov	r0, r4
 800ed88:	f001 fd6c 	bl	8010864 <__sinit>
 800ed8c:	ab05      	add	r3, sp, #20
 800ed8e:	9a04      	ldr	r2, [sp, #16]
 800ed90:	68a1      	ldr	r1, [r4, #8]
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	4620      	mov	r0, r4
 800ed96:	f003 f8d1 	bl	8011f3c <_vfiprintf_r>
 800ed9a:	b002      	add	sp, #8
 800ed9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda0:	b004      	add	sp, #16
 800eda2:	4770      	bx	lr
 800eda4:	2000059c 	.word	0x2000059c

0800eda8 <sniprintf>:
 800eda8:	b40c      	push	{r2, r3}
 800edaa:	b530      	push	{r4, r5, lr}
 800edac:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <sniprintf+0x64>)
 800edae:	1e0c      	subs	r4, r1, #0
 800edb0:	681d      	ldr	r5, [r3, #0]
 800edb2:	b09d      	sub	sp, #116	; 0x74
 800edb4:	da08      	bge.n	800edc8 <sniprintf+0x20>
 800edb6:	238b      	movs	r3, #139	; 0x8b
 800edb8:	602b      	str	r3, [r5, #0]
 800edba:	f04f 30ff 	mov.w	r0, #4294967295
 800edbe:	b01d      	add	sp, #116	; 0x74
 800edc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edc4:	b002      	add	sp, #8
 800edc6:	4770      	bx	lr
 800edc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800edcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800edd0:	bf14      	ite	ne
 800edd2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800edd6:	4623      	moveq	r3, r4
 800edd8:	9304      	str	r3, [sp, #16]
 800edda:	9307      	str	r3, [sp, #28]
 800eddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ede0:	9002      	str	r0, [sp, #8]
 800ede2:	9006      	str	r0, [sp, #24]
 800ede4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ede8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800edea:	ab21      	add	r3, sp, #132	; 0x84
 800edec:	a902      	add	r1, sp, #8
 800edee:	4628      	mov	r0, r5
 800edf0:	9301      	str	r3, [sp, #4]
 800edf2:	f002 ff79 	bl	8011ce8 <_svfiprintf_r>
 800edf6:	1c43      	adds	r3, r0, #1
 800edf8:	bfbc      	itt	lt
 800edfa:	238b      	movlt	r3, #139	; 0x8b
 800edfc:	602b      	strlt	r3, [r5, #0]
 800edfe:	2c00      	cmp	r4, #0
 800ee00:	d0dd      	beq.n	800edbe <sniprintf+0x16>
 800ee02:	9b02      	ldr	r3, [sp, #8]
 800ee04:	2200      	movs	r2, #0
 800ee06:	701a      	strb	r2, [r3, #0]
 800ee08:	e7d9      	b.n	800edbe <sniprintf+0x16>
 800ee0a:	bf00      	nop
 800ee0c:	2000059c 	.word	0x2000059c

0800ee10 <siprintf>:
 800ee10:	b40e      	push	{r1, r2, r3}
 800ee12:	b500      	push	{lr}
 800ee14:	b09c      	sub	sp, #112	; 0x70
 800ee16:	ab1d      	add	r3, sp, #116	; 0x74
 800ee18:	9002      	str	r0, [sp, #8]
 800ee1a:	9006      	str	r0, [sp, #24]
 800ee1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee20:	4809      	ldr	r0, [pc, #36]	; (800ee48 <siprintf+0x38>)
 800ee22:	9107      	str	r1, [sp, #28]
 800ee24:	9104      	str	r1, [sp, #16]
 800ee26:	4909      	ldr	r1, [pc, #36]	; (800ee4c <siprintf+0x3c>)
 800ee28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee2c:	9105      	str	r1, [sp, #20]
 800ee2e:	6800      	ldr	r0, [r0, #0]
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	a902      	add	r1, sp, #8
 800ee34:	f002 ff58 	bl	8011ce8 <_svfiprintf_r>
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	b01c      	add	sp, #112	; 0x70
 800ee40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee44:	b003      	add	sp, #12
 800ee46:	4770      	bx	lr
 800ee48:	2000059c 	.word	0x2000059c
 800ee4c:	ffff0208 	.word	0xffff0208

0800ee50 <strcpy>:
 800ee50:	4603      	mov	r3, r0
 800ee52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee56:	f803 2b01 	strb.w	r2, [r3], #1
 800ee5a:	2a00      	cmp	r2, #0
 800ee5c:	d1f9      	bne.n	800ee52 <strcpy+0x2>
 800ee5e:	4770      	bx	lr

0800ee60 <sulp>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4604      	mov	r4, r0
 800ee64:	460d      	mov	r5, r1
 800ee66:	ec45 4b10 	vmov	d0, r4, r5
 800ee6a:	4616      	mov	r6, r2
 800ee6c:	f002 fc9a 	bl	80117a4 <__ulp>
 800ee70:	ec51 0b10 	vmov	r0, r1, d0
 800ee74:	b17e      	cbz	r6, 800ee96 <sulp+0x36>
 800ee76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	dd09      	ble.n	800ee96 <sulp+0x36>
 800ee82:	051b      	lsls	r3, r3, #20
 800ee84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ee88:	2400      	movs	r4, #0
 800ee8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ee8e:	4622      	mov	r2, r4
 800ee90:	462b      	mov	r3, r5
 800ee92:	f7f1 fc31 	bl	80006f8 <__aeabi_dmul>
 800ee96:	bd70      	pop	{r4, r5, r6, pc}

0800ee98 <_strtod_l>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	ed2d 8b02 	vpush	{d8}
 800eea0:	b09d      	sub	sp, #116	; 0x74
 800eea2:	461f      	mov	r7, r3
 800eea4:	2300      	movs	r3, #0
 800eea6:	9318      	str	r3, [sp, #96]	; 0x60
 800eea8:	4ba2      	ldr	r3, [pc, #648]	; (800f134 <_strtod_l+0x29c>)
 800eeaa:	9213      	str	r2, [sp, #76]	; 0x4c
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	9305      	str	r3, [sp, #20]
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	4688      	mov	r8, r1
 800eeb6:	f7f1 fa0b 	bl	80002d0 <strlen>
 800eeba:	f04f 0a00 	mov.w	sl, #0
 800eebe:	4605      	mov	r5, r0
 800eec0:	f04f 0b00 	mov.w	fp, #0
 800eec4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeca:	781a      	ldrb	r2, [r3, #0]
 800eecc:	2a2b      	cmp	r2, #43	; 0x2b
 800eece:	d04e      	beq.n	800ef6e <_strtod_l+0xd6>
 800eed0:	d83b      	bhi.n	800ef4a <_strtod_l+0xb2>
 800eed2:	2a0d      	cmp	r2, #13
 800eed4:	d834      	bhi.n	800ef40 <_strtod_l+0xa8>
 800eed6:	2a08      	cmp	r2, #8
 800eed8:	d834      	bhi.n	800ef44 <_strtod_l+0xac>
 800eeda:	2a00      	cmp	r2, #0
 800eedc:	d03e      	beq.n	800ef5c <_strtod_l+0xc4>
 800eede:	2300      	movs	r3, #0
 800eee0:	930a      	str	r3, [sp, #40]	; 0x28
 800eee2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800eee4:	7833      	ldrb	r3, [r6, #0]
 800eee6:	2b30      	cmp	r3, #48	; 0x30
 800eee8:	f040 80b0 	bne.w	800f04c <_strtod_l+0x1b4>
 800eeec:	7873      	ldrb	r3, [r6, #1]
 800eeee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eef2:	2b58      	cmp	r3, #88	; 0x58
 800eef4:	d168      	bne.n	800efc8 <_strtod_l+0x130>
 800eef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef8:	9301      	str	r3, [sp, #4]
 800eefa:	ab18      	add	r3, sp, #96	; 0x60
 800eefc:	9702      	str	r7, [sp, #8]
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	4a8d      	ldr	r2, [pc, #564]	; (800f138 <_strtod_l+0x2a0>)
 800ef02:	ab19      	add	r3, sp, #100	; 0x64
 800ef04:	a917      	add	r1, sp, #92	; 0x5c
 800ef06:	4620      	mov	r0, r4
 800ef08:	f001 fdb0 	bl	8010a6c <__gethex>
 800ef0c:	f010 0707 	ands.w	r7, r0, #7
 800ef10:	4605      	mov	r5, r0
 800ef12:	d005      	beq.n	800ef20 <_strtod_l+0x88>
 800ef14:	2f06      	cmp	r7, #6
 800ef16:	d12c      	bne.n	800ef72 <_strtod_l+0xda>
 800ef18:	3601      	adds	r6, #1
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ef1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f040 8590 	bne.w	800fa48 <_strtod_l+0xbb0>
 800ef28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef2a:	b1eb      	cbz	r3, 800ef68 <_strtod_l+0xd0>
 800ef2c:	4652      	mov	r2, sl
 800ef2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ef32:	ec43 2b10 	vmov	d0, r2, r3
 800ef36:	b01d      	add	sp, #116	; 0x74
 800ef38:	ecbd 8b02 	vpop	{d8}
 800ef3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef40:	2a20      	cmp	r2, #32
 800ef42:	d1cc      	bne.n	800eede <_strtod_l+0x46>
 800ef44:	3301      	adds	r3, #1
 800ef46:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef48:	e7be      	b.n	800eec8 <_strtod_l+0x30>
 800ef4a:	2a2d      	cmp	r2, #45	; 0x2d
 800ef4c:	d1c7      	bne.n	800eede <_strtod_l+0x46>
 800ef4e:	2201      	movs	r2, #1
 800ef50:	920a      	str	r2, [sp, #40]	; 0x28
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef56:	785b      	ldrb	r3, [r3, #1]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1c2      	bne.n	800eee2 <_strtod_l+0x4a>
 800ef5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f040 856e 	bne.w	800fa44 <_strtod_l+0xbac>
 800ef68:	4652      	mov	r2, sl
 800ef6a:	465b      	mov	r3, fp
 800ef6c:	e7e1      	b.n	800ef32 <_strtod_l+0x9a>
 800ef6e:	2200      	movs	r2, #0
 800ef70:	e7ee      	b.n	800ef50 <_strtod_l+0xb8>
 800ef72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ef74:	b13a      	cbz	r2, 800ef86 <_strtod_l+0xee>
 800ef76:	2135      	movs	r1, #53	; 0x35
 800ef78:	a81a      	add	r0, sp, #104	; 0x68
 800ef7a:	f002 fd1e 	bl	80119ba <__copybits>
 800ef7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef80:	4620      	mov	r0, r4
 800ef82:	f002 f8dd 	bl	8011140 <_Bfree>
 800ef86:	3f01      	subs	r7, #1
 800ef88:	2f04      	cmp	r7, #4
 800ef8a:	d806      	bhi.n	800ef9a <_strtod_l+0x102>
 800ef8c:	e8df f007 	tbb	[pc, r7]
 800ef90:	1714030a 	.word	0x1714030a
 800ef94:	0a          	.byte	0x0a
 800ef95:	00          	.byte	0x00
 800ef96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ef9a:	0728      	lsls	r0, r5, #28
 800ef9c:	d5c0      	bpl.n	800ef20 <_strtod_l+0x88>
 800ef9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800efa2:	e7bd      	b.n	800ef20 <_strtod_l+0x88>
 800efa4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800efa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800efaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800efae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800efb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800efb6:	e7f0      	b.n	800ef9a <_strtod_l+0x102>
 800efb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f13c <_strtod_l+0x2a4>
 800efbc:	e7ed      	b.n	800ef9a <_strtod_l+0x102>
 800efbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800efc2:	f04f 3aff 	mov.w	sl, #4294967295
 800efc6:	e7e8      	b.n	800ef9a <_strtod_l+0x102>
 800efc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800efce:	785b      	ldrb	r3, [r3, #1]
 800efd0:	2b30      	cmp	r3, #48	; 0x30
 800efd2:	d0f9      	beq.n	800efc8 <_strtod_l+0x130>
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d0a3      	beq.n	800ef20 <_strtod_l+0x88>
 800efd8:	2301      	movs	r3, #1
 800efda:	f04f 0900 	mov.w	r9, #0
 800efde:	9304      	str	r3, [sp, #16]
 800efe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efe2:	9308      	str	r3, [sp, #32]
 800efe4:	f8cd 901c 	str.w	r9, [sp, #28]
 800efe8:	464f      	mov	r7, r9
 800efea:	220a      	movs	r2, #10
 800efec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800efee:	7806      	ldrb	r6, [r0, #0]
 800eff0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800eff4:	b2d9      	uxtb	r1, r3
 800eff6:	2909      	cmp	r1, #9
 800eff8:	d92a      	bls.n	800f050 <_strtod_l+0x1b8>
 800effa:	9905      	ldr	r1, [sp, #20]
 800effc:	462a      	mov	r2, r5
 800effe:	f003 f930 	bl	8012262 <strncmp>
 800f002:	b398      	cbz	r0, 800f06c <_strtod_l+0x1d4>
 800f004:	2000      	movs	r0, #0
 800f006:	4632      	mov	r2, r6
 800f008:	463d      	mov	r5, r7
 800f00a:	9005      	str	r0, [sp, #20]
 800f00c:	4603      	mov	r3, r0
 800f00e:	2a65      	cmp	r2, #101	; 0x65
 800f010:	d001      	beq.n	800f016 <_strtod_l+0x17e>
 800f012:	2a45      	cmp	r2, #69	; 0x45
 800f014:	d118      	bne.n	800f048 <_strtod_l+0x1b0>
 800f016:	b91d      	cbnz	r5, 800f020 <_strtod_l+0x188>
 800f018:	9a04      	ldr	r2, [sp, #16]
 800f01a:	4302      	orrs	r2, r0
 800f01c:	d09e      	beq.n	800ef5c <_strtod_l+0xc4>
 800f01e:	2500      	movs	r5, #0
 800f020:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f024:	f108 0201 	add.w	r2, r8, #1
 800f028:	9217      	str	r2, [sp, #92]	; 0x5c
 800f02a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f02e:	2a2b      	cmp	r2, #43	; 0x2b
 800f030:	d075      	beq.n	800f11e <_strtod_l+0x286>
 800f032:	2a2d      	cmp	r2, #45	; 0x2d
 800f034:	d07b      	beq.n	800f12e <_strtod_l+0x296>
 800f036:	f04f 0c00 	mov.w	ip, #0
 800f03a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f03e:	2909      	cmp	r1, #9
 800f040:	f240 8082 	bls.w	800f148 <_strtod_l+0x2b0>
 800f044:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f048:	2600      	movs	r6, #0
 800f04a:	e09d      	b.n	800f188 <_strtod_l+0x2f0>
 800f04c:	2300      	movs	r3, #0
 800f04e:	e7c4      	b.n	800efda <_strtod_l+0x142>
 800f050:	2f08      	cmp	r7, #8
 800f052:	bfd8      	it	le
 800f054:	9907      	ldrle	r1, [sp, #28]
 800f056:	f100 0001 	add.w	r0, r0, #1
 800f05a:	bfda      	itte	le
 800f05c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f060:	9307      	strle	r3, [sp, #28]
 800f062:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f066:	3701      	adds	r7, #1
 800f068:	9017      	str	r0, [sp, #92]	; 0x5c
 800f06a:	e7bf      	b.n	800efec <_strtod_l+0x154>
 800f06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f06e:	195a      	adds	r2, r3, r5
 800f070:	9217      	str	r2, [sp, #92]	; 0x5c
 800f072:	5d5a      	ldrb	r2, [r3, r5]
 800f074:	2f00      	cmp	r7, #0
 800f076:	d037      	beq.n	800f0e8 <_strtod_l+0x250>
 800f078:	9005      	str	r0, [sp, #20]
 800f07a:	463d      	mov	r5, r7
 800f07c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f080:	2b09      	cmp	r3, #9
 800f082:	d912      	bls.n	800f0aa <_strtod_l+0x212>
 800f084:	2301      	movs	r3, #1
 800f086:	e7c2      	b.n	800f00e <_strtod_l+0x176>
 800f088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f08e:	785a      	ldrb	r2, [r3, #1]
 800f090:	3001      	adds	r0, #1
 800f092:	2a30      	cmp	r2, #48	; 0x30
 800f094:	d0f8      	beq.n	800f088 <_strtod_l+0x1f0>
 800f096:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f09a:	2b08      	cmp	r3, #8
 800f09c:	f200 84d9 	bhi.w	800fa52 <_strtod_l+0xbba>
 800f0a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0a2:	9005      	str	r0, [sp, #20]
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	9308      	str	r3, [sp, #32]
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	3a30      	subs	r2, #48	; 0x30
 800f0ac:	f100 0301 	add.w	r3, r0, #1
 800f0b0:	d014      	beq.n	800f0dc <_strtod_l+0x244>
 800f0b2:	9905      	ldr	r1, [sp, #20]
 800f0b4:	4419      	add	r1, r3
 800f0b6:	9105      	str	r1, [sp, #20]
 800f0b8:	462b      	mov	r3, r5
 800f0ba:	eb00 0e05 	add.w	lr, r0, r5
 800f0be:	210a      	movs	r1, #10
 800f0c0:	4573      	cmp	r3, lr
 800f0c2:	d113      	bne.n	800f0ec <_strtod_l+0x254>
 800f0c4:	182b      	adds	r3, r5, r0
 800f0c6:	2b08      	cmp	r3, #8
 800f0c8:	f105 0501 	add.w	r5, r5, #1
 800f0cc:	4405      	add	r5, r0
 800f0ce:	dc1c      	bgt.n	800f10a <_strtod_l+0x272>
 800f0d0:	9907      	ldr	r1, [sp, #28]
 800f0d2:	230a      	movs	r3, #10
 800f0d4:	fb03 2301 	mla	r3, r3, r1, r2
 800f0d8:	9307      	str	r3, [sp, #28]
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f0de:	1c51      	adds	r1, r2, #1
 800f0e0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f0e2:	7852      	ldrb	r2, [r2, #1]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	e7c9      	b.n	800f07c <_strtod_l+0x1e4>
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	e7d2      	b.n	800f092 <_strtod_l+0x1fa>
 800f0ec:	2b08      	cmp	r3, #8
 800f0ee:	dc04      	bgt.n	800f0fa <_strtod_l+0x262>
 800f0f0:	9e07      	ldr	r6, [sp, #28]
 800f0f2:	434e      	muls	r6, r1
 800f0f4:	9607      	str	r6, [sp, #28]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	e7e2      	b.n	800f0c0 <_strtod_l+0x228>
 800f0fa:	f103 0c01 	add.w	ip, r3, #1
 800f0fe:	f1bc 0f10 	cmp.w	ip, #16
 800f102:	bfd8      	it	le
 800f104:	fb01 f909 	mulle.w	r9, r1, r9
 800f108:	e7f5      	b.n	800f0f6 <_strtod_l+0x25e>
 800f10a:	2d10      	cmp	r5, #16
 800f10c:	bfdc      	itt	le
 800f10e:	230a      	movle	r3, #10
 800f110:	fb03 2909 	mlale	r9, r3, r9, r2
 800f114:	e7e1      	b.n	800f0da <_strtod_l+0x242>
 800f116:	2300      	movs	r3, #0
 800f118:	9305      	str	r3, [sp, #20]
 800f11a:	2301      	movs	r3, #1
 800f11c:	e77c      	b.n	800f018 <_strtod_l+0x180>
 800f11e:	f04f 0c00 	mov.w	ip, #0
 800f122:	f108 0202 	add.w	r2, r8, #2
 800f126:	9217      	str	r2, [sp, #92]	; 0x5c
 800f128:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f12c:	e785      	b.n	800f03a <_strtod_l+0x1a2>
 800f12e:	f04f 0c01 	mov.w	ip, #1
 800f132:	e7f6      	b.n	800f122 <_strtod_l+0x28a>
 800f134:	0802c0b4 	.word	0x0802c0b4
 800f138:	0802bf0c 	.word	0x0802bf0c
 800f13c:	7ff00000 	.word	0x7ff00000
 800f140:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f142:	1c51      	adds	r1, r2, #1
 800f144:	9117      	str	r1, [sp, #92]	; 0x5c
 800f146:	7852      	ldrb	r2, [r2, #1]
 800f148:	2a30      	cmp	r2, #48	; 0x30
 800f14a:	d0f9      	beq.n	800f140 <_strtod_l+0x2a8>
 800f14c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f150:	2908      	cmp	r1, #8
 800f152:	f63f af79 	bhi.w	800f048 <_strtod_l+0x1b0>
 800f156:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f15a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f15c:	9206      	str	r2, [sp, #24]
 800f15e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f160:	1c51      	adds	r1, r2, #1
 800f162:	9117      	str	r1, [sp, #92]	; 0x5c
 800f164:	7852      	ldrb	r2, [r2, #1]
 800f166:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f16a:	2e09      	cmp	r6, #9
 800f16c:	d937      	bls.n	800f1de <_strtod_l+0x346>
 800f16e:	9e06      	ldr	r6, [sp, #24]
 800f170:	1b89      	subs	r1, r1, r6
 800f172:	2908      	cmp	r1, #8
 800f174:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f178:	dc02      	bgt.n	800f180 <_strtod_l+0x2e8>
 800f17a:	4576      	cmp	r6, lr
 800f17c:	bfa8      	it	ge
 800f17e:	4676      	movge	r6, lr
 800f180:	f1bc 0f00 	cmp.w	ip, #0
 800f184:	d000      	beq.n	800f188 <_strtod_l+0x2f0>
 800f186:	4276      	negs	r6, r6
 800f188:	2d00      	cmp	r5, #0
 800f18a:	d14d      	bne.n	800f228 <_strtod_l+0x390>
 800f18c:	9904      	ldr	r1, [sp, #16]
 800f18e:	4301      	orrs	r1, r0
 800f190:	f47f aec6 	bne.w	800ef20 <_strtod_l+0x88>
 800f194:	2b00      	cmp	r3, #0
 800f196:	f47f aee1 	bne.w	800ef5c <_strtod_l+0xc4>
 800f19a:	2a69      	cmp	r2, #105	; 0x69
 800f19c:	d027      	beq.n	800f1ee <_strtod_l+0x356>
 800f19e:	dc24      	bgt.n	800f1ea <_strtod_l+0x352>
 800f1a0:	2a49      	cmp	r2, #73	; 0x49
 800f1a2:	d024      	beq.n	800f1ee <_strtod_l+0x356>
 800f1a4:	2a4e      	cmp	r2, #78	; 0x4e
 800f1a6:	f47f aed9 	bne.w	800ef5c <_strtod_l+0xc4>
 800f1aa:	499f      	ldr	r1, [pc, #636]	; (800f428 <_strtod_l+0x590>)
 800f1ac:	a817      	add	r0, sp, #92	; 0x5c
 800f1ae:	f001 feb5 	bl	8010f1c <__match>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	f43f aed2 	beq.w	800ef5c <_strtod_l+0xc4>
 800f1b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	2b28      	cmp	r3, #40	; 0x28
 800f1be:	d12d      	bne.n	800f21c <_strtod_l+0x384>
 800f1c0:	499a      	ldr	r1, [pc, #616]	; (800f42c <_strtod_l+0x594>)
 800f1c2:	aa1a      	add	r2, sp, #104	; 0x68
 800f1c4:	a817      	add	r0, sp, #92	; 0x5c
 800f1c6:	f001 febd 	bl	8010f44 <__hexnan>
 800f1ca:	2805      	cmp	r0, #5
 800f1cc:	d126      	bne.n	800f21c <_strtod_l+0x384>
 800f1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f1d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f1d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f1dc:	e6a0      	b.n	800ef20 <_strtod_l+0x88>
 800f1de:	210a      	movs	r1, #10
 800f1e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f1e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f1e8:	e7b9      	b.n	800f15e <_strtod_l+0x2c6>
 800f1ea:	2a6e      	cmp	r2, #110	; 0x6e
 800f1ec:	e7db      	b.n	800f1a6 <_strtod_l+0x30e>
 800f1ee:	4990      	ldr	r1, [pc, #576]	; (800f430 <_strtod_l+0x598>)
 800f1f0:	a817      	add	r0, sp, #92	; 0x5c
 800f1f2:	f001 fe93 	bl	8010f1c <__match>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f43f aeb0 	beq.w	800ef5c <_strtod_l+0xc4>
 800f1fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1fe:	498d      	ldr	r1, [pc, #564]	; (800f434 <_strtod_l+0x59c>)
 800f200:	3b01      	subs	r3, #1
 800f202:	a817      	add	r0, sp, #92	; 0x5c
 800f204:	9317      	str	r3, [sp, #92]	; 0x5c
 800f206:	f001 fe89 	bl	8010f1c <__match>
 800f20a:	b910      	cbnz	r0, 800f212 <_strtod_l+0x37a>
 800f20c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f20e:	3301      	adds	r3, #1
 800f210:	9317      	str	r3, [sp, #92]	; 0x5c
 800f212:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f444 <_strtod_l+0x5ac>
 800f216:	f04f 0a00 	mov.w	sl, #0
 800f21a:	e681      	b.n	800ef20 <_strtod_l+0x88>
 800f21c:	4886      	ldr	r0, [pc, #536]	; (800f438 <_strtod_l+0x5a0>)
 800f21e:	f002 ffbf 	bl	80121a0 <nan>
 800f222:	ec5b ab10 	vmov	sl, fp, d0
 800f226:	e67b      	b.n	800ef20 <_strtod_l+0x88>
 800f228:	9b05      	ldr	r3, [sp, #20]
 800f22a:	9807      	ldr	r0, [sp, #28]
 800f22c:	1af3      	subs	r3, r6, r3
 800f22e:	2f00      	cmp	r7, #0
 800f230:	bf08      	it	eq
 800f232:	462f      	moveq	r7, r5
 800f234:	2d10      	cmp	r5, #16
 800f236:	9306      	str	r3, [sp, #24]
 800f238:	46a8      	mov	r8, r5
 800f23a:	bfa8      	it	ge
 800f23c:	f04f 0810 	movge.w	r8, #16
 800f240:	f7f1 f9e0 	bl	8000604 <__aeabi_ui2d>
 800f244:	2d09      	cmp	r5, #9
 800f246:	4682      	mov	sl, r0
 800f248:	468b      	mov	fp, r1
 800f24a:	dd13      	ble.n	800f274 <_strtod_l+0x3dc>
 800f24c:	4b7b      	ldr	r3, [pc, #492]	; (800f43c <_strtod_l+0x5a4>)
 800f24e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f252:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f256:	f7f1 fa4f 	bl	80006f8 <__aeabi_dmul>
 800f25a:	4682      	mov	sl, r0
 800f25c:	4648      	mov	r0, r9
 800f25e:	468b      	mov	fp, r1
 800f260:	f7f1 f9d0 	bl	8000604 <__aeabi_ui2d>
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	4650      	mov	r0, sl
 800f26a:	4659      	mov	r1, fp
 800f26c:	f7f1 f88e 	bl	800038c <__adddf3>
 800f270:	4682      	mov	sl, r0
 800f272:	468b      	mov	fp, r1
 800f274:	2d0f      	cmp	r5, #15
 800f276:	dc38      	bgt.n	800f2ea <_strtod_l+0x452>
 800f278:	9b06      	ldr	r3, [sp, #24]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f43f ae50 	beq.w	800ef20 <_strtod_l+0x88>
 800f280:	dd24      	ble.n	800f2cc <_strtod_l+0x434>
 800f282:	2b16      	cmp	r3, #22
 800f284:	dc0b      	bgt.n	800f29e <_strtod_l+0x406>
 800f286:	496d      	ldr	r1, [pc, #436]	; (800f43c <_strtod_l+0x5a4>)
 800f288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f290:	4652      	mov	r2, sl
 800f292:	465b      	mov	r3, fp
 800f294:	f7f1 fa30 	bl	80006f8 <__aeabi_dmul>
 800f298:	4682      	mov	sl, r0
 800f29a:	468b      	mov	fp, r1
 800f29c:	e640      	b.n	800ef20 <_strtod_l+0x88>
 800f29e:	9a06      	ldr	r2, [sp, #24]
 800f2a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	db20      	blt.n	800f2ea <_strtod_l+0x452>
 800f2a8:	4c64      	ldr	r4, [pc, #400]	; (800f43c <_strtod_l+0x5a4>)
 800f2aa:	f1c5 050f 	rsb	r5, r5, #15
 800f2ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f2b2:	4652      	mov	r2, sl
 800f2b4:	465b      	mov	r3, fp
 800f2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ba:	f7f1 fa1d 	bl	80006f8 <__aeabi_dmul>
 800f2be:	9b06      	ldr	r3, [sp, #24]
 800f2c0:	1b5d      	subs	r5, r3, r5
 800f2c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2ca:	e7e3      	b.n	800f294 <_strtod_l+0x3fc>
 800f2cc:	9b06      	ldr	r3, [sp, #24]
 800f2ce:	3316      	adds	r3, #22
 800f2d0:	db0b      	blt.n	800f2ea <_strtod_l+0x452>
 800f2d2:	9b05      	ldr	r3, [sp, #20]
 800f2d4:	1b9e      	subs	r6, r3, r6
 800f2d6:	4b59      	ldr	r3, [pc, #356]	; (800f43c <_strtod_l+0x5a4>)
 800f2d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f2dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f2e0:	4650      	mov	r0, sl
 800f2e2:	4659      	mov	r1, fp
 800f2e4:	f7f1 fb32 	bl	800094c <__aeabi_ddiv>
 800f2e8:	e7d6      	b.n	800f298 <_strtod_l+0x400>
 800f2ea:	9b06      	ldr	r3, [sp, #24]
 800f2ec:	eba5 0808 	sub.w	r8, r5, r8
 800f2f0:	4498      	add	r8, r3
 800f2f2:	f1b8 0f00 	cmp.w	r8, #0
 800f2f6:	dd74      	ble.n	800f3e2 <_strtod_l+0x54a>
 800f2f8:	f018 030f 	ands.w	r3, r8, #15
 800f2fc:	d00a      	beq.n	800f314 <_strtod_l+0x47c>
 800f2fe:	494f      	ldr	r1, [pc, #316]	; (800f43c <_strtod_l+0x5a4>)
 800f300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f304:	4652      	mov	r2, sl
 800f306:	465b      	mov	r3, fp
 800f308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f30c:	f7f1 f9f4 	bl	80006f8 <__aeabi_dmul>
 800f310:	4682      	mov	sl, r0
 800f312:	468b      	mov	fp, r1
 800f314:	f038 080f 	bics.w	r8, r8, #15
 800f318:	d04f      	beq.n	800f3ba <_strtod_l+0x522>
 800f31a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f31e:	dd22      	ble.n	800f366 <_strtod_l+0x4ce>
 800f320:	2500      	movs	r5, #0
 800f322:	462e      	mov	r6, r5
 800f324:	9507      	str	r5, [sp, #28]
 800f326:	9505      	str	r5, [sp, #20]
 800f328:	2322      	movs	r3, #34	; 0x22
 800f32a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f444 <_strtod_l+0x5ac>
 800f32e:	6023      	str	r3, [r4, #0]
 800f330:	f04f 0a00 	mov.w	sl, #0
 800f334:	9b07      	ldr	r3, [sp, #28]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f43f adf2 	beq.w	800ef20 <_strtod_l+0x88>
 800f33c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f33e:	4620      	mov	r0, r4
 800f340:	f001 fefe 	bl	8011140 <_Bfree>
 800f344:	9905      	ldr	r1, [sp, #20]
 800f346:	4620      	mov	r0, r4
 800f348:	f001 fefa 	bl	8011140 <_Bfree>
 800f34c:	4631      	mov	r1, r6
 800f34e:	4620      	mov	r0, r4
 800f350:	f001 fef6 	bl	8011140 <_Bfree>
 800f354:	9907      	ldr	r1, [sp, #28]
 800f356:	4620      	mov	r0, r4
 800f358:	f001 fef2 	bl	8011140 <_Bfree>
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	f001 feee 	bl	8011140 <_Bfree>
 800f364:	e5dc      	b.n	800ef20 <_strtod_l+0x88>
 800f366:	4b36      	ldr	r3, [pc, #216]	; (800f440 <_strtod_l+0x5a8>)
 800f368:	9304      	str	r3, [sp, #16]
 800f36a:	2300      	movs	r3, #0
 800f36c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f370:	4650      	mov	r0, sl
 800f372:	4659      	mov	r1, fp
 800f374:	4699      	mov	r9, r3
 800f376:	f1b8 0f01 	cmp.w	r8, #1
 800f37a:	dc21      	bgt.n	800f3c0 <_strtod_l+0x528>
 800f37c:	b10b      	cbz	r3, 800f382 <_strtod_l+0x4ea>
 800f37e:	4682      	mov	sl, r0
 800f380:	468b      	mov	fp, r1
 800f382:	4b2f      	ldr	r3, [pc, #188]	; (800f440 <_strtod_l+0x5a8>)
 800f384:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f388:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f38c:	4652      	mov	r2, sl
 800f38e:	465b      	mov	r3, fp
 800f390:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f394:	f7f1 f9b0 	bl	80006f8 <__aeabi_dmul>
 800f398:	4b2a      	ldr	r3, [pc, #168]	; (800f444 <_strtod_l+0x5ac>)
 800f39a:	460a      	mov	r2, r1
 800f39c:	400b      	ands	r3, r1
 800f39e:	492a      	ldr	r1, [pc, #168]	; (800f448 <_strtod_l+0x5b0>)
 800f3a0:	428b      	cmp	r3, r1
 800f3a2:	4682      	mov	sl, r0
 800f3a4:	d8bc      	bhi.n	800f320 <_strtod_l+0x488>
 800f3a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f3aa:	428b      	cmp	r3, r1
 800f3ac:	bf86      	itte	hi
 800f3ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f44c <_strtod_l+0x5b4>
 800f3b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800f3b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	e084      	b.n	800f4ca <_strtod_l+0x632>
 800f3c0:	f018 0f01 	tst.w	r8, #1
 800f3c4:	d005      	beq.n	800f3d2 <_strtod_l+0x53a>
 800f3c6:	9b04      	ldr	r3, [sp, #16]
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	f7f1 f994 	bl	80006f8 <__aeabi_dmul>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	9a04      	ldr	r2, [sp, #16]
 800f3d4:	3208      	adds	r2, #8
 800f3d6:	f109 0901 	add.w	r9, r9, #1
 800f3da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f3de:	9204      	str	r2, [sp, #16]
 800f3e0:	e7c9      	b.n	800f376 <_strtod_l+0x4de>
 800f3e2:	d0ea      	beq.n	800f3ba <_strtod_l+0x522>
 800f3e4:	f1c8 0800 	rsb	r8, r8, #0
 800f3e8:	f018 020f 	ands.w	r2, r8, #15
 800f3ec:	d00a      	beq.n	800f404 <_strtod_l+0x56c>
 800f3ee:	4b13      	ldr	r3, [pc, #76]	; (800f43c <_strtod_l+0x5a4>)
 800f3f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3f4:	4650      	mov	r0, sl
 800f3f6:	4659      	mov	r1, fp
 800f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fc:	f7f1 faa6 	bl	800094c <__aeabi_ddiv>
 800f400:	4682      	mov	sl, r0
 800f402:	468b      	mov	fp, r1
 800f404:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f408:	d0d7      	beq.n	800f3ba <_strtod_l+0x522>
 800f40a:	f1b8 0f1f 	cmp.w	r8, #31
 800f40e:	dd1f      	ble.n	800f450 <_strtod_l+0x5b8>
 800f410:	2500      	movs	r5, #0
 800f412:	462e      	mov	r6, r5
 800f414:	9507      	str	r5, [sp, #28]
 800f416:	9505      	str	r5, [sp, #20]
 800f418:	2322      	movs	r3, #34	; 0x22
 800f41a:	f04f 0a00 	mov.w	sl, #0
 800f41e:	f04f 0b00 	mov.w	fp, #0
 800f422:	6023      	str	r3, [r4, #0]
 800f424:	e786      	b.n	800f334 <_strtod_l+0x49c>
 800f426:	bf00      	nop
 800f428:	0802bee5 	.word	0x0802bee5
 800f42c:	0802bf20 	.word	0x0802bf20
 800f430:	0802bedd 	.word	0x0802bedd
 800f434:	0802bf63 	.word	0x0802bf63
 800f438:	080183bc 	.word	0x080183bc
 800f43c:	0802c150 	.word	0x0802c150
 800f440:	0802c128 	.word	0x0802c128
 800f444:	7ff00000 	.word	0x7ff00000
 800f448:	7ca00000 	.word	0x7ca00000
 800f44c:	7fefffff 	.word	0x7fefffff
 800f450:	f018 0310 	ands.w	r3, r8, #16
 800f454:	bf18      	it	ne
 800f456:	236a      	movne	r3, #106	; 0x6a
 800f458:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f808 <_strtod_l+0x970>
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	4650      	mov	r0, sl
 800f460:	4659      	mov	r1, fp
 800f462:	2300      	movs	r3, #0
 800f464:	f018 0f01 	tst.w	r8, #1
 800f468:	d004      	beq.n	800f474 <_strtod_l+0x5dc>
 800f46a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f46e:	f7f1 f943 	bl	80006f8 <__aeabi_dmul>
 800f472:	2301      	movs	r3, #1
 800f474:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f478:	f109 0908 	add.w	r9, r9, #8
 800f47c:	d1f2      	bne.n	800f464 <_strtod_l+0x5cc>
 800f47e:	b10b      	cbz	r3, 800f484 <_strtod_l+0x5ec>
 800f480:	4682      	mov	sl, r0
 800f482:	468b      	mov	fp, r1
 800f484:	9b04      	ldr	r3, [sp, #16]
 800f486:	b1c3      	cbz	r3, 800f4ba <_strtod_l+0x622>
 800f488:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f48c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f490:	2b00      	cmp	r3, #0
 800f492:	4659      	mov	r1, fp
 800f494:	dd11      	ble.n	800f4ba <_strtod_l+0x622>
 800f496:	2b1f      	cmp	r3, #31
 800f498:	f340 8124 	ble.w	800f6e4 <_strtod_l+0x84c>
 800f49c:	2b34      	cmp	r3, #52	; 0x34
 800f49e:	bfde      	ittt	le
 800f4a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f4a4:	f04f 33ff 	movle.w	r3, #4294967295
 800f4a8:	fa03 f202 	lslle.w	r2, r3, r2
 800f4ac:	f04f 0a00 	mov.w	sl, #0
 800f4b0:	bfcc      	ite	gt
 800f4b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f4b6:	ea02 0b01 	andle.w	fp, r2, r1
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	2300      	movs	r3, #0
 800f4be:	4650      	mov	r0, sl
 800f4c0:	4659      	mov	r1, fp
 800f4c2:	f7f1 fb81 	bl	8000bc8 <__aeabi_dcmpeq>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d1a2      	bne.n	800f410 <_strtod_l+0x578>
 800f4ca:	9b07      	ldr	r3, [sp, #28]
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	9908      	ldr	r1, [sp, #32]
 800f4d0:	462b      	mov	r3, r5
 800f4d2:	463a      	mov	r2, r7
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f001 fe9b 	bl	8011210 <__s2b>
 800f4da:	9007      	str	r0, [sp, #28]
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	f43f af1f 	beq.w	800f320 <_strtod_l+0x488>
 800f4e2:	9b05      	ldr	r3, [sp, #20]
 800f4e4:	1b9e      	subs	r6, r3, r6
 800f4e6:	9b06      	ldr	r3, [sp, #24]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	bfb4      	ite	lt
 800f4ec:	4633      	movlt	r3, r6
 800f4ee:	2300      	movge	r3, #0
 800f4f0:	930c      	str	r3, [sp, #48]	; 0x30
 800f4f2:	9b06      	ldr	r3, [sp, #24]
 800f4f4:	2500      	movs	r5, #0
 800f4f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f4fa:	9312      	str	r3, [sp, #72]	; 0x48
 800f4fc:	462e      	mov	r6, r5
 800f4fe:	9b07      	ldr	r3, [sp, #28]
 800f500:	4620      	mov	r0, r4
 800f502:	6859      	ldr	r1, [r3, #4]
 800f504:	f001 fddc 	bl	80110c0 <_Balloc>
 800f508:	9005      	str	r0, [sp, #20]
 800f50a:	2800      	cmp	r0, #0
 800f50c:	f43f af0c 	beq.w	800f328 <_strtod_l+0x490>
 800f510:	9b07      	ldr	r3, [sp, #28]
 800f512:	691a      	ldr	r2, [r3, #16]
 800f514:	3202      	adds	r2, #2
 800f516:	f103 010c 	add.w	r1, r3, #12
 800f51a:	0092      	lsls	r2, r2, #2
 800f51c:	300c      	adds	r0, #12
 800f51e:	f7fe ffab 	bl	800e478 <memcpy>
 800f522:	ec4b ab10 	vmov	d0, sl, fp
 800f526:	aa1a      	add	r2, sp, #104	; 0x68
 800f528:	a919      	add	r1, sp, #100	; 0x64
 800f52a:	4620      	mov	r0, r4
 800f52c:	f002 f9b6 	bl	801189c <__d2b>
 800f530:	ec4b ab18 	vmov	d8, sl, fp
 800f534:	9018      	str	r0, [sp, #96]	; 0x60
 800f536:	2800      	cmp	r0, #0
 800f538:	f43f aef6 	beq.w	800f328 <_strtod_l+0x490>
 800f53c:	2101      	movs	r1, #1
 800f53e:	4620      	mov	r0, r4
 800f540:	f001 ff00 	bl	8011344 <__i2b>
 800f544:	4606      	mov	r6, r0
 800f546:	2800      	cmp	r0, #0
 800f548:	f43f aeee 	beq.w	800f328 <_strtod_l+0x490>
 800f54c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f54e:	9904      	ldr	r1, [sp, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	bfab      	itete	ge
 800f554:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f556:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f558:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f55a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f55e:	bfac      	ite	ge
 800f560:	eb03 0902 	addge.w	r9, r3, r2
 800f564:	1ad7      	sublt	r7, r2, r3
 800f566:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f568:	eba3 0801 	sub.w	r8, r3, r1
 800f56c:	4490      	add	r8, r2
 800f56e:	4ba1      	ldr	r3, [pc, #644]	; (800f7f4 <_strtod_l+0x95c>)
 800f570:	f108 38ff 	add.w	r8, r8, #4294967295
 800f574:	4598      	cmp	r8, r3
 800f576:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f57a:	f280 80c7 	bge.w	800f70c <_strtod_l+0x874>
 800f57e:	eba3 0308 	sub.w	r3, r3, r8
 800f582:	2b1f      	cmp	r3, #31
 800f584:	eba2 0203 	sub.w	r2, r2, r3
 800f588:	f04f 0101 	mov.w	r1, #1
 800f58c:	f300 80b1 	bgt.w	800f6f2 <_strtod_l+0x85a>
 800f590:	fa01 f303 	lsl.w	r3, r1, r3
 800f594:	930d      	str	r3, [sp, #52]	; 0x34
 800f596:	2300      	movs	r3, #0
 800f598:	9308      	str	r3, [sp, #32]
 800f59a:	eb09 0802 	add.w	r8, r9, r2
 800f59e:	9b04      	ldr	r3, [sp, #16]
 800f5a0:	45c1      	cmp	r9, r8
 800f5a2:	4417      	add	r7, r2
 800f5a4:	441f      	add	r7, r3
 800f5a6:	464b      	mov	r3, r9
 800f5a8:	bfa8      	it	ge
 800f5aa:	4643      	movge	r3, r8
 800f5ac:	42bb      	cmp	r3, r7
 800f5ae:	bfa8      	it	ge
 800f5b0:	463b      	movge	r3, r7
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	bfc2      	ittt	gt
 800f5b6:	eba8 0803 	subgt.w	r8, r8, r3
 800f5ba:	1aff      	subgt	r7, r7, r3
 800f5bc:	eba9 0903 	subgt.w	r9, r9, r3
 800f5c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	dd17      	ble.n	800f5f6 <_strtod_l+0x75e>
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f001 ff7a 	bl	80114c4 <__pow5mult>
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	f43f aea8 	beq.w	800f328 <_strtod_l+0x490>
 800f5d8:	4601      	mov	r1, r0
 800f5da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f001 fec7 	bl	8011370 <__multiply>
 800f5e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	f43f ae9f 	beq.w	800f328 <_strtod_l+0x490>
 800f5ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f001 fda7 	bl	8011140 <_Bfree>
 800f5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5f4:	9318      	str	r3, [sp, #96]	; 0x60
 800f5f6:	f1b8 0f00 	cmp.w	r8, #0
 800f5fa:	f300 808c 	bgt.w	800f716 <_strtod_l+0x87e>
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	2b00      	cmp	r3, #0
 800f602:	dd08      	ble.n	800f616 <_strtod_l+0x77e>
 800f604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f606:	9905      	ldr	r1, [sp, #20]
 800f608:	4620      	mov	r0, r4
 800f60a:	f001 ff5b 	bl	80114c4 <__pow5mult>
 800f60e:	9005      	str	r0, [sp, #20]
 800f610:	2800      	cmp	r0, #0
 800f612:	f43f ae89 	beq.w	800f328 <_strtod_l+0x490>
 800f616:	2f00      	cmp	r7, #0
 800f618:	dd08      	ble.n	800f62c <_strtod_l+0x794>
 800f61a:	9905      	ldr	r1, [sp, #20]
 800f61c:	463a      	mov	r2, r7
 800f61e:	4620      	mov	r0, r4
 800f620:	f001 ffaa 	bl	8011578 <__lshift>
 800f624:	9005      	str	r0, [sp, #20]
 800f626:	2800      	cmp	r0, #0
 800f628:	f43f ae7e 	beq.w	800f328 <_strtod_l+0x490>
 800f62c:	f1b9 0f00 	cmp.w	r9, #0
 800f630:	dd08      	ble.n	800f644 <_strtod_l+0x7ac>
 800f632:	4631      	mov	r1, r6
 800f634:	464a      	mov	r2, r9
 800f636:	4620      	mov	r0, r4
 800f638:	f001 ff9e 	bl	8011578 <__lshift>
 800f63c:	4606      	mov	r6, r0
 800f63e:	2800      	cmp	r0, #0
 800f640:	f43f ae72 	beq.w	800f328 <_strtod_l+0x490>
 800f644:	9a05      	ldr	r2, [sp, #20]
 800f646:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f648:	4620      	mov	r0, r4
 800f64a:	f002 f821 	bl	8011690 <__mdiff>
 800f64e:	4605      	mov	r5, r0
 800f650:	2800      	cmp	r0, #0
 800f652:	f43f ae69 	beq.w	800f328 <_strtod_l+0x490>
 800f656:	68c3      	ldr	r3, [r0, #12]
 800f658:	930b      	str	r3, [sp, #44]	; 0x2c
 800f65a:	2300      	movs	r3, #0
 800f65c:	60c3      	str	r3, [r0, #12]
 800f65e:	4631      	mov	r1, r6
 800f660:	f001 fffa 	bl	8011658 <__mcmp>
 800f664:	2800      	cmp	r0, #0
 800f666:	da60      	bge.n	800f72a <_strtod_l+0x892>
 800f668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f66a:	ea53 030a 	orrs.w	r3, r3, sl
 800f66e:	f040 8082 	bne.w	800f776 <_strtod_l+0x8de>
 800f672:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f676:	2b00      	cmp	r3, #0
 800f678:	d17d      	bne.n	800f776 <_strtod_l+0x8de>
 800f67a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f67e:	0d1b      	lsrs	r3, r3, #20
 800f680:	051b      	lsls	r3, r3, #20
 800f682:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f686:	d976      	bls.n	800f776 <_strtod_l+0x8de>
 800f688:	696b      	ldr	r3, [r5, #20]
 800f68a:	b913      	cbnz	r3, 800f692 <_strtod_l+0x7fa>
 800f68c:	692b      	ldr	r3, [r5, #16]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	dd71      	ble.n	800f776 <_strtod_l+0x8de>
 800f692:	4629      	mov	r1, r5
 800f694:	2201      	movs	r2, #1
 800f696:	4620      	mov	r0, r4
 800f698:	f001 ff6e 	bl	8011578 <__lshift>
 800f69c:	4631      	mov	r1, r6
 800f69e:	4605      	mov	r5, r0
 800f6a0:	f001 ffda 	bl	8011658 <__mcmp>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	dd66      	ble.n	800f776 <_strtod_l+0x8de>
 800f6a8:	9904      	ldr	r1, [sp, #16]
 800f6aa:	4a53      	ldr	r2, [pc, #332]	; (800f7f8 <_strtod_l+0x960>)
 800f6ac:	465b      	mov	r3, fp
 800f6ae:	2900      	cmp	r1, #0
 800f6b0:	f000 8081 	beq.w	800f7b6 <_strtod_l+0x91e>
 800f6b4:	ea02 010b 	and.w	r1, r2, fp
 800f6b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f6bc:	dc7b      	bgt.n	800f7b6 <_strtod_l+0x91e>
 800f6be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f6c2:	f77f aea9 	ble.w	800f418 <_strtod_l+0x580>
 800f6c6:	4b4d      	ldr	r3, [pc, #308]	; (800f7fc <_strtod_l+0x964>)
 800f6c8:	4650      	mov	r0, sl
 800f6ca:	4659      	mov	r1, fp
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f7f1 f813 	bl	80006f8 <__aeabi_dmul>
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	4303      	orrs	r3, r0
 800f6d6:	bf08      	it	eq
 800f6d8:	2322      	moveq	r3, #34	; 0x22
 800f6da:	4682      	mov	sl, r0
 800f6dc:	468b      	mov	fp, r1
 800f6de:	bf08      	it	eq
 800f6e0:	6023      	streq	r3, [r4, #0]
 800f6e2:	e62b      	b.n	800f33c <_strtod_l+0x4a4>
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ec:	ea03 0a0a 	and.w	sl, r3, sl
 800f6f0:	e6e3      	b.n	800f4ba <_strtod_l+0x622>
 800f6f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f6f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f6fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f6fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f702:	fa01 f308 	lsl.w	r3, r1, r8
 800f706:	9308      	str	r3, [sp, #32]
 800f708:	910d      	str	r1, [sp, #52]	; 0x34
 800f70a:	e746      	b.n	800f59a <_strtod_l+0x702>
 800f70c:	2300      	movs	r3, #0
 800f70e:	9308      	str	r3, [sp, #32]
 800f710:	2301      	movs	r3, #1
 800f712:	930d      	str	r3, [sp, #52]	; 0x34
 800f714:	e741      	b.n	800f59a <_strtod_l+0x702>
 800f716:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f718:	4642      	mov	r2, r8
 800f71a:	4620      	mov	r0, r4
 800f71c:	f001 ff2c 	bl	8011578 <__lshift>
 800f720:	9018      	str	r0, [sp, #96]	; 0x60
 800f722:	2800      	cmp	r0, #0
 800f724:	f47f af6b 	bne.w	800f5fe <_strtod_l+0x766>
 800f728:	e5fe      	b.n	800f328 <_strtod_l+0x490>
 800f72a:	465f      	mov	r7, fp
 800f72c:	d16e      	bne.n	800f80c <_strtod_l+0x974>
 800f72e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f730:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f734:	b342      	cbz	r2, 800f788 <_strtod_l+0x8f0>
 800f736:	4a32      	ldr	r2, [pc, #200]	; (800f800 <_strtod_l+0x968>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d128      	bne.n	800f78e <_strtod_l+0x8f6>
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	4651      	mov	r1, sl
 800f740:	b1eb      	cbz	r3, 800f77e <_strtod_l+0x8e6>
 800f742:	4b2d      	ldr	r3, [pc, #180]	; (800f7f8 <_strtod_l+0x960>)
 800f744:	403b      	ands	r3, r7
 800f746:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f74a:	f04f 32ff 	mov.w	r2, #4294967295
 800f74e:	d819      	bhi.n	800f784 <_strtod_l+0x8ec>
 800f750:	0d1b      	lsrs	r3, r3, #20
 800f752:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f756:	fa02 f303 	lsl.w	r3, r2, r3
 800f75a:	4299      	cmp	r1, r3
 800f75c:	d117      	bne.n	800f78e <_strtod_l+0x8f6>
 800f75e:	4b29      	ldr	r3, [pc, #164]	; (800f804 <_strtod_l+0x96c>)
 800f760:	429f      	cmp	r7, r3
 800f762:	d102      	bne.n	800f76a <_strtod_l+0x8d2>
 800f764:	3101      	adds	r1, #1
 800f766:	f43f addf 	beq.w	800f328 <_strtod_l+0x490>
 800f76a:	4b23      	ldr	r3, [pc, #140]	; (800f7f8 <_strtod_l+0x960>)
 800f76c:	403b      	ands	r3, r7
 800f76e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f772:	f04f 0a00 	mov.w	sl, #0
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d1a4      	bne.n	800f6c6 <_strtod_l+0x82e>
 800f77c:	e5de      	b.n	800f33c <_strtod_l+0x4a4>
 800f77e:	f04f 33ff 	mov.w	r3, #4294967295
 800f782:	e7ea      	b.n	800f75a <_strtod_l+0x8c2>
 800f784:	4613      	mov	r3, r2
 800f786:	e7e8      	b.n	800f75a <_strtod_l+0x8c2>
 800f788:	ea53 030a 	orrs.w	r3, r3, sl
 800f78c:	d08c      	beq.n	800f6a8 <_strtod_l+0x810>
 800f78e:	9b08      	ldr	r3, [sp, #32]
 800f790:	b1db      	cbz	r3, 800f7ca <_strtod_l+0x932>
 800f792:	423b      	tst	r3, r7
 800f794:	d0ef      	beq.n	800f776 <_strtod_l+0x8de>
 800f796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f798:	9a04      	ldr	r2, [sp, #16]
 800f79a:	4650      	mov	r0, sl
 800f79c:	4659      	mov	r1, fp
 800f79e:	b1c3      	cbz	r3, 800f7d2 <_strtod_l+0x93a>
 800f7a0:	f7ff fb5e 	bl	800ee60 <sulp>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	ec51 0b18 	vmov	r0, r1, d8
 800f7ac:	f7f0 fdee 	bl	800038c <__adddf3>
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	468b      	mov	fp, r1
 800f7b4:	e7df      	b.n	800f776 <_strtod_l+0x8de>
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f7bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7c4:	f04f 3aff 	mov.w	sl, #4294967295
 800f7c8:	e7d5      	b.n	800f776 <_strtod_l+0x8de>
 800f7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7cc:	ea13 0f0a 	tst.w	r3, sl
 800f7d0:	e7e0      	b.n	800f794 <_strtod_l+0x8fc>
 800f7d2:	f7ff fb45 	bl	800ee60 <sulp>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	ec51 0b18 	vmov	r0, r1, d8
 800f7de:	f7f0 fdd3 	bl	8000388 <__aeabi_dsub>
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	4682      	mov	sl, r0
 800f7e8:	468b      	mov	fp, r1
 800f7ea:	f7f1 f9ed 	bl	8000bc8 <__aeabi_dcmpeq>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d0c1      	beq.n	800f776 <_strtod_l+0x8de>
 800f7f2:	e611      	b.n	800f418 <_strtod_l+0x580>
 800f7f4:	fffffc02 	.word	0xfffffc02
 800f7f8:	7ff00000 	.word	0x7ff00000
 800f7fc:	39500000 	.word	0x39500000
 800f800:	000fffff 	.word	0x000fffff
 800f804:	7fefffff 	.word	0x7fefffff
 800f808:	0802bf38 	.word	0x0802bf38
 800f80c:	4631      	mov	r1, r6
 800f80e:	4628      	mov	r0, r5
 800f810:	f002 f8a0 	bl	8011954 <__ratio>
 800f814:	ec59 8b10 	vmov	r8, r9, d0
 800f818:	ee10 0a10 	vmov	r0, s0
 800f81c:	2200      	movs	r2, #0
 800f81e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f822:	4649      	mov	r1, r9
 800f824:	f7f1 f9e4 	bl	8000bf0 <__aeabi_dcmple>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d07a      	beq.n	800f922 <_strtod_l+0xa8a>
 800f82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d04a      	beq.n	800f8c8 <_strtod_l+0xa30>
 800f832:	4b95      	ldr	r3, [pc, #596]	; (800fa88 <_strtod_l+0xbf0>)
 800f834:	2200      	movs	r2, #0
 800f836:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f83a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fa88 <_strtod_l+0xbf0>
 800f83e:	f04f 0800 	mov.w	r8, #0
 800f842:	4b92      	ldr	r3, [pc, #584]	; (800fa8c <_strtod_l+0xbf4>)
 800f844:	403b      	ands	r3, r7
 800f846:	930d      	str	r3, [sp, #52]	; 0x34
 800f848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f84a:	4b91      	ldr	r3, [pc, #580]	; (800fa90 <_strtod_l+0xbf8>)
 800f84c:	429a      	cmp	r2, r3
 800f84e:	f040 80b0 	bne.w	800f9b2 <_strtod_l+0xb1a>
 800f852:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f856:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f85a:	ec4b ab10 	vmov	d0, sl, fp
 800f85e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f862:	f001 ff9f 	bl	80117a4 <__ulp>
 800f866:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f86a:	ec53 2b10 	vmov	r2, r3, d0
 800f86e:	f7f0 ff43 	bl	80006f8 <__aeabi_dmul>
 800f872:	4652      	mov	r2, sl
 800f874:	465b      	mov	r3, fp
 800f876:	f7f0 fd89 	bl	800038c <__adddf3>
 800f87a:	460b      	mov	r3, r1
 800f87c:	4983      	ldr	r1, [pc, #524]	; (800fa8c <_strtod_l+0xbf4>)
 800f87e:	4a85      	ldr	r2, [pc, #532]	; (800fa94 <_strtod_l+0xbfc>)
 800f880:	4019      	ands	r1, r3
 800f882:	4291      	cmp	r1, r2
 800f884:	4682      	mov	sl, r0
 800f886:	d960      	bls.n	800f94a <_strtod_l+0xab2>
 800f888:	ee18 3a90 	vmov	r3, s17
 800f88c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f890:	4293      	cmp	r3, r2
 800f892:	d104      	bne.n	800f89e <_strtod_l+0xa06>
 800f894:	ee18 3a10 	vmov	r3, s16
 800f898:	3301      	adds	r3, #1
 800f89a:	f43f ad45 	beq.w	800f328 <_strtod_l+0x490>
 800f89e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800faa0 <_strtod_l+0xc08>
 800f8a2:	f04f 3aff 	mov.w	sl, #4294967295
 800f8a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f001 fc49 	bl	8011140 <_Bfree>
 800f8ae:	9905      	ldr	r1, [sp, #20]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f001 fc45 	bl	8011140 <_Bfree>
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f001 fc41 	bl	8011140 <_Bfree>
 800f8be:	4629      	mov	r1, r5
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f001 fc3d 	bl	8011140 <_Bfree>
 800f8c6:	e61a      	b.n	800f4fe <_strtod_l+0x666>
 800f8c8:	f1ba 0f00 	cmp.w	sl, #0
 800f8cc:	d11b      	bne.n	800f906 <_strtod_l+0xa6e>
 800f8ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f8d2:	b9f3      	cbnz	r3, 800f912 <_strtod_l+0xa7a>
 800f8d4:	4b6c      	ldr	r3, [pc, #432]	; (800fa88 <_strtod_l+0xbf0>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	4640      	mov	r0, r8
 800f8da:	4649      	mov	r1, r9
 800f8dc:	f7f1 f97e 	bl	8000bdc <__aeabi_dcmplt>
 800f8e0:	b9d0      	cbnz	r0, 800f918 <_strtod_l+0xa80>
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	4b6c      	ldr	r3, [pc, #432]	; (800fa98 <_strtod_l+0xc00>)
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f7f0 ff05 	bl	80006f8 <__aeabi_dmul>
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	4689      	mov	r9, r1
 800f8f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f8f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f8fa:	9315      	str	r3, [sp, #84]	; 0x54
 800f8fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f900:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f904:	e79d      	b.n	800f842 <_strtod_l+0x9aa>
 800f906:	f1ba 0f01 	cmp.w	sl, #1
 800f90a:	d102      	bne.n	800f912 <_strtod_l+0xa7a>
 800f90c:	2f00      	cmp	r7, #0
 800f90e:	f43f ad83 	beq.w	800f418 <_strtod_l+0x580>
 800f912:	4b62      	ldr	r3, [pc, #392]	; (800fa9c <_strtod_l+0xc04>)
 800f914:	2200      	movs	r2, #0
 800f916:	e78e      	b.n	800f836 <_strtod_l+0x99e>
 800f918:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fa98 <_strtod_l+0xc00>
 800f91c:	f04f 0800 	mov.w	r8, #0
 800f920:	e7e7      	b.n	800f8f2 <_strtod_l+0xa5a>
 800f922:	4b5d      	ldr	r3, [pc, #372]	; (800fa98 <_strtod_l+0xc00>)
 800f924:	4640      	mov	r0, r8
 800f926:	4649      	mov	r1, r9
 800f928:	2200      	movs	r2, #0
 800f92a:	f7f0 fee5 	bl	80006f8 <__aeabi_dmul>
 800f92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f930:	4680      	mov	r8, r0
 800f932:	4689      	mov	r9, r1
 800f934:	b933      	cbnz	r3, 800f944 <_strtod_l+0xaac>
 800f936:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f93a:	900e      	str	r0, [sp, #56]	; 0x38
 800f93c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f93e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f942:	e7dd      	b.n	800f900 <_strtod_l+0xa68>
 800f944:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f948:	e7f9      	b.n	800f93e <_strtod_l+0xaa6>
 800f94a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f94e:	9b04      	ldr	r3, [sp, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1a8      	bne.n	800f8a6 <_strtod_l+0xa0e>
 800f954:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f95a:	0d1b      	lsrs	r3, r3, #20
 800f95c:	051b      	lsls	r3, r3, #20
 800f95e:	429a      	cmp	r2, r3
 800f960:	d1a1      	bne.n	800f8a6 <_strtod_l+0xa0e>
 800f962:	4640      	mov	r0, r8
 800f964:	4649      	mov	r1, r9
 800f966:	f7f1 fa27 	bl	8000db8 <__aeabi_d2lz>
 800f96a:	f7f0 fe97 	bl	800069c <__aeabi_l2d>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4640      	mov	r0, r8
 800f974:	4649      	mov	r1, r9
 800f976:	f7f0 fd07 	bl	8000388 <__aeabi_dsub>
 800f97a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f97c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f980:	ea43 030a 	orr.w	r3, r3, sl
 800f984:	4313      	orrs	r3, r2
 800f986:	4680      	mov	r8, r0
 800f988:	4689      	mov	r9, r1
 800f98a:	d055      	beq.n	800fa38 <_strtod_l+0xba0>
 800f98c:	a336      	add	r3, pc, #216	; (adr r3, 800fa68 <_strtod_l+0xbd0>)
 800f98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f992:	f7f1 f923 	bl	8000bdc <__aeabi_dcmplt>
 800f996:	2800      	cmp	r0, #0
 800f998:	f47f acd0 	bne.w	800f33c <_strtod_l+0x4a4>
 800f99c:	a334      	add	r3, pc, #208	; (adr r3, 800fa70 <_strtod_l+0xbd8>)
 800f99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a2:	4640      	mov	r0, r8
 800f9a4:	4649      	mov	r1, r9
 800f9a6:	f7f1 f937 	bl	8000c18 <__aeabi_dcmpgt>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	f43f af7b 	beq.w	800f8a6 <_strtod_l+0xa0e>
 800f9b0:	e4c4      	b.n	800f33c <_strtod_l+0x4a4>
 800f9b2:	9b04      	ldr	r3, [sp, #16]
 800f9b4:	b333      	cbz	r3, 800fa04 <_strtod_l+0xb6c>
 800f9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f9bc:	d822      	bhi.n	800fa04 <_strtod_l+0xb6c>
 800f9be:	a32e      	add	r3, pc, #184	; (adr r3, 800fa78 <_strtod_l+0xbe0>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	f7f1 f912 	bl	8000bf0 <__aeabi_dcmple>
 800f9cc:	b1a0      	cbz	r0, 800f9f8 <_strtod_l+0xb60>
 800f9ce:	4649      	mov	r1, r9
 800f9d0:	4640      	mov	r0, r8
 800f9d2:	f7f1 f969 	bl	8000ca8 <__aeabi_d2uiz>
 800f9d6:	2801      	cmp	r0, #1
 800f9d8:	bf38      	it	cc
 800f9da:	2001      	movcc	r0, #1
 800f9dc:	f7f0 fe12 	bl	8000604 <__aeabi_ui2d>
 800f9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9e2:	4680      	mov	r8, r0
 800f9e4:	4689      	mov	r9, r1
 800f9e6:	bb23      	cbnz	r3, 800fa32 <_strtod_l+0xb9a>
 800f9e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ec:	9010      	str	r0, [sp, #64]	; 0x40
 800f9ee:	9311      	str	r3, [sp, #68]	; 0x44
 800f9f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f9f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fa00:	1a9b      	subs	r3, r3, r2
 800fa02:	9309      	str	r3, [sp, #36]	; 0x24
 800fa04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa08:	eeb0 0a48 	vmov.f32	s0, s16
 800fa0c:	eef0 0a68 	vmov.f32	s1, s17
 800fa10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa14:	f001 fec6 	bl	80117a4 <__ulp>
 800fa18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa1c:	ec53 2b10 	vmov	r2, r3, d0
 800fa20:	f7f0 fe6a 	bl	80006f8 <__aeabi_dmul>
 800fa24:	ec53 2b18 	vmov	r2, r3, d8
 800fa28:	f7f0 fcb0 	bl	800038c <__adddf3>
 800fa2c:	4682      	mov	sl, r0
 800fa2e:	468b      	mov	fp, r1
 800fa30:	e78d      	b.n	800f94e <_strtod_l+0xab6>
 800fa32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fa36:	e7db      	b.n	800f9f0 <_strtod_l+0xb58>
 800fa38:	a311      	add	r3, pc, #68	; (adr r3, 800fa80 <_strtod_l+0xbe8>)
 800fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3e:	f7f1 f8cd 	bl	8000bdc <__aeabi_dcmplt>
 800fa42:	e7b2      	b.n	800f9aa <_strtod_l+0xb12>
 800fa44:	2300      	movs	r3, #0
 800fa46:	930a      	str	r3, [sp, #40]	; 0x28
 800fa48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fa4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa4c:	6013      	str	r3, [r2, #0]
 800fa4e:	f7ff ba6b 	b.w	800ef28 <_strtod_l+0x90>
 800fa52:	2a65      	cmp	r2, #101	; 0x65
 800fa54:	f43f ab5f 	beq.w	800f116 <_strtod_l+0x27e>
 800fa58:	2a45      	cmp	r2, #69	; 0x45
 800fa5a:	f43f ab5c 	beq.w	800f116 <_strtod_l+0x27e>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	f7ff bb94 	b.w	800f18c <_strtod_l+0x2f4>
 800fa64:	f3af 8000 	nop.w
 800fa68:	94a03595 	.word	0x94a03595
 800fa6c:	3fdfffff 	.word	0x3fdfffff
 800fa70:	35afe535 	.word	0x35afe535
 800fa74:	3fe00000 	.word	0x3fe00000
 800fa78:	ffc00000 	.word	0xffc00000
 800fa7c:	41dfffff 	.word	0x41dfffff
 800fa80:	94a03595 	.word	0x94a03595
 800fa84:	3fcfffff 	.word	0x3fcfffff
 800fa88:	3ff00000 	.word	0x3ff00000
 800fa8c:	7ff00000 	.word	0x7ff00000
 800fa90:	7fe00000 	.word	0x7fe00000
 800fa94:	7c9fffff 	.word	0x7c9fffff
 800fa98:	3fe00000 	.word	0x3fe00000
 800fa9c:	bff00000 	.word	0xbff00000
 800faa0:	7fefffff 	.word	0x7fefffff

0800faa4 <strtod>:
 800faa4:	460a      	mov	r2, r1
 800faa6:	4601      	mov	r1, r0
 800faa8:	4802      	ldr	r0, [pc, #8]	; (800fab4 <strtod+0x10>)
 800faaa:	4b03      	ldr	r3, [pc, #12]	; (800fab8 <strtod+0x14>)
 800faac:	6800      	ldr	r0, [r0, #0]
 800faae:	f7ff b9f3 	b.w	800ee98 <_strtod_l>
 800fab2:	bf00      	nop
 800fab4:	2000059c 	.word	0x2000059c
 800fab8:	20000604 	.word	0x20000604

0800fabc <quorem>:
 800fabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac0:	6903      	ldr	r3, [r0, #16]
 800fac2:	690c      	ldr	r4, [r1, #16]
 800fac4:	42a3      	cmp	r3, r4
 800fac6:	4607      	mov	r7, r0
 800fac8:	f2c0 8081 	blt.w	800fbce <quorem+0x112>
 800facc:	3c01      	subs	r4, #1
 800face:	f101 0814 	add.w	r8, r1, #20
 800fad2:	f100 0514 	add.w	r5, r0, #20
 800fad6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fae4:	3301      	adds	r3, #1
 800fae6:	429a      	cmp	r2, r3
 800fae8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800faec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800faf0:	fbb2 f6f3 	udiv	r6, r2, r3
 800faf4:	d331      	bcc.n	800fb5a <quorem+0x9e>
 800faf6:	f04f 0e00 	mov.w	lr, #0
 800fafa:	4640      	mov	r0, r8
 800fafc:	46ac      	mov	ip, r5
 800fafe:	46f2      	mov	sl, lr
 800fb00:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb04:	b293      	uxth	r3, r2
 800fb06:	fb06 e303 	mla	r3, r6, r3, lr
 800fb0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	ebaa 0303 	sub.w	r3, sl, r3
 800fb14:	f8dc a000 	ldr.w	sl, [ip]
 800fb18:	0c12      	lsrs	r2, r2, #16
 800fb1a:	fa13 f38a 	uxtah	r3, r3, sl
 800fb1e:	fb06 e202 	mla	r2, r6, r2, lr
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	9b00      	ldr	r3, [sp, #0]
 800fb26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb2a:	b292      	uxth	r2, r2
 800fb2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb34:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb38:	4581      	cmp	r9, r0
 800fb3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb3e:	f84c 3b04 	str.w	r3, [ip], #4
 800fb42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fb46:	d2db      	bcs.n	800fb00 <quorem+0x44>
 800fb48:	f855 300b 	ldr.w	r3, [r5, fp]
 800fb4c:	b92b      	cbnz	r3, 800fb5a <quorem+0x9e>
 800fb4e:	9b01      	ldr	r3, [sp, #4]
 800fb50:	3b04      	subs	r3, #4
 800fb52:	429d      	cmp	r5, r3
 800fb54:	461a      	mov	r2, r3
 800fb56:	d32e      	bcc.n	800fbb6 <quorem+0xfa>
 800fb58:	613c      	str	r4, [r7, #16]
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	f001 fd7c 	bl	8011658 <__mcmp>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	db24      	blt.n	800fbae <quorem+0xf2>
 800fb64:	3601      	adds	r6, #1
 800fb66:	4628      	mov	r0, r5
 800fb68:	f04f 0c00 	mov.w	ip, #0
 800fb6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb70:	f8d0 e000 	ldr.w	lr, [r0]
 800fb74:	b293      	uxth	r3, r2
 800fb76:	ebac 0303 	sub.w	r3, ip, r3
 800fb7a:	0c12      	lsrs	r2, r2, #16
 800fb7c:	fa13 f38e 	uxtah	r3, r3, lr
 800fb80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fb84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb8e:	45c1      	cmp	r9, r8
 800fb90:	f840 3b04 	str.w	r3, [r0], #4
 800fb94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fb98:	d2e8      	bcs.n	800fb6c <quorem+0xb0>
 800fb9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fba2:	b922      	cbnz	r2, 800fbae <quorem+0xf2>
 800fba4:	3b04      	subs	r3, #4
 800fba6:	429d      	cmp	r5, r3
 800fba8:	461a      	mov	r2, r3
 800fbaa:	d30a      	bcc.n	800fbc2 <quorem+0x106>
 800fbac:	613c      	str	r4, [r7, #16]
 800fbae:	4630      	mov	r0, r6
 800fbb0:	b003      	add	sp, #12
 800fbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb6:	6812      	ldr	r2, [r2, #0]
 800fbb8:	3b04      	subs	r3, #4
 800fbba:	2a00      	cmp	r2, #0
 800fbbc:	d1cc      	bne.n	800fb58 <quorem+0x9c>
 800fbbe:	3c01      	subs	r4, #1
 800fbc0:	e7c7      	b.n	800fb52 <quorem+0x96>
 800fbc2:	6812      	ldr	r2, [r2, #0]
 800fbc4:	3b04      	subs	r3, #4
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	d1f0      	bne.n	800fbac <quorem+0xf0>
 800fbca:	3c01      	subs	r4, #1
 800fbcc:	e7eb      	b.n	800fba6 <quorem+0xea>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	e7ee      	b.n	800fbb0 <quorem+0xf4>
 800fbd2:	0000      	movs	r0, r0
 800fbd4:	0000      	movs	r0, r0
	...

0800fbd8 <_dtoa_r>:
 800fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbdc:	ed2d 8b04 	vpush	{d8-d9}
 800fbe0:	ec57 6b10 	vmov	r6, r7, d0
 800fbe4:	b093      	sub	sp, #76	; 0x4c
 800fbe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fbe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fbec:	9106      	str	r1, [sp, #24]
 800fbee:	ee10 aa10 	vmov	sl, s0
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800fbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800fbf8:	46bb      	mov	fp, r7
 800fbfa:	b975      	cbnz	r5, 800fc1a <_dtoa_r+0x42>
 800fbfc:	2010      	movs	r0, #16
 800fbfe:	f001 fa45 	bl	801108c <malloc>
 800fc02:	4602      	mov	r2, r0
 800fc04:	6260      	str	r0, [r4, #36]	; 0x24
 800fc06:	b920      	cbnz	r0, 800fc12 <_dtoa_r+0x3a>
 800fc08:	4ba7      	ldr	r3, [pc, #668]	; (800fea8 <_dtoa_r+0x2d0>)
 800fc0a:	21ea      	movs	r1, #234	; 0xea
 800fc0c:	48a7      	ldr	r0, [pc, #668]	; (800feac <_dtoa_r+0x2d4>)
 800fc0e:	f002 fc1d 	bl	801244c <__assert_func>
 800fc12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc16:	6005      	str	r5, [r0, #0]
 800fc18:	60c5      	str	r5, [r0, #12]
 800fc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc1c:	6819      	ldr	r1, [r3, #0]
 800fc1e:	b151      	cbz	r1, 800fc36 <_dtoa_r+0x5e>
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	604a      	str	r2, [r1, #4]
 800fc24:	2301      	movs	r3, #1
 800fc26:	4093      	lsls	r3, r2
 800fc28:	608b      	str	r3, [r1, #8]
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f001 fa88 	bl	8011140 <_Bfree>
 800fc30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	1e3b      	subs	r3, r7, #0
 800fc38:	bfaa      	itet	ge
 800fc3a:	2300      	movge	r3, #0
 800fc3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc40:	f8c8 3000 	strge.w	r3, [r8]
 800fc44:	4b9a      	ldr	r3, [pc, #616]	; (800feb0 <_dtoa_r+0x2d8>)
 800fc46:	bfbc      	itt	lt
 800fc48:	2201      	movlt	r2, #1
 800fc4a:	f8c8 2000 	strlt.w	r2, [r8]
 800fc4e:	ea33 030b 	bics.w	r3, r3, fp
 800fc52:	d11b      	bne.n	800fc8c <_dtoa_r+0xb4>
 800fc54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc56:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fc60:	4333      	orrs	r3, r6
 800fc62:	f000 8592 	beq.w	801078a <_dtoa_r+0xbb2>
 800fc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc68:	b963      	cbnz	r3, 800fc84 <_dtoa_r+0xac>
 800fc6a:	4b92      	ldr	r3, [pc, #584]	; (800feb4 <_dtoa_r+0x2dc>)
 800fc6c:	e022      	b.n	800fcb4 <_dtoa_r+0xdc>
 800fc6e:	4b92      	ldr	r3, [pc, #584]	; (800feb8 <_dtoa_r+0x2e0>)
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	3308      	adds	r3, #8
 800fc74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	9801      	ldr	r0, [sp, #4]
 800fc7a:	b013      	add	sp, #76	; 0x4c
 800fc7c:	ecbd 8b04 	vpop	{d8-d9}
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc84:	4b8b      	ldr	r3, [pc, #556]	; (800feb4 <_dtoa_r+0x2dc>)
 800fc86:	9301      	str	r3, [sp, #4]
 800fc88:	3303      	adds	r3, #3
 800fc8a:	e7f3      	b.n	800fc74 <_dtoa_r+0x9c>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2300      	movs	r3, #0
 800fc90:	4650      	mov	r0, sl
 800fc92:	4659      	mov	r1, fp
 800fc94:	f7f0 ff98 	bl	8000bc8 <__aeabi_dcmpeq>
 800fc98:	ec4b ab19 	vmov	d9, sl, fp
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	b158      	cbz	r0, 800fcb8 <_dtoa_r+0xe0>
 800fca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fca2:	2301      	movs	r3, #1
 800fca4:	6013      	str	r3, [r2, #0]
 800fca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 856b 	beq.w	8010784 <_dtoa_r+0xbac>
 800fcae:	4883      	ldr	r0, [pc, #524]	; (800febc <_dtoa_r+0x2e4>)
 800fcb0:	6018      	str	r0, [r3, #0]
 800fcb2:	1e43      	subs	r3, r0, #1
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	e7df      	b.n	800fc78 <_dtoa_r+0xa0>
 800fcb8:	ec4b ab10 	vmov	d0, sl, fp
 800fcbc:	aa10      	add	r2, sp, #64	; 0x40
 800fcbe:	a911      	add	r1, sp, #68	; 0x44
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f001 fdeb 	bl	801189c <__d2b>
 800fcc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fcca:	ee08 0a10 	vmov	s16, r0
 800fcce:	2d00      	cmp	r5, #0
 800fcd0:	f000 8084 	beq.w	800fddc <_dtoa_r+0x204>
 800fcd4:	ee19 3a90 	vmov	r3, s19
 800fcd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fce0:	4656      	mov	r6, sl
 800fce2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fcea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fcee:	4b74      	ldr	r3, [pc, #464]	; (800fec0 <_dtoa_r+0x2e8>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	f7f0 fb47 	bl	8000388 <__aeabi_dsub>
 800fcfa:	a365      	add	r3, pc, #404	; (adr r3, 800fe90 <_dtoa_r+0x2b8>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 fcfa 	bl	80006f8 <__aeabi_dmul>
 800fd04:	a364      	add	r3, pc, #400	; (adr r3, 800fe98 <_dtoa_r+0x2c0>)
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f7f0 fb3f 	bl	800038c <__adddf3>
 800fd0e:	4606      	mov	r6, r0
 800fd10:	4628      	mov	r0, r5
 800fd12:	460f      	mov	r7, r1
 800fd14:	f7f0 fc86 	bl	8000624 <__aeabi_i2d>
 800fd18:	a361      	add	r3, pc, #388	; (adr r3, 800fea0 <_dtoa_r+0x2c8>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fceb 	bl	80006f8 <__aeabi_dmul>
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	4630      	mov	r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	f7f0 fb2f 	bl	800038c <__adddf3>
 800fd2e:	4606      	mov	r6, r0
 800fd30:	460f      	mov	r7, r1
 800fd32:	f7f0 ff91 	bl	8000c58 <__aeabi_d2iz>
 800fd36:	2200      	movs	r2, #0
 800fd38:	9000      	str	r0, [sp, #0]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	4639      	mov	r1, r7
 800fd40:	f7f0 ff4c 	bl	8000bdc <__aeabi_dcmplt>
 800fd44:	b150      	cbz	r0, 800fd5c <_dtoa_r+0x184>
 800fd46:	9800      	ldr	r0, [sp, #0]
 800fd48:	f7f0 fc6c 	bl	8000624 <__aeabi_i2d>
 800fd4c:	4632      	mov	r2, r6
 800fd4e:	463b      	mov	r3, r7
 800fd50:	f7f0 ff3a 	bl	8000bc8 <__aeabi_dcmpeq>
 800fd54:	b910      	cbnz	r0, 800fd5c <_dtoa_r+0x184>
 800fd56:	9b00      	ldr	r3, [sp, #0]
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	9b00      	ldr	r3, [sp, #0]
 800fd5e:	2b16      	cmp	r3, #22
 800fd60:	d85a      	bhi.n	800fe18 <_dtoa_r+0x240>
 800fd62:	9a00      	ldr	r2, [sp, #0]
 800fd64:	4b57      	ldr	r3, [pc, #348]	; (800fec4 <_dtoa_r+0x2ec>)
 800fd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6e:	ec51 0b19 	vmov	r0, r1, d9
 800fd72:	f7f0 ff33 	bl	8000bdc <__aeabi_dcmplt>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d050      	beq.n	800fe1c <_dtoa_r+0x244>
 800fd7a:	9b00      	ldr	r3, [sp, #0]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	2300      	movs	r3, #0
 800fd82:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd86:	1b5d      	subs	r5, r3, r5
 800fd88:	1e6b      	subs	r3, r5, #1
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	bf45      	ittet	mi
 800fd8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fd92:	9304      	strmi	r3, [sp, #16]
 800fd94:	2300      	movpl	r3, #0
 800fd96:	2300      	movmi	r3, #0
 800fd98:	bf4c      	ite	mi
 800fd9a:	9305      	strmi	r3, [sp, #20]
 800fd9c:	9304      	strpl	r3, [sp, #16]
 800fd9e:	9b00      	ldr	r3, [sp, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	db3d      	blt.n	800fe20 <_dtoa_r+0x248>
 800fda4:	9b05      	ldr	r3, [sp, #20]
 800fda6:	9a00      	ldr	r2, [sp, #0]
 800fda8:	920a      	str	r2, [sp, #40]	; 0x28
 800fdaa:	4413      	add	r3, r2
 800fdac:	9305      	str	r3, [sp, #20]
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9307      	str	r3, [sp, #28]
 800fdb2:	9b06      	ldr	r3, [sp, #24]
 800fdb4:	2b09      	cmp	r3, #9
 800fdb6:	f200 8089 	bhi.w	800fecc <_dtoa_r+0x2f4>
 800fdba:	2b05      	cmp	r3, #5
 800fdbc:	bfc4      	itt	gt
 800fdbe:	3b04      	subgt	r3, #4
 800fdc0:	9306      	strgt	r3, [sp, #24]
 800fdc2:	9b06      	ldr	r3, [sp, #24]
 800fdc4:	f1a3 0302 	sub.w	r3, r3, #2
 800fdc8:	bfcc      	ite	gt
 800fdca:	2500      	movgt	r5, #0
 800fdcc:	2501      	movle	r5, #1
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	f200 8087 	bhi.w	800fee2 <_dtoa_r+0x30a>
 800fdd4:	e8df f003 	tbb	[pc, r3]
 800fdd8:	59383a2d 	.word	0x59383a2d
 800fddc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fde0:	441d      	add	r5, r3
 800fde2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fde6:	2b20      	cmp	r3, #32
 800fde8:	bfc1      	itttt	gt
 800fdea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fdee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fdf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fdf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fdfa:	bfda      	itte	le
 800fdfc:	f1c3 0320 	rsble	r3, r3, #32
 800fe00:	fa06 f003 	lslle.w	r0, r6, r3
 800fe04:	4318      	orrgt	r0, r3
 800fe06:	f7f0 fbfd 	bl	8000604 <__aeabi_ui2d>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe12:	3d01      	subs	r5, #1
 800fe14:	930e      	str	r3, [sp, #56]	; 0x38
 800fe16:	e76a      	b.n	800fcee <_dtoa_r+0x116>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e7b2      	b.n	800fd82 <_dtoa_r+0x1aa>
 800fe1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe1e:	e7b1      	b.n	800fd84 <_dtoa_r+0x1ac>
 800fe20:	9b04      	ldr	r3, [sp, #16]
 800fe22:	9a00      	ldr	r2, [sp, #0]
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	9304      	str	r3, [sp, #16]
 800fe28:	4253      	negs	r3, r2
 800fe2a:	9307      	str	r3, [sp, #28]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe30:	e7bf      	b.n	800fdb2 <_dtoa_r+0x1da>
 800fe32:	2300      	movs	r3, #0
 800fe34:	9308      	str	r3, [sp, #32]
 800fe36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc55      	bgt.n	800fee8 <_dtoa_r+0x310>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe42:	461a      	mov	r2, r3
 800fe44:	9209      	str	r2, [sp, #36]	; 0x24
 800fe46:	e00c      	b.n	800fe62 <_dtoa_r+0x28a>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e7f3      	b.n	800fe34 <_dtoa_r+0x25c>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe50:	9308      	str	r3, [sp, #32]
 800fe52:	9b00      	ldr	r3, [sp, #0]
 800fe54:	4413      	add	r3, r2
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	9303      	str	r3, [sp, #12]
 800fe5e:	bfb8      	it	lt
 800fe60:	2301      	movlt	r3, #1
 800fe62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe64:	2200      	movs	r2, #0
 800fe66:	6042      	str	r2, [r0, #4]
 800fe68:	2204      	movs	r2, #4
 800fe6a:	f102 0614 	add.w	r6, r2, #20
 800fe6e:	429e      	cmp	r6, r3
 800fe70:	6841      	ldr	r1, [r0, #4]
 800fe72:	d93d      	bls.n	800fef0 <_dtoa_r+0x318>
 800fe74:	4620      	mov	r0, r4
 800fe76:	f001 f923 	bl	80110c0 <_Balloc>
 800fe7a:	9001      	str	r0, [sp, #4]
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d13b      	bne.n	800fef8 <_dtoa_r+0x320>
 800fe80:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <_dtoa_r+0x2f0>)
 800fe82:	4602      	mov	r2, r0
 800fe84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fe88:	e6c0      	b.n	800fc0c <_dtoa_r+0x34>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e7df      	b.n	800fe4e <_dtoa_r+0x276>
 800fe8e:	bf00      	nop
 800fe90:	636f4361 	.word	0x636f4361
 800fe94:	3fd287a7 	.word	0x3fd287a7
 800fe98:	8b60c8b3 	.word	0x8b60c8b3
 800fe9c:	3fc68a28 	.word	0x3fc68a28
 800fea0:	509f79fb 	.word	0x509f79fb
 800fea4:	3fd34413 	.word	0x3fd34413
 800fea8:	0802bf6d 	.word	0x0802bf6d
 800feac:	0802bf84 	.word	0x0802bf84
 800feb0:	7ff00000 	.word	0x7ff00000
 800feb4:	0802bf69 	.word	0x0802bf69
 800feb8:	0802bf60 	.word	0x0802bf60
 800febc:	08018365 	.word	0x08018365
 800fec0:	3ff80000 	.word	0x3ff80000
 800fec4:	0802c150 	.word	0x0802c150
 800fec8:	0802bfdf 	.word	0x0802bfdf
 800fecc:	2501      	movs	r5, #1
 800fece:	2300      	movs	r3, #0
 800fed0:	9306      	str	r3, [sp, #24]
 800fed2:	9508      	str	r5, [sp, #32]
 800fed4:	f04f 33ff 	mov.w	r3, #4294967295
 800fed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fedc:	2200      	movs	r2, #0
 800fede:	2312      	movs	r3, #18
 800fee0:	e7b0      	b.n	800fe44 <_dtoa_r+0x26c>
 800fee2:	2301      	movs	r3, #1
 800fee4:	9308      	str	r3, [sp, #32]
 800fee6:	e7f5      	b.n	800fed4 <_dtoa_r+0x2fc>
 800fee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800feee:	e7b8      	b.n	800fe62 <_dtoa_r+0x28a>
 800fef0:	3101      	adds	r1, #1
 800fef2:	6041      	str	r1, [r0, #4]
 800fef4:	0052      	lsls	r2, r2, #1
 800fef6:	e7b8      	b.n	800fe6a <_dtoa_r+0x292>
 800fef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	2b0e      	cmp	r3, #14
 800ff02:	f200 809d 	bhi.w	8010040 <_dtoa_r+0x468>
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	f000 809a 	beq.w	8010040 <_dtoa_r+0x468>
 800ff0c:	9b00      	ldr	r3, [sp, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	dd32      	ble.n	800ff78 <_dtoa_r+0x3a0>
 800ff12:	4ab7      	ldr	r2, [pc, #732]	; (80101f0 <_dtoa_r+0x618>)
 800ff14:	f003 030f 	and.w	r3, r3, #15
 800ff18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff20:	9b00      	ldr	r3, [sp, #0]
 800ff22:	05d8      	lsls	r0, r3, #23
 800ff24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff28:	d516      	bpl.n	800ff58 <_dtoa_r+0x380>
 800ff2a:	4bb2      	ldr	r3, [pc, #712]	; (80101f4 <_dtoa_r+0x61c>)
 800ff2c:	ec51 0b19 	vmov	r0, r1, d9
 800ff30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff34:	f7f0 fd0a 	bl	800094c <__aeabi_ddiv>
 800ff38:	f007 070f 	and.w	r7, r7, #15
 800ff3c:	4682      	mov	sl, r0
 800ff3e:	468b      	mov	fp, r1
 800ff40:	2503      	movs	r5, #3
 800ff42:	4eac      	ldr	r6, [pc, #688]	; (80101f4 <_dtoa_r+0x61c>)
 800ff44:	b957      	cbnz	r7, 800ff5c <_dtoa_r+0x384>
 800ff46:	4642      	mov	r2, r8
 800ff48:	464b      	mov	r3, r9
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	4659      	mov	r1, fp
 800ff4e:	f7f0 fcfd 	bl	800094c <__aeabi_ddiv>
 800ff52:	4682      	mov	sl, r0
 800ff54:	468b      	mov	fp, r1
 800ff56:	e028      	b.n	800ffaa <_dtoa_r+0x3d2>
 800ff58:	2502      	movs	r5, #2
 800ff5a:	e7f2      	b.n	800ff42 <_dtoa_r+0x36a>
 800ff5c:	07f9      	lsls	r1, r7, #31
 800ff5e:	d508      	bpl.n	800ff72 <_dtoa_r+0x39a>
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ff68:	f7f0 fbc6 	bl	80006f8 <__aeabi_dmul>
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	4680      	mov	r8, r0
 800ff70:	4689      	mov	r9, r1
 800ff72:	107f      	asrs	r7, r7, #1
 800ff74:	3608      	adds	r6, #8
 800ff76:	e7e5      	b.n	800ff44 <_dtoa_r+0x36c>
 800ff78:	f000 809b 	beq.w	80100b2 <_dtoa_r+0x4da>
 800ff7c:	9b00      	ldr	r3, [sp, #0]
 800ff7e:	4f9d      	ldr	r7, [pc, #628]	; (80101f4 <_dtoa_r+0x61c>)
 800ff80:	425e      	negs	r6, r3
 800ff82:	4b9b      	ldr	r3, [pc, #620]	; (80101f0 <_dtoa_r+0x618>)
 800ff84:	f006 020f 	and.w	r2, r6, #15
 800ff88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	ec51 0b19 	vmov	r0, r1, d9
 800ff94:	f7f0 fbb0 	bl	80006f8 <__aeabi_dmul>
 800ff98:	1136      	asrs	r6, r6, #4
 800ff9a:	4682      	mov	sl, r0
 800ff9c:	468b      	mov	fp, r1
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	2502      	movs	r5, #2
 800ffa2:	2e00      	cmp	r6, #0
 800ffa4:	d17a      	bne.n	801009c <_dtoa_r+0x4c4>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1d3      	bne.n	800ff52 <_dtoa_r+0x37a>
 800ffaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 8082 	beq.w	80100b6 <_dtoa_r+0x4de>
 800ffb2:	4b91      	ldr	r3, [pc, #580]	; (80101f8 <_dtoa_r+0x620>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	4650      	mov	r0, sl
 800ffb8:	4659      	mov	r1, fp
 800ffba:	f7f0 fe0f 	bl	8000bdc <__aeabi_dcmplt>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d079      	beq.n	80100b6 <_dtoa_r+0x4de>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d076      	beq.n	80100b6 <_dtoa_r+0x4de>
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	dd36      	ble.n	801003c <_dtoa_r+0x464>
 800ffce:	9b00      	ldr	r3, [sp, #0]
 800ffd0:	4650      	mov	r0, sl
 800ffd2:	4659      	mov	r1, fp
 800ffd4:	1e5f      	subs	r7, r3, #1
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4b88      	ldr	r3, [pc, #544]	; (80101fc <_dtoa_r+0x624>)
 800ffda:	f7f0 fb8d 	bl	80006f8 <__aeabi_dmul>
 800ffde:	9e02      	ldr	r6, [sp, #8]
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	468b      	mov	fp, r1
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f7f0 fb1c 	bl	8000624 <__aeabi_i2d>
 800ffec:	4652      	mov	r2, sl
 800ffee:	465b      	mov	r3, fp
 800fff0:	f7f0 fb82 	bl	80006f8 <__aeabi_dmul>
 800fff4:	4b82      	ldr	r3, [pc, #520]	; (8010200 <_dtoa_r+0x628>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	f7f0 f9c8 	bl	800038c <__adddf3>
 800fffc:	46d0      	mov	r8, sl
 800fffe:	46d9      	mov	r9, fp
 8010000:	4682      	mov	sl, r0
 8010002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010006:	2e00      	cmp	r6, #0
 8010008:	d158      	bne.n	80100bc <_dtoa_r+0x4e4>
 801000a:	4b7e      	ldr	r3, [pc, #504]	; (8010204 <_dtoa_r+0x62c>)
 801000c:	2200      	movs	r2, #0
 801000e:	4640      	mov	r0, r8
 8010010:	4649      	mov	r1, r9
 8010012:	f7f0 f9b9 	bl	8000388 <__aeabi_dsub>
 8010016:	4652      	mov	r2, sl
 8010018:	465b      	mov	r3, fp
 801001a:	4680      	mov	r8, r0
 801001c:	4689      	mov	r9, r1
 801001e:	f7f0 fdfb 	bl	8000c18 <__aeabi_dcmpgt>
 8010022:	2800      	cmp	r0, #0
 8010024:	f040 8295 	bne.w	8010552 <_dtoa_r+0x97a>
 8010028:	4652      	mov	r2, sl
 801002a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801002e:	4640      	mov	r0, r8
 8010030:	4649      	mov	r1, r9
 8010032:	f7f0 fdd3 	bl	8000bdc <__aeabi_dcmplt>
 8010036:	2800      	cmp	r0, #0
 8010038:	f040 8289 	bne.w	801054e <_dtoa_r+0x976>
 801003c:	ec5b ab19 	vmov	sl, fp, d9
 8010040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010042:	2b00      	cmp	r3, #0
 8010044:	f2c0 8148 	blt.w	80102d8 <_dtoa_r+0x700>
 8010048:	9a00      	ldr	r2, [sp, #0]
 801004a:	2a0e      	cmp	r2, #14
 801004c:	f300 8144 	bgt.w	80102d8 <_dtoa_r+0x700>
 8010050:	4b67      	ldr	r3, [pc, #412]	; (80101f0 <_dtoa_r+0x618>)
 8010052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010056:	e9d3 8900 	ldrd	r8, r9, [r3]
 801005a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005c:	2b00      	cmp	r3, #0
 801005e:	f280 80d5 	bge.w	801020c <_dtoa_r+0x634>
 8010062:	9b03      	ldr	r3, [sp, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	f300 80d1 	bgt.w	801020c <_dtoa_r+0x634>
 801006a:	f040 826f 	bne.w	801054c <_dtoa_r+0x974>
 801006e:	4b65      	ldr	r3, [pc, #404]	; (8010204 <_dtoa_r+0x62c>)
 8010070:	2200      	movs	r2, #0
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 fb3f 	bl	80006f8 <__aeabi_dmul>
 801007a:	4652      	mov	r2, sl
 801007c:	465b      	mov	r3, fp
 801007e:	f7f0 fdc1 	bl	8000c04 <__aeabi_dcmpge>
 8010082:	9e03      	ldr	r6, [sp, #12]
 8010084:	4637      	mov	r7, r6
 8010086:	2800      	cmp	r0, #0
 8010088:	f040 8245 	bne.w	8010516 <_dtoa_r+0x93e>
 801008c:	9d01      	ldr	r5, [sp, #4]
 801008e:	2331      	movs	r3, #49	; 0x31
 8010090:	f805 3b01 	strb.w	r3, [r5], #1
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	3301      	adds	r3, #1
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	e240      	b.n	801051e <_dtoa_r+0x946>
 801009c:	07f2      	lsls	r2, r6, #31
 801009e:	d505      	bpl.n	80100ac <_dtoa_r+0x4d4>
 80100a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100a4:	f7f0 fb28 	bl	80006f8 <__aeabi_dmul>
 80100a8:	3501      	adds	r5, #1
 80100aa:	2301      	movs	r3, #1
 80100ac:	1076      	asrs	r6, r6, #1
 80100ae:	3708      	adds	r7, #8
 80100b0:	e777      	b.n	800ffa2 <_dtoa_r+0x3ca>
 80100b2:	2502      	movs	r5, #2
 80100b4:	e779      	b.n	800ffaa <_dtoa_r+0x3d2>
 80100b6:	9f00      	ldr	r7, [sp, #0]
 80100b8:	9e03      	ldr	r6, [sp, #12]
 80100ba:	e794      	b.n	800ffe6 <_dtoa_r+0x40e>
 80100bc:	9901      	ldr	r1, [sp, #4]
 80100be:	4b4c      	ldr	r3, [pc, #304]	; (80101f0 <_dtoa_r+0x618>)
 80100c0:	4431      	add	r1, r6
 80100c2:	910d      	str	r1, [sp, #52]	; 0x34
 80100c4:	9908      	ldr	r1, [sp, #32]
 80100c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80100ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80100ce:	2900      	cmp	r1, #0
 80100d0:	d043      	beq.n	801015a <_dtoa_r+0x582>
 80100d2:	494d      	ldr	r1, [pc, #308]	; (8010208 <_dtoa_r+0x630>)
 80100d4:	2000      	movs	r0, #0
 80100d6:	f7f0 fc39 	bl	800094c <__aeabi_ddiv>
 80100da:	4652      	mov	r2, sl
 80100dc:	465b      	mov	r3, fp
 80100de:	f7f0 f953 	bl	8000388 <__aeabi_dsub>
 80100e2:	9d01      	ldr	r5, [sp, #4]
 80100e4:	4682      	mov	sl, r0
 80100e6:	468b      	mov	fp, r1
 80100e8:	4649      	mov	r1, r9
 80100ea:	4640      	mov	r0, r8
 80100ec:	f7f0 fdb4 	bl	8000c58 <__aeabi_d2iz>
 80100f0:	4606      	mov	r6, r0
 80100f2:	f7f0 fa97 	bl	8000624 <__aeabi_i2d>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	4640      	mov	r0, r8
 80100fc:	4649      	mov	r1, r9
 80100fe:	f7f0 f943 	bl	8000388 <__aeabi_dsub>
 8010102:	3630      	adds	r6, #48	; 0x30
 8010104:	f805 6b01 	strb.w	r6, [r5], #1
 8010108:	4652      	mov	r2, sl
 801010a:	465b      	mov	r3, fp
 801010c:	4680      	mov	r8, r0
 801010e:	4689      	mov	r9, r1
 8010110:	f7f0 fd64 	bl	8000bdc <__aeabi_dcmplt>
 8010114:	2800      	cmp	r0, #0
 8010116:	d163      	bne.n	80101e0 <_dtoa_r+0x608>
 8010118:	4642      	mov	r2, r8
 801011a:	464b      	mov	r3, r9
 801011c:	4936      	ldr	r1, [pc, #216]	; (80101f8 <_dtoa_r+0x620>)
 801011e:	2000      	movs	r0, #0
 8010120:	f7f0 f932 	bl	8000388 <__aeabi_dsub>
 8010124:	4652      	mov	r2, sl
 8010126:	465b      	mov	r3, fp
 8010128:	f7f0 fd58 	bl	8000bdc <__aeabi_dcmplt>
 801012c:	2800      	cmp	r0, #0
 801012e:	f040 80b5 	bne.w	801029c <_dtoa_r+0x6c4>
 8010132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010134:	429d      	cmp	r5, r3
 8010136:	d081      	beq.n	801003c <_dtoa_r+0x464>
 8010138:	4b30      	ldr	r3, [pc, #192]	; (80101fc <_dtoa_r+0x624>)
 801013a:	2200      	movs	r2, #0
 801013c:	4650      	mov	r0, sl
 801013e:	4659      	mov	r1, fp
 8010140:	f7f0 fada 	bl	80006f8 <__aeabi_dmul>
 8010144:	4b2d      	ldr	r3, [pc, #180]	; (80101fc <_dtoa_r+0x624>)
 8010146:	4682      	mov	sl, r0
 8010148:	468b      	mov	fp, r1
 801014a:	4640      	mov	r0, r8
 801014c:	4649      	mov	r1, r9
 801014e:	2200      	movs	r2, #0
 8010150:	f7f0 fad2 	bl	80006f8 <__aeabi_dmul>
 8010154:	4680      	mov	r8, r0
 8010156:	4689      	mov	r9, r1
 8010158:	e7c6      	b.n	80100e8 <_dtoa_r+0x510>
 801015a:	4650      	mov	r0, sl
 801015c:	4659      	mov	r1, fp
 801015e:	f7f0 facb 	bl	80006f8 <__aeabi_dmul>
 8010162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010164:	9d01      	ldr	r5, [sp, #4]
 8010166:	930f      	str	r3, [sp, #60]	; 0x3c
 8010168:	4682      	mov	sl, r0
 801016a:	468b      	mov	fp, r1
 801016c:	4649      	mov	r1, r9
 801016e:	4640      	mov	r0, r8
 8010170:	f7f0 fd72 	bl	8000c58 <__aeabi_d2iz>
 8010174:	4606      	mov	r6, r0
 8010176:	f7f0 fa55 	bl	8000624 <__aeabi_i2d>
 801017a:	3630      	adds	r6, #48	; 0x30
 801017c:	4602      	mov	r2, r0
 801017e:	460b      	mov	r3, r1
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 f900 	bl	8000388 <__aeabi_dsub>
 8010188:	f805 6b01 	strb.w	r6, [r5], #1
 801018c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801018e:	429d      	cmp	r5, r3
 8010190:	4680      	mov	r8, r0
 8010192:	4689      	mov	r9, r1
 8010194:	f04f 0200 	mov.w	r2, #0
 8010198:	d124      	bne.n	80101e4 <_dtoa_r+0x60c>
 801019a:	4b1b      	ldr	r3, [pc, #108]	; (8010208 <_dtoa_r+0x630>)
 801019c:	4650      	mov	r0, sl
 801019e:	4659      	mov	r1, fp
 80101a0:	f7f0 f8f4 	bl	800038c <__adddf3>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	f7f0 fd34 	bl	8000c18 <__aeabi_dcmpgt>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d173      	bne.n	801029c <_dtoa_r+0x6c4>
 80101b4:	4652      	mov	r2, sl
 80101b6:	465b      	mov	r3, fp
 80101b8:	4913      	ldr	r1, [pc, #76]	; (8010208 <_dtoa_r+0x630>)
 80101ba:	2000      	movs	r0, #0
 80101bc:	f7f0 f8e4 	bl	8000388 <__aeabi_dsub>
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4640      	mov	r0, r8
 80101c6:	4649      	mov	r1, r9
 80101c8:	f7f0 fd08 	bl	8000bdc <__aeabi_dcmplt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	f43f af35 	beq.w	801003c <_dtoa_r+0x464>
 80101d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80101d4:	1e6b      	subs	r3, r5, #1
 80101d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80101d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80101dc:	2b30      	cmp	r3, #48	; 0x30
 80101de:	d0f8      	beq.n	80101d2 <_dtoa_r+0x5fa>
 80101e0:	9700      	str	r7, [sp, #0]
 80101e2:	e049      	b.n	8010278 <_dtoa_r+0x6a0>
 80101e4:	4b05      	ldr	r3, [pc, #20]	; (80101fc <_dtoa_r+0x624>)
 80101e6:	f7f0 fa87 	bl	80006f8 <__aeabi_dmul>
 80101ea:	4680      	mov	r8, r0
 80101ec:	4689      	mov	r9, r1
 80101ee:	e7bd      	b.n	801016c <_dtoa_r+0x594>
 80101f0:	0802c150 	.word	0x0802c150
 80101f4:	0802c128 	.word	0x0802c128
 80101f8:	3ff00000 	.word	0x3ff00000
 80101fc:	40240000 	.word	0x40240000
 8010200:	401c0000 	.word	0x401c0000
 8010204:	40140000 	.word	0x40140000
 8010208:	3fe00000 	.word	0x3fe00000
 801020c:	9d01      	ldr	r5, [sp, #4]
 801020e:	4656      	mov	r6, sl
 8010210:	465f      	mov	r7, fp
 8010212:	4642      	mov	r2, r8
 8010214:	464b      	mov	r3, r9
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 fb97 	bl	800094c <__aeabi_ddiv>
 801021e:	f7f0 fd1b 	bl	8000c58 <__aeabi_d2iz>
 8010222:	4682      	mov	sl, r0
 8010224:	f7f0 f9fe 	bl	8000624 <__aeabi_i2d>
 8010228:	4642      	mov	r2, r8
 801022a:	464b      	mov	r3, r9
 801022c:	f7f0 fa64 	bl	80006f8 <__aeabi_dmul>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	4630      	mov	r0, r6
 8010236:	4639      	mov	r1, r7
 8010238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801023c:	f7f0 f8a4 	bl	8000388 <__aeabi_dsub>
 8010240:	f805 6b01 	strb.w	r6, [r5], #1
 8010244:	9e01      	ldr	r6, [sp, #4]
 8010246:	9f03      	ldr	r7, [sp, #12]
 8010248:	1bae      	subs	r6, r5, r6
 801024a:	42b7      	cmp	r7, r6
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	d135      	bne.n	80102be <_dtoa_r+0x6e6>
 8010252:	f7f0 f89b 	bl	800038c <__adddf3>
 8010256:	4642      	mov	r2, r8
 8010258:	464b      	mov	r3, r9
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	f7f0 fcdb 	bl	8000c18 <__aeabi_dcmpgt>
 8010262:	b9d0      	cbnz	r0, 801029a <_dtoa_r+0x6c2>
 8010264:	4642      	mov	r2, r8
 8010266:	464b      	mov	r3, r9
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 fcac 	bl	8000bc8 <__aeabi_dcmpeq>
 8010270:	b110      	cbz	r0, 8010278 <_dtoa_r+0x6a0>
 8010272:	f01a 0f01 	tst.w	sl, #1
 8010276:	d110      	bne.n	801029a <_dtoa_r+0x6c2>
 8010278:	4620      	mov	r0, r4
 801027a:	ee18 1a10 	vmov	r1, s16
 801027e:	f000 ff5f 	bl	8011140 <_Bfree>
 8010282:	2300      	movs	r3, #0
 8010284:	9800      	ldr	r0, [sp, #0]
 8010286:	702b      	strb	r3, [r5, #0]
 8010288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801028a:	3001      	adds	r0, #1
 801028c:	6018      	str	r0, [r3, #0]
 801028e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010290:	2b00      	cmp	r3, #0
 8010292:	f43f acf1 	beq.w	800fc78 <_dtoa_r+0xa0>
 8010296:	601d      	str	r5, [r3, #0]
 8010298:	e4ee      	b.n	800fc78 <_dtoa_r+0xa0>
 801029a:	9f00      	ldr	r7, [sp, #0]
 801029c:	462b      	mov	r3, r5
 801029e:	461d      	mov	r5, r3
 80102a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102a4:	2a39      	cmp	r2, #57	; 0x39
 80102a6:	d106      	bne.n	80102b6 <_dtoa_r+0x6de>
 80102a8:	9a01      	ldr	r2, [sp, #4]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d1f7      	bne.n	801029e <_dtoa_r+0x6c6>
 80102ae:	9901      	ldr	r1, [sp, #4]
 80102b0:	2230      	movs	r2, #48	; 0x30
 80102b2:	3701      	adds	r7, #1
 80102b4:	700a      	strb	r2, [r1, #0]
 80102b6:	781a      	ldrb	r2, [r3, #0]
 80102b8:	3201      	adds	r2, #1
 80102ba:	701a      	strb	r2, [r3, #0]
 80102bc:	e790      	b.n	80101e0 <_dtoa_r+0x608>
 80102be:	4ba6      	ldr	r3, [pc, #664]	; (8010558 <_dtoa_r+0x980>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	f7f0 fa19 	bl	80006f8 <__aeabi_dmul>
 80102c6:	2200      	movs	r2, #0
 80102c8:	2300      	movs	r3, #0
 80102ca:	4606      	mov	r6, r0
 80102cc:	460f      	mov	r7, r1
 80102ce:	f7f0 fc7b 	bl	8000bc8 <__aeabi_dcmpeq>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d09d      	beq.n	8010212 <_dtoa_r+0x63a>
 80102d6:	e7cf      	b.n	8010278 <_dtoa_r+0x6a0>
 80102d8:	9a08      	ldr	r2, [sp, #32]
 80102da:	2a00      	cmp	r2, #0
 80102dc:	f000 80d7 	beq.w	801048e <_dtoa_r+0x8b6>
 80102e0:	9a06      	ldr	r2, [sp, #24]
 80102e2:	2a01      	cmp	r2, #1
 80102e4:	f300 80ba 	bgt.w	801045c <_dtoa_r+0x884>
 80102e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102ea:	2a00      	cmp	r2, #0
 80102ec:	f000 80b2 	beq.w	8010454 <_dtoa_r+0x87c>
 80102f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80102f4:	9e07      	ldr	r6, [sp, #28]
 80102f6:	9d04      	ldr	r5, [sp, #16]
 80102f8:	9a04      	ldr	r2, [sp, #16]
 80102fa:	441a      	add	r2, r3
 80102fc:	9204      	str	r2, [sp, #16]
 80102fe:	9a05      	ldr	r2, [sp, #20]
 8010300:	2101      	movs	r1, #1
 8010302:	441a      	add	r2, r3
 8010304:	4620      	mov	r0, r4
 8010306:	9205      	str	r2, [sp, #20]
 8010308:	f001 f81c 	bl	8011344 <__i2b>
 801030c:	4607      	mov	r7, r0
 801030e:	2d00      	cmp	r5, #0
 8010310:	dd0c      	ble.n	801032c <_dtoa_r+0x754>
 8010312:	9b05      	ldr	r3, [sp, #20]
 8010314:	2b00      	cmp	r3, #0
 8010316:	dd09      	ble.n	801032c <_dtoa_r+0x754>
 8010318:	42ab      	cmp	r3, r5
 801031a:	9a04      	ldr	r2, [sp, #16]
 801031c:	bfa8      	it	ge
 801031e:	462b      	movge	r3, r5
 8010320:	1ad2      	subs	r2, r2, r3
 8010322:	9204      	str	r2, [sp, #16]
 8010324:	9a05      	ldr	r2, [sp, #20]
 8010326:	1aed      	subs	r5, r5, r3
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	9305      	str	r3, [sp, #20]
 801032c:	9b07      	ldr	r3, [sp, #28]
 801032e:	b31b      	cbz	r3, 8010378 <_dtoa_r+0x7a0>
 8010330:	9b08      	ldr	r3, [sp, #32]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 80af 	beq.w	8010496 <_dtoa_r+0x8be>
 8010338:	2e00      	cmp	r6, #0
 801033a:	dd13      	ble.n	8010364 <_dtoa_r+0x78c>
 801033c:	4639      	mov	r1, r7
 801033e:	4632      	mov	r2, r6
 8010340:	4620      	mov	r0, r4
 8010342:	f001 f8bf 	bl	80114c4 <__pow5mult>
 8010346:	ee18 2a10 	vmov	r2, s16
 801034a:	4601      	mov	r1, r0
 801034c:	4607      	mov	r7, r0
 801034e:	4620      	mov	r0, r4
 8010350:	f001 f80e 	bl	8011370 <__multiply>
 8010354:	ee18 1a10 	vmov	r1, s16
 8010358:	4680      	mov	r8, r0
 801035a:	4620      	mov	r0, r4
 801035c:	f000 fef0 	bl	8011140 <_Bfree>
 8010360:	ee08 8a10 	vmov	s16, r8
 8010364:	9b07      	ldr	r3, [sp, #28]
 8010366:	1b9a      	subs	r2, r3, r6
 8010368:	d006      	beq.n	8010378 <_dtoa_r+0x7a0>
 801036a:	ee18 1a10 	vmov	r1, s16
 801036e:	4620      	mov	r0, r4
 8010370:	f001 f8a8 	bl	80114c4 <__pow5mult>
 8010374:	ee08 0a10 	vmov	s16, r0
 8010378:	2101      	movs	r1, #1
 801037a:	4620      	mov	r0, r4
 801037c:	f000 ffe2 	bl	8011344 <__i2b>
 8010380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010382:	2b00      	cmp	r3, #0
 8010384:	4606      	mov	r6, r0
 8010386:	f340 8088 	ble.w	801049a <_dtoa_r+0x8c2>
 801038a:	461a      	mov	r2, r3
 801038c:	4601      	mov	r1, r0
 801038e:	4620      	mov	r0, r4
 8010390:	f001 f898 	bl	80114c4 <__pow5mult>
 8010394:	9b06      	ldr	r3, [sp, #24]
 8010396:	2b01      	cmp	r3, #1
 8010398:	4606      	mov	r6, r0
 801039a:	f340 8081 	ble.w	80104a0 <_dtoa_r+0x8c8>
 801039e:	f04f 0800 	mov.w	r8, #0
 80103a2:	6933      	ldr	r3, [r6, #16]
 80103a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80103a8:	6918      	ldr	r0, [r3, #16]
 80103aa:	f000 ff7b 	bl	80112a4 <__hi0bits>
 80103ae:	f1c0 0020 	rsb	r0, r0, #32
 80103b2:	9b05      	ldr	r3, [sp, #20]
 80103b4:	4418      	add	r0, r3
 80103b6:	f010 001f 	ands.w	r0, r0, #31
 80103ba:	f000 8092 	beq.w	80104e2 <_dtoa_r+0x90a>
 80103be:	f1c0 0320 	rsb	r3, r0, #32
 80103c2:	2b04      	cmp	r3, #4
 80103c4:	f340 808a 	ble.w	80104dc <_dtoa_r+0x904>
 80103c8:	f1c0 001c 	rsb	r0, r0, #28
 80103cc:	9b04      	ldr	r3, [sp, #16]
 80103ce:	4403      	add	r3, r0
 80103d0:	9304      	str	r3, [sp, #16]
 80103d2:	9b05      	ldr	r3, [sp, #20]
 80103d4:	4403      	add	r3, r0
 80103d6:	4405      	add	r5, r0
 80103d8:	9305      	str	r3, [sp, #20]
 80103da:	9b04      	ldr	r3, [sp, #16]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	dd07      	ble.n	80103f0 <_dtoa_r+0x818>
 80103e0:	ee18 1a10 	vmov	r1, s16
 80103e4:	461a      	mov	r2, r3
 80103e6:	4620      	mov	r0, r4
 80103e8:	f001 f8c6 	bl	8011578 <__lshift>
 80103ec:	ee08 0a10 	vmov	s16, r0
 80103f0:	9b05      	ldr	r3, [sp, #20]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	dd05      	ble.n	8010402 <_dtoa_r+0x82a>
 80103f6:	4631      	mov	r1, r6
 80103f8:	461a      	mov	r2, r3
 80103fa:	4620      	mov	r0, r4
 80103fc:	f001 f8bc 	bl	8011578 <__lshift>
 8010400:	4606      	mov	r6, r0
 8010402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010404:	2b00      	cmp	r3, #0
 8010406:	d06e      	beq.n	80104e6 <_dtoa_r+0x90e>
 8010408:	ee18 0a10 	vmov	r0, s16
 801040c:	4631      	mov	r1, r6
 801040e:	f001 f923 	bl	8011658 <__mcmp>
 8010412:	2800      	cmp	r0, #0
 8010414:	da67      	bge.n	80104e6 <_dtoa_r+0x90e>
 8010416:	9b00      	ldr	r3, [sp, #0]
 8010418:	3b01      	subs	r3, #1
 801041a:	ee18 1a10 	vmov	r1, s16
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	220a      	movs	r2, #10
 8010422:	2300      	movs	r3, #0
 8010424:	4620      	mov	r0, r4
 8010426:	f000 fead 	bl	8011184 <__multadd>
 801042a:	9b08      	ldr	r3, [sp, #32]
 801042c:	ee08 0a10 	vmov	s16, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 81b1 	beq.w	8010798 <_dtoa_r+0xbc0>
 8010436:	2300      	movs	r3, #0
 8010438:	4639      	mov	r1, r7
 801043a:	220a      	movs	r2, #10
 801043c:	4620      	mov	r0, r4
 801043e:	f000 fea1 	bl	8011184 <__multadd>
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	4607      	mov	r7, r0
 8010448:	f300 808e 	bgt.w	8010568 <_dtoa_r+0x990>
 801044c:	9b06      	ldr	r3, [sp, #24]
 801044e:	2b02      	cmp	r3, #2
 8010450:	dc51      	bgt.n	80104f6 <_dtoa_r+0x91e>
 8010452:	e089      	b.n	8010568 <_dtoa_r+0x990>
 8010454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801045a:	e74b      	b.n	80102f4 <_dtoa_r+0x71c>
 801045c:	9b03      	ldr	r3, [sp, #12]
 801045e:	1e5e      	subs	r6, r3, #1
 8010460:	9b07      	ldr	r3, [sp, #28]
 8010462:	42b3      	cmp	r3, r6
 8010464:	bfbf      	itttt	lt
 8010466:	9b07      	ldrlt	r3, [sp, #28]
 8010468:	9607      	strlt	r6, [sp, #28]
 801046a:	1af2      	sublt	r2, r6, r3
 801046c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801046e:	bfb6      	itet	lt
 8010470:	189b      	addlt	r3, r3, r2
 8010472:	1b9e      	subge	r6, r3, r6
 8010474:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010476:	9b03      	ldr	r3, [sp, #12]
 8010478:	bfb8      	it	lt
 801047a:	2600      	movlt	r6, #0
 801047c:	2b00      	cmp	r3, #0
 801047e:	bfb7      	itett	lt
 8010480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010488:	1a9d      	sublt	r5, r3, r2
 801048a:	2300      	movlt	r3, #0
 801048c:	e734      	b.n	80102f8 <_dtoa_r+0x720>
 801048e:	9e07      	ldr	r6, [sp, #28]
 8010490:	9d04      	ldr	r5, [sp, #16]
 8010492:	9f08      	ldr	r7, [sp, #32]
 8010494:	e73b      	b.n	801030e <_dtoa_r+0x736>
 8010496:	9a07      	ldr	r2, [sp, #28]
 8010498:	e767      	b.n	801036a <_dtoa_r+0x792>
 801049a:	9b06      	ldr	r3, [sp, #24]
 801049c:	2b01      	cmp	r3, #1
 801049e:	dc18      	bgt.n	80104d2 <_dtoa_r+0x8fa>
 80104a0:	f1ba 0f00 	cmp.w	sl, #0
 80104a4:	d115      	bne.n	80104d2 <_dtoa_r+0x8fa>
 80104a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104aa:	b993      	cbnz	r3, 80104d2 <_dtoa_r+0x8fa>
 80104ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104b0:	0d1b      	lsrs	r3, r3, #20
 80104b2:	051b      	lsls	r3, r3, #20
 80104b4:	b183      	cbz	r3, 80104d8 <_dtoa_r+0x900>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	3301      	adds	r3, #1
 80104ba:	9304      	str	r3, [sp, #16]
 80104bc:	9b05      	ldr	r3, [sp, #20]
 80104be:	3301      	adds	r3, #1
 80104c0:	9305      	str	r3, [sp, #20]
 80104c2:	f04f 0801 	mov.w	r8, #1
 80104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	f47f af6a 	bne.w	80103a2 <_dtoa_r+0x7ca>
 80104ce:	2001      	movs	r0, #1
 80104d0:	e76f      	b.n	80103b2 <_dtoa_r+0x7da>
 80104d2:	f04f 0800 	mov.w	r8, #0
 80104d6:	e7f6      	b.n	80104c6 <_dtoa_r+0x8ee>
 80104d8:	4698      	mov	r8, r3
 80104da:	e7f4      	b.n	80104c6 <_dtoa_r+0x8ee>
 80104dc:	f43f af7d 	beq.w	80103da <_dtoa_r+0x802>
 80104e0:	4618      	mov	r0, r3
 80104e2:	301c      	adds	r0, #28
 80104e4:	e772      	b.n	80103cc <_dtoa_r+0x7f4>
 80104e6:	9b03      	ldr	r3, [sp, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	dc37      	bgt.n	801055c <_dtoa_r+0x984>
 80104ec:	9b06      	ldr	r3, [sp, #24]
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	dd34      	ble.n	801055c <_dtoa_r+0x984>
 80104f2:	9b03      	ldr	r3, [sp, #12]
 80104f4:	9302      	str	r3, [sp, #8]
 80104f6:	9b02      	ldr	r3, [sp, #8]
 80104f8:	b96b      	cbnz	r3, 8010516 <_dtoa_r+0x93e>
 80104fa:	4631      	mov	r1, r6
 80104fc:	2205      	movs	r2, #5
 80104fe:	4620      	mov	r0, r4
 8010500:	f000 fe40 	bl	8011184 <__multadd>
 8010504:	4601      	mov	r1, r0
 8010506:	4606      	mov	r6, r0
 8010508:	ee18 0a10 	vmov	r0, s16
 801050c:	f001 f8a4 	bl	8011658 <__mcmp>
 8010510:	2800      	cmp	r0, #0
 8010512:	f73f adbb 	bgt.w	801008c <_dtoa_r+0x4b4>
 8010516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010518:	9d01      	ldr	r5, [sp, #4]
 801051a:	43db      	mvns	r3, r3
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	f04f 0800 	mov.w	r8, #0
 8010522:	4631      	mov	r1, r6
 8010524:	4620      	mov	r0, r4
 8010526:	f000 fe0b 	bl	8011140 <_Bfree>
 801052a:	2f00      	cmp	r7, #0
 801052c:	f43f aea4 	beq.w	8010278 <_dtoa_r+0x6a0>
 8010530:	f1b8 0f00 	cmp.w	r8, #0
 8010534:	d005      	beq.n	8010542 <_dtoa_r+0x96a>
 8010536:	45b8      	cmp	r8, r7
 8010538:	d003      	beq.n	8010542 <_dtoa_r+0x96a>
 801053a:	4641      	mov	r1, r8
 801053c:	4620      	mov	r0, r4
 801053e:	f000 fdff 	bl	8011140 <_Bfree>
 8010542:	4639      	mov	r1, r7
 8010544:	4620      	mov	r0, r4
 8010546:	f000 fdfb 	bl	8011140 <_Bfree>
 801054a:	e695      	b.n	8010278 <_dtoa_r+0x6a0>
 801054c:	2600      	movs	r6, #0
 801054e:	4637      	mov	r7, r6
 8010550:	e7e1      	b.n	8010516 <_dtoa_r+0x93e>
 8010552:	9700      	str	r7, [sp, #0]
 8010554:	4637      	mov	r7, r6
 8010556:	e599      	b.n	801008c <_dtoa_r+0x4b4>
 8010558:	40240000 	.word	0x40240000
 801055c:	9b08      	ldr	r3, [sp, #32]
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 80ca 	beq.w	80106f8 <_dtoa_r+0xb20>
 8010564:	9b03      	ldr	r3, [sp, #12]
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	2d00      	cmp	r5, #0
 801056a:	dd05      	ble.n	8010578 <_dtoa_r+0x9a0>
 801056c:	4639      	mov	r1, r7
 801056e:	462a      	mov	r2, r5
 8010570:	4620      	mov	r0, r4
 8010572:	f001 f801 	bl	8011578 <__lshift>
 8010576:	4607      	mov	r7, r0
 8010578:	f1b8 0f00 	cmp.w	r8, #0
 801057c:	d05b      	beq.n	8010636 <_dtoa_r+0xa5e>
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	4620      	mov	r0, r4
 8010582:	f000 fd9d 	bl	80110c0 <_Balloc>
 8010586:	4605      	mov	r5, r0
 8010588:	b928      	cbnz	r0, 8010596 <_dtoa_r+0x9be>
 801058a:	4b87      	ldr	r3, [pc, #540]	; (80107a8 <_dtoa_r+0xbd0>)
 801058c:	4602      	mov	r2, r0
 801058e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010592:	f7ff bb3b 	b.w	800fc0c <_dtoa_r+0x34>
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	3202      	adds	r2, #2
 801059a:	0092      	lsls	r2, r2, #2
 801059c:	f107 010c 	add.w	r1, r7, #12
 80105a0:	300c      	adds	r0, #12
 80105a2:	f7fd ff69 	bl	800e478 <memcpy>
 80105a6:	2201      	movs	r2, #1
 80105a8:	4629      	mov	r1, r5
 80105aa:	4620      	mov	r0, r4
 80105ac:	f000 ffe4 	bl	8011578 <__lshift>
 80105b0:	9b01      	ldr	r3, [sp, #4]
 80105b2:	f103 0901 	add.w	r9, r3, #1
 80105b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80105ba:	4413      	add	r3, r2
 80105bc:	9305      	str	r3, [sp, #20]
 80105be:	f00a 0301 	and.w	r3, sl, #1
 80105c2:	46b8      	mov	r8, r7
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	4607      	mov	r7, r0
 80105c8:	4631      	mov	r1, r6
 80105ca:	ee18 0a10 	vmov	r0, s16
 80105ce:	f7ff fa75 	bl	800fabc <quorem>
 80105d2:	4641      	mov	r1, r8
 80105d4:	9002      	str	r0, [sp, #8]
 80105d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80105da:	ee18 0a10 	vmov	r0, s16
 80105de:	f001 f83b 	bl	8011658 <__mcmp>
 80105e2:	463a      	mov	r2, r7
 80105e4:	9003      	str	r0, [sp, #12]
 80105e6:	4631      	mov	r1, r6
 80105e8:	4620      	mov	r0, r4
 80105ea:	f001 f851 	bl	8011690 <__mdiff>
 80105ee:	68c2      	ldr	r2, [r0, #12]
 80105f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80105f4:	4605      	mov	r5, r0
 80105f6:	bb02      	cbnz	r2, 801063a <_dtoa_r+0xa62>
 80105f8:	4601      	mov	r1, r0
 80105fa:	ee18 0a10 	vmov	r0, s16
 80105fe:	f001 f82b 	bl	8011658 <__mcmp>
 8010602:	4602      	mov	r2, r0
 8010604:	4629      	mov	r1, r5
 8010606:	4620      	mov	r0, r4
 8010608:	9207      	str	r2, [sp, #28]
 801060a:	f000 fd99 	bl	8011140 <_Bfree>
 801060e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010612:	ea43 0102 	orr.w	r1, r3, r2
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	430b      	orrs	r3, r1
 801061a:	464d      	mov	r5, r9
 801061c:	d10f      	bne.n	801063e <_dtoa_r+0xa66>
 801061e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010622:	d02a      	beq.n	801067a <_dtoa_r+0xaa2>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd02      	ble.n	8010630 <_dtoa_r+0xa58>
 801062a:	9b02      	ldr	r3, [sp, #8]
 801062c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010630:	f88b a000 	strb.w	sl, [fp]
 8010634:	e775      	b.n	8010522 <_dtoa_r+0x94a>
 8010636:	4638      	mov	r0, r7
 8010638:	e7ba      	b.n	80105b0 <_dtoa_r+0x9d8>
 801063a:	2201      	movs	r2, #1
 801063c:	e7e2      	b.n	8010604 <_dtoa_r+0xa2c>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	db04      	blt.n	801064e <_dtoa_r+0xa76>
 8010644:	9906      	ldr	r1, [sp, #24]
 8010646:	430b      	orrs	r3, r1
 8010648:	9904      	ldr	r1, [sp, #16]
 801064a:	430b      	orrs	r3, r1
 801064c:	d122      	bne.n	8010694 <_dtoa_r+0xabc>
 801064e:	2a00      	cmp	r2, #0
 8010650:	ddee      	ble.n	8010630 <_dtoa_r+0xa58>
 8010652:	ee18 1a10 	vmov	r1, s16
 8010656:	2201      	movs	r2, #1
 8010658:	4620      	mov	r0, r4
 801065a:	f000 ff8d 	bl	8011578 <__lshift>
 801065e:	4631      	mov	r1, r6
 8010660:	ee08 0a10 	vmov	s16, r0
 8010664:	f000 fff8 	bl	8011658 <__mcmp>
 8010668:	2800      	cmp	r0, #0
 801066a:	dc03      	bgt.n	8010674 <_dtoa_r+0xa9c>
 801066c:	d1e0      	bne.n	8010630 <_dtoa_r+0xa58>
 801066e:	f01a 0f01 	tst.w	sl, #1
 8010672:	d0dd      	beq.n	8010630 <_dtoa_r+0xa58>
 8010674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010678:	d1d7      	bne.n	801062a <_dtoa_r+0xa52>
 801067a:	2339      	movs	r3, #57	; 0x39
 801067c:	f88b 3000 	strb.w	r3, [fp]
 8010680:	462b      	mov	r3, r5
 8010682:	461d      	mov	r5, r3
 8010684:	3b01      	subs	r3, #1
 8010686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801068a:	2a39      	cmp	r2, #57	; 0x39
 801068c:	d071      	beq.n	8010772 <_dtoa_r+0xb9a>
 801068e:	3201      	adds	r2, #1
 8010690:	701a      	strb	r2, [r3, #0]
 8010692:	e746      	b.n	8010522 <_dtoa_r+0x94a>
 8010694:	2a00      	cmp	r2, #0
 8010696:	dd07      	ble.n	80106a8 <_dtoa_r+0xad0>
 8010698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801069c:	d0ed      	beq.n	801067a <_dtoa_r+0xaa2>
 801069e:	f10a 0301 	add.w	r3, sl, #1
 80106a2:	f88b 3000 	strb.w	r3, [fp]
 80106a6:	e73c      	b.n	8010522 <_dtoa_r+0x94a>
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80106ae:	4599      	cmp	r9, r3
 80106b0:	d047      	beq.n	8010742 <_dtoa_r+0xb6a>
 80106b2:	ee18 1a10 	vmov	r1, s16
 80106b6:	2300      	movs	r3, #0
 80106b8:	220a      	movs	r2, #10
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 fd62 	bl	8011184 <__multadd>
 80106c0:	45b8      	cmp	r8, r7
 80106c2:	ee08 0a10 	vmov	s16, r0
 80106c6:	f04f 0300 	mov.w	r3, #0
 80106ca:	f04f 020a 	mov.w	r2, #10
 80106ce:	4641      	mov	r1, r8
 80106d0:	4620      	mov	r0, r4
 80106d2:	d106      	bne.n	80106e2 <_dtoa_r+0xb0a>
 80106d4:	f000 fd56 	bl	8011184 <__multadd>
 80106d8:	4680      	mov	r8, r0
 80106da:	4607      	mov	r7, r0
 80106dc:	f109 0901 	add.w	r9, r9, #1
 80106e0:	e772      	b.n	80105c8 <_dtoa_r+0x9f0>
 80106e2:	f000 fd4f 	bl	8011184 <__multadd>
 80106e6:	4639      	mov	r1, r7
 80106e8:	4680      	mov	r8, r0
 80106ea:	2300      	movs	r3, #0
 80106ec:	220a      	movs	r2, #10
 80106ee:	4620      	mov	r0, r4
 80106f0:	f000 fd48 	bl	8011184 <__multadd>
 80106f4:	4607      	mov	r7, r0
 80106f6:	e7f1      	b.n	80106dc <_dtoa_r+0xb04>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	9302      	str	r3, [sp, #8]
 80106fc:	9d01      	ldr	r5, [sp, #4]
 80106fe:	ee18 0a10 	vmov	r0, s16
 8010702:	4631      	mov	r1, r6
 8010704:	f7ff f9da 	bl	800fabc <quorem>
 8010708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801070c:	9b01      	ldr	r3, [sp, #4]
 801070e:	f805 ab01 	strb.w	sl, [r5], #1
 8010712:	1aea      	subs	r2, r5, r3
 8010714:	9b02      	ldr	r3, [sp, #8]
 8010716:	4293      	cmp	r3, r2
 8010718:	dd09      	ble.n	801072e <_dtoa_r+0xb56>
 801071a:	ee18 1a10 	vmov	r1, s16
 801071e:	2300      	movs	r3, #0
 8010720:	220a      	movs	r2, #10
 8010722:	4620      	mov	r0, r4
 8010724:	f000 fd2e 	bl	8011184 <__multadd>
 8010728:	ee08 0a10 	vmov	s16, r0
 801072c:	e7e7      	b.n	80106fe <_dtoa_r+0xb26>
 801072e:	9b02      	ldr	r3, [sp, #8]
 8010730:	2b00      	cmp	r3, #0
 8010732:	bfc8      	it	gt
 8010734:	461d      	movgt	r5, r3
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	bfd8      	it	le
 801073a:	2501      	movle	r5, #1
 801073c:	441d      	add	r5, r3
 801073e:	f04f 0800 	mov.w	r8, #0
 8010742:	ee18 1a10 	vmov	r1, s16
 8010746:	2201      	movs	r2, #1
 8010748:	4620      	mov	r0, r4
 801074a:	f000 ff15 	bl	8011578 <__lshift>
 801074e:	4631      	mov	r1, r6
 8010750:	ee08 0a10 	vmov	s16, r0
 8010754:	f000 ff80 	bl	8011658 <__mcmp>
 8010758:	2800      	cmp	r0, #0
 801075a:	dc91      	bgt.n	8010680 <_dtoa_r+0xaa8>
 801075c:	d102      	bne.n	8010764 <_dtoa_r+0xb8c>
 801075e:	f01a 0f01 	tst.w	sl, #1
 8010762:	d18d      	bne.n	8010680 <_dtoa_r+0xaa8>
 8010764:	462b      	mov	r3, r5
 8010766:	461d      	mov	r5, r3
 8010768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801076c:	2a30      	cmp	r2, #48	; 0x30
 801076e:	d0fa      	beq.n	8010766 <_dtoa_r+0xb8e>
 8010770:	e6d7      	b.n	8010522 <_dtoa_r+0x94a>
 8010772:	9a01      	ldr	r2, [sp, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d184      	bne.n	8010682 <_dtoa_r+0xaaa>
 8010778:	9b00      	ldr	r3, [sp, #0]
 801077a:	3301      	adds	r3, #1
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	2331      	movs	r3, #49	; 0x31
 8010780:	7013      	strb	r3, [r2, #0]
 8010782:	e6ce      	b.n	8010522 <_dtoa_r+0x94a>
 8010784:	4b09      	ldr	r3, [pc, #36]	; (80107ac <_dtoa_r+0xbd4>)
 8010786:	f7ff ba95 	b.w	800fcb4 <_dtoa_r+0xdc>
 801078a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801078c:	2b00      	cmp	r3, #0
 801078e:	f47f aa6e 	bne.w	800fc6e <_dtoa_r+0x96>
 8010792:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <_dtoa_r+0xbd8>)
 8010794:	f7ff ba8e 	b.w	800fcb4 <_dtoa_r+0xdc>
 8010798:	9b02      	ldr	r3, [sp, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dcae      	bgt.n	80106fc <_dtoa_r+0xb24>
 801079e:	9b06      	ldr	r3, [sp, #24]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	f73f aea8 	bgt.w	80104f6 <_dtoa_r+0x91e>
 80107a6:	e7a9      	b.n	80106fc <_dtoa_r+0xb24>
 80107a8:	0802bfdf 	.word	0x0802bfdf
 80107ac:	08018364 	.word	0x08018364
 80107b0:	0802bf60 	.word	0x0802bf60

080107b4 <std>:
 80107b4:	2300      	movs	r3, #0
 80107b6:	b510      	push	{r4, lr}
 80107b8:	4604      	mov	r4, r0
 80107ba:	e9c0 3300 	strd	r3, r3, [r0]
 80107be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107c2:	6083      	str	r3, [r0, #8]
 80107c4:	8181      	strh	r1, [r0, #12]
 80107c6:	6643      	str	r3, [r0, #100]	; 0x64
 80107c8:	81c2      	strh	r2, [r0, #14]
 80107ca:	6183      	str	r3, [r0, #24]
 80107cc:	4619      	mov	r1, r3
 80107ce:	2208      	movs	r2, #8
 80107d0:	305c      	adds	r0, #92	; 0x5c
 80107d2:	f7fd fe5f 	bl	800e494 <memset>
 80107d6:	4b05      	ldr	r3, [pc, #20]	; (80107ec <std+0x38>)
 80107d8:	6263      	str	r3, [r4, #36]	; 0x24
 80107da:	4b05      	ldr	r3, [pc, #20]	; (80107f0 <std+0x3c>)
 80107dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80107de:	4b05      	ldr	r3, [pc, #20]	; (80107f4 <std+0x40>)
 80107e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80107e2:	4b05      	ldr	r3, [pc, #20]	; (80107f8 <std+0x44>)
 80107e4:	6224      	str	r4, [r4, #32]
 80107e6:	6323      	str	r3, [r4, #48]	; 0x30
 80107e8:	bd10      	pop	{r4, pc}
 80107ea:	bf00      	nop
 80107ec:	080121dd 	.word	0x080121dd
 80107f0:	080121ff 	.word	0x080121ff
 80107f4:	08012237 	.word	0x08012237
 80107f8:	0801225b 	.word	0x0801225b

080107fc <_cleanup_r>:
 80107fc:	4901      	ldr	r1, [pc, #4]	; (8010804 <_cleanup_r+0x8>)
 80107fe:	f000 b8af 	b.w	8010960 <_fwalk_reent>
 8010802:	bf00      	nop
 8010804:	080125b5 	.word	0x080125b5

08010808 <__sfmoreglue>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	2268      	movs	r2, #104	; 0x68
 801080c:	1e4d      	subs	r5, r1, #1
 801080e:	4355      	muls	r5, r2
 8010810:	460e      	mov	r6, r1
 8010812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010816:	f001 f997 	bl	8011b48 <_malloc_r>
 801081a:	4604      	mov	r4, r0
 801081c:	b140      	cbz	r0, 8010830 <__sfmoreglue+0x28>
 801081e:	2100      	movs	r1, #0
 8010820:	e9c0 1600 	strd	r1, r6, [r0]
 8010824:	300c      	adds	r0, #12
 8010826:	60a0      	str	r0, [r4, #8]
 8010828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801082c:	f7fd fe32 	bl	800e494 <memset>
 8010830:	4620      	mov	r0, r4
 8010832:	bd70      	pop	{r4, r5, r6, pc}

08010834 <__sfp_lock_acquire>:
 8010834:	4801      	ldr	r0, [pc, #4]	; (801083c <__sfp_lock_acquire+0x8>)
 8010836:	f000 bc26 	b.w	8011086 <__retarget_lock_acquire_recursive>
 801083a:	bf00      	nop
 801083c:	2001b75d 	.word	0x2001b75d

08010840 <__sfp_lock_release>:
 8010840:	4801      	ldr	r0, [pc, #4]	; (8010848 <__sfp_lock_release+0x8>)
 8010842:	f000 bc21 	b.w	8011088 <__retarget_lock_release_recursive>
 8010846:	bf00      	nop
 8010848:	2001b75d 	.word	0x2001b75d

0801084c <__sinit_lock_acquire>:
 801084c:	4801      	ldr	r0, [pc, #4]	; (8010854 <__sinit_lock_acquire+0x8>)
 801084e:	f000 bc1a 	b.w	8011086 <__retarget_lock_acquire_recursive>
 8010852:	bf00      	nop
 8010854:	2001b75e 	.word	0x2001b75e

08010858 <__sinit_lock_release>:
 8010858:	4801      	ldr	r0, [pc, #4]	; (8010860 <__sinit_lock_release+0x8>)
 801085a:	f000 bc15 	b.w	8011088 <__retarget_lock_release_recursive>
 801085e:	bf00      	nop
 8010860:	2001b75e 	.word	0x2001b75e

08010864 <__sinit>:
 8010864:	b510      	push	{r4, lr}
 8010866:	4604      	mov	r4, r0
 8010868:	f7ff fff0 	bl	801084c <__sinit_lock_acquire>
 801086c:	69a3      	ldr	r3, [r4, #24]
 801086e:	b11b      	cbz	r3, 8010878 <__sinit+0x14>
 8010870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010874:	f7ff bff0 	b.w	8010858 <__sinit_lock_release>
 8010878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801087c:	6523      	str	r3, [r4, #80]	; 0x50
 801087e:	4b13      	ldr	r3, [pc, #76]	; (80108cc <__sinit+0x68>)
 8010880:	4a13      	ldr	r2, [pc, #76]	; (80108d0 <__sinit+0x6c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	62a2      	str	r2, [r4, #40]	; 0x28
 8010886:	42a3      	cmp	r3, r4
 8010888:	bf04      	itt	eq
 801088a:	2301      	moveq	r3, #1
 801088c:	61a3      	streq	r3, [r4, #24]
 801088e:	4620      	mov	r0, r4
 8010890:	f000 f820 	bl	80108d4 <__sfp>
 8010894:	6060      	str	r0, [r4, #4]
 8010896:	4620      	mov	r0, r4
 8010898:	f000 f81c 	bl	80108d4 <__sfp>
 801089c:	60a0      	str	r0, [r4, #8]
 801089e:	4620      	mov	r0, r4
 80108a0:	f000 f818 	bl	80108d4 <__sfp>
 80108a4:	2200      	movs	r2, #0
 80108a6:	60e0      	str	r0, [r4, #12]
 80108a8:	2104      	movs	r1, #4
 80108aa:	6860      	ldr	r0, [r4, #4]
 80108ac:	f7ff ff82 	bl	80107b4 <std>
 80108b0:	68a0      	ldr	r0, [r4, #8]
 80108b2:	2201      	movs	r2, #1
 80108b4:	2109      	movs	r1, #9
 80108b6:	f7ff ff7d 	bl	80107b4 <std>
 80108ba:	68e0      	ldr	r0, [r4, #12]
 80108bc:	2202      	movs	r2, #2
 80108be:	2112      	movs	r1, #18
 80108c0:	f7ff ff78 	bl	80107b4 <std>
 80108c4:	2301      	movs	r3, #1
 80108c6:	61a3      	str	r3, [r4, #24]
 80108c8:	e7d2      	b.n	8010870 <__sinit+0xc>
 80108ca:	bf00      	nop
 80108cc:	0802bed4 	.word	0x0802bed4
 80108d0:	080107fd 	.word	0x080107fd

080108d4 <__sfp>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	4607      	mov	r7, r0
 80108d8:	f7ff ffac 	bl	8010834 <__sfp_lock_acquire>
 80108dc:	4b1e      	ldr	r3, [pc, #120]	; (8010958 <__sfp+0x84>)
 80108de:	681e      	ldr	r6, [r3, #0]
 80108e0:	69b3      	ldr	r3, [r6, #24]
 80108e2:	b913      	cbnz	r3, 80108ea <__sfp+0x16>
 80108e4:	4630      	mov	r0, r6
 80108e6:	f7ff ffbd 	bl	8010864 <__sinit>
 80108ea:	3648      	adds	r6, #72	; 0x48
 80108ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80108f0:	3b01      	subs	r3, #1
 80108f2:	d503      	bpl.n	80108fc <__sfp+0x28>
 80108f4:	6833      	ldr	r3, [r6, #0]
 80108f6:	b30b      	cbz	r3, 801093c <__sfp+0x68>
 80108f8:	6836      	ldr	r6, [r6, #0]
 80108fa:	e7f7      	b.n	80108ec <__sfp+0x18>
 80108fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010900:	b9d5      	cbnz	r5, 8010938 <__sfp+0x64>
 8010902:	4b16      	ldr	r3, [pc, #88]	; (801095c <__sfp+0x88>)
 8010904:	60e3      	str	r3, [r4, #12]
 8010906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801090a:	6665      	str	r5, [r4, #100]	; 0x64
 801090c:	f000 fbba 	bl	8011084 <__retarget_lock_init_recursive>
 8010910:	f7ff ff96 	bl	8010840 <__sfp_lock_release>
 8010914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801091c:	6025      	str	r5, [r4, #0]
 801091e:	61a5      	str	r5, [r4, #24]
 8010920:	2208      	movs	r2, #8
 8010922:	4629      	mov	r1, r5
 8010924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010928:	f7fd fdb4 	bl	800e494 <memset>
 801092c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010934:	4620      	mov	r0, r4
 8010936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010938:	3468      	adds	r4, #104	; 0x68
 801093a:	e7d9      	b.n	80108f0 <__sfp+0x1c>
 801093c:	2104      	movs	r1, #4
 801093e:	4638      	mov	r0, r7
 8010940:	f7ff ff62 	bl	8010808 <__sfmoreglue>
 8010944:	4604      	mov	r4, r0
 8010946:	6030      	str	r0, [r6, #0]
 8010948:	2800      	cmp	r0, #0
 801094a:	d1d5      	bne.n	80108f8 <__sfp+0x24>
 801094c:	f7ff ff78 	bl	8010840 <__sfp_lock_release>
 8010950:	230c      	movs	r3, #12
 8010952:	603b      	str	r3, [r7, #0]
 8010954:	e7ee      	b.n	8010934 <__sfp+0x60>
 8010956:	bf00      	nop
 8010958:	0802bed4 	.word	0x0802bed4
 801095c:	ffff0001 	.word	0xffff0001

08010960 <_fwalk_reent>:
 8010960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010964:	4606      	mov	r6, r0
 8010966:	4688      	mov	r8, r1
 8010968:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801096c:	2700      	movs	r7, #0
 801096e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010972:	f1b9 0901 	subs.w	r9, r9, #1
 8010976:	d505      	bpl.n	8010984 <_fwalk_reent+0x24>
 8010978:	6824      	ldr	r4, [r4, #0]
 801097a:	2c00      	cmp	r4, #0
 801097c:	d1f7      	bne.n	801096e <_fwalk_reent+0xe>
 801097e:	4638      	mov	r0, r7
 8010980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010984:	89ab      	ldrh	r3, [r5, #12]
 8010986:	2b01      	cmp	r3, #1
 8010988:	d907      	bls.n	801099a <_fwalk_reent+0x3a>
 801098a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801098e:	3301      	adds	r3, #1
 8010990:	d003      	beq.n	801099a <_fwalk_reent+0x3a>
 8010992:	4629      	mov	r1, r5
 8010994:	4630      	mov	r0, r6
 8010996:	47c0      	blx	r8
 8010998:	4307      	orrs	r7, r0
 801099a:	3568      	adds	r5, #104	; 0x68
 801099c:	e7e9      	b.n	8010972 <_fwalk_reent+0x12>

0801099e <rshift>:
 801099e:	6903      	ldr	r3, [r0, #16]
 80109a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109ac:	f100 0414 	add.w	r4, r0, #20
 80109b0:	dd45      	ble.n	8010a3e <rshift+0xa0>
 80109b2:	f011 011f 	ands.w	r1, r1, #31
 80109b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109be:	d10c      	bne.n	80109da <rshift+0x3c>
 80109c0:	f100 0710 	add.w	r7, r0, #16
 80109c4:	4629      	mov	r1, r5
 80109c6:	42b1      	cmp	r1, r6
 80109c8:	d334      	bcc.n	8010a34 <rshift+0x96>
 80109ca:	1a9b      	subs	r3, r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	1eea      	subs	r2, r5, #3
 80109d0:	4296      	cmp	r6, r2
 80109d2:	bf38      	it	cc
 80109d4:	2300      	movcc	r3, #0
 80109d6:	4423      	add	r3, r4
 80109d8:	e015      	b.n	8010a06 <rshift+0x68>
 80109da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80109de:	f1c1 0820 	rsb	r8, r1, #32
 80109e2:	40cf      	lsrs	r7, r1
 80109e4:	f105 0e04 	add.w	lr, r5, #4
 80109e8:	46a1      	mov	r9, r4
 80109ea:	4576      	cmp	r6, lr
 80109ec:	46f4      	mov	ip, lr
 80109ee:	d815      	bhi.n	8010a1c <rshift+0x7e>
 80109f0:	1a9a      	subs	r2, r3, r2
 80109f2:	0092      	lsls	r2, r2, #2
 80109f4:	3a04      	subs	r2, #4
 80109f6:	3501      	adds	r5, #1
 80109f8:	42ae      	cmp	r6, r5
 80109fa:	bf38      	it	cc
 80109fc:	2200      	movcc	r2, #0
 80109fe:	18a3      	adds	r3, r4, r2
 8010a00:	50a7      	str	r7, [r4, r2]
 8010a02:	b107      	cbz	r7, 8010a06 <rshift+0x68>
 8010a04:	3304      	adds	r3, #4
 8010a06:	1b1a      	subs	r2, r3, r4
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a0e:	bf08      	it	eq
 8010a10:	2300      	moveq	r3, #0
 8010a12:	6102      	str	r2, [r0, #16]
 8010a14:	bf08      	it	eq
 8010a16:	6143      	streq	r3, [r0, #20]
 8010a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a1c:	f8dc c000 	ldr.w	ip, [ip]
 8010a20:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a24:	ea4c 0707 	orr.w	r7, ip, r7
 8010a28:	f849 7b04 	str.w	r7, [r9], #4
 8010a2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a30:	40cf      	lsrs	r7, r1
 8010a32:	e7da      	b.n	80109ea <rshift+0x4c>
 8010a34:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a38:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a3c:	e7c3      	b.n	80109c6 <rshift+0x28>
 8010a3e:	4623      	mov	r3, r4
 8010a40:	e7e1      	b.n	8010a06 <rshift+0x68>

08010a42 <__hexdig_fun>:
 8010a42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a46:	2b09      	cmp	r3, #9
 8010a48:	d802      	bhi.n	8010a50 <__hexdig_fun+0xe>
 8010a4a:	3820      	subs	r0, #32
 8010a4c:	b2c0      	uxtb	r0, r0
 8010a4e:	4770      	bx	lr
 8010a50:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a54:	2b05      	cmp	r3, #5
 8010a56:	d801      	bhi.n	8010a5c <__hexdig_fun+0x1a>
 8010a58:	3847      	subs	r0, #71	; 0x47
 8010a5a:	e7f7      	b.n	8010a4c <__hexdig_fun+0xa>
 8010a5c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a60:	2b05      	cmp	r3, #5
 8010a62:	d801      	bhi.n	8010a68 <__hexdig_fun+0x26>
 8010a64:	3827      	subs	r0, #39	; 0x27
 8010a66:	e7f1      	b.n	8010a4c <__hexdig_fun+0xa>
 8010a68:	2000      	movs	r0, #0
 8010a6a:	4770      	bx	lr

08010a6c <__gethex>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	ed2d 8b02 	vpush	{d8}
 8010a74:	b089      	sub	sp, #36	; 0x24
 8010a76:	ee08 0a10 	vmov	s16, r0
 8010a7a:	9304      	str	r3, [sp, #16]
 8010a7c:	4bb4      	ldr	r3, [pc, #720]	; (8010d50 <__gethex+0x2e4>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	4618      	mov	r0, r3
 8010a84:	468b      	mov	fp, r1
 8010a86:	4690      	mov	r8, r2
 8010a88:	f7ef fc22 	bl	80002d0 <strlen>
 8010a8c:	9b01      	ldr	r3, [sp, #4]
 8010a8e:	f8db 2000 	ldr.w	r2, [fp]
 8010a92:	4403      	add	r3, r0
 8010a94:	4682      	mov	sl, r0
 8010a96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010a9a:	9305      	str	r3, [sp, #20]
 8010a9c:	1c93      	adds	r3, r2, #2
 8010a9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010aa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010aa6:	32fe      	adds	r2, #254	; 0xfe
 8010aa8:	18d1      	adds	r1, r2, r3
 8010aaa:	461f      	mov	r7, r3
 8010aac:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ab0:	9100      	str	r1, [sp, #0]
 8010ab2:	2830      	cmp	r0, #48	; 0x30
 8010ab4:	d0f8      	beq.n	8010aa8 <__gethex+0x3c>
 8010ab6:	f7ff ffc4 	bl	8010a42 <__hexdig_fun>
 8010aba:	4604      	mov	r4, r0
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d13a      	bne.n	8010b36 <__gethex+0xca>
 8010ac0:	9901      	ldr	r1, [sp, #4]
 8010ac2:	4652      	mov	r2, sl
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	f001 fbcc 	bl	8012262 <strncmp>
 8010aca:	4605      	mov	r5, r0
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d168      	bne.n	8010ba2 <__gethex+0x136>
 8010ad0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010ad4:	eb07 060a 	add.w	r6, r7, sl
 8010ad8:	f7ff ffb3 	bl	8010a42 <__hexdig_fun>
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d062      	beq.n	8010ba6 <__gethex+0x13a>
 8010ae0:	4633      	mov	r3, r6
 8010ae2:	7818      	ldrb	r0, [r3, #0]
 8010ae4:	2830      	cmp	r0, #48	; 0x30
 8010ae6:	461f      	mov	r7, r3
 8010ae8:	f103 0301 	add.w	r3, r3, #1
 8010aec:	d0f9      	beq.n	8010ae2 <__gethex+0x76>
 8010aee:	f7ff ffa8 	bl	8010a42 <__hexdig_fun>
 8010af2:	2301      	movs	r3, #1
 8010af4:	fab0 f480 	clz	r4, r0
 8010af8:	0964      	lsrs	r4, r4, #5
 8010afa:	4635      	mov	r5, r6
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	463a      	mov	r2, r7
 8010b00:	4616      	mov	r6, r2
 8010b02:	3201      	adds	r2, #1
 8010b04:	7830      	ldrb	r0, [r6, #0]
 8010b06:	f7ff ff9c 	bl	8010a42 <__hexdig_fun>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d1f8      	bne.n	8010b00 <__gethex+0x94>
 8010b0e:	9901      	ldr	r1, [sp, #4]
 8010b10:	4652      	mov	r2, sl
 8010b12:	4630      	mov	r0, r6
 8010b14:	f001 fba5 	bl	8012262 <strncmp>
 8010b18:	b980      	cbnz	r0, 8010b3c <__gethex+0xd0>
 8010b1a:	b94d      	cbnz	r5, 8010b30 <__gethex+0xc4>
 8010b1c:	eb06 050a 	add.w	r5, r6, sl
 8010b20:	462a      	mov	r2, r5
 8010b22:	4616      	mov	r6, r2
 8010b24:	3201      	adds	r2, #1
 8010b26:	7830      	ldrb	r0, [r6, #0]
 8010b28:	f7ff ff8b 	bl	8010a42 <__hexdig_fun>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d1f8      	bne.n	8010b22 <__gethex+0xb6>
 8010b30:	1bad      	subs	r5, r5, r6
 8010b32:	00ad      	lsls	r5, r5, #2
 8010b34:	e004      	b.n	8010b40 <__gethex+0xd4>
 8010b36:	2400      	movs	r4, #0
 8010b38:	4625      	mov	r5, r4
 8010b3a:	e7e0      	b.n	8010afe <__gethex+0x92>
 8010b3c:	2d00      	cmp	r5, #0
 8010b3e:	d1f7      	bne.n	8010b30 <__gethex+0xc4>
 8010b40:	7833      	ldrb	r3, [r6, #0]
 8010b42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b46:	2b50      	cmp	r3, #80	; 0x50
 8010b48:	d13b      	bne.n	8010bc2 <__gethex+0x156>
 8010b4a:	7873      	ldrb	r3, [r6, #1]
 8010b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8010b4e:	d02c      	beq.n	8010baa <__gethex+0x13e>
 8010b50:	2b2d      	cmp	r3, #45	; 0x2d
 8010b52:	d02e      	beq.n	8010bb2 <__gethex+0x146>
 8010b54:	1c71      	adds	r1, r6, #1
 8010b56:	f04f 0900 	mov.w	r9, #0
 8010b5a:	7808      	ldrb	r0, [r1, #0]
 8010b5c:	f7ff ff71 	bl	8010a42 <__hexdig_fun>
 8010b60:	1e43      	subs	r3, r0, #1
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	2b18      	cmp	r3, #24
 8010b66:	d82c      	bhi.n	8010bc2 <__gethex+0x156>
 8010b68:	f1a0 0210 	sub.w	r2, r0, #16
 8010b6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b70:	f7ff ff67 	bl	8010a42 <__hexdig_fun>
 8010b74:	1e43      	subs	r3, r0, #1
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b18      	cmp	r3, #24
 8010b7a:	d91d      	bls.n	8010bb8 <__gethex+0x14c>
 8010b7c:	f1b9 0f00 	cmp.w	r9, #0
 8010b80:	d000      	beq.n	8010b84 <__gethex+0x118>
 8010b82:	4252      	negs	r2, r2
 8010b84:	4415      	add	r5, r2
 8010b86:	f8cb 1000 	str.w	r1, [fp]
 8010b8a:	b1e4      	cbz	r4, 8010bc6 <__gethex+0x15a>
 8010b8c:	9b00      	ldr	r3, [sp, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	bf14      	ite	ne
 8010b92:	2700      	movne	r7, #0
 8010b94:	2706      	moveq	r7, #6
 8010b96:	4638      	mov	r0, r7
 8010b98:	b009      	add	sp, #36	; 0x24
 8010b9a:	ecbd 8b02 	vpop	{d8}
 8010b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba2:	463e      	mov	r6, r7
 8010ba4:	4625      	mov	r5, r4
 8010ba6:	2401      	movs	r4, #1
 8010ba8:	e7ca      	b.n	8010b40 <__gethex+0xd4>
 8010baa:	f04f 0900 	mov.w	r9, #0
 8010bae:	1cb1      	adds	r1, r6, #2
 8010bb0:	e7d3      	b.n	8010b5a <__gethex+0xee>
 8010bb2:	f04f 0901 	mov.w	r9, #1
 8010bb6:	e7fa      	b.n	8010bae <__gethex+0x142>
 8010bb8:	230a      	movs	r3, #10
 8010bba:	fb03 0202 	mla	r2, r3, r2, r0
 8010bbe:	3a10      	subs	r2, #16
 8010bc0:	e7d4      	b.n	8010b6c <__gethex+0x100>
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	e7df      	b.n	8010b86 <__gethex+0x11a>
 8010bc6:	1bf3      	subs	r3, r6, r7
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	4621      	mov	r1, r4
 8010bcc:	2b07      	cmp	r3, #7
 8010bce:	dc0b      	bgt.n	8010be8 <__gethex+0x17c>
 8010bd0:	ee18 0a10 	vmov	r0, s16
 8010bd4:	f000 fa74 	bl	80110c0 <_Balloc>
 8010bd8:	4604      	mov	r4, r0
 8010bda:	b940      	cbnz	r0, 8010bee <__gethex+0x182>
 8010bdc:	4b5d      	ldr	r3, [pc, #372]	; (8010d54 <__gethex+0x2e8>)
 8010bde:	4602      	mov	r2, r0
 8010be0:	21de      	movs	r1, #222	; 0xde
 8010be2:	485d      	ldr	r0, [pc, #372]	; (8010d58 <__gethex+0x2ec>)
 8010be4:	f001 fc32 	bl	801244c <__assert_func>
 8010be8:	3101      	adds	r1, #1
 8010bea:	105b      	asrs	r3, r3, #1
 8010bec:	e7ee      	b.n	8010bcc <__gethex+0x160>
 8010bee:	f100 0914 	add.w	r9, r0, #20
 8010bf2:	f04f 0b00 	mov.w	fp, #0
 8010bf6:	f1ca 0301 	rsb	r3, sl, #1
 8010bfa:	f8cd 9008 	str.w	r9, [sp, #8]
 8010bfe:	f8cd b000 	str.w	fp, [sp]
 8010c02:	9306      	str	r3, [sp, #24]
 8010c04:	42b7      	cmp	r7, r6
 8010c06:	d340      	bcc.n	8010c8a <__gethex+0x21e>
 8010c08:	9802      	ldr	r0, [sp, #8]
 8010c0a:	9b00      	ldr	r3, [sp, #0]
 8010c0c:	f840 3b04 	str.w	r3, [r0], #4
 8010c10:	eba0 0009 	sub.w	r0, r0, r9
 8010c14:	1080      	asrs	r0, r0, #2
 8010c16:	0146      	lsls	r6, r0, #5
 8010c18:	6120      	str	r0, [r4, #16]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 fb42 	bl	80112a4 <__hi0bits>
 8010c20:	1a30      	subs	r0, r6, r0
 8010c22:	f8d8 6000 	ldr.w	r6, [r8]
 8010c26:	42b0      	cmp	r0, r6
 8010c28:	dd63      	ble.n	8010cf2 <__gethex+0x286>
 8010c2a:	1b87      	subs	r7, r0, r6
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 fee6 	bl	8011a00 <__any_on>
 8010c34:	4682      	mov	sl, r0
 8010c36:	b1a8      	cbz	r0, 8010c64 <__gethex+0x1f8>
 8010c38:	1e7b      	subs	r3, r7, #1
 8010c3a:	1159      	asrs	r1, r3, #5
 8010c3c:	f003 021f 	and.w	r2, r3, #31
 8010c40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010c44:	f04f 0a01 	mov.w	sl, #1
 8010c48:	fa0a f202 	lsl.w	r2, sl, r2
 8010c4c:	420a      	tst	r2, r1
 8010c4e:	d009      	beq.n	8010c64 <__gethex+0x1f8>
 8010c50:	4553      	cmp	r3, sl
 8010c52:	dd05      	ble.n	8010c60 <__gethex+0x1f4>
 8010c54:	1eb9      	subs	r1, r7, #2
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 fed2 	bl	8011a00 <__any_on>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d145      	bne.n	8010cec <__gethex+0x280>
 8010c60:	f04f 0a02 	mov.w	sl, #2
 8010c64:	4639      	mov	r1, r7
 8010c66:	4620      	mov	r0, r4
 8010c68:	f7ff fe99 	bl	801099e <rshift>
 8010c6c:	443d      	add	r5, r7
 8010c6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c72:	42ab      	cmp	r3, r5
 8010c74:	da4c      	bge.n	8010d10 <__gethex+0x2a4>
 8010c76:	ee18 0a10 	vmov	r0, s16
 8010c7a:	4621      	mov	r1, r4
 8010c7c:	f000 fa60 	bl	8011140 <_Bfree>
 8010c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c82:	2300      	movs	r3, #0
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	27a3      	movs	r7, #163	; 0xa3
 8010c88:	e785      	b.n	8010b96 <__gethex+0x12a>
 8010c8a:	1e73      	subs	r3, r6, #1
 8010c8c:	9a05      	ldr	r2, [sp, #20]
 8010c8e:	9303      	str	r3, [sp, #12]
 8010c90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d019      	beq.n	8010ccc <__gethex+0x260>
 8010c98:	f1bb 0f20 	cmp.w	fp, #32
 8010c9c:	d107      	bne.n	8010cae <__gethex+0x242>
 8010c9e:	9b02      	ldr	r3, [sp, #8]
 8010ca0:	9a00      	ldr	r2, [sp, #0]
 8010ca2:	f843 2b04 	str.w	r2, [r3], #4
 8010ca6:	9302      	str	r3, [sp, #8]
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	469b      	mov	fp, r3
 8010cae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010cb2:	f7ff fec6 	bl	8010a42 <__hexdig_fun>
 8010cb6:	9b00      	ldr	r3, [sp, #0]
 8010cb8:	f000 000f 	and.w	r0, r0, #15
 8010cbc:	fa00 f00b 	lsl.w	r0, r0, fp
 8010cc0:	4303      	orrs	r3, r0
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	f10b 0b04 	add.w	fp, fp, #4
 8010cc8:	9b03      	ldr	r3, [sp, #12]
 8010cca:	e00d      	b.n	8010ce8 <__gethex+0x27c>
 8010ccc:	9b03      	ldr	r3, [sp, #12]
 8010cce:	9a06      	ldr	r2, [sp, #24]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	42bb      	cmp	r3, r7
 8010cd4:	d3e0      	bcc.n	8010c98 <__gethex+0x22c>
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	9901      	ldr	r1, [sp, #4]
 8010cda:	9307      	str	r3, [sp, #28]
 8010cdc:	4652      	mov	r2, sl
 8010cde:	f001 fac0 	bl	8012262 <strncmp>
 8010ce2:	9b07      	ldr	r3, [sp, #28]
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1d7      	bne.n	8010c98 <__gethex+0x22c>
 8010ce8:	461e      	mov	r6, r3
 8010cea:	e78b      	b.n	8010c04 <__gethex+0x198>
 8010cec:	f04f 0a03 	mov.w	sl, #3
 8010cf0:	e7b8      	b.n	8010c64 <__gethex+0x1f8>
 8010cf2:	da0a      	bge.n	8010d0a <__gethex+0x29e>
 8010cf4:	1a37      	subs	r7, r6, r0
 8010cf6:	4621      	mov	r1, r4
 8010cf8:	ee18 0a10 	vmov	r0, s16
 8010cfc:	463a      	mov	r2, r7
 8010cfe:	f000 fc3b 	bl	8011578 <__lshift>
 8010d02:	1bed      	subs	r5, r5, r7
 8010d04:	4604      	mov	r4, r0
 8010d06:	f100 0914 	add.w	r9, r0, #20
 8010d0a:	f04f 0a00 	mov.w	sl, #0
 8010d0e:	e7ae      	b.n	8010c6e <__gethex+0x202>
 8010d10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010d14:	42a8      	cmp	r0, r5
 8010d16:	dd72      	ble.n	8010dfe <__gethex+0x392>
 8010d18:	1b45      	subs	r5, r0, r5
 8010d1a:	42ae      	cmp	r6, r5
 8010d1c:	dc36      	bgt.n	8010d8c <__gethex+0x320>
 8010d1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d22:	2b02      	cmp	r3, #2
 8010d24:	d02a      	beq.n	8010d7c <__gethex+0x310>
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	d02c      	beq.n	8010d84 <__gethex+0x318>
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d11c      	bne.n	8010d68 <__gethex+0x2fc>
 8010d2e:	42ae      	cmp	r6, r5
 8010d30:	d11a      	bne.n	8010d68 <__gethex+0x2fc>
 8010d32:	2e01      	cmp	r6, #1
 8010d34:	d112      	bne.n	8010d5c <__gethex+0x2f0>
 8010d36:	9a04      	ldr	r2, [sp, #16]
 8010d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d3c:	6013      	str	r3, [r2, #0]
 8010d3e:	2301      	movs	r3, #1
 8010d40:	6123      	str	r3, [r4, #16]
 8010d42:	f8c9 3000 	str.w	r3, [r9]
 8010d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d48:	2762      	movs	r7, #98	; 0x62
 8010d4a:	601c      	str	r4, [r3, #0]
 8010d4c:	e723      	b.n	8010b96 <__gethex+0x12a>
 8010d4e:	bf00      	nop
 8010d50:	0802c0b4 	.word	0x0802c0b4
 8010d54:	0802bfdf 	.word	0x0802bfdf
 8010d58:	0802c050 	.word	0x0802c050
 8010d5c:	1e71      	subs	r1, r6, #1
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f000 fe4e 	bl	8011a00 <__any_on>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d1e6      	bne.n	8010d36 <__gethex+0x2ca>
 8010d68:	ee18 0a10 	vmov	r0, s16
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	f000 f9e7 	bl	8011140 <_Bfree>
 8010d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d74:	2300      	movs	r3, #0
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	2750      	movs	r7, #80	; 0x50
 8010d7a:	e70c      	b.n	8010b96 <__gethex+0x12a>
 8010d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1f2      	bne.n	8010d68 <__gethex+0x2fc>
 8010d82:	e7d8      	b.n	8010d36 <__gethex+0x2ca>
 8010d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d1d5      	bne.n	8010d36 <__gethex+0x2ca>
 8010d8a:	e7ed      	b.n	8010d68 <__gethex+0x2fc>
 8010d8c:	1e6f      	subs	r7, r5, #1
 8010d8e:	f1ba 0f00 	cmp.w	sl, #0
 8010d92:	d131      	bne.n	8010df8 <__gethex+0x38c>
 8010d94:	b127      	cbz	r7, 8010da0 <__gethex+0x334>
 8010d96:	4639      	mov	r1, r7
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f000 fe31 	bl	8011a00 <__any_on>
 8010d9e:	4682      	mov	sl, r0
 8010da0:	117b      	asrs	r3, r7, #5
 8010da2:	2101      	movs	r1, #1
 8010da4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010da8:	f007 071f 	and.w	r7, r7, #31
 8010dac:	fa01 f707 	lsl.w	r7, r1, r7
 8010db0:	421f      	tst	r7, r3
 8010db2:	4629      	mov	r1, r5
 8010db4:	4620      	mov	r0, r4
 8010db6:	bf18      	it	ne
 8010db8:	f04a 0a02 	orrne.w	sl, sl, #2
 8010dbc:	1b76      	subs	r6, r6, r5
 8010dbe:	f7ff fdee 	bl	801099e <rshift>
 8010dc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010dc6:	2702      	movs	r7, #2
 8010dc8:	f1ba 0f00 	cmp.w	sl, #0
 8010dcc:	d048      	beq.n	8010e60 <__gethex+0x3f4>
 8010dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d015      	beq.n	8010e02 <__gethex+0x396>
 8010dd6:	2b03      	cmp	r3, #3
 8010dd8:	d017      	beq.n	8010e0a <__gethex+0x39e>
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d109      	bne.n	8010df2 <__gethex+0x386>
 8010dde:	f01a 0f02 	tst.w	sl, #2
 8010de2:	d006      	beq.n	8010df2 <__gethex+0x386>
 8010de4:	f8d9 0000 	ldr.w	r0, [r9]
 8010de8:	ea4a 0a00 	orr.w	sl, sl, r0
 8010dec:	f01a 0f01 	tst.w	sl, #1
 8010df0:	d10e      	bne.n	8010e10 <__gethex+0x3a4>
 8010df2:	f047 0710 	orr.w	r7, r7, #16
 8010df6:	e033      	b.n	8010e60 <__gethex+0x3f4>
 8010df8:	f04f 0a01 	mov.w	sl, #1
 8010dfc:	e7d0      	b.n	8010da0 <__gethex+0x334>
 8010dfe:	2701      	movs	r7, #1
 8010e00:	e7e2      	b.n	8010dc8 <__gethex+0x35c>
 8010e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e04:	f1c3 0301 	rsb	r3, r3, #1
 8010e08:	9315      	str	r3, [sp, #84]	; 0x54
 8010e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d0f0      	beq.n	8010df2 <__gethex+0x386>
 8010e10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e14:	f104 0314 	add.w	r3, r4, #20
 8010e18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e20:	f04f 0c00 	mov.w	ip, #0
 8010e24:	4618      	mov	r0, r3
 8010e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e2e:	d01c      	beq.n	8010e6a <__gethex+0x3fe>
 8010e30:	3201      	adds	r2, #1
 8010e32:	6002      	str	r2, [r0, #0]
 8010e34:	2f02      	cmp	r7, #2
 8010e36:	f104 0314 	add.w	r3, r4, #20
 8010e3a:	d13f      	bne.n	8010ebc <__gethex+0x450>
 8010e3c:	f8d8 2000 	ldr.w	r2, [r8]
 8010e40:	3a01      	subs	r2, #1
 8010e42:	42b2      	cmp	r2, r6
 8010e44:	d10a      	bne.n	8010e5c <__gethex+0x3f0>
 8010e46:	1171      	asrs	r1, r6, #5
 8010e48:	2201      	movs	r2, #1
 8010e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e4e:	f006 061f 	and.w	r6, r6, #31
 8010e52:	fa02 f606 	lsl.w	r6, r2, r6
 8010e56:	421e      	tst	r6, r3
 8010e58:	bf18      	it	ne
 8010e5a:	4617      	movne	r7, r2
 8010e5c:	f047 0720 	orr.w	r7, r7, #32
 8010e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e62:	601c      	str	r4, [r3, #0]
 8010e64:	9b04      	ldr	r3, [sp, #16]
 8010e66:	601d      	str	r5, [r3, #0]
 8010e68:	e695      	b.n	8010b96 <__gethex+0x12a>
 8010e6a:	4299      	cmp	r1, r3
 8010e6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e70:	d8d8      	bhi.n	8010e24 <__gethex+0x3b8>
 8010e72:	68a3      	ldr	r3, [r4, #8]
 8010e74:	459b      	cmp	fp, r3
 8010e76:	db19      	blt.n	8010eac <__gethex+0x440>
 8010e78:	6861      	ldr	r1, [r4, #4]
 8010e7a:	ee18 0a10 	vmov	r0, s16
 8010e7e:	3101      	adds	r1, #1
 8010e80:	f000 f91e 	bl	80110c0 <_Balloc>
 8010e84:	4681      	mov	r9, r0
 8010e86:	b918      	cbnz	r0, 8010e90 <__gethex+0x424>
 8010e88:	4b1a      	ldr	r3, [pc, #104]	; (8010ef4 <__gethex+0x488>)
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	2184      	movs	r1, #132	; 0x84
 8010e8e:	e6a8      	b.n	8010be2 <__gethex+0x176>
 8010e90:	6922      	ldr	r2, [r4, #16]
 8010e92:	3202      	adds	r2, #2
 8010e94:	f104 010c 	add.w	r1, r4, #12
 8010e98:	0092      	lsls	r2, r2, #2
 8010e9a:	300c      	adds	r0, #12
 8010e9c:	f7fd faec 	bl	800e478 <memcpy>
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	ee18 0a10 	vmov	r0, s16
 8010ea6:	f000 f94b 	bl	8011140 <_Bfree>
 8010eaa:	464c      	mov	r4, r9
 8010eac:	6923      	ldr	r3, [r4, #16]
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010eb4:	6122      	str	r2, [r4, #16]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	615a      	str	r2, [r3, #20]
 8010eba:	e7bb      	b.n	8010e34 <__gethex+0x3c8>
 8010ebc:	6922      	ldr	r2, [r4, #16]
 8010ebe:	455a      	cmp	r2, fp
 8010ec0:	dd0b      	ble.n	8010eda <__gethex+0x46e>
 8010ec2:	2101      	movs	r1, #1
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff fd6a 	bl	801099e <rshift>
 8010eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ece:	3501      	adds	r5, #1
 8010ed0:	42ab      	cmp	r3, r5
 8010ed2:	f6ff aed0 	blt.w	8010c76 <__gethex+0x20a>
 8010ed6:	2701      	movs	r7, #1
 8010ed8:	e7c0      	b.n	8010e5c <__gethex+0x3f0>
 8010eda:	f016 061f 	ands.w	r6, r6, #31
 8010ede:	d0fa      	beq.n	8010ed6 <__gethex+0x46a>
 8010ee0:	4453      	add	r3, sl
 8010ee2:	f1c6 0620 	rsb	r6, r6, #32
 8010ee6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010eea:	f000 f9db 	bl	80112a4 <__hi0bits>
 8010eee:	42b0      	cmp	r0, r6
 8010ef0:	dbe7      	blt.n	8010ec2 <__gethex+0x456>
 8010ef2:	e7f0      	b.n	8010ed6 <__gethex+0x46a>
 8010ef4:	0802bfdf 	.word	0x0802bfdf

08010ef8 <L_shift>:
 8010ef8:	f1c2 0208 	rsb	r2, r2, #8
 8010efc:	0092      	lsls	r2, r2, #2
 8010efe:	b570      	push	{r4, r5, r6, lr}
 8010f00:	f1c2 0620 	rsb	r6, r2, #32
 8010f04:	6843      	ldr	r3, [r0, #4]
 8010f06:	6804      	ldr	r4, [r0, #0]
 8010f08:	fa03 f506 	lsl.w	r5, r3, r6
 8010f0c:	432c      	orrs	r4, r5
 8010f0e:	40d3      	lsrs	r3, r2
 8010f10:	6004      	str	r4, [r0, #0]
 8010f12:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f16:	4288      	cmp	r0, r1
 8010f18:	d3f4      	bcc.n	8010f04 <L_shift+0xc>
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}

08010f1c <__match>:
 8010f1c:	b530      	push	{r4, r5, lr}
 8010f1e:	6803      	ldr	r3, [r0, #0]
 8010f20:	3301      	adds	r3, #1
 8010f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f26:	b914      	cbnz	r4, 8010f2e <__match+0x12>
 8010f28:	6003      	str	r3, [r0, #0]
 8010f2a:	2001      	movs	r0, #1
 8010f2c:	bd30      	pop	{r4, r5, pc}
 8010f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f36:	2d19      	cmp	r5, #25
 8010f38:	bf98      	it	ls
 8010f3a:	3220      	addls	r2, #32
 8010f3c:	42a2      	cmp	r2, r4
 8010f3e:	d0f0      	beq.n	8010f22 <__match+0x6>
 8010f40:	2000      	movs	r0, #0
 8010f42:	e7f3      	b.n	8010f2c <__match+0x10>

08010f44 <__hexnan>:
 8010f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f48:	680b      	ldr	r3, [r1, #0]
 8010f4a:	115e      	asrs	r6, r3, #5
 8010f4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f50:	f013 031f 	ands.w	r3, r3, #31
 8010f54:	b087      	sub	sp, #28
 8010f56:	bf18      	it	ne
 8010f58:	3604      	addne	r6, #4
 8010f5a:	2500      	movs	r5, #0
 8010f5c:	1f37      	subs	r7, r6, #4
 8010f5e:	4690      	mov	r8, r2
 8010f60:	6802      	ldr	r2, [r0, #0]
 8010f62:	9301      	str	r3, [sp, #4]
 8010f64:	4682      	mov	sl, r0
 8010f66:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f6a:	46b9      	mov	r9, r7
 8010f6c:	463c      	mov	r4, r7
 8010f6e:	9502      	str	r5, [sp, #8]
 8010f70:	46ab      	mov	fp, r5
 8010f72:	7851      	ldrb	r1, [r2, #1]
 8010f74:	1c53      	adds	r3, r2, #1
 8010f76:	9303      	str	r3, [sp, #12]
 8010f78:	b341      	cbz	r1, 8010fcc <__hexnan+0x88>
 8010f7a:	4608      	mov	r0, r1
 8010f7c:	9205      	str	r2, [sp, #20]
 8010f7e:	9104      	str	r1, [sp, #16]
 8010f80:	f7ff fd5f 	bl	8010a42 <__hexdig_fun>
 8010f84:	2800      	cmp	r0, #0
 8010f86:	d14f      	bne.n	8011028 <__hexnan+0xe4>
 8010f88:	9904      	ldr	r1, [sp, #16]
 8010f8a:	9a05      	ldr	r2, [sp, #20]
 8010f8c:	2920      	cmp	r1, #32
 8010f8e:	d818      	bhi.n	8010fc2 <__hexnan+0x7e>
 8010f90:	9b02      	ldr	r3, [sp, #8]
 8010f92:	459b      	cmp	fp, r3
 8010f94:	dd13      	ble.n	8010fbe <__hexnan+0x7a>
 8010f96:	454c      	cmp	r4, r9
 8010f98:	d206      	bcs.n	8010fa8 <__hexnan+0x64>
 8010f9a:	2d07      	cmp	r5, #7
 8010f9c:	dc04      	bgt.n	8010fa8 <__hexnan+0x64>
 8010f9e:	462a      	mov	r2, r5
 8010fa0:	4649      	mov	r1, r9
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f7ff ffa8 	bl	8010ef8 <L_shift>
 8010fa8:	4544      	cmp	r4, r8
 8010faa:	d950      	bls.n	801104e <__hexnan+0x10a>
 8010fac:	2300      	movs	r3, #0
 8010fae:	f1a4 0904 	sub.w	r9, r4, #4
 8010fb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8010fba:	464c      	mov	r4, r9
 8010fbc:	461d      	mov	r5, r3
 8010fbe:	9a03      	ldr	r2, [sp, #12]
 8010fc0:	e7d7      	b.n	8010f72 <__hexnan+0x2e>
 8010fc2:	2929      	cmp	r1, #41	; 0x29
 8010fc4:	d156      	bne.n	8011074 <__hexnan+0x130>
 8010fc6:	3202      	adds	r2, #2
 8010fc8:	f8ca 2000 	str.w	r2, [sl]
 8010fcc:	f1bb 0f00 	cmp.w	fp, #0
 8010fd0:	d050      	beq.n	8011074 <__hexnan+0x130>
 8010fd2:	454c      	cmp	r4, r9
 8010fd4:	d206      	bcs.n	8010fe4 <__hexnan+0xa0>
 8010fd6:	2d07      	cmp	r5, #7
 8010fd8:	dc04      	bgt.n	8010fe4 <__hexnan+0xa0>
 8010fda:	462a      	mov	r2, r5
 8010fdc:	4649      	mov	r1, r9
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7ff ff8a 	bl	8010ef8 <L_shift>
 8010fe4:	4544      	cmp	r4, r8
 8010fe6:	d934      	bls.n	8011052 <__hexnan+0x10e>
 8010fe8:	f1a8 0204 	sub.w	r2, r8, #4
 8010fec:	4623      	mov	r3, r4
 8010fee:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ff2:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ff6:	429f      	cmp	r7, r3
 8010ff8:	d2f9      	bcs.n	8010fee <__hexnan+0xaa>
 8010ffa:	1b3b      	subs	r3, r7, r4
 8010ffc:	f023 0303 	bic.w	r3, r3, #3
 8011000:	3304      	adds	r3, #4
 8011002:	3401      	adds	r4, #1
 8011004:	3e03      	subs	r6, #3
 8011006:	42b4      	cmp	r4, r6
 8011008:	bf88      	it	hi
 801100a:	2304      	movhi	r3, #4
 801100c:	4443      	add	r3, r8
 801100e:	2200      	movs	r2, #0
 8011010:	f843 2b04 	str.w	r2, [r3], #4
 8011014:	429f      	cmp	r7, r3
 8011016:	d2fb      	bcs.n	8011010 <__hexnan+0xcc>
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	b91b      	cbnz	r3, 8011024 <__hexnan+0xe0>
 801101c:	4547      	cmp	r7, r8
 801101e:	d127      	bne.n	8011070 <__hexnan+0x12c>
 8011020:	2301      	movs	r3, #1
 8011022:	603b      	str	r3, [r7, #0]
 8011024:	2005      	movs	r0, #5
 8011026:	e026      	b.n	8011076 <__hexnan+0x132>
 8011028:	3501      	adds	r5, #1
 801102a:	2d08      	cmp	r5, #8
 801102c:	f10b 0b01 	add.w	fp, fp, #1
 8011030:	dd06      	ble.n	8011040 <__hexnan+0xfc>
 8011032:	4544      	cmp	r4, r8
 8011034:	d9c3      	bls.n	8010fbe <__hexnan+0x7a>
 8011036:	2300      	movs	r3, #0
 8011038:	f844 3c04 	str.w	r3, [r4, #-4]
 801103c:	2501      	movs	r5, #1
 801103e:	3c04      	subs	r4, #4
 8011040:	6822      	ldr	r2, [r4, #0]
 8011042:	f000 000f 	and.w	r0, r0, #15
 8011046:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801104a:	6022      	str	r2, [r4, #0]
 801104c:	e7b7      	b.n	8010fbe <__hexnan+0x7a>
 801104e:	2508      	movs	r5, #8
 8011050:	e7b5      	b.n	8010fbe <__hexnan+0x7a>
 8011052:	9b01      	ldr	r3, [sp, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d0df      	beq.n	8011018 <__hexnan+0xd4>
 8011058:	f04f 32ff 	mov.w	r2, #4294967295
 801105c:	f1c3 0320 	rsb	r3, r3, #32
 8011060:	fa22 f303 	lsr.w	r3, r2, r3
 8011064:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011068:	401a      	ands	r2, r3
 801106a:	f846 2c04 	str.w	r2, [r6, #-4]
 801106e:	e7d3      	b.n	8011018 <__hexnan+0xd4>
 8011070:	3f04      	subs	r7, #4
 8011072:	e7d1      	b.n	8011018 <__hexnan+0xd4>
 8011074:	2004      	movs	r0, #4
 8011076:	b007      	add	sp, #28
 8011078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801107c <_localeconv_r>:
 801107c:	4800      	ldr	r0, [pc, #0]	; (8011080 <_localeconv_r+0x4>)
 801107e:	4770      	bx	lr
 8011080:	200006f4 	.word	0x200006f4

08011084 <__retarget_lock_init_recursive>:
 8011084:	4770      	bx	lr

08011086 <__retarget_lock_acquire_recursive>:
 8011086:	4770      	bx	lr

08011088 <__retarget_lock_release_recursive>:
 8011088:	4770      	bx	lr
	...

0801108c <malloc>:
 801108c:	4b02      	ldr	r3, [pc, #8]	; (8011098 <malloc+0xc>)
 801108e:	4601      	mov	r1, r0
 8011090:	6818      	ldr	r0, [r3, #0]
 8011092:	f000 bd59 	b.w	8011b48 <_malloc_r>
 8011096:	bf00      	nop
 8011098:	2000059c 	.word	0x2000059c

0801109c <__ascii_mbtowc>:
 801109c:	b082      	sub	sp, #8
 801109e:	b901      	cbnz	r1, 80110a2 <__ascii_mbtowc+0x6>
 80110a0:	a901      	add	r1, sp, #4
 80110a2:	b142      	cbz	r2, 80110b6 <__ascii_mbtowc+0x1a>
 80110a4:	b14b      	cbz	r3, 80110ba <__ascii_mbtowc+0x1e>
 80110a6:	7813      	ldrb	r3, [r2, #0]
 80110a8:	600b      	str	r3, [r1, #0]
 80110aa:	7812      	ldrb	r2, [r2, #0]
 80110ac:	1e10      	subs	r0, r2, #0
 80110ae:	bf18      	it	ne
 80110b0:	2001      	movne	r0, #1
 80110b2:	b002      	add	sp, #8
 80110b4:	4770      	bx	lr
 80110b6:	4610      	mov	r0, r2
 80110b8:	e7fb      	b.n	80110b2 <__ascii_mbtowc+0x16>
 80110ba:	f06f 0001 	mvn.w	r0, #1
 80110be:	e7f8      	b.n	80110b2 <__ascii_mbtowc+0x16>

080110c0 <_Balloc>:
 80110c0:	b570      	push	{r4, r5, r6, lr}
 80110c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80110c4:	4604      	mov	r4, r0
 80110c6:	460d      	mov	r5, r1
 80110c8:	b976      	cbnz	r6, 80110e8 <_Balloc+0x28>
 80110ca:	2010      	movs	r0, #16
 80110cc:	f7ff ffde 	bl	801108c <malloc>
 80110d0:	4602      	mov	r2, r0
 80110d2:	6260      	str	r0, [r4, #36]	; 0x24
 80110d4:	b920      	cbnz	r0, 80110e0 <_Balloc+0x20>
 80110d6:	4b18      	ldr	r3, [pc, #96]	; (8011138 <_Balloc+0x78>)
 80110d8:	4818      	ldr	r0, [pc, #96]	; (801113c <_Balloc+0x7c>)
 80110da:	2166      	movs	r1, #102	; 0x66
 80110dc:	f001 f9b6 	bl	801244c <__assert_func>
 80110e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110e4:	6006      	str	r6, [r0, #0]
 80110e6:	60c6      	str	r6, [r0, #12]
 80110e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80110ea:	68f3      	ldr	r3, [r6, #12]
 80110ec:	b183      	cbz	r3, 8011110 <_Balloc+0x50>
 80110ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110f6:	b9b8      	cbnz	r0, 8011128 <_Balloc+0x68>
 80110f8:	2101      	movs	r1, #1
 80110fa:	fa01 f605 	lsl.w	r6, r1, r5
 80110fe:	1d72      	adds	r2, r6, #5
 8011100:	0092      	lsls	r2, r2, #2
 8011102:	4620      	mov	r0, r4
 8011104:	f000 fc9d 	bl	8011a42 <_calloc_r>
 8011108:	b160      	cbz	r0, 8011124 <_Balloc+0x64>
 801110a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801110e:	e00e      	b.n	801112e <_Balloc+0x6e>
 8011110:	2221      	movs	r2, #33	; 0x21
 8011112:	2104      	movs	r1, #4
 8011114:	4620      	mov	r0, r4
 8011116:	f000 fc94 	bl	8011a42 <_calloc_r>
 801111a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801111c:	60f0      	str	r0, [r6, #12]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1e4      	bne.n	80110ee <_Balloc+0x2e>
 8011124:	2000      	movs	r0, #0
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	6802      	ldr	r2, [r0, #0]
 801112a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801112e:	2300      	movs	r3, #0
 8011130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011134:	e7f7      	b.n	8011126 <_Balloc+0x66>
 8011136:	bf00      	nop
 8011138:	0802bf6d 	.word	0x0802bf6d
 801113c:	0802c0c8 	.word	0x0802c0c8

08011140 <_Bfree>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011144:	4605      	mov	r5, r0
 8011146:	460c      	mov	r4, r1
 8011148:	b976      	cbnz	r6, 8011168 <_Bfree+0x28>
 801114a:	2010      	movs	r0, #16
 801114c:	f7ff ff9e 	bl	801108c <malloc>
 8011150:	4602      	mov	r2, r0
 8011152:	6268      	str	r0, [r5, #36]	; 0x24
 8011154:	b920      	cbnz	r0, 8011160 <_Bfree+0x20>
 8011156:	4b09      	ldr	r3, [pc, #36]	; (801117c <_Bfree+0x3c>)
 8011158:	4809      	ldr	r0, [pc, #36]	; (8011180 <_Bfree+0x40>)
 801115a:	218a      	movs	r1, #138	; 0x8a
 801115c:	f001 f976 	bl	801244c <__assert_func>
 8011160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011164:	6006      	str	r6, [r0, #0]
 8011166:	60c6      	str	r6, [r0, #12]
 8011168:	b13c      	cbz	r4, 801117a <_Bfree+0x3a>
 801116a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801116c:	6862      	ldr	r2, [r4, #4]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011174:	6021      	str	r1, [r4, #0]
 8011176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801117a:	bd70      	pop	{r4, r5, r6, pc}
 801117c:	0802bf6d 	.word	0x0802bf6d
 8011180:	0802c0c8 	.word	0x0802c0c8

08011184 <__multadd>:
 8011184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011188:	690d      	ldr	r5, [r1, #16]
 801118a:	4607      	mov	r7, r0
 801118c:	460c      	mov	r4, r1
 801118e:	461e      	mov	r6, r3
 8011190:	f101 0c14 	add.w	ip, r1, #20
 8011194:	2000      	movs	r0, #0
 8011196:	f8dc 3000 	ldr.w	r3, [ip]
 801119a:	b299      	uxth	r1, r3
 801119c:	fb02 6101 	mla	r1, r2, r1, r6
 80111a0:	0c1e      	lsrs	r6, r3, #16
 80111a2:	0c0b      	lsrs	r3, r1, #16
 80111a4:	fb02 3306 	mla	r3, r2, r6, r3
 80111a8:	b289      	uxth	r1, r1
 80111aa:	3001      	adds	r0, #1
 80111ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111b0:	4285      	cmp	r5, r0
 80111b2:	f84c 1b04 	str.w	r1, [ip], #4
 80111b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111ba:	dcec      	bgt.n	8011196 <__multadd+0x12>
 80111bc:	b30e      	cbz	r6, 8011202 <__multadd+0x7e>
 80111be:	68a3      	ldr	r3, [r4, #8]
 80111c0:	42ab      	cmp	r3, r5
 80111c2:	dc19      	bgt.n	80111f8 <__multadd+0x74>
 80111c4:	6861      	ldr	r1, [r4, #4]
 80111c6:	4638      	mov	r0, r7
 80111c8:	3101      	adds	r1, #1
 80111ca:	f7ff ff79 	bl	80110c0 <_Balloc>
 80111ce:	4680      	mov	r8, r0
 80111d0:	b928      	cbnz	r0, 80111de <__multadd+0x5a>
 80111d2:	4602      	mov	r2, r0
 80111d4:	4b0c      	ldr	r3, [pc, #48]	; (8011208 <__multadd+0x84>)
 80111d6:	480d      	ldr	r0, [pc, #52]	; (801120c <__multadd+0x88>)
 80111d8:	21b5      	movs	r1, #181	; 0xb5
 80111da:	f001 f937 	bl	801244c <__assert_func>
 80111de:	6922      	ldr	r2, [r4, #16]
 80111e0:	3202      	adds	r2, #2
 80111e2:	f104 010c 	add.w	r1, r4, #12
 80111e6:	0092      	lsls	r2, r2, #2
 80111e8:	300c      	adds	r0, #12
 80111ea:	f7fd f945 	bl	800e478 <memcpy>
 80111ee:	4621      	mov	r1, r4
 80111f0:	4638      	mov	r0, r7
 80111f2:	f7ff ffa5 	bl	8011140 <_Bfree>
 80111f6:	4644      	mov	r4, r8
 80111f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111fc:	3501      	adds	r5, #1
 80111fe:	615e      	str	r6, [r3, #20]
 8011200:	6125      	str	r5, [r4, #16]
 8011202:	4620      	mov	r0, r4
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	0802bfdf 	.word	0x0802bfdf
 801120c:	0802c0c8 	.word	0x0802c0c8

08011210 <__s2b>:
 8011210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011214:	460c      	mov	r4, r1
 8011216:	4615      	mov	r5, r2
 8011218:	461f      	mov	r7, r3
 801121a:	2209      	movs	r2, #9
 801121c:	3308      	adds	r3, #8
 801121e:	4606      	mov	r6, r0
 8011220:	fb93 f3f2 	sdiv	r3, r3, r2
 8011224:	2100      	movs	r1, #0
 8011226:	2201      	movs	r2, #1
 8011228:	429a      	cmp	r2, r3
 801122a:	db09      	blt.n	8011240 <__s2b+0x30>
 801122c:	4630      	mov	r0, r6
 801122e:	f7ff ff47 	bl	80110c0 <_Balloc>
 8011232:	b940      	cbnz	r0, 8011246 <__s2b+0x36>
 8011234:	4602      	mov	r2, r0
 8011236:	4b19      	ldr	r3, [pc, #100]	; (801129c <__s2b+0x8c>)
 8011238:	4819      	ldr	r0, [pc, #100]	; (80112a0 <__s2b+0x90>)
 801123a:	21ce      	movs	r1, #206	; 0xce
 801123c:	f001 f906 	bl	801244c <__assert_func>
 8011240:	0052      	lsls	r2, r2, #1
 8011242:	3101      	adds	r1, #1
 8011244:	e7f0      	b.n	8011228 <__s2b+0x18>
 8011246:	9b08      	ldr	r3, [sp, #32]
 8011248:	6143      	str	r3, [r0, #20]
 801124a:	2d09      	cmp	r5, #9
 801124c:	f04f 0301 	mov.w	r3, #1
 8011250:	6103      	str	r3, [r0, #16]
 8011252:	dd16      	ble.n	8011282 <__s2b+0x72>
 8011254:	f104 0909 	add.w	r9, r4, #9
 8011258:	46c8      	mov	r8, r9
 801125a:	442c      	add	r4, r5
 801125c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011260:	4601      	mov	r1, r0
 8011262:	3b30      	subs	r3, #48	; 0x30
 8011264:	220a      	movs	r2, #10
 8011266:	4630      	mov	r0, r6
 8011268:	f7ff ff8c 	bl	8011184 <__multadd>
 801126c:	45a0      	cmp	r8, r4
 801126e:	d1f5      	bne.n	801125c <__s2b+0x4c>
 8011270:	f1a5 0408 	sub.w	r4, r5, #8
 8011274:	444c      	add	r4, r9
 8011276:	1b2d      	subs	r5, r5, r4
 8011278:	1963      	adds	r3, r4, r5
 801127a:	42bb      	cmp	r3, r7
 801127c:	db04      	blt.n	8011288 <__s2b+0x78>
 801127e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011282:	340a      	adds	r4, #10
 8011284:	2509      	movs	r5, #9
 8011286:	e7f6      	b.n	8011276 <__s2b+0x66>
 8011288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801128c:	4601      	mov	r1, r0
 801128e:	3b30      	subs	r3, #48	; 0x30
 8011290:	220a      	movs	r2, #10
 8011292:	4630      	mov	r0, r6
 8011294:	f7ff ff76 	bl	8011184 <__multadd>
 8011298:	e7ee      	b.n	8011278 <__s2b+0x68>
 801129a:	bf00      	nop
 801129c:	0802bfdf 	.word	0x0802bfdf
 80112a0:	0802c0c8 	.word	0x0802c0c8

080112a4 <__hi0bits>:
 80112a4:	0c03      	lsrs	r3, r0, #16
 80112a6:	041b      	lsls	r3, r3, #16
 80112a8:	b9d3      	cbnz	r3, 80112e0 <__hi0bits+0x3c>
 80112aa:	0400      	lsls	r0, r0, #16
 80112ac:	2310      	movs	r3, #16
 80112ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112b2:	bf04      	itt	eq
 80112b4:	0200      	lsleq	r0, r0, #8
 80112b6:	3308      	addeq	r3, #8
 80112b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112bc:	bf04      	itt	eq
 80112be:	0100      	lsleq	r0, r0, #4
 80112c0:	3304      	addeq	r3, #4
 80112c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112c6:	bf04      	itt	eq
 80112c8:	0080      	lsleq	r0, r0, #2
 80112ca:	3302      	addeq	r3, #2
 80112cc:	2800      	cmp	r0, #0
 80112ce:	db05      	blt.n	80112dc <__hi0bits+0x38>
 80112d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112d4:	f103 0301 	add.w	r3, r3, #1
 80112d8:	bf08      	it	eq
 80112da:	2320      	moveq	r3, #32
 80112dc:	4618      	mov	r0, r3
 80112de:	4770      	bx	lr
 80112e0:	2300      	movs	r3, #0
 80112e2:	e7e4      	b.n	80112ae <__hi0bits+0xa>

080112e4 <__lo0bits>:
 80112e4:	6803      	ldr	r3, [r0, #0]
 80112e6:	f013 0207 	ands.w	r2, r3, #7
 80112ea:	4601      	mov	r1, r0
 80112ec:	d00b      	beq.n	8011306 <__lo0bits+0x22>
 80112ee:	07da      	lsls	r2, r3, #31
 80112f0:	d423      	bmi.n	801133a <__lo0bits+0x56>
 80112f2:	0798      	lsls	r0, r3, #30
 80112f4:	bf49      	itett	mi
 80112f6:	085b      	lsrmi	r3, r3, #1
 80112f8:	089b      	lsrpl	r3, r3, #2
 80112fa:	2001      	movmi	r0, #1
 80112fc:	600b      	strmi	r3, [r1, #0]
 80112fe:	bf5c      	itt	pl
 8011300:	600b      	strpl	r3, [r1, #0]
 8011302:	2002      	movpl	r0, #2
 8011304:	4770      	bx	lr
 8011306:	b298      	uxth	r0, r3
 8011308:	b9a8      	cbnz	r0, 8011336 <__lo0bits+0x52>
 801130a:	0c1b      	lsrs	r3, r3, #16
 801130c:	2010      	movs	r0, #16
 801130e:	b2da      	uxtb	r2, r3
 8011310:	b90a      	cbnz	r2, 8011316 <__lo0bits+0x32>
 8011312:	3008      	adds	r0, #8
 8011314:	0a1b      	lsrs	r3, r3, #8
 8011316:	071a      	lsls	r2, r3, #28
 8011318:	bf04      	itt	eq
 801131a:	091b      	lsreq	r3, r3, #4
 801131c:	3004      	addeq	r0, #4
 801131e:	079a      	lsls	r2, r3, #30
 8011320:	bf04      	itt	eq
 8011322:	089b      	lsreq	r3, r3, #2
 8011324:	3002      	addeq	r0, #2
 8011326:	07da      	lsls	r2, r3, #31
 8011328:	d403      	bmi.n	8011332 <__lo0bits+0x4e>
 801132a:	085b      	lsrs	r3, r3, #1
 801132c:	f100 0001 	add.w	r0, r0, #1
 8011330:	d005      	beq.n	801133e <__lo0bits+0x5a>
 8011332:	600b      	str	r3, [r1, #0]
 8011334:	4770      	bx	lr
 8011336:	4610      	mov	r0, r2
 8011338:	e7e9      	b.n	801130e <__lo0bits+0x2a>
 801133a:	2000      	movs	r0, #0
 801133c:	4770      	bx	lr
 801133e:	2020      	movs	r0, #32
 8011340:	4770      	bx	lr
	...

08011344 <__i2b>:
 8011344:	b510      	push	{r4, lr}
 8011346:	460c      	mov	r4, r1
 8011348:	2101      	movs	r1, #1
 801134a:	f7ff feb9 	bl	80110c0 <_Balloc>
 801134e:	4602      	mov	r2, r0
 8011350:	b928      	cbnz	r0, 801135e <__i2b+0x1a>
 8011352:	4b05      	ldr	r3, [pc, #20]	; (8011368 <__i2b+0x24>)
 8011354:	4805      	ldr	r0, [pc, #20]	; (801136c <__i2b+0x28>)
 8011356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801135a:	f001 f877 	bl	801244c <__assert_func>
 801135e:	2301      	movs	r3, #1
 8011360:	6144      	str	r4, [r0, #20]
 8011362:	6103      	str	r3, [r0, #16]
 8011364:	bd10      	pop	{r4, pc}
 8011366:	bf00      	nop
 8011368:	0802bfdf 	.word	0x0802bfdf
 801136c:	0802c0c8 	.word	0x0802c0c8

08011370 <__multiply>:
 8011370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011374:	4691      	mov	r9, r2
 8011376:	690a      	ldr	r2, [r1, #16]
 8011378:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801137c:	429a      	cmp	r2, r3
 801137e:	bfb8      	it	lt
 8011380:	460b      	movlt	r3, r1
 8011382:	460c      	mov	r4, r1
 8011384:	bfbc      	itt	lt
 8011386:	464c      	movlt	r4, r9
 8011388:	4699      	movlt	r9, r3
 801138a:	6927      	ldr	r7, [r4, #16]
 801138c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011390:	68a3      	ldr	r3, [r4, #8]
 8011392:	6861      	ldr	r1, [r4, #4]
 8011394:	eb07 060a 	add.w	r6, r7, sl
 8011398:	42b3      	cmp	r3, r6
 801139a:	b085      	sub	sp, #20
 801139c:	bfb8      	it	lt
 801139e:	3101      	addlt	r1, #1
 80113a0:	f7ff fe8e 	bl	80110c0 <_Balloc>
 80113a4:	b930      	cbnz	r0, 80113b4 <__multiply+0x44>
 80113a6:	4602      	mov	r2, r0
 80113a8:	4b44      	ldr	r3, [pc, #272]	; (80114bc <__multiply+0x14c>)
 80113aa:	4845      	ldr	r0, [pc, #276]	; (80114c0 <__multiply+0x150>)
 80113ac:	f240 115d 	movw	r1, #349	; 0x15d
 80113b0:	f001 f84c 	bl	801244c <__assert_func>
 80113b4:	f100 0514 	add.w	r5, r0, #20
 80113b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113bc:	462b      	mov	r3, r5
 80113be:	2200      	movs	r2, #0
 80113c0:	4543      	cmp	r3, r8
 80113c2:	d321      	bcc.n	8011408 <__multiply+0x98>
 80113c4:	f104 0314 	add.w	r3, r4, #20
 80113c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113cc:	f109 0314 	add.w	r3, r9, #20
 80113d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113d4:	9202      	str	r2, [sp, #8]
 80113d6:	1b3a      	subs	r2, r7, r4
 80113d8:	3a15      	subs	r2, #21
 80113da:	f022 0203 	bic.w	r2, r2, #3
 80113de:	3204      	adds	r2, #4
 80113e0:	f104 0115 	add.w	r1, r4, #21
 80113e4:	428f      	cmp	r7, r1
 80113e6:	bf38      	it	cc
 80113e8:	2204      	movcc	r2, #4
 80113ea:	9201      	str	r2, [sp, #4]
 80113ec:	9a02      	ldr	r2, [sp, #8]
 80113ee:	9303      	str	r3, [sp, #12]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d80c      	bhi.n	801140e <__multiply+0x9e>
 80113f4:	2e00      	cmp	r6, #0
 80113f6:	dd03      	ble.n	8011400 <__multiply+0x90>
 80113f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d05a      	beq.n	80114b6 <__multiply+0x146>
 8011400:	6106      	str	r6, [r0, #16]
 8011402:	b005      	add	sp, #20
 8011404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011408:	f843 2b04 	str.w	r2, [r3], #4
 801140c:	e7d8      	b.n	80113c0 <__multiply+0x50>
 801140e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011412:	f1ba 0f00 	cmp.w	sl, #0
 8011416:	d024      	beq.n	8011462 <__multiply+0xf2>
 8011418:	f104 0e14 	add.w	lr, r4, #20
 801141c:	46a9      	mov	r9, r5
 801141e:	f04f 0c00 	mov.w	ip, #0
 8011422:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011426:	f8d9 1000 	ldr.w	r1, [r9]
 801142a:	fa1f fb82 	uxth.w	fp, r2
 801142e:	b289      	uxth	r1, r1
 8011430:	fb0a 110b 	mla	r1, sl, fp, r1
 8011434:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011438:	f8d9 2000 	ldr.w	r2, [r9]
 801143c:	4461      	add	r1, ip
 801143e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011442:	fb0a c20b 	mla	r2, sl, fp, ip
 8011446:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801144a:	b289      	uxth	r1, r1
 801144c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011450:	4577      	cmp	r7, lr
 8011452:	f849 1b04 	str.w	r1, [r9], #4
 8011456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801145a:	d8e2      	bhi.n	8011422 <__multiply+0xb2>
 801145c:	9a01      	ldr	r2, [sp, #4]
 801145e:	f845 c002 	str.w	ip, [r5, r2]
 8011462:	9a03      	ldr	r2, [sp, #12]
 8011464:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011468:	3304      	adds	r3, #4
 801146a:	f1b9 0f00 	cmp.w	r9, #0
 801146e:	d020      	beq.n	80114b2 <__multiply+0x142>
 8011470:	6829      	ldr	r1, [r5, #0]
 8011472:	f104 0c14 	add.w	ip, r4, #20
 8011476:	46ae      	mov	lr, r5
 8011478:	f04f 0a00 	mov.w	sl, #0
 801147c:	f8bc b000 	ldrh.w	fp, [ip]
 8011480:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011484:	fb09 220b 	mla	r2, r9, fp, r2
 8011488:	4492      	add	sl, r2
 801148a:	b289      	uxth	r1, r1
 801148c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011490:	f84e 1b04 	str.w	r1, [lr], #4
 8011494:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011498:	f8be 1000 	ldrh.w	r1, [lr]
 801149c:	0c12      	lsrs	r2, r2, #16
 801149e:	fb09 1102 	mla	r1, r9, r2, r1
 80114a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80114a6:	4567      	cmp	r7, ip
 80114a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114ac:	d8e6      	bhi.n	801147c <__multiply+0x10c>
 80114ae:	9a01      	ldr	r2, [sp, #4]
 80114b0:	50a9      	str	r1, [r5, r2]
 80114b2:	3504      	adds	r5, #4
 80114b4:	e79a      	b.n	80113ec <__multiply+0x7c>
 80114b6:	3e01      	subs	r6, #1
 80114b8:	e79c      	b.n	80113f4 <__multiply+0x84>
 80114ba:	bf00      	nop
 80114bc:	0802bfdf 	.word	0x0802bfdf
 80114c0:	0802c0c8 	.word	0x0802c0c8

080114c4 <__pow5mult>:
 80114c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c8:	4615      	mov	r5, r2
 80114ca:	f012 0203 	ands.w	r2, r2, #3
 80114ce:	4606      	mov	r6, r0
 80114d0:	460f      	mov	r7, r1
 80114d2:	d007      	beq.n	80114e4 <__pow5mult+0x20>
 80114d4:	4c25      	ldr	r4, [pc, #148]	; (801156c <__pow5mult+0xa8>)
 80114d6:	3a01      	subs	r2, #1
 80114d8:	2300      	movs	r3, #0
 80114da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114de:	f7ff fe51 	bl	8011184 <__multadd>
 80114e2:	4607      	mov	r7, r0
 80114e4:	10ad      	asrs	r5, r5, #2
 80114e6:	d03d      	beq.n	8011564 <__pow5mult+0xa0>
 80114e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80114ea:	b97c      	cbnz	r4, 801150c <__pow5mult+0x48>
 80114ec:	2010      	movs	r0, #16
 80114ee:	f7ff fdcd 	bl	801108c <malloc>
 80114f2:	4602      	mov	r2, r0
 80114f4:	6270      	str	r0, [r6, #36]	; 0x24
 80114f6:	b928      	cbnz	r0, 8011504 <__pow5mult+0x40>
 80114f8:	4b1d      	ldr	r3, [pc, #116]	; (8011570 <__pow5mult+0xac>)
 80114fa:	481e      	ldr	r0, [pc, #120]	; (8011574 <__pow5mult+0xb0>)
 80114fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011500:	f000 ffa4 	bl	801244c <__assert_func>
 8011504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011508:	6004      	str	r4, [r0, #0]
 801150a:	60c4      	str	r4, [r0, #12]
 801150c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011514:	b94c      	cbnz	r4, 801152a <__pow5mult+0x66>
 8011516:	f240 2171 	movw	r1, #625	; 0x271
 801151a:	4630      	mov	r0, r6
 801151c:	f7ff ff12 	bl	8011344 <__i2b>
 8011520:	2300      	movs	r3, #0
 8011522:	f8c8 0008 	str.w	r0, [r8, #8]
 8011526:	4604      	mov	r4, r0
 8011528:	6003      	str	r3, [r0, #0]
 801152a:	f04f 0900 	mov.w	r9, #0
 801152e:	07eb      	lsls	r3, r5, #31
 8011530:	d50a      	bpl.n	8011548 <__pow5mult+0x84>
 8011532:	4639      	mov	r1, r7
 8011534:	4622      	mov	r2, r4
 8011536:	4630      	mov	r0, r6
 8011538:	f7ff ff1a 	bl	8011370 <__multiply>
 801153c:	4639      	mov	r1, r7
 801153e:	4680      	mov	r8, r0
 8011540:	4630      	mov	r0, r6
 8011542:	f7ff fdfd 	bl	8011140 <_Bfree>
 8011546:	4647      	mov	r7, r8
 8011548:	106d      	asrs	r5, r5, #1
 801154a:	d00b      	beq.n	8011564 <__pow5mult+0xa0>
 801154c:	6820      	ldr	r0, [r4, #0]
 801154e:	b938      	cbnz	r0, 8011560 <__pow5mult+0x9c>
 8011550:	4622      	mov	r2, r4
 8011552:	4621      	mov	r1, r4
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff ff0b 	bl	8011370 <__multiply>
 801155a:	6020      	str	r0, [r4, #0]
 801155c:	f8c0 9000 	str.w	r9, [r0]
 8011560:	4604      	mov	r4, r0
 8011562:	e7e4      	b.n	801152e <__pow5mult+0x6a>
 8011564:	4638      	mov	r0, r7
 8011566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801156a:	bf00      	nop
 801156c:	0802c218 	.word	0x0802c218
 8011570:	0802bf6d 	.word	0x0802bf6d
 8011574:	0802c0c8 	.word	0x0802c0c8

08011578 <__lshift>:
 8011578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801157c:	460c      	mov	r4, r1
 801157e:	6849      	ldr	r1, [r1, #4]
 8011580:	6923      	ldr	r3, [r4, #16]
 8011582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011586:	68a3      	ldr	r3, [r4, #8]
 8011588:	4607      	mov	r7, r0
 801158a:	4691      	mov	r9, r2
 801158c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011590:	f108 0601 	add.w	r6, r8, #1
 8011594:	42b3      	cmp	r3, r6
 8011596:	db0b      	blt.n	80115b0 <__lshift+0x38>
 8011598:	4638      	mov	r0, r7
 801159a:	f7ff fd91 	bl	80110c0 <_Balloc>
 801159e:	4605      	mov	r5, r0
 80115a0:	b948      	cbnz	r0, 80115b6 <__lshift+0x3e>
 80115a2:	4602      	mov	r2, r0
 80115a4:	4b2a      	ldr	r3, [pc, #168]	; (8011650 <__lshift+0xd8>)
 80115a6:	482b      	ldr	r0, [pc, #172]	; (8011654 <__lshift+0xdc>)
 80115a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115ac:	f000 ff4e 	bl	801244c <__assert_func>
 80115b0:	3101      	adds	r1, #1
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	e7ee      	b.n	8011594 <__lshift+0x1c>
 80115b6:	2300      	movs	r3, #0
 80115b8:	f100 0114 	add.w	r1, r0, #20
 80115bc:	f100 0210 	add.w	r2, r0, #16
 80115c0:	4618      	mov	r0, r3
 80115c2:	4553      	cmp	r3, sl
 80115c4:	db37      	blt.n	8011636 <__lshift+0xbe>
 80115c6:	6920      	ldr	r0, [r4, #16]
 80115c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115cc:	f104 0314 	add.w	r3, r4, #20
 80115d0:	f019 091f 	ands.w	r9, r9, #31
 80115d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80115dc:	d02f      	beq.n	801163e <__lshift+0xc6>
 80115de:	f1c9 0e20 	rsb	lr, r9, #32
 80115e2:	468a      	mov	sl, r1
 80115e4:	f04f 0c00 	mov.w	ip, #0
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	fa02 f209 	lsl.w	r2, r2, r9
 80115ee:	ea42 020c 	orr.w	r2, r2, ip
 80115f2:	f84a 2b04 	str.w	r2, [sl], #4
 80115f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80115fa:	4298      	cmp	r0, r3
 80115fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011600:	d8f2      	bhi.n	80115e8 <__lshift+0x70>
 8011602:	1b03      	subs	r3, r0, r4
 8011604:	3b15      	subs	r3, #21
 8011606:	f023 0303 	bic.w	r3, r3, #3
 801160a:	3304      	adds	r3, #4
 801160c:	f104 0215 	add.w	r2, r4, #21
 8011610:	4290      	cmp	r0, r2
 8011612:	bf38      	it	cc
 8011614:	2304      	movcc	r3, #4
 8011616:	f841 c003 	str.w	ip, [r1, r3]
 801161a:	f1bc 0f00 	cmp.w	ip, #0
 801161e:	d001      	beq.n	8011624 <__lshift+0xac>
 8011620:	f108 0602 	add.w	r6, r8, #2
 8011624:	3e01      	subs	r6, #1
 8011626:	4638      	mov	r0, r7
 8011628:	612e      	str	r6, [r5, #16]
 801162a:	4621      	mov	r1, r4
 801162c:	f7ff fd88 	bl	8011140 <_Bfree>
 8011630:	4628      	mov	r0, r5
 8011632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011636:	f842 0f04 	str.w	r0, [r2, #4]!
 801163a:	3301      	adds	r3, #1
 801163c:	e7c1      	b.n	80115c2 <__lshift+0x4a>
 801163e:	3904      	subs	r1, #4
 8011640:	f853 2b04 	ldr.w	r2, [r3], #4
 8011644:	f841 2f04 	str.w	r2, [r1, #4]!
 8011648:	4298      	cmp	r0, r3
 801164a:	d8f9      	bhi.n	8011640 <__lshift+0xc8>
 801164c:	e7ea      	b.n	8011624 <__lshift+0xac>
 801164e:	bf00      	nop
 8011650:	0802bfdf 	.word	0x0802bfdf
 8011654:	0802c0c8 	.word	0x0802c0c8

08011658 <__mcmp>:
 8011658:	b530      	push	{r4, r5, lr}
 801165a:	6902      	ldr	r2, [r0, #16]
 801165c:	690c      	ldr	r4, [r1, #16]
 801165e:	1b12      	subs	r2, r2, r4
 8011660:	d10e      	bne.n	8011680 <__mcmp+0x28>
 8011662:	f100 0314 	add.w	r3, r0, #20
 8011666:	3114      	adds	r1, #20
 8011668:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801166c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011670:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011674:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011678:	42a5      	cmp	r5, r4
 801167a:	d003      	beq.n	8011684 <__mcmp+0x2c>
 801167c:	d305      	bcc.n	801168a <__mcmp+0x32>
 801167e:	2201      	movs	r2, #1
 8011680:	4610      	mov	r0, r2
 8011682:	bd30      	pop	{r4, r5, pc}
 8011684:	4283      	cmp	r3, r0
 8011686:	d3f3      	bcc.n	8011670 <__mcmp+0x18>
 8011688:	e7fa      	b.n	8011680 <__mcmp+0x28>
 801168a:	f04f 32ff 	mov.w	r2, #4294967295
 801168e:	e7f7      	b.n	8011680 <__mcmp+0x28>

08011690 <__mdiff>:
 8011690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	460c      	mov	r4, r1
 8011696:	4606      	mov	r6, r0
 8011698:	4611      	mov	r1, r2
 801169a:	4620      	mov	r0, r4
 801169c:	4690      	mov	r8, r2
 801169e:	f7ff ffdb 	bl	8011658 <__mcmp>
 80116a2:	1e05      	subs	r5, r0, #0
 80116a4:	d110      	bne.n	80116c8 <__mdiff+0x38>
 80116a6:	4629      	mov	r1, r5
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7ff fd09 	bl	80110c0 <_Balloc>
 80116ae:	b930      	cbnz	r0, 80116be <__mdiff+0x2e>
 80116b0:	4b3a      	ldr	r3, [pc, #232]	; (801179c <__mdiff+0x10c>)
 80116b2:	4602      	mov	r2, r0
 80116b4:	f240 2132 	movw	r1, #562	; 0x232
 80116b8:	4839      	ldr	r0, [pc, #228]	; (80117a0 <__mdiff+0x110>)
 80116ba:	f000 fec7 	bl	801244c <__assert_func>
 80116be:	2301      	movs	r3, #1
 80116c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	bfa4      	itt	ge
 80116ca:	4643      	movge	r3, r8
 80116cc:	46a0      	movge	r8, r4
 80116ce:	4630      	mov	r0, r6
 80116d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116d4:	bfa6      	itte	ge
 80116d6:	461c      	movge	r4, r3
 80116d8:	2500      	movge	r5, #0
 80116da:	2501      	movlt	r5, #1
 80116dc:	f7ff fcf0 	bl	80110c0 <_Balloc>
 80116e0:	b920      	cbnz	r0, 80116ec <__mdiff+0x5c>
 80116e2:	4b2e      	ldr	r3, [pc, #184]	; (801179c <__mdiff+0x10c>)
 80116e4:	4602      	mov	r2, r0
 80116e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80116ea:	e7e5      	b.n	80116b8 <__mdiff+0x28>
 80116ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116f0:	6926      	ldr	r6, [r4, #16]
 80116f2:	60c5      	str	r5, [r0, #12]
 80116f4:	f104 0914 	add.w	r9, r4, #20
 80116f8:	f108 0514 	add.w	r5, r8, #20
 80116fc:	f100 0e14 	add.w	lr, r0, #20
 8011700:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011708:	f108 0210 	add.w	r2, r8, #16
 801170c:	46f2      	mov	sl, lr
 801170e:	2100      	movs	r1, #0
 8011710:	f859 3b04 	ldr.w	r3, [r9], #4
 8011714:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011718:	fa1f f883 	uxth.w	r8, r3
 801171c:	fa11 f18b 	uxtah	r1, r1, fp
 8011720:	0c1b      	lsrs	r3, r3, #16
 8011722:	eba1 0808 	sub.w	r8, r1, r8
 8011726:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801172a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801172e:	fa1f f888 	uxth.w	r8, r8
 8011732:	1419      	asrs	r1, r3, #16
 8011734:	454e      	cmp	r6, r9
 8011736:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801173a:	f84a 3b04 	str.w	r3, [sl], #4
 801173e:	d8e7      	bhi.n	8011710 <__mdiff+0x80>
 8011740:	1b33      	subs	r3, r6, r4
 8011742:	3b15      	subs	r3, #21
 8011744:	f023 0303 	bic.w	r3, r3, #3
 8011748:	3304      	adds	r3, #4
 801174a:	3415      	adds	r4, #21
 801174c:	42a6      	cmp	r6, r4
 801174e:	bf38      	it	cc
 8011750:	2304      	movcc	r3, #4
 8011752:	441d      	add	r5, r3
 8011754:	4473      	add	r3, lr
 8011756:	469e      	mov	lr, r3
 8011758:	462e      	mov	r6, r5
 801175a:	4566      	cmp	r6, ip
 801175c:	d30e      	bcc.n	801177c <__mdiff+0xec>
 801175e:	f10c 0203 	add.w	r2, ip, #3
 8011762:	1b52      	subs	r2, r2, r5
 8011764:	f022 0203 	bic.w	r2, r2, #3
 8011768:	3d03      	subs	r5, #3
 801176a:	45ac      	cmp	ip, r5
 801176c:	bf38      	it	cc
 801176e:	2200      	movcc	r2, #0
 8011770:	441a      	add	r2, r3
 8011772:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011776:	b17b      	cbz	r3, 8011798 <__mdiff+0x108>
 8011778:	6107      	str	r7, [r0, #16]
 801177a:	e7a3      	b.n	80116c4 <__mdiff+0x34>
 801177c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011780:	fa11 f288 	uxtah	r2, r1, r8
 8011784:	1414      	asrs	r4, r2, #16
 8011786:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801178a:	b292      	uxth	r2, r2
 801178c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011790:	f84e 2b04 	str.w	r2, [lr], #4
 8011794:	1421      	asrs	r1, r4, #16
 8011796:	e7e0      	b.n	801175a <__mdiff+0xca>
 8011798:	3f01      	subs	r7, #1
 801179a:	e7ea      	b.n	8011772 <__mdiff+0xe2>
 801179c:	0802bfdf 	.word	0x0802bfdf
 80117a0:	0802c0c8 	.word	0x0802c0c8

080117a4 <__ulp>:
 80117a4:	b082      	sub	sp, #8
 80117a6:	ed8d 0b00 	vstr	d0, [sp]
 80117aa:	9b01      	ldr	r3, [sp, #4]
 80117ac:	4912      	ldr	r1, [pc, #72]	; (80117f8 <__ulp+0x54>)
 80117ae:	4019      	ands	r1, r3
 80117b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80117b4:	2900      	cmp	r1, #0
 80117b6:	dd05      	ble.n	80117c4 <__ulp+0x20>
 80117b8:	2200      	movs	r2, #0
 80117ba:	460b      	mov	r3, r1
 80117bc:	ec43 2b10 	vmov	d0, r2, r3
 80117c0:	b002      	add	sp, #8
 80117c2:	4770      	bx	lr
 80117c4:	4249      	negs	r1, r1
 80117c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80117ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80117ce:	f04f 0200 	mov.w	r2, #0
 80117d2:	f04f 0300 	mov.w	r3, #0
 80117d6:	da04      	bge.n	80117e2 <__ulp+0x3e>
 80117d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80117dc:	fa41 f300 	asr.w	r3, r1, r0
 80117e0:	e7ec      	b.n	80117bc <__ulp+0x18>
 80117e2:	f1a0 0114 	sub.w	r1, r0, #20
 80117e6:	291e      	cmp	r1, #30
 80117e8:	bfda      	itte	le
 80117ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80117ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80117f2:	2101      	movgt	r1, #1
 80117f4:	460a      	mov	r2, r1
 80117f6:	e7e1      	b.n	80117bc <__ulp+0x18>
 80117f8:	7ff00000 	.word	0x7ff00000

080117fc <__b2d>:
 80117fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117fe:	6905      	ldr	r5, [r0, #16]
 8011800:	f100 0714 	add.w	r7, r0, #20
 8011804:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011808:	1f2e      	subs	r6, r5, #4
 801180a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801180e:	4620      	mov	r0, r4
 8011810:	f7ff fd48 	bl	80112a4 <__hi0bits>
 8011814:	f1c0 0320 	rsb	r3, r0, #32
 8011818:	280a      	cmp	r0, #10
 801181a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011898 <__b2d+0x9c>
 801181e:	600b      	str	r3, [r1, #0]
 8011820:	dc14      	bgt.n	801184c <__b2d+0x50>
 8011822:	f1c0 0e0b 	rsb	lr, r0, #11
 8011826:	fa24 f10e 	lsr.w	r1, r4, lr
 801182a:	42b7      	cmp	r7, r6
 801182c:	ea41 030c 	orr.w	r3, r1, ip
 8011830:	bf34      	ite	cc
 8011832:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011836:	2100      	movcs	r1, #0
 8011838:	3015      	adds	r0, #21
 801183a:	fa04 f000 	lsl.w	r0, r4, r0
 801183e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011842:	ea40 0201 	orr.w	r2, r0, r1
 8011846:	ec43 2b10 	vmov	d0, r2, r3
 801184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801184c:	42b7      	cmp	r7, r6
 801184e:	bf3a      	itte	cc
 8011850:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011854:	f1a5 0608 	subcc.w	r6, r5, #8
 8011858:	2100      	movcs	r1, #0
 801185a:	380b      	subs	r0, #11
 801185c:	d017      	beq.n	801188e <__b2d+0x92>
 801185e:	f1c0 0c20 	rsb	ip, r0, #32
 8011862:	fa04 f500 	lsl.w	r5, r4, r0
 8011866:	42be      	cmp	r6, r7
 8011868:	fa21 f40c 	lsr.w	r4, r1, ip
 801186c:	ea45 0504 	orr.w	r5, r5, r4
 8011870:	bf8c      	ite	hi
 8011872:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011876:	2400      	movls	r4, #0
 8011878:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801187c:	fa01 f000 	lsl.w	r0, r1, r0
 8011880:	fa24 f40c 	lsr.w	r4, r4, ip
 8011884:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011888:	ea40 0204 	orr.w	r2, r0, r4
 801188c:	e7db      	b.n	8011846 <__b2d+0x4a>
 801188e:	ea44 030c 	orr.w	r3, r4, ip
 8011892:	460a      	mov	r2, r1
 8011894:	e7d7      	b.n	8011846 <__b2d+0x4a>
 8011896:	bf00      	nop
 8011898:	3ff00000 	.word	0x3ff00000

0801189c <__d2b>:
 801189c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118a0:	4689      	mov	r9, r1
 80118a2:	2101      	movs	r1, #1
 80118a4:	ec57 6b10 	vmov	r6, r7, d0
 80118a8:	4690      	mov	r8, r2
 80118aa:	f7ff fc09 	bl	80110c0 <_Balloc>
 80118ae:	4604      	mov	r4, r0
 80118b0:	b930      	cbnz	r0, 80118c0 <__d2b+0x24>
 80118b2:	4602      	mov	r2, r0
 80118b4:	4b25      	ldr	r3, [pc, #148]	; (801194c <__d2b+0xb0>)
 80118b6:	4826      	ldr	r0, [pc, #152]	; (8011950 <__d2b+0xb4>)
 80118b8:	f240 310a 	movw	r1, #778	; 0x30a
 80118bc:	f000 fdc6 	bl	801244c <__assert_func>
 80118c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80118c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118c8:	bb35      	cbnz	r5, 8011918 <__d2b+0x7c>
 80118ca:	2e00      	cmp	r6, #0
 80118cc:	9301      	str	r3, [sp, #4]
 80118ce:	d028      	beq.n	8011922 <__d2b+0x86>
 80118d0:	4668      	mov	r0, sp
 80118d2:	9600      	str	r6, [sp, #0]
 80118d4:	f7ff fd06 	bl	80112e4 <__lo0bits>
 80118d8:	9900      	ldr	r1, [sp, #0]
 80118da:	b300      	cbz	r0, 801191e <__d2b+0x82>
 80118dc:	9a01      	ldr	r2, [sp, #4]
 80118de:	f1c0 0320 	rsb	r3, r0, #32
 80118e2:	fa02 f303 	lsl.w	r3, r2, r3
 80118e6:	430b      	orrs	r3, r1
 80118e8:	40c2      	lsrs	r2, r0
 80118ea:	6163      	str	r3, [r4, #20]
 80118ec:	9201      	str	r2, [sp, #4]
 80118ee:	9b01      	ldr	r3, [sp, #4]
 80118f0:	61a3      	str	r3, [r4, #24]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	bf14      	ite	ne
 80118f6:	2202      	movne	r2, #2
 80118f8:	2201      	moveq	r2, #1
 80118fa:	6122      	str	r2, [r4, #16]
 80118fc:	b1d5      	cbz	r5, 8011934 <__d2b+0x98>
 80118fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011902:	4405      	add	r5, r0
 8011904:	f8c9 5000 	str.w	r5, [r9]
 8011908:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801190c:	f8c8 0000 	str.w	r0, [r8]
 8011910:	4620      	mov	r0, r4
 8011912:	b003      	add	sp, #12
 8011914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801191c:	e7d5      	b.n	80118ca <__d2b+0x2e>
 801191e:	6161      	str	r1, [r4, #20]
 8011920:	e7e5      	b.n	80118ee <__d2b+0x52>
 8011922:	a801      	add	r0, sp, #4
 8011924:	f7ff fcde 	bl	80112e4 <__lo0bits>
 8011928:	9b01      	ldr	r3, [sp, #4]
 801192a:	6163      	str	r3, [r4, #20]
 801192c:	2201      	movs	r2, #1
 801192e:	6122      	str	r2, [r4, #16]
 8011930:	3020      	adds	r0, #32
 8011932:	e7e3      	b.n	80118fc <__d2b+0x60>
 8011934:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011938:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801193c:	f8c9 0000 	str.w	r0, [r9]
 8011940:	6918      	ldr	r0, [r3, #16]
 8011942:	f7ff fcaf 	bl	80112a4 <__hi0bits>
 8011946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801194a:	e7df      	b.n	801190c <__d2b+0x70>
 801194c:	0802bfdf 	.word	0x0802bfdf
 8011950:	0802c0c8 	.word	0x0802c0c8

08011954 <__ratio>:
 8011954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011958:	4688      	mov	r8, r1
 801195a:	4669      	mov	r1, sp
 801195c:	4681      	mov	r9, r0
 801195e:	f7ff ff4d 	bl	80117fc <__b2d>
 8011962:	a901      	add	r1, sp, #4
 8011964:	4640      	mov	r0, r8
 8011966:	ec55 4b10 	vmov	r4, r5, d0
 801196a:	f7ff ff47 	bl	80117fc <__b2d>
 801196e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011972:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011976:	eba3 0c02 	sub.w	ip, r3, r2
 801197a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801197e:	1a9b      	subs	r3, r3, r2
 8011980:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011984:	ec51 0b10 	vmov	r0, r1, d0
 8011988:	2b00      	cmp	r3, #0
 801198a:	bfd6      	itet	le
 801198c:	460a      	movle	r2, r1
 801198e:	462a      	movgt	r2, r5
 8011990:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011994:	468b      	mov	fp, r1
 8011996:	462f      	mov	r7, r5
 8011998:	bfd4      	ite	le
 801199a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801199e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80119a2:	4620      	mov	r0, r4
 80119a4:	ee10 2a10 	vmov	r2, s0
 80119a8:	465b      	mov	r3, fp
 80119aa:	4639      	mov	r1, r7
 80119ac:	f7ee ffce 	bl	800094c <__aeabi_ddiv>
 80119b0:	ec41 0b10 	vmov	d0, r0, r1
 80119b4:	b003      	add	sp, #12
 80119b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119ba <__copybits>:
 80119ba:	3901      	subs	r1, #1
 80119bc:	b570      	push	{r4, r5, r6, lr}
 80119be:	1149      	asrs	r1, r1, #5
 80119c0:	6914      	ldr	r4, [r2, #16]
 80119c2:	3101      	adds	r1, #1
 80119c4:	f102 0314 	add.w	r3, r2, #20
 80119c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119d0:	1f05      	subs	r5, r0, #4
 80119d2:	42a3      	cmp	r3, r4
 80119d4:	d30c      	bcc.n	80119f0 <__copybits+0x36>
 80119d6:	1aa3      	subs	r3, r4, r2
 80119d8:	3b11      	subs	r3, #17
 80119da:	f023 0303 	bic.w	r3, r3, #3
 80119de:	3211      	adds	r2, #17
 80119e0:	42a2      	cmp	r2, r4
 80119e2:	bf88      	it	hi
 80119e4:	2300      	movhi	r3, #0
 80119e6:	4418      	add	r0, r3
 80119e8:	2300      	movs	r3, #0
 80119ea:	4288      	cmp	r0, r1
 80119ec:	d305      	bcc.n	80119fa <__copybits+0x40>
 80119ee:	bd70      	pop	{r4, r5, r6, pc}
 80119f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80119f4:	f845 6f04 	str.w	r6, [r5, #4]!
 80119f8:	e7eb      	b.n	80119d2 <__copybits+0x18>
 80119fa:	f840 3b04 	str.w	r3, [r0], #4
 80119fe:	e7f4      	b.n	80119ea <__copybits+0x30>

08011a00 <__any_on>:
 8011a00:	f100 0214 	add.w	r2, r0, #20
 8011a04:	6900      	ldr	r0, [r0, #16]
 8011a06:	114b      	asrs	r3, r1, #5
 8011a08:	4298      	cmp	r0, r3
 8011a0a:	b510      	push	{r4, lr}
 8011a0c:	db11      	blt.n	8011a32 <__any_on+0x32>
 8011a0e:	dd0a      	ble.n	8011a26 <__any_on+0x26>
 8011a10:	f011 011f 	ands.w	r1, r1, #31
 8011a14:	d007      	beq.n	8011a26 <__any_on+0x26>
 8011a16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a1a:	fa24 f001 	lsr.w	r0, r4, r1
 8011a1e:	fa00 f101 	lsl.w	r1, r0, r1
 8011a22:	428c      	cmp	r4, r1
 8011a24:	d10b      	bne.n	8011a3e <__any_on+0x3e>
 8011a26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	d803      	bhi.n	8011a36 <__any_on+0x36>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	bd10      	pop	{r4, pc}
 8011a32:	4603      	mov	r3, r0
 8011a34:	e7f7      	b.n	8011a26 <__any_on+0x26>
 8011a36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a3a:	2900      	cmp	r1, #0
 8011a3c:	d0f5      	beq.n	8011a2a <__any_on+0x2a>
 8011a3e:	2001      	movs	r0, #1
 8011a40:	e7f6      	b.n	8011a30 <__any_on+0x30>

08011a42 <_calloc_r>:
 8011a42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a44:	fba1 2402 	umull	r2, r4, r1, r2
 8011a48:	b94c      	cbnz	r4, 8011a5e <_calloc_r+0x1c>
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	9201      	str	r2, [sp, #4]
 8011a4e:	f000 f87b 	bl	8011b48 <_malloc_r>
 8011a52:	9a01      	ldr	r2, [sp, #4]
 8011a54:	4605      	mov	r5, r0
 8011a56:	b930      	cbnz	r0, 8011a66 <_calloc_r+0x24>
 8011a58:	4628      	mov	r0, r5
 8011a5a:	b003      	add	sp, #12
 8011a5c:	bd30      	pop	{r4, r5, pc}
 8011a5e:	220c      	movs	r2, #12
 8011a60:	6002      	str	r2, [r0, #0]
 8011a62:	2500      	movs	r5, #0
 8011a64:	e7f8      	b.n	8011a58 <_calloc_r+0x16>
 8011a66:	4621      	mov	r1, r4
 8011a68:	f7fc fd14 	bl	800e494 <memset>
 8011a6c:	e7f4      	b.n	8011a58 <_calloc_r+0x16>
	...

08011a70 <_free_r>:
 8011a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a72:	2900      	cmp	r1, #0
 8011a74:	d044      	beq.n	8011b00 <_free_r+0x90>
 8011a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a7a:	9001      	str	r0, [sp, #4]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8011a82:	bfb8      	it	lt
 8011a84:	18e4      	addlt	r4, r4, r3
 8011a86:	f000 fe75 	bl	8012774 <__malloc_lock>
 8011a8a:	4a1e      	ldr	r2, [pc, #120]	; (8011b04 <_free_r+0x94>)
 8011a8c:	9801      	ldr	r0, [sp, #4]
 8011a8e:	6813      	ldr	r3, [r2, #0]
 8011a90:	b933      	cbnz	r3, 8011aa0 <_free_r+0x30>
 8011a92:	6063      	str	r3, [r4, #4]
 8011a94:	6014      	str	r4, [r2, #0]
 8011a96:	b003      	add	sp, #12
 8011a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a9c:	f000 be70 	b.w	8012780 <__malloc_unlock>
 8011aa0:	42a3      	cmp	r3, r4
 8011aa2:	d908      	bls.n	8011ab6 <_free_r+0x46>
 8011aa4:	6825      	ldr	r5, [r4, #0]
 8011aa6:	1961      	adds	r1, r4, r5
 8011aa8:	428b      	cmp	r3, r1
 8011aaa:	bf01      	itttt	eq
 8011aac:	6819      	ldreq	r1, [r3, #0]
 8011aae:	685b      	ldreq	r3, [r3, #4]
 8011ab0:	1949      	addeq	r1, r1, r5
 8011ab2:	6021      	streq	r1, [r4, #0]
 8011ab4:	e7ed      	b.n	8011a92 <_free_r+0x22>
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	b10b      	cbz	r3, 8011ac0 <_free_r+0x50>
 8011abc:	42a3      	cmp	r3, r4
 8011abe:	d9fa      	bls.n	8011ab6 <_free_r+0x46>
 8011ac0:	6811      	ldr	r1, [r2, #0]
 8011ac2:	1855      	adds	r5, r2, r1
 8011ac4:	42a5      	cmp	r5, r4
 8011ac6:	d10b      	bne.n	8011ae0 <_free_r+0x70>
 8011ac8:	6824      	ldr	r4, [r4, #0]
 8011aca:	4421      	add	r1, r4
 8011acc:	1854      	adds	r4, r2, r1
 8011ace:	42a3      	cmp	r3, r4
 8011ad0:	6011      	str	r1, [r2, #0]
 8011ad2:	d1e0      	bne.n	8011a96 <_free_r+0x26>
 8011ad4:	681c      	ldr	r4, [r3, #0]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	6053      	str	r3, [r2, #4]
 8011ada:	4421      	add	r1, r4
 8011adc:	6011      	str	r1, [r2, #0]
 8011ade:	e7da      	b.n	8011a96 <_free_r+0x26>
 8011ae0:	d902      	bls.n	8011ae8 <_free_r+0x78>
 8011ae2:	230c      	movs	r3, #12
 8011ae4:	6003      	str	r3, [r0, #0]
 8011ae6:	e7d6      	b.n	8011a96 <_free_r+0x26>
 8011ae8:	6825      	ldr	r5, [r4, #0]
 8011aea:	1961      	adds	r1, r4, r5
 8011aec:	428b      	cmp	r3, r1
 8011aee:	bf04      	itt	eq
 8011af0:	6819      	ldreq	r1, [r3, #0]
 8011af2:	685b      	ldreq	r3, [r3, #4]
 8011af4:	6063      	str	r3, [r4, #4]
 8011af6:	bf04      	itt	eq
 8011af8:	1949      	addeq	r1, r1, r5
 8011afa:	6021      	streq	r1, [r4, #0]
 8011afc:	6054      	str	r4, [r2, #4]
 8011afe:	e7ca      	b.n	8011a96 <_free_r+0x26>
 8011b00:	b003      	add	sp, #12
 8011b02:	bd30      	pop	{r4, r5, pc}
 8011b04:	2001b760 	.word	0x2001b760

08011b08 <sbrk_aligned>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	4e0e      	ldr	r6, [pc, #56]	; (8011b44 <sbrk_aligned+0x3c>)
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	6831      	ldr	r1, [r6, #0]
 8011b10:	4605      	mov	r5, r0
 8011b12:	b911      	cbnz	r1, 8011b1a <sbrk_aligned+0x12>
 8011b14:	f000 fb4c 	bl	80121b0 <_sbrk_r>
 8011b18:	6030      	str	r0, [r6, #0]
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f000 fb47 	bl	80121b0 <_sbrk_r>
 8011b22:	1c43      	adds	r3, r0, #1
 8011b24:	d00a      	beq.n	8011b3c <sbrk_aligned+0x34>
 8011b26:	1cc4      	adds	r4, r0, #3
 8011b28:	f024 0403 	bic.w	r4, r4, #3
 8011b2c:	42a0      	cmp	r0, r4
 8011b2e:	d007      	beq.n	8011b40 <sbrk_aligned+0x38>
 8011b30:	1a21      	subs	r1, r4, r0
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 fb3c 	bl	80121b0 <_sbrk_r>
 8011b38:	3001      	adds	r0, #1
 8011b3a:	d101      	bne.n	8011b40 <sbrk_aligned+0x38>
 8011b3c:	f04f 34ff 	mov.w	r4, #4294967295
 8011b40:	4620      	mov	r0, r4
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	2001b764 	.word	0x2001b764

08011b48 <_malloc_r>:
 8011b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4c:	1ccd      	adds	r5, r1, #3
 8011b4e:	f025 0503 	bic.w	r5, r5, #3
 8011b52:	3508      	adds	r5, #8
 8011b54:	2d0c      	cmp	r5, #12
 8011b56:	bf38      	it	cc
 8011b58:	250c      	movcc	r5, #12
 8011b5a:	2d00      	cmp	r5, #0
 8011b5c:	4607      	mov	r7, r0
 8011b5e:	db01      	blt.n	8011b64 <_malloc_r+0x1c>
 8011b60:	42a9      	cmp	r1, r5
 8011b62:	d905      	bls.n	8011b70 <_malloc_r+0x28>
 8011b64:	230c      	movs	r3, #12
 8011b66:	603b      	str	r3, [r7, #0]
 8011b68:	2600      	movs	r6, #0
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b70:	4e2e      	ldr	r6, [pc, #184]	; (8011c2c <_malloc_r+0xe4>)
 8011b72:	f000 fdff 	bl	8012774 <__malloc_lock>
 8011b76:	6833      	ldr	r3, [r6, #0]
 8011b78:	461c      	mov	r4, r3
 8011b7a:	bb34      	cbnz	r4, 8011bca <_malloc_r+0x82>
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	4638      	mov	r0, r7
 8011b80:	f7ff ffc2 	bl	8011b08 <sbrk_aligned>
 8011b84:	1c43      	adds	r3, r0, #1
 8011b86:	4604      	mov	r4, r0
 8011b88:	d14d      	bne.n	8011c26 <_malloc_r+0xde>
 8011b8a:	6834      	ldr	r4, [r6, #0]
 8011b8c:	4626      	mov	r6, r4
 8011b8e:	2e00      	cmp	r6, #0
 8011b90:	d140      	bne.n	8011c14 <_malloc_r+0xcc>
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	4631      	mov	r1, r6
 8011b96:	4638      	mov	r0, r7
 8011b98:	eb04 0803 	add.w	r8, r4, r3
 8011b9c:	f000 fb08 	bl	80121b0 <_sbrk_r>
 8011ba0:	4580      	cmp	r8, r0
 8011ba2:	d13a      	bne.n	8011c1a <_malloc_r+0xd2>
 8011ba4:	6821      	ldr	r1, [r4, #0]
 8011ba6:	3503      	adds	r5, #3
 8011ba8:	1a6d      	subs	r5, r5, r1
 8011baa:	f025 0503 	bic.w	r5, r5, #3
 8011bae:	3508      	adds	r5, #8
 8011bb0:	2d0c      	cmp	r5, #12
 8011bb2:	bf38      	it	cc
 8011bb4:	250c      	movcc	r5, #12
 8011bb6:	4629      	mov	r1, r5
 8011bb8:	4638      	mov	r0, r7
 8011bba:	f7ff ffa5 	bl	8011b08 <sbrk_aligned>
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	d02b      	beq.n	8011c1a <_malloc_r+0xd2>
 8011bc2:	6823      	ldr	r3, [r4, #0]
 8011bc4:	442b      	add	r3, r5
 8011bc6:	6023      	str	r3, [r4, #0]
 8011bc8:	e00e      	b.n	8011be8 <_malloc_r+0xa0>
 8011bca:	6822      	ldr	r2, [r4, #0]
 8011bcc:	1b52      	subs	r2, r2, r5
 8011bce:	d41e      	bmi.n	8011c0e <_malloc_r+0xc6>
 8011bd0:	2a0b      	cmp	r2, #11
 8011bd2:	d916      	bls.n	8011c02 <_malloc_r+0xba>
 8011bd4:	1961      	adds	r1, r4, r5
 8011bd6:	42a3      	cmp	r3, r4
 8011bd8:	6025      	str	r5, [r4, #0]
 8011bda:	bf18      	it	ne
 8011bdc:	6059      	strne	r1, [r3, #4]
 8011bde:	6863      	ldr	r3, [r4, #4]
 8011be0:	bf08      	it	eq
 8011be2:	6031      	streq	r1, [r6, #0]
 8011be4:	5162      	str	r2, [r4, r5]
 8011be6:	604b      	str	r3, [r1, #4]
 8011be8:	4638      	mov	r0, r7
 8011bea:	f104 060b 	add.w	r6, r4, #11
 8011bee:	f000 fdc7 	bl	8012780 <__malloc_unlock>
 8011bf2:	f026 0607 	bic.w	r6, r6, #7
 8011bf6:	1d23      	adds	r3, r4, #4
 8011bf8:	1af2      	subs	r2, r6, r3
 8011bfa:	d0b6      	beq.n	8011b6a <_malloc_r+0x22>
 8011bfc:	1b9b      	subs	r3, r3, r6
 8011bfe:	50a3      	str	r3, [r4, r2]
 8011c00:	e7b3      	b.n	8011b6a <_malloc_r+0x22>
 8011c02:	6862      	ldr	r2, [r4, #4]
 8011c04:	42a3      	cmp	r3, r4
 8011c06:	bf0c      	ite	eq
 8011c08:	6032      	streq	r2, [r6, #0]
 8011c0a:	605a      	strne	r2, [r3, #4]
 8011c0c:	e7ec      	b.n	8011be8 <_malloc_r+0xa0>
 8011c0e:	4623      	mov	r3, r4
 8011c10:	6864      	ldr	r4, [r4, #4]
 8011c12:	e7b2      	b.n	8011b7a <_malloc_r+0x32>
 8011c14:	4634      	mov	r4, r6
 8011c16:	6876      	ldr	r6, [r6, #4]
 8011c18:	e7b9      	b.n	8011b8e <_malloc_r+0x46>
 8011c1a:	230c      	movs	r3, #12
 8011c1c:	603b      	str	r3, [r7, #0]
 8011c1e:	4638      	mov	r0, r7
 8011c20:	f000 fdae 	bl	8012780 <__malloc_unlock>
 8011c24:	e7a1      	b.n	8011b6a <_malloc_r+0x22>
 8011c26:	6025      	str	r5, [r4, #0]
 8011c28:	e7de      	b.n	8011be8 <_malloc_r+0xa0>
 8011c2a:	bf00      	nop
 8011c2c:	2001b760 	.word	0x2001b760

08011c30 <__ssputs_r>:
 8011c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c34:	688e      	ldr	r6, [r1, #8]
 8011c36:	429e      	cmp	r6, r3
 8011c38:	4682      	mov	sl, r0
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	4690      	mov	r8, r2
 8011c3e:	461f      	mov	r7, r3
 8011c40:	d838      	bhi.n	8011cb4 <__ssputs_r+0x84>
 8011c42:	898a      	ldrh	r2, [r1, #12]
 8011c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c48:	d032      	beq.n	8011cb0 <__ssputs_r+0x80>
 8011c4a:	6825      	ldr	r5, [r4, #0]
 8011c4c:	6909      	ldr	r1, [r1, #16]
 8011c4e:	eba5 0901 	sub.w	r9, r5, r1
 8011c52:	6965      	ldr	r5, [r4, #20]
 8011c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	444b      	add	r3, r9
 8011c60:	106d      	asrs	r5, r5, #1
 8011c62:	429d      	cmp	r5, r3
 8011c64:	bf38      	it	cc
 8011c66:	461d      	movcc	r5, r3
 8011c68:	0553      	lsls	r3, r2, #21
 8011c6a:	d531      	bpl.n	8011cd0 <__ssputs_r+0xa0>
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ff ff6b 	bl	8011b48 <_malloc_r>
 8011c72:	4606      	mov	r6, r0
 8011c74:	b950      	cbnz	r0, 8011c8c <__ssputs_r+0x5c>
 8011c76:	230c      	movs	r3, #12
 8011c78:	f8ca 3000 	str.w	r3, [sl]
 8011c7c:	89a3      	ldrh	r3, [r4, #12]
 8011c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c82:	81a3      	strh	r3, [r4, #12]
 8011c84:	f04f 30ff 	mov.w	r0, #4294967295
 8011c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c8c:	6921      	ldr	r1, [r4, #16]
 8011c8e:	464a      	mov	r2, r9
 8011c90:	f7fc fbf2 	bl	800e478 <memcpy>
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c9e:	81a3      	strh	r3, [r4, #12]
 8011ca0:	6126      	str	r6, [r4, #16]
 8011ca2:	6165      	str	r5, [r4, #20]
 8011ca4:	444e      	add	r6, r9
 8011ca6:	eba5 0509 	sub.w	r5, r5, r9
 8011caa:	6026      	str	r6, [r4, #0]
 8011cac:	60a5      	str	r5, [r4, #8]
 8011cae:	463e      	mov	r6, r7
 8011cb0:	42be      	cmp	r6, r7
 8011cb2:	d900      	bls.n	8011cb6 <__ssputs_r+0x86>
 8011cb4:	463e      	mov	r6, r7
 8011cb6:	6820      	ldr	r0, [r4, #0]
 8011cb8:	4632      	mov	r2, r6
 8011cba:	4641      	mov	r1, r8
 8011cbc:	f000 fd40 	bl	8012740 <memmove>
 8011cc0:	68a3      	ldr	r3, [r4, #8]
 8011cc2:	1b9b      	subs	r3, r3, r6
 8011cc4:	60a3      	str	r3, [r4, #8]
 8011cc6:	6823      	ldr	r3, [r4, #0]
 8011cc8:	4433      	add	r3, r6
 8011cca:	6023      	str	r3, [r4, #0]
 8011ccc:	2000      	movs	r0, #0
 8011cce:	e7db      	b.n	8011c88 <__ssputs_r+0x58>
 8011cd0:	462a      	mov	r2, r5
 8011cd2:	f000 fd5b 	bl	801278c <_realloc_r>
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d1e1      	bne.n	8011ca0 <__ssputs_r+0x70>
 8011cdc:	6921      	ldr	r1, [r4, #16]
 8011cde:	4650      	mov	r0, sl
 8011ce0:	f7ff fec6 	bl	8011a70 <_free_r>
 8011ce4:	e7c7      	b.n	8011c76 <__ssputs_r+0x46>
	...

08011ce8 <_svfiprintf_r>:
 8011ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cec:	4698      	mov	r8, r3
 8011cee:	898b      	ldrh	r3, [r1, #12]
 8011cf0:	061b      	lsls	r3, r3, #24
 8011cf2:	b09d      	sub	sp, #116	; 0x74
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	460d      	mov	r5, r1
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	d50e      	bpl.n	8011d1a <_svfiprintf_r+0x32>
 8011cfc:	690b      	ldr	r3, [r1, #16]
 8011cfe:	b963      	cbnz	r3, 8011d1a <_svfiprintf_r+0x32>
 8011d00:	2140      	movs	r1, #64	; 0x40
 8011d02:	f7ff ff21 	bl	8011b48 <_malloc_r>
 8011d06:	6028      	str	r0, [r5, #0]
 8011d08:	6128      	str	r0, [r5, #16]
 8011d0a:	b920      	cbnz	r0, 8011d16 <_svfiprintf_r+0x2e>
 8011d0c:	230c      	movs	r3, #12
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	f04f 30ff 	mov.w	r0, #4294967295
 8011d14:	e0d1      	b.n	8011eba <_svfiprintf_r+0x1d2>
 8011d16:	2340      	movs	r3, #64	; 0x40
 8011d18:	616b      	str	r3, [r5, #20]
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011d1e:	2320      	movs	r3, #32
 8011d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d28:	2330      	movs	r3, #48	; 0x30
 8011d2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011ed4 <_svfiprintf_r+0x1ec>
 8011d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d32:	f04f 0901 	mov.w	r9, #1
 8011d36:	4623      	mov	r3, r4
 8011d38:	469a      	mov	sl, r3
 8011d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d3e:	b10a      	cbz	r2, 8011d44 <_svfiprintf_r+0x5c>
 8011d40:	2a25      	cmp	r2, #37	; 0x25
 8011d42:	d1f9      	bne.n	8011d38 <_svfiprintf_r+0x50>
 8011d44:	ebba 0b04 	subs.w	fp, sl, r4
 8011d48:	d00b      	beq.n	8011d62 <_svfiprintf_r+0x7a>
 8011d4a:	465b      	mov	r3, fp
 8011d4c:	4622      	mov	r2, r4
 8011d4e:	4629      	mov	r1, r5
 8011d50:	4638      	mov	r0, r7
 8011d52:	f7ff ff6d 	bl	8011c30 <__ssputs_r>
 8011d56:	3001      	adds	r0, #1
 8011d58:	f000 80aa 	beq.w	8011eb0 <_svfiprintf_r+0x1c8>
 8011d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d5e:	445a      	add	r2, fp
 8011d60:	9209      	str	r2, [sp, #36]	; 0x24
 8011d62:	f89a 3000 	ldrb.w	r3, [sl]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 80a2 	beq.w	8011eb0 <_svfiprintf_r+0x1c8>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d76:	f10a 0a01 	add.w	sl, sl, #1
 8011d7a:	9304      	str	r3, [sp, #16]
 8011d7c:	9307      	str	r3, [sp, #28]
 8011d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d82:	931a      	str	r3, [sp, #104]	; 0x68
 8011d84:	4654      	mov	r4, sl
 8011d86:	2205      	movs	r2, #5
 8011d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d8c:	4851      	ldr	r0, [pc, #324]	; (8011ed4 <_svfiprintf_r+0x1ec>)
 8011d8e:	f7ee faa7 	bl	80002e0 <memchr>
 8011d92:	9a04      	ldr	r2, [sp, #16]
 8011d94:	b9d8      	cbnz	r0, 8011dce <_svfiprintf_r+0xe6>
 8011d96:	06d0      	lsls	r0, r2, #27
 8011d98:	bf44      	itt	mi
 8011d9a:	2320      	movmi	r3, #32
 8011d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011da0:	0711      	lsls	r1, r2, #28
 8011da2:	bf44      	itt	mi
 8011da4:	232b      	movmi	r3, #43	; 0x2b
 8011da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011daa:	f89a 3000 	ldrb.w	r3, [sl]
 8011dae:	2b2a      	cmp	r3, #42	; 0x2a
 8011db0:	d015      	beq.n	8011dde <_svfiprintf_r+0xf6>
 8011db2:	9a07      	ldr	r2, [sp, #28]
 8011db4:	4654      	mov	r4, sl
 8011db6:	2000      	movs	r0, #0
 8011db8:	f04f 0c0a 	mov.w	ip, #10
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dc2:	3b30      	subs	r3, #48	; 0x30
 8011dc4:	2b09      	cmp	r3, #9
 8011dc6:	d94e      	bls.n	8011e66 <_svfiprintf_r+0x17e>
 8011dc8:	b1b0      	cbz	r0, 8011df8 <_svfiprintf_r+0x110>
 8011dca:	9207      	str	r2, [sp, #28]
 8011dcc:	e014      	b.n	8011df8 <_svfiprintf_r+0x110>
 8011dce:	eba0 0308 	sub.w	r3, r0, r8
 8011dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	9304      	str	r3, [sp, #16]
 8011dda:	46a2      	mov	sl, r4
 8011ddc:	e7d2      	b.n	8011d84 <_svfiprintf_r+0x9c>
 8011dde:	9b03      	ldr	r3, [sp, #12]
 8011de0:	1d19      	adds	r1, r3, #4
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	9103      	str	r1, [sp, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	bfbb      	ittet	lt
 8011dea:	425b      	neglt	r3, r3
 8011dec:	f042 0202 	orrlt.w	r2, r2, #2
 8011df0:	9307      	strge	r3, [sp, #28]
 8011df2:	9307      	strlt	r3, [sp, #28]
 8011df4:	bfb8      	it	lt
 8011df6:	9204      	strlt	r2, [sp, #16]
 8011df8:	7823      	ldrb	r3, [r4, #0]
 8011dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8011dfc:	d10c      	bne.n	8011e18 <_svfiprintf_r+0x130>
 8011dfe:	7863      	ldrb	r3, [r4, #1]
 8011e00:	2b2a      	cmp	r3, #42	; 0x2a
 8011e02:	d135      	bne.n	8011e70 <_svfiprintf_r+0x188>
 8011e04:	9b03      	ldr	r3, [sp, #12]
 8011e06:	1d1a      	adds	r2, r3, #4
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	9203      	str	r2, [sp, #12]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	bfb8      	it	lt
 8011e10:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e14:	3402      	adds	r4, #2
 8011e16:	9305      	str	r3, [sp, #20]
 8011e18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ee4 <_svfiprintf_r+0x1fc>
 8011e1c:	7821      	ldrb	r1, [r4, #0]
 8011e1e:	2203      	movs	r2, #3
 8011e20:	4650      	mov	r0, sl
 8011e22:	f7ee fa5d 	bl	80002e0 <memchr>
 8011e26:	b140      	cbz	r0, 8011e3a <_svfiprintf_r+0x152>
 8011e28:	2340      	movs	r3, #64	; 0x40
 8011e2a:	eba0 000a 	sub.w	r0, r0, sl
 8011e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8011e32:	9b04      	ldr	r3, [sp, #16]
 8011e34:	4303      	orrs	r3, r0
 8011e36:	3401      	adds	r4, #1
 8011e38:	9304      	str	r3, [sp, #16]
 8011e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e3e:	4826      	ldr	r0, [pc, #152]	; (8011ed8 <_svfiprintf_r+0x1f0>)
 8011e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e44:	2206      	movs	r2, #6
 8011e46:	f7ee fa4b 	bl	80002e0 <memchr>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d038      	beq.n	8011ec0 <_svfiprintf_r+0x1d8>
 8011e4e:	4b23      	ldr	r3, [pc, #140]	; (8011edc <_svfiprintf_r+0x1f4>)
 8011e50:	bb1b      	cbnz	r3, 8011e9a <_svfiprintf_r+0x1b2>
 8011e52:	9b03      	ldr	r3, [sp, #12]
 8011e54:	3307      	adds	r3, #7
 8011e56:	f023 0307 	bic.w	r3, r3, #7
 8011e5a:	3308      	adds	r3, #8
 8011e5c:	9303      	str	r3, [sp, #12]
 8011e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e60:	4433      	add	r3, r6
 8011e62:	9309      	str	r3, [sp, #36]	; 0x24
 8011e64:	e767      	b.n	8011d36 <_svfiprintf_r+0x4e>
 8011e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	2001      	movs	r0, #1
 8011e6e:	e7a5      	b.n	8011dbc <_svfiprintf_r+0xd4>
 8011e70:	2300      	movs	r3, #0
 8011e72:	3401      	adds	r4, #1
 8011e74:	9305      	str	r3, [sp, #20]
 8011e76:	4619      	mov	r1, r3
 8011e78:	f04f 0c0a 	mov.w	ip, #10
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e82:	3a30      	subs	r2, #48	; 0x30
 8011e84:	2a09      	cmp	r2, #9
 8011e86:	d903      	bls.n	8011e90 <_svfiprintf_r+0x1a8>
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0c5      	beq.n	8011e18 <_svfiprintf_r+0x130>
 8011e8c:	9105      	str	r1, [sp, #20]
 8011e8e:	e7c3      	b.n	8011e18 <_svfiprintf_r+0x130>
 8011e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e94:	4604      	mov	r4, r0
 8011e96:	2301      	movs	r3, #1
 8011e98:	e7f0      	b.n	8011e7c <_svfiprintf_r+0x194>
 8011e9a:	ab03      	add	r3, sp, #12
 8011e9c:	9300      	str	r3, [sp, #0]
 8011e9e:	462a      	mov	r2, r5
 8011ea0:	4b0f      	ldr	r3, [pc, #60]	; (8011ee0 <_svfiprintf_r+0x1f8>)
 8011ea2:	a904      	add	r1, sp, #16
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	f7fc fb9d 	bl	800e5e4 <_printf_float>
 8011eaa:	1c42      	adds	r2, r0, #1
 8011eac:	4606      	mov	r6, r0
 8011eae:	d1d6      	bne.n	8011e5e <_svfiprintf_r+0x176>
 8011eb0:	89ab      	ldrh	r3, [r5, #12]
 8011eb2:	065b      	lsls	r3, r3, #25
 8011eb4:	f53f af2c 	bmi.w	8011d10 <_svfiprintf_r+0x28>
 8011eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011eba:	b01d      	add	sp, #116	; 0x74
 8011ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec0:	ab03      	add	r3, sp, #12
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	462a      	mov	r2, r5
 8011ec6:	4b06      	ldr	r3, [pc, #24]	; (8011ee0 <_svfiprintf_r+0x1f8>)
 8011ec8:	a904      	add	r1, sp, #16
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f7fc fe2e 	bl	800eb2c <_printf_i>
 8011ed0:	e7eb      	b.n	8011eaa <_svfiprintf_r+0x1c2>
 8011ed2:	bf00      	nop
 8011ed4:	0802c224 	.word	0x0802c224
 8011ed8:	0802c22e 	.word	0x0802c22e
 8011edc:	0800e5e5 	.word	0x0800e5e5
 8011ee0:	08011c31 	.word	0x08011c31
 8011ee4:	0802c22a 	.word	0x0802c22a

08011ee8 <__sfputc_r>:
 8011ee8:	6893      	ldr	r3, [r2, #8]
 8011eea:	3b01      	subs	r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	b410      	push	{r4}
 8011ef0:	6093      	str	r3, [r2, #8]
 8011ef2:	da08      	bge.n	8011f06 <__sfputc_r+0x1e>
 8011ef4:	6994      	ldr	r4, [r2, #24]
 8011ef6:	42a3      	cmp	r3, r4
 8011ef8:	db01      	blt.n	8011efe <__sfputc_r+0x16>
 8011efa:	290a      	cmp	r1, #10
 8011efc:	d103      	bne.n	8011f06 <__sfputc_r+0x1e>
 8011efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f02:	f000 b9c3 	b.w	801228c <__swbuf_r>
 8011f06:	6813      	ldr	r3, [r2, #0]
 8011f08:	1c58      	adds	r0, r3, #1
 8011f0a:	6010      	str	r0, [r2, #0]
 8011f0c:	7019      	strb	r1, [r3, #0]
 8011f0e:	4608      	mov	r0, r1
 8011f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f14:	4770      	bx	lr

08011f16 <__sfputs_r>:
 8011f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f18:	4606      	mov	r6, r0
 8011f1a:	460f      	mov	r7, r1
 8011f1c:	4614      	mov	r4, r2
 8011f1e:	18d5      	adds	r5, r2, r3
 8011f20:	42ac      	cmp	r4, r5
 8011f22:	d101      	bne.n	8011f28 <__sfputs_r+0x12>
 8011f24:	2000      	movs	r0, #0
 8011f26:	e007      	b.n	8011f38 <__sfputs_r+0x22>
 8011f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2c:	463a      	mov	r2, r7
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f7ff ffda 	bl	8011ee8 <__sfputc_r>
 8011f34:	1c43      	adds	r3, r0, #1
 8011f36:	d1f3      	bne.n	8011f20 <__sfputs_r+0xa>
 8011f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f3c <_vfiprintf_r>:
 8011f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	460d      	mov	r5, r1
 8011f42:	b09d      	sub	sp, #116	; 0x74
 8011f44:	4614      	mov	r4, r2
 8011f46:	4698      	mov	r8, r3
 8011f48:	4606      	mov	r6, r0
 8011f4a:	b118      	cbz	r0, 8011f54 <_vfiprintf_r+0x18>
 8011f4c:	6983      	ldr	r3, [r0, #24]
 8011f4e:	b90b      	cbnz	r3, 8011f54 <_vfiprintf_r+0x18>
 8011f50:	f7fe fc88 	bl	8010864 <__sinit>
 8011f54:	4b89      	ldr	r3, [pc, #548]	; (801217c <_vfiprintf_r+0x240>)
 8011f56:	429d      	cmp	r5, r3
 8011f58:	d11b      	bne.n	8011f92 <_vfiprintf_r+0x56>
 8011f5a:	6875      	ldr	r5, [r6, #4]
 8011f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f5e:	07d9      	lsls	r1, r3, #31
 8011f60:	d405      	bmi.n	8011f6e <_vfiprintf_r+0x32>
 8011f62:	89ab      	ldrh	r3, [r5, #12]
 8011f64:	059a      	lsls	r2, r3, #22
 8011f66:	d402      	bmi.n	8011f6e <_vfiprintf_r+0x32>
 8011f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f6a:	f7ff f88c 	bl	8011086 <__retarget_lock_acquire_recursive>
 8011f6e:	89ab      	ldrh	r3, [r5, #12]
 8011f70:	071b      	lsls	r3, r3, #28
 8011f72:	d501      	bpl.n	8011f78 <_vfiprintf_r+0x3c>
 8011f74:	692b      	ldr	r3, [r5, #16]
 8011f76:	b9eb      	cbnz	r3, 8011fb4 <_vfiprintf_r+0x78>
 8011f78:	4629      	mov	r1, r5
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f000 f9f8 	bl	8012370 <__swsetup_r>
 8011f80:	b1c0      	cbz	r0, 8011fb4 <_vfiprintf_r+0x78>
 8011f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f84:	07dc      	lsls	r4, r3, #31
 8011f86:	d50e      	bpl.n	8011fa6 <_vfiprintf_r+0x6a>
 8011f88:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8c:	b01d      	add	sp, #116	; 0x74
 8011f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f92:	4b7b      	ldr	r3, [pc, #492]	; (8012180 <_vfiprintf_r+0x244>)
 8011f94:	429d      	cmp	r5, r3
 8011f96:	d101      	bne.n	8011f9c <_vfiprintf_r+0x60>
 8011f98:	68b5      	ldr	r5, [r6, #8]
 8011f9a:	e7df      	b.n	8011f5c <_vfiprintf_r+0x20>
 8011f9c:	4b79      	ldr	r3, [pc, #484]	; (8012184 <_vfiprintf_r+0x248>)
 8011f9e:	429d      	cmp	r5, r3
 8011fa0:	bf08      	it	eq
 8011fa2:	68f5      	ldreq	r5, [r6, #12]
 8011fa4:	e7da      	b.n	8011f5c <_vfiprintf_r+0x20>
 8011fa6:	89ab      	ldrh	r3, [r5, #12]
 8011fa8:	0598      	lsls	r0, r3, #22
 8011faa:	d4ed      	bmi.n	8011f88 <_vfiprintf_r+0x4c>
 8011fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fae:	f7ff f86b 	bl	8011088 <__retarget_lock_release_recursive>
 8011fb2:	e7e9      	b.n	8011f88 <_vfiprintf_r+0x4c>
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8011fb8:	2320      	movs	r3, #32
 8011fba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fc2:	2330      	movs	r3, #48	; 0x30
 8011fc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012188 <_vfiprintf_r+0x24c>
 8011fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fcc:	f04f 0901 	mov.w	r9, #1
 8011fd0:	4623      	mov	r3, r4
 8011fd2:	469a      	mov	sl, r3
 8011fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fd8:	b10a      	cbz	r2, 8011fde <_vfiprintf_r+0xa2>
 8011fda:	2a25      	cmp	r2, #37	; 0x25
 8011fdc:	d1f9      	bne.n	8011fd2 <_vfiprintf_r+0x96>
 8011fde:	ebba 0b04 	subs.w	fp, sl, r4
 8011fe2:	d00b      	beq.n	8011ffc <_vfiprintf_r+0xc0>
 8011fe4:	465b      	mov	r3, fp
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	4629      	mov	r1, r5
 8011fea:	4630      	mov	r0, r6
 8011fec:	f7ff ff93 	bl	8011f16 <__sfputs_r>
 8011ff0:	3001      	adds	r0, #1
 8011ff2:	f000 80aa 	beq.w	801214a <_vfiprintf_r+0x20e>
 8011ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ff8:	445a      	add	r2, fp
 8011ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8011ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8012000:	2b00      	cmp	r3, #0
 8012002:	f000 80a2 	beq.w	801214a <_vfiprintf_r+0x20e>
 8012006:	2300      	movs	r3, #0
 8012008:	f04f 32ff 	mov.w	r2, #4294967295
 801200c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012010:	f10a 0a01 	add.w	sl, sl, #1
 8012014:	9304      	str	r3, [sp, #16]
 8012016:	9307      	str	r3, [sp, #28]
 8012018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801201c:	931a      	str	r3, [sp, #104]	; 0x68
 801201e:	4654      	mov	r4, sl
 8012020:	2205      	movs	r2, #5
 8012022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012026:	4858      	ldr	r0, [pc, #352]	; (8012188 <_vfiprintf_r+0x24c>)
 8012028:	f7ee f95a 	bl	80002e0 <memchr>
 801202c:	9a04      	ldr	r2, [sp, #16]
 801202e:	b9d8      	cbnz	r0, 8012068 <_vfiprintf_r+0x12c>
 8012030:	06d1      	lsls	r1, r2, #27
 8012032:	bf44      	itt	mi
 8012034:	2320      	movmi	r3, #32
 8012036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801203a:	0713      	lsls	r3, r2, #28
 801203c:	bf44      	itt	mi
 801203e:	232b      	movmi	r3, #43	; 0x2b
 8012040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012044:	f89a 3000 	ldrb.w	r3, [sl]
 8012048:	2b2a      	cmp	r3, #42	; 0x2a
 801204a:	d015      	beq.n	8012078 <_vfiprintf_r+0x13c>
 801204c:	9a07      	ldr	r2, [sp, #28]
 801204e:	4654      	mov	r4, sl
 8012050:	2000      	movs	r0, #0
 8012052:	f04f 0c0a 	mov.w	ip, #10
 8012056:	4621      	mov	r1, r4
 8012058:	f811 3b01 	ldrb.w	r3, [r1], #1
 801205c:	3b30      	subs	r3, #48	; 0x30
 801205e:	2b09      	cmp	r3, #9
 8012060:	d94e      	bls.n	8012100 <_vfiprintf_r+0x1c4>
 8012062:	b1b0      	cbz	r0, 8012092 <_vfiprintf_r+0x156>
 8012064:	9207      	str	r2, [sp, #28]
 8012066:	e014      	b.n	8012092 <_vfiprintf_r+0x156>
 8012068:	eba0 0308 	sub.w	r3, r0, r8
 801206c:	fa09 f303 	lsl.w	r3, r9, r3
 8012070:	4313      	orrs	r3, r2
 8012072:	9304      	str	r3, [sp, #16]
 8012074:	46a2      	mov	sl, r4
 8012076:	e7d2      	b.n	801201e <_vfiprintf_r+0xe2>
 8012078:	9b03      	ldr	r3, [sp, #12]
 801207a:	1d19      	adds	r1, r3, #4
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	9103      	str	r1, [sp, #12]
 8012080:	2b00      	cmp	r3, #0
 8012082:	bfbb      	ittet	lt
 8012084:	425b      	neglt	r3, r3
 8012086:	f042 0202 	orrlt.w	r2, r2, #2
 801208a:	9307      	strge	r3, [sp, #28]
 801208c:	9307      	strlt	r3, [sp, #28]
 801208e:	bfb8      	it	lt
 8012090:	9204      	strlt	r2, [sp, #16]
 8012092:	7823      	ldrb	r3, [r4, #0]
 8012094:	2b2e      	cmp	r3, #46	; 0x2e
 8012096:	d10c      	bne.n	80120b2 <_vfiprintf_r+0x176>
 8012098:	7863      	ldrb	r3, [r4, #1]
 801209a:	2b2a      	cmp	r3, #42	; 0x2a
 801209c:	d135      	bne.n	801210a <_vfiprintf_r+0x1ce>
 801209e:	9b03      	ldr	r3, [sp, #12]
 80120a0:	1d1a      	adds	r2, r3, #4
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	9203      	str	r2, [sp, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	bfb8      	it	lt
 80120aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80120ae:	3402      	adds	r4, #2
 80120b0:	9305      	str	r3, [sp, #20]
 80120b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012198 <_vfiprintf_r+0x25c>
 80120b6:	7821      	ldrb	r1, [r4, #0]
 80120b8:	2203      	movs	r2, #3
 80120ba:	4650      	mov	r0, sl
 80120bc:	f7ee f910 	bl	80002e0 <memchr>
 80120c0:	b140      	cbz	r0, 80120d4 <_vfiprintf_r+0x198>
 80120c2:	2340      	movs	r3, #64	; 0x40
 80120c4:	eba0 000a 	sub.w	r0, r0, sl
 80120c8:	fa03 f000 	lsl.w	r0, r3, r0
 80120cc:	9b04      	ldr	r3, [sp, #16]
 80120ce:	4303      	orrs	r3, r0
 80120d0:	3401      	adds	r4, #1
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d8:	482c      	ldr	r0, [pc, #176]	; (801218c <_vfiprintf_r+0x250>)
 80120da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120de:	2206      	movs	r2, #6
 80120e0:	f7ee f8fe 	bl	80002e0 <memchr>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d03f      	beq.n	8012168 <_vfiprintf_r+0x22c>
 80120e8:	4b29      	ldr	r3, [pc, #164]	; (8012190 <_vfiprintf_r+0x254>)
 80120ea:	bb1b      	cbnz	r3, 8012134 <_vfiprintf_r+0x1f8>
 80120ec:	9b03      	ldr	r3, [sp, #12]
 80120ee:	3307      	adds	r3, #7
 80120f0:	f023 0307 	bic.w	r3, r3, #7
 80120f4:	3308      	adds	r3, #8
 80120f6:	9303      	str	r3, [sp, #12]
 80120f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120fa:	443b      	add	r3, r7
 80120fc:	9309      	str	r3, [sp, #36]	; 0x24
 80120fe:	e767      	b.n	8011fd0 <_vfiprintf_r+0x94>
 8012100:	fb0c 3202 	mla	r2, ip, r2, r3
 8012104:	460c      	mov	r4, r1
 8012106:	2001      	movs	r0, #1
 8012108:	e7a5      	b.n	8012056 <_vfiprintf_r+0x11a>
 801210a:	2300      	movs	r3, #0
 801210c:	3401      	adds	r4, #1
 801210e:	9305      	str	r3, [sp, #20]
 8012110:	4619      	mov	r1, r3
 8012112:	f04f 0c0a 	mov.w	ip, #10
 8012116:	4620      	mov	r0, r4
 8012118:	f810 2b01 	ldrb.w	r2, [r0], #1
 801211c:	3a30      	subs	r2, #48	; 0x30
 801211e:	2a09      	cmp	r2, #9
 8012120:	d903      	bls.n	801212a <_vfiprintf_r+0x1ee>
 8012122:	2b00      	cmp	r3, #0
 8012124:	d0c5      	beq.n	80120b2 <_vfiprintf_r+0x176>
 8012126:	9105      	str	r1, [sp, #20]
 8012128:	e7c3      	b.n	80120b2 <_vfiprintf_r+0x176>
 801212a:	fb0c 2101 	mla	r1, ip, r1, r2
 801212e:	4604      	mov	r4, r0
 8012130:	2301      	movs	r3, #1
 8012132:	e7f0      	b.n	8012116 <_vfiprintf_r+0x1da>
 8012134:	ab03      	add	r3, sp, #12
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	462a      	mov	r2, r5
 801213a:	4b16      	ldr	r3, [pc, #88]	; (8012194 <_vfiprintf_r+0x258>)
 801213c:	a904      	add	r1, sp, #16
 801213e:	4630      	mov	r0, r6
 8012140:	f7fc fa50 	bl	800e5e4 <_printf_float>
 8012144:	4607      	mov	r7, r0
 8012146:	1c78      	adds	r0, r7, #1
 8012148:	d1d6      	bne.n	80120f8 <_vfiprintf_r+0x1bc>
 801214a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801214c:	07d9      	lsls	r1, r3, #31
 801214e:	d405      	bmi.n	801215c <_vfiprintf_r+0x220>
 8012150:	89ab      	ldrh	r3, [r5, #12]
 8012152:	059a      	lsls	r2, r3, #22
 8012154:	d402      	bmi.n	801215c <_vfiprintf_r+0x220>
 8012156:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012158:	f7fe ff96 	bl	8011088 <__retarget_lock_release_recursive>
 801215c:	89ab      	ldrh	r3, [r5, #12]
 801215e:	065b      	lsls	r3, r3, #25
 8012160:	f53f af12 	bmi.w	8011f88 <_vfiprintf_r+0x4c>
 8012164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012166:	e711      	b.n	8011f8c <_vfiprintf_r+0x50>
 8012168:	ab03      	add	r3, sp, #12
 801216a:	9300      	str	r3, [sp, #0]
 801216c:	462a      	mov	r2, r5
 801216e:	4b09      	ldr	r3, [pc, #36]	; (8012194 <_vfiprintf_r+0x258>)
 8012170:	a904      	add	r1, sp, #16
 8012172:	4630      	mov	r0, r6
 8012174:	f7fc fcda 	bl	800eb2c <_printf_i>
 8012178:	e7e4      	b.n	8012144 <_vfiprintf_r+0x208>
 801217a:	bf00      	nop
 801217c:	0802c010 	.word	0x0802c010
 8012180:	0802c030 	.word	0x0802c030
 8012184:	0802bff0 	.word	0x0802bff0
 8012188:	0802c224 	.word	0x0802c224
 801218c:	0802c22e 	.word	0x0802c22e
 8012190:	0800e5e5 	.word	0x0800e5e5
 8012194:	08011f17 	.word	0x08011f17
 8012198:	0802c22a 	.word	0x0802c22a
 801219c:	00000000 	.word	0x00000000

080121a0 <nan>:
 80121a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121a8 <nan+0x8>
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop
 80121a8:	00000000 	.word	0x00000000
 80121ac:	7ff80000 	.word	0x7ff80000

080121b0 <_sbrk_r>:
 80121b0:	b538      	push	{r3, r4, r5, lr}
 80121b2:	4d06      	ldr	r5, [pc, #24]	; (80121cc <_sbrk_r+0x1c>)
 80121b4:	2300      	movs	r3, #0
 80121b6:	4604      	mov	r4, r0
 80121b8:	4608      	mov	r0, r1
 80121ba:	602b      	str	r3, [r5, #0]
 80121bc:	f7f6 fe66 	bl	8008e8c <_sbrk>
 80121c0:	1c43      	adds	r3, r0, #1
 80121c2:	d102      	bne.n	80121ca <_sbrk_r+0x1a>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b103      	cbz	r3, 80121ca <_sbrk_r+0x1a>
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	bd38      	pop	{r3, r4, r5, pc}
 80121cc:	2001b768 	.word	0x2001b768

080121d0 <nanf>:
 80121d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80121d8 <nanf+0x8>
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	7fc00000 	.word	0x7fc00000

080121dc <__sread>:
 80121dc:	b510      	push	{r4, lr}
 80121de:	460c      	mov	r4, r1
 80121e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e4:	f000 fb02 	bl	80127ec <_read_r>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	bfab      	itete	ge
 80121ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80121ee:	89a3      	ldrhlt	r3, [r4, #12]
 80121f0:	181b      	addge	r3, r3, r0
 80121f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80121f6:	bfac      	ite	ge
 80121f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80121fa:	81a3      	strhlt	r3, [r4, #12]
 80121fc:	bd10      	pop	{r4, pc}

080121fe <__swrite>:
 80121fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012202:	461f      	mov	r7, r3
 8012204:	898b      	ldrh	r3, [r1, #12]
 8012206:	05db      	lsls	r3, r3, #23
 8012208:	4605      	mov	r5, r0
 801220a:	460c      	mov	r4, r1
 801220c:	4616      	mov	r6, r2
 801220e:	d505      	bpl.n	801221c <__swrite+0x1e>
 8012210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012214:	2302      	movs	r3, #2
 8012216:	2200      	movs	r2, #0
 8012218:	f000 fa1a 	bl	8012650 <_lseek_r>
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012226:	81a3      	strh	r3, [r4, #12]
 8012228:	4632      	mov	r2, r6
 801222a:	463b      	mov	r3, r7
 801222c:	4628      	mov	r0, r5
 801222e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012232:	f000 b88b 	b.w	801234c <_write_r>

08012236 <__sseek>:
 8012236:	b510      	push	{r4, lr}
 8012238:	460c      	mov	r4, r1
 801223a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801223e:	f000 fa07 	bl	8012650 <_lseek_r>
 8012242:	1c43      	adds	r3, r0, #1
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	bf15      	itete	ne
 8012248:	6560      	strne	r0, [r4, #84]	; 0x54
 801224a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801224e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012252:	81a3      	strheq	r3, [r4, #12]
 8012254:	bf18      	it	ne
 8012256:	81a3      	strhne	r3, [r4, #12]
 8012258:	bd10      	pop	{r4, pc}

0801225a <__sclose>:
 801225a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225e:	f000 b913 	b.w	8012488 <_close_r>

08012262 <strncmp>:
 8012262:	b510      	push	{r4, lr}
 8012264:	b17a      	cbz	r2, 8012286 <strncmp+0x24>
 8012266:	4603      	mov	r3, r0
 8012268:	3901      	subs	r1, #1
 801226a:	1884      	adds	r4, r0, r2
 801226c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012270:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012274:	4290      	cmp	r0, r2
 8012276:	d101      	bne.n	801227c <strncmp+0x1a>
 8012278:	42a3      	cmp	r3, r4
 801227a:	d101      	bne.n	8012280 <strncmp+0x1e>
 801227c:	1a80      	subs	r0, r0, r2
 801227e:	bd10      	pop	{r4, pc}
 8012280:	2800      	cmp	r0, #0
 8012282:	d1f3      	bne.n	801226c <strncmp+0xa>
 8012284:	e7fa      	b.n	801227c <strncmp+0x1a>
 8012286:	4610      	mov	r0, r2
 8012288:	e7f9      	b.n	801227e <strncmp+0x1c>
	...

0801228c <__swbuf_r>:
 801228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228e:	460e      	mov	r6, r1
 8012290:	4614      	mov	r4, r2
 8012292:	4605      	mov	r5, r0
 8012294:	b118      	cbz	r0, 801229e <__swbuf_r+0x12>
 8012296:	6983      	ldr	r3, [r0, #24]
 8012298:	b90b      	cbnz	r3, 801229e <__swbuf_r+0x12>
 801229a:	f7fe fae3 	bl	8010864 <__sinit>
 801229e:	4b21      	ldr	r3, [pc, #132]	; (8012324 <__swbuf_r+0x98>)
 80122a0:	429c      	cmp	r4, r3
 80122a2:	d12b      	bne.n	80122fc <__swbuf_r+0x70>
 80122a4:	686c      	ldr	r4, [r5, #4]
 80122a6:	69a3      	ldr	r3, [r4, #24]
 80122a8:	60a3      	str	r3, [r4, #8]
 80122aa:	89a3      	ldrh	r3, [r4, #12]
 80122ac:	071a      	lsls	r2, r3, #28
 80122ae:	d52f      	bpl.n	8012310 <__swbuf_r+0x84>
 80122b0:	6923      	ldr	r3, [r4, #16]
 80122b2:	b36b      	cbz	r3, 8012310 <__swbuf_r+0x84>
 80122b4:	6923      	ldr	r3, [r4, #16]
 80122b6:	6820      	ldr	r0, [r4, #0]
 80122b8:	1ac0      	subs	r0, r0, r3
 80122ba:	6963      	ldr	r3, [r4, #20]
 80122bc:	b2f6      	uxtb	r6, r6
 80122be:	4283      	cmp	r3, r0
 80122c0:	4637      	mov	r7, r6
 80122c2:	dc04      	bgt.n	80122ce <__swbuf_r+0x42>
 80122c4:	4621      	mov	r1, r4
 80122c6:	4628      	mov	r0, r5
 80122c8:	f000 f974 	bl	80125b4 <_fflush_r>
 80122cc:	bb30      	cbnz	r0, 801231c <__swbuf_r+0x90>
 80122ce:	68a3      	ldr	r3, [r4, #8]
 80122d0:	3b01      	subs	r3, #1
 80122d2:	60a3      	str	r3, [r4, #8]
 80122d4:	6823      	ldr	r3, [r4, #0]
 80122d6:	1c5a      	adds	r2, r3, #1
 80122d8:	6022      	str	r2, [r4, #0]
 80122da:	701e      	strb	r6, [r3, #0]
 80122dc:	6963      	ldr	r3, [r4, #20]
 80122de:	3001      	adds	r0, #1
 80122e0:	4283      	cmp	r3, r0
 80122e2:	d004      	beq.n	80122ee <__swbuf_r+0x62>
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	07db      	lsls	r3, r3, #31
 80122e8:	d506      	bpl.n	80122f8 <__swbuf_r+0x6c>
 80122ea:	2e0a      	cmp	r6, #10
 80122ec:	d104      	bne.n	80122f8 <__swbuf_r+0x6c>
 80122ee:	4621      	mov	r1, r4
 80122f0:	4628      	mov	r0, r5
 80122f2:	f000 f95f 	bl	80125b4 <_fflush_r>
 80122f6:	b988      	cbnz	r0, 801231c <__swbuf_r+0x90>
 80122f8:	4638      	mov	r0, r7
 80122fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122fc:	4b0a      	ldr	r3, [pc, #40]	; (8012328 <__swbuf_r+0x9c>)
 80122fe:	429c      	cmp	r4, r3
 8012300:	d101      	bne.n	8012306 <__swbuf_r+0x7a>
 8012302:	68ac      	ldr	r4, [r5, #8]
 8012304:	e7cf      	b.n	80122a6 <__swbuf_r+0x1a>
 8012306:	4b09      	ldr	r3, [pc, #36]	; (801232c <__swbuf_r+0xa0>)
 8012308:	429c      	cmp	r4, r3
 801230a:	bf08      	it	eq
 801230c:	68ec      	ldreq	r4, [r5, #12]
 801230e:	e7ca      	b.n	80122a6 <__swbuf_r+0x1a>
 8012310:	4621      	mov	r1, r4
 8012312:	4628      	mov	r0, r5
 8012314:	f000 f82c 	bl	8012370 <__swsetup_r>
 8012318:	2800      	cmp	r0, #0
 801231a:	d0cb      	beq.n	80122b4 <__swbuf_r+0x28>
 801231c:	f04f 37ff 	mov.w	r7, #4294967295
 8012320:	e7ea      	b.n	80122f8 <__swbuf_r+0x6c>
 8012322:	bf00      	nop
 8012324:	0802c010 	.word	0x0802c010
 8012328:	0802c030 	.word	0x0802c030
 801232c:	0802bff0 	.word	0x0802bff0

08012330 <__ascii_wctomb>:
 8012330:	b149      	cbz	r1, 8012346 <__ascii_wctomb+0x16>
 8012332:	2aff      	cmp	r2, #255	; 0xff
 8012334:	bf85      	ittet	hi
 8012336:	238a      	movhi	r3, #138	; 0x8a
 8012338:	6003      	strhi	r3, [r0, #0]
 801233a:	700a      	strbls	r2, [r1, #0]
 801233c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012340:	bf98      	it	ls
 8012342:	2001      	movls	r0, #1
 8012344:	4770      	bx	lr
 8012346:	4608      	mov	r0, r1
 8012348:	4770      	bx	lr
	...

0801234c <_write_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d07      	ldr	r5, [pc, #28]	; (801236c <_write_r+0x20>)
 8012350:	4604      	mov	r4, r0
 8012352:	4608      	mov	r0, r1
 8012354:	4611      	mov	r1, r2
 8012356:	2200      	movs	r2, #0
 8012358:	602a      	str	r2, [r5, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f7f6 fd87 	bl	8008e6e <_write>
 8012360:	1c43      	adds	r3, r0, #1
 8012362:	d102      	bne.n	801236a <_write_r+0x1e>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	b103      	cbz	r3, 801236a <_write_r+0x1e>
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	2001b768 	.word	0x2001b768

08012370 <__swsetup_r>:
 8012370:	4b32      	ldr	r3, [pc, #200]	; (801243c <__swsetup_r+0xcc>)
 8012372:	b570      	push	{r4, r5, r6, lr}
 8012374:	681d      	ldr	r5, [r3, #0]
 8012376:	4606      	mov	r6, r0
 8012378:	460c      	mov	r4, r1
 801237a:	b125      	cbz	r5, 8012386 <__swsetup_r+0x16>
 801237c:	69ab      	ldr	r3, [r5, #24]
 801237e:	b913      	cbnz	r3, 8012386 <__swsetup_r+0x16>
 8012380:	4628      	mov	r0, r5
 8012382:	f7fe fa6f 	bl	8010864 <__sinit>
 8012386:	4b2e      	ldr	r3, [pc, #184]	; (8012440 <__swsetup_r+0xd0>)
 8012388:	429c      	cmp	r4, r3
 801238a:	d10f      	bne.n	80123ac <__swsetup_r+0x3c>
 801238c:	686c      	ldr	r4, [r5, #4]
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012394:	0719      	lsls	r1, r3, #28
 8012396:	d42c      	bmi.n	80123f2 <__swsetup_r+0x82>
 8012398:	06dd      	lsls	r5, r3, #27
 801239a:	d411      	bmi.n	80123c0 <__swsetup_r+0x50>
 801239c:	2309      	movs	r3, #9
 801239e:	6033      	str	r3, [r6, #0]
 80123a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80123a4:	81a3      	strh	r3, [r4, #12]
 80123a6:	f04f 30ff 	mov.w	r0, #4294967295
 80123aa:	e03e      	b.n	801242a <__swsetup_r+0xba>
 80123ac:	4b25      	ldr	r3, [pc, #148]	; (8012444 <__swsetup_r+0xd4>)
 80123ae:	429c      	cmp	r4, r3
 80123b0:	d101      	bne.n	80123b6 <__swsetup_r+0x46>
 80123b2:	68ac      	ldr	r4, [r5, #8]
 80123b4:	e7eb      	b.n	801238e <__swsetup_r+0x1e>
 80123b6:	4b24      	ldr	r3, [pc, #144]	; (8012448 <__swsetup_r+0xd8>)
 80123b8:	429c      	cmp	r4, r3
 80123ba:	bf08      	it	eq
 80123bc:	68ec      	ldreq	r4, [r5, #12]
 80123be:	e7e6      	b.n	801238e <__swsetup_r+0x1e>
 80123c0:	0758      	lsls	r0, r3, #29
 80123c2:	d512      	bpl.n	80123ea <__swsetup_r+0x7a>
 80123c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123c6:	b141      	cbz	r1, 80123da <__swsetup_r+0x6a>
 80123c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123cc:	4299      	cmp	r1, r3
 80123ce:	d002      	beq.n	80123d6 <__swsetup_r+0x66>
 80123d0:	4630      	mov	r0, r6
 80123d2:	f7ff fb4d 	bl	8011a70 <_free_r>
 80123d6:	2300      	movs	r3, #0
 80123d8:	6363      	str	r3, [r4, #52]	; 0x34
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123e0:	81a3      	strh	r3, [r4, #12]
 80123e2:	2300      	movs	r3, #0
 80123e4:	6063      	str	r3, [r4, #4]
 80123e6:	6923      	ldr	r3, [r4, #16]
 80123e8:	6023      	str	r3, [r4, #0]
 80123ea:	89a3      	ldrh	r3, [r4, #12]
 80123ec:	f043 0308 	orr.w	r3, r3, #8
 80123f0:	81a3      	strh	r3, [r4, #12]
 80123f2:	6923      	ldr	r3, [r4, #16]
 80123f4:	b94b      	cbnz	r3, 801240a <__swsetup_r+0x9a>
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012400:	d003      	beq.n	801240a <__swsetup_r+0x9a>
 8012402:	4621      	mov	r1, r4
 8012404:	4630      	mov	r0, r6
 8012406:	f000 f95b 	bl	80126c0 <__smakebuf_r>
 801240a:	89a0      	ldrh	r0, [r4, #12]
 801240c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012410:	f010 0301 	ands.w	r3, r0, #1
 8012414:	d00a      	beq.n	801242c <__swsetup_r+0xbc>
 8012416:	2300      	movs	r3, #0
 8012418:	60a3      	str	r3, [r4, #8]
 801241a:	6963      	ldr	r3, [r4, #20]
 801241c:	425b      	negs	r3, r3
 801241e:	61a3      	str	r3, [r4, #24]
 8012420:	6923      	ldr	r3, [r4, #16]
 8012422:	b943      	cbnz	r3, 8012436 <__swsetup_r+0xc6>
 8012424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012428:	d1ba      	bne.n	80123a0 <__swsetup_r+0x30>
 801242a:	bd70      	pop	{r4, r5, r6, pc}
 801242c:	0781      	lsls	r1, r0, #30
 801242e:	bf58      	it	pl
 8012430:	6963      	ldrpl	r3, [r4, #20]
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	e7f4      	b.n	8012420 <__swsetup_r+0xb0>
 8012436:	2000      	movs	r0, #0
 8012438:	e7f7      	b.n	801242a <__swsetup_r+0xba>
 801243a:	bf00      	nop
 801243c:	2000059c 	.word	0x2000059c
 8012440:	0802c010 	.word	0x0802c010
 8012444:	0802c030 	.word	0x0802c030
 8012448:	0802bff0 	.word	0x0802bff0

0801244c <__assert_func>:
 801244c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801244e:	4614      	mov	r4, r2
 8012450:	461a      	mov	r2, r3
 8012452:	4b09      	ldr	r3, [pc, #36]	; (8012478 <__assert_func+0x2c>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4605      	mov	r5, r0
 8012458:	68d8      	ldr	r0, [r3, #12]
 801245a:	b14c      	cbz	r4, 8012470 <__assert_func+0x24>
 801245c:	4b07      	ldr	r3, [pc, #28]	; (801247c <__assert_func+0x30>)
 801245e:	9100      	str	r1, [sp, #0]
 8012460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012464:	4906      	ldr	r1, [pc, #24]	; (8012480 <__assert_func+0x34>)
 8012466:	462b      	mov	r3, r5
 8012468:	f000 f8e0 	bl	801262c <fiprintf>
 801246c:	f000 f9d0 	bl	8012810 <abort>
 8012470:	4b04      	ldr	r3, [pc, #16]	; (8012484 <__assert_func+0x38>)
 8012472:	461c      	mov	r4, r3
 8012474:	e7f3      	b.n	801245e <__assert_func+0x12>
 8012476:	bf00      	nop
 8012478:	2000059c 	.word	0x2000059c
 801247c:	0802c235 	.word	0x0802c235
 8012480:	0802c242 	.word	0x0802c242
 8012484:	080183bc 	.word	0x080183bc

08012488 <_close_r>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4d06      	ldr	r5, [pc, #24]	; (80124a4 <_close_r+0x1c>)
 801248c:	2300      	movs	r3, #0
 801248e:	4604      	mov	r4, r0
 8012490:	4608      	mov	r0, r1
 8012492:	602b      	str	r3, [r5, #0]
 8012494:	f7f6 fd14 	bl	8008ec0 <_close>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d102      	bne.n	80124a2 <_close_r+0x1a>
 801249c:	682b      	ldr	r3, [r5, #0]
 801249e:	b103      	cbz	r3, 80124a2 <_close_r+0x1a>
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	bd38      	pop	{r3, r4, r5, pc}
 80124a4:	2001b768 	.word	0x2001b768

080124a8 <__sflush_r>:
 80124a8:	898a      	ldrh	r2, [r1, #12]
 80124aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124ae:	4605      	mov	r5, r0
 80124b0:	0710      	lsls	r0, r2, #28
 80124b2:	460c      	mov	r4, r1
 80124b4:	d458      	bmi.n	8012568 <__sflush_r+0xc0>
 80124b6:	684b      	ldr	r3, [r1, #4]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	dc05      	bgt.n	80124c8 <__sflush_r+0x20>
 80124bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80124be:	2b00      	cmp	r3, #0
 80124c0:	dc02      	bgt.n	80124c8 <__sflush_r+0x20>
 80124c2:	2000      	movs	r0, #0
 80124c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	d0f9      	beq.n	80124c2 <__sflush_r+0x1a>
 80124ce:	2300      	movs	r3, #0
 80124d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80124d4:	682f      	ldr	r7, [r5, #0]
 80124d6:	602b      	str	r3, [r5, #0]
 80124d8:	d032      	beq.n	8012540 <__sflush_r+0x98>
 80124da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	075a      	lsls	r2, r3, #29
 80124e0:	d505      	bpl.n	80124ee <__sflush_r+0x46>
 80124e2:	6863      	ldr	r3, [r4, #4]
 80124e4:	1ac0      	subs	r0, r0, r3
 80124e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80124e8:	b10b      	cbz	r3, 80124ee <__sflush_r+0x46>
 80124ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80124ec:	1ac0      	subs	r0, r0, r3
 80124ee:	2300      	movs	r3, #0
 80124f0:	4602      	mov	r2, r0
 80124f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80124f4:	6a21      	ldr	r1, [r4, #32]
 80124f6:	4628      	mov	r0, r5
 80124f8:	47b0      	blx	r6
 80124fa:	1c43      	adds	r3, r0, #1
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	d106      	bne.n	801250e <__sflush_r+0x66>
 8012500:	6829      	ldr	r1, [r5, #0]
 8012502:	291d      	cmp	r1, #29
 8012504:	d82c      	bhi.n	8012560 <__sflush_r+0xb8>
 8012506:	4a2a      	ldr	r2, [pc, #168]	; (80125b0 <__sflush_r+0x108>)
 8012508:	40ca      	lsrs	r2, r1
 801250a:	07d6      	lsls	r6, r2, #31
 801250c:	d528      	bpl.n	8012560 <__sflush_r+0xb8>
 801250e:	2200      	movs	r2, #0
 8012510:	6062      	str	r2, [r4, #4]
 8012512:	04d9      	lsls	r1, r3, #19
 8012514:	6922      	ldr	r2, [r4, #16]
 8012516:	6022      	str	r2, [r4, #0]
 8012518:	d504      	bpl.n	8012524 <__sflush_r+0x7c>
 801251a:	1c42      	adds	r2, r0, #1
 801251c:	d101      	bne.n	8012522 <__sflush_r+0x7a>
 801251e:	682b      	ldr	r3, [r5, #0]
 8012520:	b903      	cbnz	r3, 8012524 <__sflush_r+0x7c>
 8012522:	6560      	str	r0, [r4, #84]	; 0x54
 8012524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012526:	602f      	str	r7, [r5, #0]
 8012528:	2900      	cmp	r1, #0
 801252a:	d0ca      	beq.n	80124c2 <__sflush_r+0x1a>
 801252c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012530:	4299      	cmp	r1, r3
 8012532:	d002      	beq.n	801253a <__sflush_r+0x92>
 8012534:	4628      	mov	r0, r5
 8012536:	f7ff fa9b 	bl	8011a70 <_free_r>
 801253a:	2000      	movs	r0, #0
 801253c:	6360      	str	r0, [r4, #52]	; 0x34
 801253e:	e7c1      	b.n	80124c4 <__sflush_r+0x1c>
 8012540:	6a21      	ldr	r1, [r4, #32]
 8012542:	2301      	movs	r3, #1
 8012544:	4628      	mov	r0, r5
 8012546:	47b0      	blx	r6
 8012548:	1c41      	adds	r1, r0, #1
 801254a:	d1c7      	bne.n	80124dc <__sflush_r+0x34>
 801254c:	682b      	ldr	r3, [r5, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d0c4      	beq.n	80124dc <__sflush_r+0x34>
 8012552:	2b1d      	cmp	r3, #29
 8012554:	d001      	beq.n	801255a <__sflush_r+0xb2>
 8012556:	2b16      	cmp	r3, #22
 8012558:	d101      	bne.n	801255e <__sflush_r+0xb6>
 801255a:	602f      	str	r7, [r5, #0]
 801255c:	e7b1      	b.n	80124c2 <__sflush_r+0x1a>
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012564:	81a3      	strh	r3, [r4, #12]
 8012566:	e7ad      	b.n	80124c4 <__sflush_r+0x1c>
 8012568:	690f      	ldr	r7, [r1, #16]
 801256a:	2f00      	cmp	r7, #0
 801256c:	d0a9      	beq.n	80124c2 <__sflush_r+0x1a>
 801256e:	0793      	lsls	r3, r2, #30
 8012570:	680e      	ldr	r6, [r1, #0]
 8012572:	bf08      	it	eq
 8012574:	694b      	ldreq	r3, [r1, #20]
 8012576:	600f      	str	r7, [r1, #0]
 8012578:	bf18      	it	ne
 801257a:	2300      	movne	r3, #0
 801257c:	eba6 0807 	sub.w	r8, r6, r7
 8012580:	608b      	str	r3, [r1, #8]
 8012582:	f1b8 0f00 	cmp.w	r8, #0
 8012586:	dd9c      	ble.n	80124c2 <__sflush_r+0x1a>
 8012588:	6a21      	ldr	r1, [r4, #32]
 801258a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801258c:	4643      	mov	r3, r8
 801258e:	463a      	mov	r2, r7
 8012590:	4628      	mov	r0, r5
 8012592:	47b0      	blx	r6
 8012594:	2800      	cmp	r0, #0
 8012596:	dc06      	bgt.n	80125a6 <__sflush_r+0xfe>
 8012598:	89a3      	ldrh	r3, [r4, #12]
 801259a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801259e:	81a3      	strh	r3, [r4, #12]
 80125a0:	f04f 30ff 	mov.w	r0, #4294967295
 80125a4:	e78e      	b.n	80124c4 <__sflush_r+0x1c>
 80125a6:	4407      	add	r7, r0
 80125a8:	eba8 0800 	sub.w	r8, r8, r0
 80125ac:	e7e9      	b.n	8012582 <__sflush_r+0xda>
 80125ae:	bf00      	nop
 80125b0:	20400001 	.word	0x20400001

080125b4 <_fflush_r>:
 80125b4:	b538      	push	{r3, r4, r5, lr}
 80125b6:	690b      	ldr	r3, [r1, #16]
 80125b8:	4605      	mov	r5, r0
 80125ba:	460c      	mov	r4, r1
 80125bc:	b913      	cbnz	r3, 80125c4 <_fflush_r+0x10>
 80125be:	2500      	movs	r5, #0
 80125c0:	4628      	mov	r0, r5
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	b118      	cbz	r0, 80125ce <_fflush_r+0x1a>
 80125c6:	6983      	ldr	r3, [r0, #24]
 80125c8:	b90b      	cbnz	r3, 80125ce <_fflush_r+0x1a>
 80125ca:	f7fe f94b 	bl	8010864 <__sinit>
 80125ce:	4b14      	ldr	r3, [pc, #80]	; (8012620 <_fflush_r+0x6c>)
 80125d0:	429c      	cmp	r4, r3
 80125d2:	d11b      	bne.n	801260c <_fflush_r+0x58>
 80125d4:	686c      	ldr	r4, [r5, #4]
 80125d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d0ef      	beq.n	80125be <_fflush_r+0xa>
 80125de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80125e0:	07d0      	lsls	r0, r2, #31
 80125e2:	d404      	bmi.n	80125ee <_fflush_r+0x3a>
 80125e4:	0599      	lsls	r1, r3, #22
 80125e6:	d402      	bmi.n	80125ee <_fflush_r+0x3a>
 80125e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125ea:	f7fe fd4c 	bl	8011086 <__retarget_lock_acquire_recursive>
 80125ee:	4628      	mov	r0, r5
 80125f0:	4621      	mov	r1, r4
 80125f2:	f7ff ff59 	bl	80124a8 <__sflush_r>
 80125f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125f8:	07da      	lsls	r2, r3, #31
 80125fa:	4605      	mov	r5, r0
 80125fc:	d4e0      	bmi.n	80125c0 <_fflush_r+0xc>
 80125fe:	89a3      	ldrh	r3, [r4, #12]
 8012600:	059b      	lsls	r3, r3, #22
 8012602:	d4dd      	bmi.n	80125c0 <_fflush_r+0xc>
 8012604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012606:	f7fe fd3f 	bl	8011088 <__retarget_lock_release_recursive>
 801260a:	e7d9      	b.n	80125c0 <_fflush_r+0xc>
 801260c:	4b05      	ldr	r3, [pc, #20]	; (8012624 <_fflush_r+0x70>)
 801260e:	429c      	cmp	r4, r3
 8012610:	d101      	bne.n	8012616 <_fflush_r+0x62>
 8012612:	68ac      	ldr	r4, [r5, #8]
 8012614:	e7df      	b.n	80125d6 <_fflush_r+0x22>
 8012616:	4b04      	ldr	r3, [pc, #16]	; (8012628 <_fflush_r+0x74>)
 8012618:	429c      	cmp	r4, r3
 801261a:	bf08      	it	eq
 801261c:	68ec      	ldreq	r4, [r5, #12]
 801261e:	e7da      	b.n	80125d6 <_fflush_r+0x22>
 8012620:	0802c010 	.word	0x0802c010
 8012624:	0802c030 	.word	0x0802c030
 8012628:	0802bff0 	.word	0x0802bff0

0801262c <fiprintf>:
 801262c:	b40e      	push	{r1, r2, r3}
 801262e:	b503      	push	{r0, r1, lr}
 8012630:	4601      	mov	r1, r0
 8012632:	ab03      	add	r3, sp, #12
 8012634:	4805      	ldr	r0, [pc, #20]	; (801264c <fiprintf+0x20>)
 8012636:	f853 2b04 	ldr.w	r2, [r3], #4
 801263a:	6800      	ldr	r0, [r0, #0]
 801263c:	9301      	str	r3, [sp, #4]
 801263e:	f7ff fc7d 	bl	8011f3c <_vfiprintf_r>
 8012642:	b002      	add	sp, #8
 8012644:	f85d eb04 	ldr.w	lr, [sp], #4
 8012648:	b003      	add	sp, #12
 801264a:	4770      	bx	lr
 801264c:	2000059c 	.word	0x2000059c

08012650 <_lseek_r>:
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	4d07      	ldr	r5, [pc, #28]	; (8012670 <_lseek_r+0x20>)
 8012654:	4604      	mov	r4, r0
 8012656:	4608      	mov	r0, r1
 8012658:	4611      	mov	r1, r2
 801265a:	2200      	movs	r2, #0
 801265c:	602a      	str	r2, [r5, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	f7f6 fc38 	bl	8008ed4 <_lseek>
 8012664:	1c43      	adds	r3, r0, #1
 8012666:	d102      	bne.n	801266e <_lseek_r+0x1e>
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	b103      	cbz	r3, 801266e <_lseek_r+0x1e>
 801266c:	6023      	str	r3, [r4, #0]
 801266e:	bd38      	pop	{r3, r4, r5, pc}
 8012670:	2001b768 	.word	0x2001b768

08012674 <__swhatbuf_r>:
 8012674:	b570      	push	{r4, r5, r6, lr}
 8012676:	460e      	mov	r6, r1
 8012678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801267c:	2900      	cmp	r1, #0
 801267e:	b096      	sub	sp, #88	; 0x58
 8012680:	4614      	mov	r4, r2
 8012682:	461d      	mov	r5, r3
 8012684:	da08      	bge.n	8012698 <__swhatbuf_r+0x24>
 8012686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801268a:	2200      	movs	r2, #0
 801268c:	602a      	str	r2, [r5, #0]
 801268e:	061a      	lsls	r2, r3, #24
 8012690:	d410      	bmi.n	80126b4 <__swhatbuf_r+0x40>
 8012692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012696:	e00e      	b.n	80126b6 <__swhatbuf_r+0x42>
 8012698:	466a      	mov	r2, sp
 801269a:	f000 f8c1 	bl	8012820 <_fstat_r>
 801269e:	2800      	cmp	r0, #0
 80126a0:	dbf1      	blt.n	8012686 <__swhatbuf_r+0x12>
 80126a2:	9a01      	ldr	r2, [sp, #4]
 80126a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126ac:	425a      	negs	r2, r3
 80126ae:	415a      	adcs	r2, r3
 80126b0:	602a      	str	r2, [r5, #0]
 80126b2:	e7ee      	b.n	8012692 <__swhatbuf_r+0x1e>
 80126b4:	2340      	movs	r3, #64	; 0x40
 80126b6:	2000      	movs	r0, #0
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	b016      	add	sp, #88	; 0x58
 80126bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080126c0 <__smakebuf_r>:
 80126c0:	898b      	ldrh	r3, [r1, #12]
 80126c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126c4:	079d      	lsls	r5, r3, #30
 80126c6:	4606      	mov	r6, r0
 80126c8:	460c      	mov	r4, r1
 80126ca:	d507      	bpl.n	80126dc <__smakebuf_r+0x1c>
 80126cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	6123      	str	r3, [r4, #16]
 80126d4:	2301      	movs	r3, #1
 80126d6:	6163      	str	r3, [r4, #20]
 80126d8:	b002      	add	sp, #8
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	ab01      	add	r3, sp, #4
 80126de:	466a      	mov	r2, sp
 80126e0:	f7ff ffc8 	bl	8012674 <__swhatbuf_r>
 80126e4:	9900      	ldr	r1, [sp, #0]
 80126e6:	4605      	mov	r5, r0
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7ff fa2d 	bl	8011b48 <_malloc_r>
 80126ee:	b948      	cbnz	r0, 8012704 <__smakebuf_r+0x44>
 80126f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126f4:	059a      	lsls	r2, r3, #22
 80126f6:	d4ef      	bmi.n	80126d8 <__smakebuf_r+0x18>
 80126f8:	f023 0303 	bic.w	r3, r3, #3
 80126fc:	f043 0302 	orr.w	r3, r3, #2
 8012700:	81a3      	strh	r3, [r4, #12]
 8012702:	e7e3      	b.n	80126cc <__smakebuf_r+0xc>
 8012704:	4b0d      	ldr	r3, [pc, #52]	; (801273c <__smakebuf_r+0x7c>)
 8012706:	62b3      	str	r3, [r6, #40]	; 0x28
 8012708:	89a3      	ldrh	r3, [r4, #12]
 801270a:	6020      	str	r0, [r4, #0]
 801270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012710:	81a3      	strh	r3, [r4, #12]
 8012712:	9b00      	ldr	r3, [sp, #0]
 8012714:	6163      	str	r3, [r4, #20]
 8012716:	9b01      	ldr	r3, [sp, #4]
 8012718:	6120      	str	r0, [r4, #16]
 801271a:	b15b      	cbz	r3, 8012734 <__smakebuf_r+0x74>
 801271c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012720:	4630      	mov	r0, r6
 8012722:	f000 f88f 	bl	8012844 <_isatty_r>
 8012726:	b128      	cbz	r0, 8012734 <__smakebuf_r+0x74>
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	f023 0303 	bic.w	r3, r3, #3
 801272e:	f043 0301 	orr.w	r3, r3, #1
 8012732:	81a3      	strh	r3, [r4, #12]
 8012734:	89a0      	ldrh	r0, [r4, #12]
 8012736:	4305      	orrs	r5, r0
 8012738:	81a5      	strh	r5, [r4, #12]
 801273a:	e7cd      	b.n	80126d8 <__smakebuf_r+0x18>
 801273c:	080107fd 	.word	0x080107fd

08012740 <memmove>:
 8012740:	4288      	cmp	r0, r1
 8012742:	b510      	push	{r4, lr}
 8012744:	eb01 0402 	add.w	r4, r1, r2
 8012748:	d902      	bls.n	8012750 <memmove+0x10>
 801274a:	4284      	cmp	r4, r0
 801274c:	4623      	mov	r3, r4
 801274e:	d807      	bhi.n	8012760 <memmove+0x20>
 8012750:	1e43      	subs	r3, r0, #1
 8012752:	42a1      	cmp	r1, r4
 8012754:	d008      	beq.n	8012768 <memmove+0x28>
 8012756:	f811 2b01 	ldrb.w	r2, [r1], #1
 801275a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801275e:	e7f8      	b.n	8012752 <memmove+0x12>
 8012760:	4402      	add	r2, r0
 8012762:	4601      	mov	r1, r0
 8012764:	428a      	cmp	r2, r1
 8012766:	d100      	bne.n	801276a <memmove+0x2a>
 8012768:	bd10      	pop	{r4, pc}
 801276a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801276e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012772:	e7f7      	b.n	8012764 <memmove+0x24>

08012774 <__malloc_lock>:
 8012774:	4801      	ldr	r0, [pc, #4]	; (801277c <__malloc_lock+0x8>)
 8012776:	f7fe bc86 	b.w	8011086 <__retarget_lock_acquire_recursive>
 801277a:	bf00      	nop
 801277c:	2001b75c 	.word	0x2001b75c

08012780 <__malloc_unlock>:
 8012780:	4801      	ldr	r0, [pc, #4]	; (8012788 <__malloc_unlock+0x8>)
 8012782:	f7fe bc81 	b.w	8011088 <__retarget_lock_release_recursive>
 8012786:	bf00      	nop
 8012788:	2001b75c 	.word	0x2001b75c

0801278c <_realloc_r>:
 801278c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012790:	4680      	mov	r8, r0
 8012792:	4614      	mov	r4, r2
 8012794:	460e      	mov	r6, r1
 8012796:	b921      	cbnz	r1, 80127a2 <_realloc_r+0x16>
 8012798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801279c:	4611      	mov	r1, r2
 801279e:	f7ff b9d3 	b.w	8011b48 <_malloc_r>
 80127a2:	b92a      	cbnz	r2, 80127b0 <_realloc_r+0x24>
 80127a4:	f7ff f964 	bl	8011a70 <_free_r>
 80127a8:	4625      	mov	r5, r4
 80127aa:	4628      	mov	r0, r5
 80127ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b0:	f000 f858 	bl	8012864 <_malloc_usable_size_r>
 80127b4:	4284      	cmp	r4, r0
 80127b6:	4607      	mov	r7, r0
 80127b8:	d802      	bhi.n	80127c0 <_realloc_r+0x34>
 80127ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127be:	d812      	bhi.n	80127e6 <_realloc_r+0x5a>
 80127c0:	4621      	mov	r1, r4
 80127c2:	4640      	mov	r0, r8
 80127c4:	f7ff f9c0 	bl	8011b48 <_malloc_r>
 80127c8:	4605      	mov	r5, r0
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d0ed      	beq.n	80127aa <_realloc_r+0x1e>
 80127ce:	42bc      	cmp	r4, r7
 80127d0:	4622      	mov	r2, r4
 80127d2:	4631      	mov	r1, r6
 80127d4:	bf28      	it	cs
 80127d6:	463a      	movcs	r2, r7
 80127d8:	f7fb fe4e 	bl	800e478 <memcpy>
 80127dc:	4631      	mov	r1, r6
 80127de:	4640      	mov	r0, r8
 80127e0:	f7ff f946 	bl	8011a70 <_free_r>
 80127e4:	e7e1      	b.n	80127aa <_realloc_r+0x1e>
 80127e6:	4635      	mov	r5, r6
 80127e8:	e7df      	b.n	80127aa <_realloc_r+0x1e>
	...

080127ec <_read_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4d07      	ldr	r5, [pc, #28]	; (801280c <_read_r+0x20>)
 80127f0:	4604      	mov	r4, r0
 80127f2:	4608      	mov	r0, r1
 80127f4:	4611      	mov	r1, r2
 80127f6:	2200      	movs	r2, #0
 80127f8:	602a      	str	r2, [r5, #0]
 80127fa:	461a      	mov	r2, r3
 80127fc:	f7f6 fb29 	bl	8008e52 <_read>
 8012800:	1c43      	adds	r3, r0, #1
 8012802:	d102      	bne.n	801280a <_read_r+0x1e>
 8012804:	682b      	ldr	r3, [r5, #0]
 8012806:	b103      	cbz	r3, 801280a <_read_r+0x1e>
 8012808:	6023      	str	r3, [r4, #0]
 801280a:	bd38      	pop	{r3, r4, r5, pc}
 801280c:	2001b768 	.word	0x2001b768

08012810 <abort>:
 8012810:	b508      	push	{r3, lr}
 8012812:	2006      	movs	r0, #6
 8012814:	f000 f856 	bl	80128c4 <raise>
 8012818:	2001      	movs	r0, #1
 801281a:	f7f6 fb14 	bl	8008e46 <_exit>
	...

08012820 <_fstat_r>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	4d07      	ldr	r5, [pc, #28]	; (8012840 <_fstat_r+0x20>)
 8012824:	2300      	movs	r3, #0
 8012826:	4604      	mov	r4, r0
 8012828:	4608      	mov	r0, r1
 801282a:	4611      	mov	r1, r2
 801282c:	602b      	str	r3, [r5, #0]
 801282e:	f7f6 fb4a 	bl	8008ec6 <_fstat>
 8012832:	1c43      	adds	r3, r0, #1
 8012834:	d102      	bne.n	801283c <_fstat_r+0x1c>
 8012836:	682b      	ldr	r3, [r5, #0]
 8012838:	b103      	cbz	r3, 801283c <_fstat_r+0x1c>
 801283a:	6023      	str	r3, [r4, #0]
 801283c:	bd38      	pop	{r3, r4, r5, pc}
 801283e:	bf00      	nop
 8012840:	2001b768 	.word	0x2001b768

08012844 <_isatty_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	4d06      	ldr	r5, [pc, #24]	; (8012860 <_isatty_r+0x1c>)
 8012848:	2300      	movs	r3, #0
 801284a:	4604      	mov	r4, r0
 801284c:	4608      	mov	r0, r1
 801284e:	602b      	str	r3, [r5, #0]
 8012850:	f7f6 fb3e 	bl	8008ed0 <_isatty>
 8012854:	1c43      	adds	r3, r0, #1
 8012856:	d102      	bne.n	801285e <_isatty_r+0x1a>
 8012858:	682b      	ldr	r3, [r5, #0]
 801285a:	b103      	cbz	r3, 801285e <_isatty_r+0x1a>
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	bd38      	pop	{r3, r4, r5, pc}
 8012860:	2001b768 	.word	0x2001b768

08012864 <_malloc_usable_size_r>:
 8012864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012868:	1f18      	subs	r0, r3, #4
 801286a:	2b00      	cmp	r3, #0
 801286c:	bfbc      	itt	lt
 801286e:	580b      	ldrlt	r3, [r1, r0]
 8012870:	18c0      	addlt	r0, r0, r3
 8012872:	4770      	bx	lr

08012874 <_raise_r>:
 8012874:	291f      	cmp	r1, #31
 8012876:	b538      	push	{r3, r4, r5, lr}
 8012878:	4604      	mov	r4, r0
 801287a:	460d      	mov	r5, r1
 801287c:	d904      	bls.n	8012888 <_raise_r+0x14>
 801287e:	2316      	movs	r3, #22
 8012880:	6003      	str	r3, [r0, #0]
 8012882:	f04f 30ff 	mov.w	r0, #4294967295
 8012886:	bd38      	pop	{r3, r4, r5, pc}
 8012888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801288a:	b112      	cbz	r2, 8012892 <_raise_r+0x1e>
 801288c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012890:	b94b      	cbnz	r3, 80128a6 <_raise_r+0x32>
 8012892:	4620      	mov	r0, r4
 8012894:	f000 f830 	bl	80128f8 <_getpid_r>
 8012898:	462a      	mov	r2, r5
 801289a:	4601      	mov	r1, r0
 801289c:	4620      	mov	r0, r4
 801289e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128a2:	f000 b817 	b.w	80128d4 <_kill_r>
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d00a      	beq.n	80128c0 <_raise_r+0x4c>
 80128aa:	1c59      	adds	r1, r3, #1
 80128ac:	d103      	bne.n	80128b6 <_raise_r+0x42>
 80128ae:	2316      	movs	r3, #22
 80128b0:	6003      	str	r3, [r0, #0]
 80128b2:	2001      	movs	r0, #1
 80128b4:	e7e7      	b.n	8012886 <_raise_r+0x12>
 80128b6:	2400      	movs	r4, #0
 80128b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80128bc:	4628      	mov	r0, r5
 80128be:	4798      	blx	r3
 80128c0:	2000      	movs	r0, #0
 80128c2:	e7e0      	b.n	8012886 <_raise_r+0x12>

080128c4 <raise>:
 80128c4:	4b02      	ldr	r3, [pc, #8]	; (80128d0 <raise+0xc>)
 80128c6:	4601      	mov	r1, r0
 80128c8:	6818      	ldr	r0, [r3, #0]
 80128ca:	f7ff bfd3 	b.w	8012874 <_raise_r>
 80128ce:	bf00      	nop
 80128d0:	2000059c 	.word	0x2000059c

080128d4 <_kill_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4d07      	ldr	r5, [pc, #28]	; (80128f4 <_kill_r+0x20>)
 80128d8:	2300      	movs	r3, #0
 80128da:	4604      	mov	r4, r0
 80128dc:	4608      	mov	r0, r1
 80128de:	4611      	mov	r1, r2
 80128e0:	602b      	str	r3, [r5, #0]
 80128e2:	f7f6 faa8 	bl	8008e36 <_kill>
 80128e6:	1c43      	adds	r3, r0, #1
 80128e8:	d102      	bne.n	80128f0 <_kill_r+0x1c>
 80128ea:	682b      	ldr	r3, [r5, #0]
 80128ec:	b103      	cbz	r3, 80128f0 <_kill_r+0x1c>
 80128ee:	6023      	str	r3, [r4, #0]
 80128f0:	bd38      	pop	{r3, r4, r5, pc}
 80128f2:	bf00      	nop
 80128f4:	2001b768 	.word	0x2001b768

080128f8 <_getpid_r>:
 80128f8:	f7f6 ba9b 	b.w	8008e32 <_getpid>
 80128fc:	0000      	movs	r0, r0
	...

08012900 <cos>:
 8012900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012902:	ec53 2b10 	vmov	r2, r3, d0
 8012906:	4826      	ldr	r0, [pc, #152]	; (80129a0 <cos+0xa0>)
 8012908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801290c:	4281      	cmp	r1, r0
 801290e:	dc06      	bgt.n	801291e <cos+0x1e>
 8012910:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012998 <cos+0x98>
 8012914:	b005      	add	sp, #20
 8012916:	f85d eb04 	ldr.w	lr, [sp], #4
 801291a:	f000 bdf9 	b.w	8013510 <__kernel_cos>
 801291e:	4821      	ldr	r0, [pc, #132]	; (80129a4 <cos+0xa4>)
 8012920:	4281      	cmp	r1, r0
 8012922:	dd09      	ble.n	8012938 <cos+0x38>
 8012924:	ee10 0a10 	vmov	r0, s0
 8012928:	4619      	mov	r1, r3
 801292a:	f7ed fd2d 	bl	8000388 <__aeabi_dsub>
 801292e:	ec41 0b10 	vmov	d0, r0, r1
 8012932:	b005      	add	sp, #20
 8012934:	f85d fb04 	ldr.w	pc, [sp], #4
 8012938:	4668      	mov	r0, sp
 801293a:	f000 f911 	bl	8012b60 <__ieee754_rem_pio2>
 801293e:	f000 0003 	and.w	r0, r0, #3
 8012942:	2801      	cmp	r0, #1
 8012944:	d00b      	beq.n	801295e <cos+0x5e>
 8012946:	2802      	cmp	r0, #2
 8012948:	d016      	beq.n	8012978 <cos+0x78>
 801294a:	b9e0      	cbnz	r0, 8012986 <cos+0x86>
 801294c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012950:	ed9d 0b00 	vldr	d0, [sp]
 8012954:	f000 fddc 	bl	8013510 <__kernel_cos>
 8012958:	ec51 0b10 	vmov	r0, r1, d0
 801295c:	e7e7      	b.n	801292e <cos+0x2e>
 801295e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012962:	ed9d 0b00 	vldr	d0, [sp]
 8012966:	f001 f9eb 	bl	8013d40 <__kernel_sin>
 801296a:	ec53 2b10 	vmov	r2, r3, d0
 801296e:	ee10 0a10 	vmov	r0, s0
 8012972:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012976:	e7da      	b.n	801292e <cos+0x2e>
 8012978:	ed9d 1b02 	vldr	d1, [sp, #8]
 801297c:	ed9d 0b00 	vldr	d0, [sp]
 8012980:	f000 fdc6 	bl	8013510 <__kernel_cos>
 8012984:	e7f1      	b.n	801296a <cos+0x6a>
 8012986:	ed9d 1b02 	vldr	d1, [sp, #8]
 801298a:	ed9d 0b00 	vldr	d0, [sp]
 801298e:	2001      	movs	r0, #1
 8012990:	f001 f9d6 	bl	8013d40 <__kernel_sin>
 8012994:	e7e0      	b.n	8012958 <cos+0x58>
 8012996:	bf00      	nop
	...
 80129a0:	3fe921fb 	.word	0x3fe921fb
 80129a4:	7fefffff 	.word	0x7fefffff

080129a8 <sqrt>:
 80129a8:	b538      	push	{r3, r4, r5, lr}
 80129aa:	ed2d 8b02 	vpush	{d8}
 80129ae:	ec55 4b10 	vmov	r4, r5, d0
 80129b2:	f000 fae1 	bl	8012f78 <__ieee754_sqrt>
 80129b6:	4622      	mov	r2, r4
 80129b8:	462b      	mov	r3, r5
 80129ba:	4620      	mov	r0, r4
 80129bc:	4629      	mov	r1, r5
 80129be:	eeb0 8a40 	vmov.f32	s16, s0
 80129c2:	eef0 8a60 	vmov.f32	s17, s1
 80129c6:	f7ee f931 	bl	8000c2c <__aeabi_dcmpun>
 80129ca:	b990      	cbnz	r0, 80129f2 <sqrt+0x4a>
 80129cc:	2200      	movs	r2, #0
 80129ce:	2300      	movs	r3, #0
 80129d0:	4620      	mov	r0, r4
 80129d2:	4629      	mov	r1, r5
 80129d4:	f7ee f902 	bl	8000bdc <__aeabi_dcmplt>
 80129d8:	b158      	cbz	r0, 80129f2 <sqrt+0x4a>
 80129da:	f7fb fd23 	bl	800e424 <__errno>
 80129de:	2321      	movs	r3, #33	; 0x21
 80129e0:	6003      	str	r3, [r0, #0]
 80129e2:	2200      	movs	r2, #0
 80129e4:	2300      	movs	r3, #0
 80129e6:	4610      	mov	r0, r2
 80129e8:	4619      	mov	r1, r3
 80129ea:	f7ed ffaf 	bl	800094c <__aeabi_ddiv>
 80129ee:	ec41 0b18 	vmov	d8, r0, r1
 80129f2:	eeb0 0a48 	vmov.f32	s0, s16
 80129f6:	eef0 0a68 	vmov.f32	s1, s17
 80129fa:	ecbd 8b02 	vpop	{d8}
 80129fe:	bd38      	pop	{r3, r4, r5, pc}

08012a00 <expf>:
 8012a00:	b508      	push	{r3, lr}
 8012a02:	ed2d 8b02 	vpush	{d8}
 8012a06:	eef0 8a40 	vmov.f32	s17, s0
 8012a0a:	f000 fb67 	bl	80130dc <__ieee754_expf>
 8012a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a12:	eeb0 0a68 	vmov.f32	s0, s17
 8012a16:	f001 fb85 	bl	8014124 <finitef>
 8012a1a:	b160      	cbz	r0, 8012a36 <expf+0x36>
 8012a1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8012a5c <expf+0x5c>
 8012a20:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a28:	dd0a      	ble.n	8012a40 <expf+0x40>
 8012a2a:	f7fb fcfb 	bl	800e424 <__errno>
 8012a2e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012a60 <expf+0x60>
 8012a32:	2322      	movs	r3, #34	; 0x22
 8012a34:	6003      	str	r3, [r0, #0]
 8012a36:	eeb0 0a48 	vmov.f32	s0, s16
 8012a3a:	ecbd 8b02 	vpop	{d8}
 8012a3e:	bd08      	pop	{r3, pc}
 8012a40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012a64 <expf+0x64>
 8012a44:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4c:	d5f3      	bpl.n	8012a36 <expf+0x36>
 8012a4e:	f7fb fce9 	bl	800e424 <__errno>
 8012a52:	2322      	movs	r3, #34	; 0x22
 8012a54:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8012a68 <expf+0x68>
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	e7ec      	b.n	8012a36 <expf+0x36>
 8012a5c:	42b17180 	.word	0x42b17180
 8012a60:	7f800000 	.word	0x7f800000
 8012a64:	c2cff1b5 	.word	0xc2cff1b5
 8012a68:	00000000 	.word	0x00000000

08012a6c <logf>:
 8012a6c:	b508      	push	{r3, lr}
 8012a6e:	ed2d 8b02 	vpush	{d8}
 8012a72:	eeb0 8a40 	vmov.f32	s16, s0
 8012a76:	f000 fbff 	bl	8013278 <__ieee754_logf>
 8012a7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a82:	d60f      	bvs.n	8012aa4 <logf+0x38>
 8012a84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8c:	dc0a      	bgt.n	8012aa4 <logf+0x38>
 8012a8e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a96:	d108      	bne.n	8012aaa <logf+0x3e>
 8012a98:	f7fb fcc4 	bl	800e424 <__errno>
 8012a9c:	2322      	movs	r3, #34	; 0x22
 8012a9e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012ac0 <logf+0x54>
 8012aa2:	6003      	str	r3, [r0, #0]
 8012aa4:	ecbd 8b02 	vpop	{d8}
 8012aa8:	bd08      	pop	{r3, pc}
 8012aaa:	f7fb fcbb 	bl	800e424 <__errno>
 8012aae:	ecbd 8b02 	vpop	{d8}
 8012ab2:	2321      	movs	r3, #33	; 0x21
 8012ab4:	6003      	str	r3, [r0, #0]
 8012ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012aba:	4802      	ldr	r0, [pc, #8]	; (8012ac4 <logf+0x58>)
 8012abc:	f7ff bb88 	b.w	80121d0 <nanf>
 8012ac0:	ff800000 	.word	0xff800000
 8012ac4:	080183bc 	.word	0x080183bc

08012ac8 <log10f>:
 8012ac8:	b508      	push	{r3, lr}
 8012aca:	ed2d 8b02 	vpush	{d8}
 8012ace:	eeb0 8a40 	vmov.f32	s16, s0
 8012ad2:	f000 fcc1 	bl	8013458 <__ieee754_log10f>
 8012ad6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ade:	d60f      	bvs.n	8012b00 <log10f+0x38>
 8012ae0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae8:	d80a      	bhi.n	8012b00 <log10f+0x38>
 8012aea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	d108      	bne.n	8012b06 <log10f+0x3e>
 8012af4:	f7fb fc96 	bl	800e424 <__errno>
 8012af8:	2322      	movs	r3, #34	; 0x22
 8012afa:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012b1c <log10f+0x54>
 8012afe:	6003      	str	r3, [r0, #0]
 8012b00:	ecbd 8b02 	vpop	{d8}
 8012b04:	bd08      	pop	{r3, pc}
 8012b06:	f7fb fc8d 	bl	800e424 <__errno>
 8012b0a:	ecbd 8b02 	vpop	{d8}
 8012b0e:	2321      	movs	r3, #33	; 0x21
 8012b10:	6003      	str	r3, [r0, #0]
 8012b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012b16:	4802      	ldr	r0, [pc, #8]	; (8012b20 <log10f+0x58>)
 8012b18:	f7ff bb5a 	b.w	80121d0 <nanf>
 8012b1c:	ff800000 	.word	0xff800000
 8012b20:	080183bc 	.word	0x080183bc

08012b24 <sqrtf>:
 8012b24:	b508      	push	{r3, lr}
 8012b26:	ed2d 8b02 	vpush	{d8}
 8012b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b2e:	f000 fceb 	bl	8013508 <__ieee754_sqrtf>
 8012b32:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	d60c      	bvs.n	8012b56 <sqrtf+0x32>
 8012b3c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012b5c <sqrtf+0x38>
 8012b40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b48:	d505      	bpl.n	8012b56 <sqrtf+0x32>
 8012b4a:	f7fb fc6b 	bl	800e424 <__errno>
 8012b4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012b52:	2321      	movs	r3, #33	; 0x21
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	ecbd 8b02 	vpop	{d8}
 8012b5a:	bd08      	pop	{r3, pc}
 8012b5c:	00000000 	.word	0x00000000

08012b60 <__ieee754_rem_pio2>:
 8012b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b64:	ed2d 8b02 	vpush	{d8}
 8012b68:	ec55 4b10 	vmov	r4, r5, d0
 8012b6c:	4bca      	ldr	r3, [pc, #808]	; (8012e98 <__ieee754_rem_pio2+0x338>)
 8012b6e:	b08b      	sub	sp, #44	; 0x2c
 8012b70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012b74:	4598      	cmp	r8, r3
 8012b76:	4682      	mov	sl, r0
 8012b78:	9502      	str	r5, [sp, #8]
 8012b7a:	dc08      	bgt.n	8012b8e <__ieee754_rem_pio2+0x2e>
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	2300      	movs	r3, #0
 8012b80:	ed80 0b00 	vstr	d0, [r0]
 8012b84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012b88:	f04f 0b00 	mov.w	fp, #0
 8012b8c:	e028      	b.n	8012be0 <__ieee754_rem_pio2+0x80>
 8012b8e:	4bc3      	ldr	r3, [pc, #780]	; (8012e9c <__ieee754_rem_pio2+0x33c>)
 8012b90:	4598      	cmp	r8, r3
 8012b92:	dc78      	bgt.n	8012c86 <__ieee754_rem_pio2+0x126>
 8012b94:	9b02      	ldr	r3, [sp, #8]
 8012b96:	4ec2      	ldr	r6, [pc, #776]	; (8012ea0 <__ieee754_rem_pio2+0x340>)
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	ee10 0a10 	vmov	r0, s0
 8012b9e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012e60 <__ieee754_rem_pio2+0x300>)
 8012ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba4:	4629      	mov	r1, r5
 8012ba6:	dd39      	ble.n	8012c1c <__ieee754_rem_pio2+0xbc>
 8012ba8:	f7ed fbee 	bl	8000388 <__aeabi_dsub>
 8012bac:	45b0      	cmp	r8, r6
 8012bae:	4604      	mov	r4, r0
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	d01b      	beq.n	8012bec <__ieee754_rem_pio2+0x8c>
 8012bb4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012e68 <__ieee754_rem_pio2+0x308>)
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	f7ed fbe5 	bl	8000388 <__aeabi_dsub>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	e9ca 2300 	strd	r2, r3, [sl]
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	4629      	mov	r1, r5
 8012bca:	f7ed fbdd 	bl	8000388 <__aeabi_dsub>
 8012bce:	a3a6      	add	r3, pc, #664	; (adr r3, 8012e68 <__ieee754_rem_pio2+0x308>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	f7ed fbd8 	bl	8000388 <__aeabi_dsub>
 8012bd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bdc:	f04f 0b01 	mov.w	fp, #1
 8012be0:	4658      	mov	r0, fp
 8012be2:	b00b      	add	sp, #44	; 0x2c
 8012be4:	ecbd 8b02 	vpop	{d8}
 8012be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bec:	a3a0      	add	r3, pc, #640	; (adr r3, 8012e70 <__ieee754_rem_pio2+0x310>)
 8012bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf2:	f7ed fbc9 	bl	8000388 <__aeabi_dsub>
 8012bf6:	a3a0      	add	r3, pc, #640	; (adr r3, 8012e78 <__ieee754_rem_pio2+0x318>)
 8012bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	460d      	mov	r5, r1
 8012c00:	f7ed fbc2 	bl	8000388 <__aeabi_dsub>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	e9ca 2300 	strd	r2, r3, [sl]
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	4629      	mov	r1, r5
 8012c10:	f7ed fbba 	bl	8000388 <__aeabi_dsub>
 8012c14:	a398      	add	r3, pc, #608	; (adr r3, 8012e78 <__ieee754_rem_pio2+0x318>)
 8012c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c1a:	e7db      	b.n	8012bd4 <__ieee754_rem_pio2+0x74>
 8012c1c:	f7ed fbb6 	bl	800038c <__adddf3>
 8012c20:	45b0      	cmp	r8, r6
 8012c22:	4604      	mov	r4, r0
 8012c24:	460d      	mov	r5, r1
 8012c26:	d016      	beq.n	8012c56 <__ieee754_rem_pio2+0xf6>
 8012c28:	a38f      	add	r3, pc, #572	; (adr r3, 8012e68 <__ieee754_rem_pio2+0x308>)
 8012c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2e:	f7ed fbad 	bl	800038c <__adddf3>
 8012c32:	4602      	mov	r2, r0
 8012c34:	460b      	mov	r3, r1
 8012c36:	e9ca 2300 	strd	r2, r3, [sl]
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	f7ed fba3 	bl	8000388 <__aeabi_dsub>
 8012c42:	a389      	add	r3, pc, #548	; (adr r3, 8012e68 <__ieee754_rem_pio2+0x308>)
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	f7ed fba0 	bl	800038c <__adddf3>
 8012c4c:	f04f 3bff 	mov.w	fp, #4294967295
 8012c50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012c54:	e7c4      	b.n	8012be0 <__ieee754_rem_pio2+0x80>
 8012c56:	a386      	add	r3, pc, #536	; (adr r3, 8012e70 <__ieee754_rem_pio2+0x310>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	f7ed fb96 	bl	800038c <__adddf3>
 8012c60:	a385      	add	r3, pc, #532	; (adr r3, 8012e78 <__ieee754_rem_pio2+0x318>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	4604      	mov	r4, r0
 8012c68:	460d      	mov	r5, r1
 8012c6a:	f7ed fb8f 	bl	800038c <__adddf3>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	e9ca 2300 	strd	r2, r3, [sl]
 8012c76:	4620      	mov	r0, r4
 8012c78:	4629      	mov	r1, r5
 8012c7a:	f7ed fb85 	bl	8000388 <__aeabi_dsub>
 8012c7e:	a37e      	add	r3, pc, #504	; (adr r3, 8012e78 <__ieee754_rem_pio2+0x318>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	e7e0      	b.n	8012c48 <__ieee754_rem_pio2+0xe8>
 8012c86:	4b87      	ldr	r3, [pc, #540]	; (8012ea4 <__ieee754_rem_pio2+0x344>)
 8012c88:	4598      	cmp	r8, r3
 8012c8a:	f300 80d9 	bgt.w	8012e40 <__ieee754_rem_pio2+0x2e0>
 8012c8e:	f001 f937 	bl	8013f00 <fabs>
 8012c92:	ec55 4b10 	vmov	r4, r5, d0
 8012c96:	ee10 0a10 	vmov	r0, s0
 8012c9a:	a379      	add	r3, pc, #484	; (adr r3, 8012e80 <__ieee754_rem_pio2+0x320>)
 8012c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca0:	4629      	mov	r1, r5
 8012ca2:	f7ed fd29 	bl	80006f8 <__aeabi_dmul>
 8012ca6:	4b80      	ldr	r3, [pc, #512]	; (8012ea8 <__ieee754_rem_pio2+0x348>)
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f7ed fb6f 	bl	800038c <__adddf3>
 8012cae:	f7ed ffd3 	bl	8000c58 <__aeabi_d2iz>
 8012cb2:	4683      	mov	fp, r0
 8012cb4:	f7ed fcb6 	bl	8000624 <__aeabi_i2d>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	460b      	mov	r3, r1
 8012cbc:	ec43 2b18 	vmov	d8, r2, r3
 8012cc0:	a367      	add	r3, pc, #412	; (adr r3, 8012e60 <__ieee754_rem_pio2+0x300>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	f7ed fd17 	bl	80006f8 <__aeabi_dmul>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	460b      	mov	r3, r1
 8012cce:	4620      	mov	r0, r4
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	f7ed fb59 	bl	8000388 <__aeabi_dsub>
 8012cd6:	a364      	add	r3, pc, #400	; (adr r3, 8012e68 <__ieee754_rem_pio2+0x308>)
 8012cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cdc:	4606      	mov	r6, r0
 8012cde:	460f      	mov	r7, r1
 8012ce0:	ec51 0b18 	vmov	r0, r1, d8
 8012ce4:	f7ed fd08 	bl	80006f8 <__aeabi_dmul>
 8012ce8:	f1bb 0f1f 	cmp.w	fp, #31
 8012cec:	4604      	mov	r4, r0
 8012cee:	460d      	mov	r5, r1
 8012cf0:	dc0d      	bgt.n	8012d0e <__ieee754_rem_pio2+0x1ae>
 8012cf2:	4b6e      	ldr	r3, [pc, #440]	; (8012eac <__ieee754_rem_pio2+0x34c>)
 8012cf4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cfc:	4543      	cmp	r3, r8
 8012cfe:	d006      	beq.n	8012d0e <__ieee754_rem_pio2+0x1ae>
 8012d00:	4622      	mov	r2, r4
 8012d02:	462b      	mov	r3, r5
 8012d04:	4630      	mov	r0, r6
 8012d06:	4639      	mov	r1, r7
 8012d08:	f7ed fb3e 	bl	8000388 <__aeabi_dsub>
 8012d0c:	e00f      	b.n	8012d2e <__ieee754_rem_pio2+0x1ce>
 8012d0e:	462b      	mov	r3, r5
 8012d10:	4622      	mov	r2, r4
 8012d12:	4630      	mov	r0, r6
 8012d14:	4639      	mov	r1, r7
 8012d16:	f7ed fb37 	bl	8000388 <__aeabi_dsub>
 8012d1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d24:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012d28:	f1b8 0f10 	cmp.w	r8, #16
 8012d2c:	dc02      	bgt.n	8012d34 <__ieee754_rem_pio2+0x1d4>
 8012d2e:	e9ca 0100 	strd	r0, r1, [sl]
 8012d32:	e039      	b.n	8012da8 <__ieee754_rem_pio2+0x248>
 8012d34:	a34e      	add	r3, pc, #312	; (adr r3, 8012e70 <__ieee754_rem_pio2+0x310>)
 8012d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3a:	ec51 0b18 	vmov	r0, r1, d8
 8012d3e:	f7ed fcdb 	bl	80006f8 <__aeabi_dmul>
 8012d42:	4604      	mov	r4, r0
 8012d44:	460d      	mov	r5, r1
 8012d46:	4602      	mov	r2, r0
 8012d48:	460b      	mov	r3, r1
 8012d4a:	4630      	mov	r0, r6
 8012d4c:	4639      	mov	r1, r7
 8012d4e:	f7ed fb1b 	bl	8000388 <__aeabi_dsub>
 8012d52:	4602      	mov	r2, r0
 8012d54:	460b      	mov	r3, r1
 8012d56:	4680      	mov	r8, r0
 8012d58:	4689      	mov	r9, r1
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	4639      	mov	r1, r7
 8012d5e:	f7ed fb13 	bl	8000388 <__aeabi_dsub>
 8012d62:	4622      	mov	r2, r4
 8012d64:	462b      	mov	r3, r5
 8012d66:	f7ed fb0f 	bl	8000388 <__aeabi_dsub>
 8012d6a:	a343      	add	r3, pc, #268	; (adr r3, 8012e78 <__ieee754_rem_pio2+0x318>)
 8012d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d70:	4604      	mov	r4, r0
 8012d72:	460d      	mov	r5, r1
 8012d74:	ec51 0b18 	vmov	r0, r1, d8
 8012d78:	f7ed fcbe 	bl	80006f8 <__aeabi_dmul>
 8012d7c:	4622      	mov	r2, r4
 8012d7e:	462b      	mov	r3, r5
 8012d80:	f7ed fb02 	bl	8000388 <__aeabi_dsub>
 8012d84:	4602      	mov	r2, r0
 8012d86:	460b      	mov	r3, r1
 8012d88:	4604      	mov	r4, r0
 8012d8a:	460d      	mov	r5, r1
 8012d8c:	4640      	mov	r0, r8
 8012d8e:	4649      	mov	r1, r9
 8012d90:	f7ed fafa 	bl	8000388 <__aeabi_dsub>
 8012d94:	9a03      	ldr	r2, [sp, #12]
 8012d96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	2b31      	cmp	r3, #49	; 0x31
 8012d9e:	dc24      	bgt.n	8012dea <__ieee754_rem_pio2+0x28a>
 8012da0:	e9ca 0100 	strd	r0, r1, [sl]
 8012da4:	4646      	mov	r6, r8
 8012da6:	464f      	mov	r7, r9
 8012da8:	e9da 8900 	ldrd	r8, r9, [sl]
 8012dac:	4630      	mov	r0, r6
 8012dae:	4642      	mov	r2, r8
 8012db0:	464b      	mov	r3, r9
 8012db2:	4639      	mov	r1, r7
 8012db4:	f7ed fae8 	bl	8000388 <__aeabi_dsub>
 8012db8:	462b      	mov	r3, r5
 8012dba:	4622      	mov	r2, r4
 8012dbc:	f7ed fae4 	bl	8000388 <__aeabi_dsub>
 8012dc0:	9b02      	ldr	r3, [sp, #8]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012dc8:	f6bf af0a 	bge.w	8012be0 <__ieee754_rem_pio2+0x80>
 8012dcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012dd0:	f8ca 3004 	str.w	r3, [sl, #4]
 8012dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dd8:	f8ca 8000 	str.w	r8, [sl]
 8012ddc:	f8ca 0008 	str.w	r0, [sl, #8]
 8012de0:	f8ca 300c 	str.w	r3, [sl, #12]
 8012de4:	f1cb 0b00 	rsb	fp, fp, #0
 8012de8:	e6fa      	b.n	8012be0 <__ieee754_rem_pio2+0x80>
 8012dea:	a327      	add	r3, pc, #156	; (adr r3, 8012e88 <__ieee754_rem_pio2+0x328>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	ec51 0b18 	vmov	r0, r1, d8
 8012df4:	f7ed fc80 	bl	80006f8 <__aeabi_dmul>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	460d      	mov	r5, r1
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4640      	mov	r0, r8
 8012e02:	4649      	mov	r1, r9
 8012e04:	f7ed fac0 	bl	8000388 <__aeabi_dsub>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	460b      	mov	r3, r1
 8012e0c:	4606      	mov	r6, r0
 8012e0e:	460f      	mov	r7, r1
 8012e10:	4640      	mov	r0, r8
 8012e12:	4649      	mov	r1, r9
 8012e14:	f7ed fab8 	bl	8000388 <__aeabi_dsub>
 8012e18:	4622      	mov	r2, r4
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	f7ed fab4 	bl	8000388 <__aeabi_dsub>
 8012e20:	a31b      	add	r3, pc, #108	; (adr r3, 8012e90 <__ieee754_rem_pio2+0x330>)
 8012e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e26:	4604      	mov	r4, r0
 8012e28:	460d      	mov	r5, r1
 8012e2a:	ec51 0b18 	vmov	r0, r1, d8
 8012e2e:	f7ed fc63 	bl	80006f8 <__aeabi_dmul>
 8012e32:	4622      	mov	r2, r4
 8012e34:	462b      	mov	r3, r5
 8012e36:	f7ed faa7 	bl	8000388 <__aeabi_dsub>
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	460d      	mov	r5, r1
 8012e3e:	e75f      	b.n	8012d00 <__ieee754_rem_pio2+0x1a0>
 8012e40:	4b1b      	ldr	r3, [pc, #108]	; (8012eb0 <__ieee754_rem_pio2+0x350>)
 8012e42:	4598      	cmp	r8, r3
 8012e44:	dd36      	ble.n	8012eb4 <__ieee754_rem_pio2+0x354>
 8012e46:	ee10 2a10 	vmov	r2, s0
 8012e4a:	462b      	mov	r3, r5
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	4629      	mov	r1, r5
 8012e50:	f7ed fa9a 	bl	8000388 <__aeabi_dsub>
 8012e54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e58:	e9ca 0100 	strd	r0, r1, [sl]
 8012e5c:	e694      	b.n	8012b88 <__ieee754_rem_pio2+0x28>
 8012e5e:	bf00      	nop
 8012e60:	54400000 	.word	0x54400000
 8012e64:	3ff921fb 	.word	0x3ff921fb
 8012e68:	1a626331 	.word	0x1a626331
 8012e6c:	3dd0b461 	.word	0x3dd0b461
 8012e70:	1a600000 	.word	0x1a600000
 8012e74:	3dd0b461 	.word	0x3dd0b461
 8012e78:	2e037073 	.word	0x2e037073
 8012e7c:	3ba3198a 	.word	0x3ba3198a
 8012e80:	6dc9c883 	.word	0x6dc9c883
 8012e84:	3fe45f30 	.word	0x3fe45f30
 8012e88:	2e000000 	.word	0x2e000000
 8012e8c:	3ba3198a 	.word	0x3ba3198a
 8012e90:	252049c1 	.word	0x252049c1
 8012e94:	397b839a 	.word	0x397b839a
 8012e98:	3fe921fb 	.word	0x3fe921fb
 8012e9c:	4002d97b 	.word	0x4002d97b
 8012ea0:	3ff921fb 	.word	0x3ff921fb
 8012ea4:	413921fb 	.word	0x413921fb
 8012ea8:	3fe00000 	.word	0x3fe00000
 8012eac:	0802c374 	.word	0x0802c374
 8012eb0:	7fefffff 	.word	0x7fefffff
 8012eb4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012eb8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012ebc:	ee10 0a10 	vmov	r0, s0
 8012ec0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012ec4:	ee10 6a10 	vmov	r6, s0
 8012ec8:	460f      	mov	r7, r1
 8012eca:	f7ed fec5 	bl	8000c58 <__aeabi_d2iz>
 8012ece:	f7ed fba9 	bl	8000624 <__aeabi_i2d>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	4639      	mov	r1, r7
 8012eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ede:	f7ed fa53 	bl	8000388 <__aeabi_dsub>
 8012ee2:	4b23      	ldr	r3, [pc, #140]	; (8012f70 <__ieee754_rem_pio2+0x410>)
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	f7ed fc07 	bl	80006f8 <__aeabi_dmul>
 8012eea:	460f      	mov	r7, r1
 8012eec:	4606      	mov	r6, r0
 8012eee:	f7ed feb3 	bl	8000c58 <__aeabi_d2iz>
 8012ef2:	f7ed fb97 	bl	8000624 <__aeabi_i2d>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	460b      	mov	r3, r1
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012f02:	f7ed fa41 	bl	8000388 <__aeabi_dsub>
 8012f06:	4b1a      	ldr	r3, [pc, #104]	; (8012f70 <__ieee754_rem_pio2+0x410>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	f7ed fbf5 	bl	80006f8 <__aeabi_dmul>
 8012f0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012f12:	ad04      	add	r5, sp, #16
 8012f14:	f04f 0803 	mov.w	r8, #3
 8012f18:	46a9      	mov	r9, r5
 8012f1a:	2600      	movs	r6, #0
 8012f1c:	2700      	movs	r7, #0
 8012f1e:	4632      	mov	r2, r6
 8012f20:	463b      	mov	r3, r7
 8012f22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012f26:	46c3      	mov	fp, r8
 8012f28:	3d08      	subs	r5, #8
 8012f2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f2e:	f7ed fe4b 	bl	8000bc8 <__aeabi_dcmpeq>
 8012f32:	2800      	cmp	r0, #0
 8012f34:	d1f3      	bne.n	8012f1e <__ieee754_rem_pio2+0x3be>
 8012f36:	4b0f      	ldr	r3, [pc, #60]	; (8012f74 <__ieee754_rem_pio2+0x414>)
 8012f38:	9301      	str	r3, [sp, #4]
 8012f3a:	2302      	movs	r3, #2
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4622      	mov	r2, r4
 8012f40:	465b      	mov	r3, fp
 8012f42:	4651      	mov	r1, sl
 8012f44:	4648      	mov	r0, r9
 8012f46:	f000 fbab 	bl	80136a0 <__kernel_rem_pio2>
 8012f4a:	9b02      	ldr	r3, [sp, #8]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	4683      	mov	fp, r0
 8012f50:	f6bf ae46 	bge.w	8012be0 <__ieee754_rem_pio2+0x80>
 8012f54:	e9da 2100 	ldrd	r2, r1, [sl]
 8012f58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f5c:	e9ca 2300 	strd	r2, r3, [sl]
 8012f60:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f68:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012f6c:	e73a      	b.n	8012de4 <__ieee754_rem_pio2+0x284>
 8012f6e:	bf00      	nop
 8012f70:	41700000 	.word	0x41700000
 8012f74:	0802c3f4 	.word	0x0802c3f4

08012f78 <__ieee754_sqrt>:
 8012f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7c:	ec55 4b10 	vmov	r4, r5, d0
 8012f80:	4e55      	ldr	r6, [pc, #340]	; (80130d8 <__ieee754_sqrt+0x160>)
 8012f82:	43ae      	bics	r6, r5
 8012f84:	ee10 0a10 	vmov	r0, s0
 8012f88:	ee10 3a10 	vmov	r3, s0
 8012f8c:	462a      	mov	r2, r5
 8012f8e:	4629      	mov	r1, r5
 8012f90:	d110      	bne.n	8012fb4 <__ieee754_sqrt+0x3c>
 8012f92:	ee10 2a10 	vmov	r2, s0
 8012f96:	462b      	mov	r3, r5
 8012f98:	f7ed fbae 	bl	80006f8 <__aeabi_dmul>
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	f7ed f9f2 	bl	800038c <__adddf3>
 8012fa8:	4604      	mov	r4, r0
 8012faa:	460d      	mov	r5, r1
 8012fac:	ec45 4b10 	vmov	d0, r4, r5
 8012fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb4:	2d00      	cmp	r5, #0
 8012fb6:	dc10      	bgt.n	8012fda <__ieee754_sqrt+0x62>
 8012fb8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fbc:	4330      	orrs	r0, r6
 8012fbe:	d0f5      	beq.n	8012fac <__ieee754_sqrt+0x34>
 8012fc0:	b15d      	cbz	r5, 8012fda <__ieee754_sqrt+0x62>
 8012fc2:	ee10 2a10 	vmov	r2, s0
 8012fc6:	462b      	mov	r3, r5
 8012fc8:	ee10 0a10 	vmov	r0, s0
 8012fcc:	f7ed f9dc 	bl	8000388 <__aeabi_dsub>
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	460b      	mov	r3, r1
 8012fd4:	f7ed fcba 	bl	800094c <__aeabi_ddiv>
 8012fd8:	e7e6      	b.n	8012fa8 <__ieee754_sqrt+0x30>
 8012fda:	1512      	asrs	r2, r2, #20
 8012fdc:	d074      	beq.n	80130c8 <__ieee754_sqrt+0x150>
 8012fde:	07d4      	lsls	r4, r2, #31
 8012fe0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012fe4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012fec:	bf5e      	ittt	pl
 8012fee:	0fda      	lsrpl	r2, r3, #31
 8012ff0:	005b      	lslpl	r3, r3, #1
 8012ff2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012ff6:	2400      	movs	r4, #0
 8012ff8:	0fda      	lsrs	r2, r3, #31
 8012ffa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012ffe:	107f      	asrs	r7, r7, #1
 8013000:	005b      	lsls	r3, r3, #1
 8013002:	2516      	movs	r5, #22
 8013004:	4620      	mov	r0, r4
 8013006:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801300a:	1886      	adds	r6, r0, r2
 801300c:	428e      	cmp	r6, r1
 801300e:	bfde      	ittt	le
 8013010:	1b89      	suble	r1, r1, r6
 8013012:	18b0      	addle	r0, r6, r2
 8013014:	18a4      	addle	r4, r4, r2
 8013016:	0049      	lsls	r1, r1, #1
 8013018:	3d01      	subs	r5, #1
 801301a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801301e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013026:	d1f0      	bne.n	801300a <__ieee754_sqrt+0x92>
 8013028:	462a      	mov	r2, r5
 801302a:	f04f 0e20 	mov.w	lr, #32
 801302e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013032:	4281      	cmp	r1, r0
 8013034:	eb06 0c05 	add.w	ip, r6, r5
 8013038:	dc02      	bgt.n	8013040 <__ieee754_sqrt+0xc8>
 801303a:	d113      	bne.n	8013064 <__ieee754_sqrt+0xec>
 801303c:	459c      	cmp	ip, r3
 801303e:	d811      	bhi.n	8013064 <__ieee754_sqrt+0xec>
 8013040:	f1bc 0f00 	cmp.w	ip, #0
 8013044:	eb0c 0506 	add.w	r5, ip, r6
 8013048:	da43      	bge.n	80130d2 <__ieee754_sqrt+0x15a>
 801304a:	2d00      	cmp	r5, #0
 801304c:	db41      	blt.n	80130d2 <__ieee754_sqrt+0x15a>
 801304e:	f100 0801 	add.w	r8, r0, #1
 8013052:	1a09      	subs	r1, r1, r0
 8013054:	459c      	cmp	ip, r3
 8013056:	bf88      	it	hi
 8013058:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801305c:	eba3 030c 	sub.w	r3, r3, ip
 8013060:	4432      	add	r2, r6
 8013062:	4640      	mov	r0, r8
 8013064:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013068:	f1be 0e01 	subs.w	lr, lr, #1
 801306c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013070:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013074:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013078:	d1db      	bne.n	8013032 <__ieee754_sqrt+0xba>
 801307a:	430b      	orrs	r3, r1
 801307c:	d006      	beq.n	801308c <__ieee754_sqrt+0x114>
 801307e:	1c50      	adds	r0, r2, #1
 8013080:	bf13      	iteet	ne
 8013082:	3201      	addne	r2, #1
 8013084:	3401      	addeq	r4, #1
 8013086:	4672      	moveq	r2, lr
 8013088:	f022 0201 	bicne.w	r2, r2, #1
 801308c:	1063      	asrs	r3, r4, #1
 801308e:	0852      	lsrs	r2, r2, #1
 8013090:	07e1      	lsls	r1, r4, #31
 8013092:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013096:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801309a:	bf48      	it	mi
 801309c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80130a0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80130a4:	4614      	mov	r4, r2
 80130a6:	e781      	b.n	8012fac <__ieee754_sqrt+0x34>
 80130a8:	0ad9      	lsrs	r1, r3, #11
 80130aa:	3815      	subs	r0, #21
 80130ac:	055b      	lsls	r3, r3, #21
 80130ae:	2900      	cmp	r1, #0
 80130b0:	d0fa      	beq.n	80130a8 <__ieee754_sqrt+0x130>
 80130b2:	02cd      	lsls	r5, r1, #11
 80130b4:	d50a      	bpl.n	80130cc <__ieee754_sqrt+0x154>
 80130b6:	f1c2 0420 	rsb	r4, r2, #32
 80130ba:	fa23 f404 	lsr.w	r4, r3, r4
 80130be:	1e55      	subs	r5, r2, #1
 80130c0:	4093      	lsls	r3, r2
 80130c2:	4321      	orrs	r1, r4
 80130c4:	1b42      	subs	r2, r0, r5
 80130c6:	e78a      	b.n	8012fde <__ieee754_sqrt+0x66>
 80130c8:	4610      	mov	r0, r2
 80130ca:	e7f0      	b.n	80130ae <__ieee754_sqrt+0x136>
 80130cc:	0049      	lsls	r1, r1, #1
 80130ce:	3201      	adds	r2, #1
 80130d0:	e7ef      	b.n	80130b2 <__ieee754_sqrt+0x13a>
 80130d2:	4680      	mov	r8, r0
 80130d4:	e7bd      	b.n	8013052 <__ieee754_sqrt+0xda>
 80130d6:	bf00      	nop
 80130d8:	7ff00000 	.word	0x7ff00000

080130dc <__ieee754_expf>:
 80130dc:	ee10 2a10 	vmov	r2, s0
 80130e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80130e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80130e8:	d902      	bls.n	80130f0 <__ieee754_expf+0x14>
 80130ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80130ee:	4770      	bx	lr
 80130f0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80130f4:	d106      	bne.n	8013104 <__ieee754_expf+0x28>
 80130f6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8013230 <__ieee754_expf+0x154>
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	bf18      	it	ne
 80130fe:	eeb0 0a67 	vmovne.f32	s0, s15
 8013102:	4770      	bx	lr
 8013104:	484b      	ldr	r0, [pc, #300]	; (8013234 <__ieee754_expf+0x158>)
 8013106:	4282      	cmp	r2, r0
 8013108:	dd02      	ble.n	8013110 <__ieee754_expf+0x34>
 801310a:	2000      	movs	r0, #0
 801310c:	f000 bef2 	b.w	8013ef4 <__math_oflowf>
 8013110:	2a00      	cmp	r2, #0
 8013112:	da05      	bge.n	8013120 <__ieee754_expf+0x44>
 8013114:	4a48      	ldr	r2, [pc, #288]	; (8013238 <__ieee754_expf+0x15c>)
 8013116:	4291      	cmp	r1, r2
 8013118:	d902      	bls.n	8013120 <__ieee754_expf+0x44>
 801311a:	2000      	movs	r0, #0
 801311c:	f000 bee4 	b.w	8013ee8 <__math_uflowf>
 8013120:	4a46      	ldr	r2, [pc, #280]	; (801323c <__ieee754_expf+0x160>)
 8013122:	4291      	cmp	r1, r2
 8013124:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013128:	d952      	bls.n	80131d0 <__ieee754_expf+0xf4>
 801312a:	4a45      	ldr	r2, [pc, #276]	; (8013240 <__ieee754_expf+0x164>)
 801312c:	4291      	cmp	r1, r2
 801312e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013132:	d834      	bhi.n	801319e <__ieee754_expf+0xc2>
 8013134:	4943      	ldr	r1, [pc, #268]	; (8013244 <__ieee754_expf+0x168>)
 8013136:	4411      	add	r1, r2
 8013138:	ed91 7a00 	vldr	s14, [r1]
 801313c:	4942      	ldr	r1, [pc, #264]	; (8013248 <__ieee754_expf+0x16c>)
 801313e:	440a      	add	r2, r1
 8013140:	edd2 7a00 	vldr	s15, [r2]
 8013144:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013148:	f1c3 0201 	rsb	r2, r3, #1
 801314c:	1ad2      	subs	r2, r2, r3
 801314e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013152:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013156:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801324c <__ieee754_expf+0x170>
 801315a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013250 <__ieee754_expf+0x174>
 801315e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013162:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013254 <__ieee754_expf+0x178>
 8013166:	eea6 5a86 	vfma.f32	s10, s13, s12
 801316a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013258 <__ieee754_expf+0x17c>
 801316e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013172:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801325c <__ieee754_expf+0x180>
 8013176:	eea6 5a86 	vfma.f32	s10, s13, s12
 801317a:	eef0 6a40 	vmov.f32	s13, s0
 801317e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013182:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013186:	ee20 5a26 	vmul.f32	s10, s0, s13
 801318a:	bb92      	cbnz	r2, 80131f2 <__ieee754_expf+0x116>
 801318c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013190:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013194:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013198:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801319c:	4770      	bx	lr
 801319e:	4b30      	ldr	r3, [pc, #192]	; (8013260 <__ieee754_expf+0x184>)
 80131a0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013264 <__ieee754_expf+0x188>
 80131a4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013268 <__ieee754_expf+0x18c>
 80131a8:	4413      	add	r3, r2
 80131aa:	edd3 7a00 	vldr	s15, [r3]
 80131ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80131b2:	eeb0 7a40 	vmov.f32	s14, s0
 80131b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131ba:	ee17 2a90 	vmov	r2, s15
 80131be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131c2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80131c6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801326c <__ieee754_expf+0x190>
 80131ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131ce:	e7be      	b.n	801314e <__ieee754_expf+0x72>
 80131d0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80131d4:	d20b      	bcs.n	80131ee <__ieee754_expf+0x112>
 80131d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013270 <__ieee754_expf+0x194>
 80131da:	ee70 6a26 	vadd.f32	s13, s0, s13
 80131de:	eef4 6ae5 	vcmpe.f32	s13, s11
 80131e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e6:	dd02      	ble.n	80131ee <__ieee754_expf+0x112>
 80131e8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80131ec:	4770      	bx	lr
 80131ee:	2200      	movs	r2, #0
 80131f0:	e7af      	b.n	8013152 <__ieee754_expf+0x76>
 80131f2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80131f6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80131fa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80131fe:	bfb8      	it	lt
 8013200:	3264      	addlt	r2, #100	; 0x64
 8013202:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013206:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801320a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801320e:	ee17 3a90 	vmov	r3, s15
 8013212:	bfab      	itete	ge
 8013214:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8013218:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801321c:	ee00 3a10 	vmovge	s0, r3
 8013220:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013274 <__ieee754_expf+0x198>
 8013224:	bfbc      	itt	lt
 8013226:	ee00 3a10 	vmovlt	s0, r3
 801322a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801322e:	4770      	bx	lr
 8013230:	00000000 	.word	0x00000000
 8013234:	42b17217 	.word	0x42b17217
 8013238:	42cff1b5 	.word	0x42cff1b5
 801323c:	3eb17218 	.word	0x3eb17218
 8013240:	3f851591 	.word	0x3f851591
 8013244:	0802c504 	.word	0x0802c504
 8013248:	0802c50c 	.word	0x0802c50c
 801324c:	3331bb4c 	.word	0x3331bb4c
 8013250:	b5ddea0e 	.word	0xb5ddea0e
 8013254:	388ab355 	.word	0x388ab355
 8013258:	bb360b61 	.word	0xbb360b61
 801325c:	3e2aaaab 	.word	0x3e2aaaab
 8013260:	0802c4fc 	.word	0x0802c4fc
 8013264:	3fb8aa3b 	.word	0x3fb8aa3b
 8013268:	3f317180 	.word	0x3f317180
 801326c:	3717f7d1 	.word	0x3717f7d1
 8013270:	7149f2ca 	.word	0x7149f2ca
 8013274:	0d800000 	.word	0x0d800000

08013278 <__ieee754_logf>:
 8013278:	ee10 3a10 	vmov	r3, s0
 801327c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013280:	d106      	bne.n	8013290 <__ieee754_logf+0x18>
 8013282:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013418 <__ieee754_logf+0x1a0>
 8013286:	eddf 7a65 	vldr	s15, [pc, #404]	; 801341c <__ieee754_logf+0x1a4>
 801328a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801328e:	4770      	bx	lr
 8013290:	2b00      	cmp	r3, #0
 8013292:	da02      	bge.n	801329a <__ieee754_logf+0x22>
 8013294:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013298:	e7f5      	b.n	8013286 <__ieee754_logf+0xe>
 801329a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801329e:	db02      	blt.n	80132a6 <__ieee754_logf+0x2e>
 80132a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80132a4:	4770      	bx	lr
 80132a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80132aa:	bfb8      	it	lt
 80132ac:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8013420 <__ieee754_logf+0x1a8>
 80132b0:	485c      	ldr	r0, [pc, #368]	; (8013424 <__ieee754_logf+0x1ac>)
 80132b2:	bfbe      	ittt	lt
 80132b4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80132b8:	f06f 0118 	mvnlt.w	r1, #24
 80132bc:	ee17 3a90 	vmovlt	r3, s15
 80132c0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80132c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80132c8:	4418      	add	r0, r3
 80132ca:	bfa8      	it	ge
 80132cc:	2100      	movge	r1, #0
 80132ce:	3a7f      	subs	r2, #127	; 0x7f
 80132d0:	440a      	add	r2, r1
 80132d2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80132d6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80132da:	4319      	orrs	r1, r3
 80132dc:	ee00 1a10 	vmov	s0, r1
 80132e0:	4951      	ldr	r1, [pc, #324]	; (8013428 <__ieee754_logf+0x1b0>)
 80132e2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80132e6:	f103 000f 	add.w	r0, r3, #15
 80132ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132ee:	4001      	ands	r1, r0
 80132f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80132f4:	bb89      	cbnz	r1, 801335a <__ieee754_logf+0xe2>
 80132f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	d10f      	bne.n	8013320 <__ieee754_logf+0xa8>
 8013300:	2a00      	cmp	r2, #0
 8013302:	f000 8085 	beq.w	8013410 <__ieee754_logf+0x198>
 8013306:	ee07 2a90 	vmov	s15, r2
 801330a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801342c <__ieee754_logf+0x1b4>
 801330e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013430 <__ieee754_logf+0x1b8>
 8013312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013316:	ee27 0a80 	vmul.f32	s0, s15, s0
 801331a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801331e:	4770      	bx	lr
 8013320:	eddf 6a44 	vldr	s13, [pc, #272]	; 8013434 <__ieee754_logf+0x1bc>
 8013324:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013328:	eee0 7a66 	vfms.f32	s15, s0, s13
 801332c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013334:	b912      	cbnz	r2, 801333c <__ieee754_logf+0xc4>
 8013336:	ee30 0a47 	vsub.f32	s0, s0, s14
 801333a:	4770      	bx	lr
 801333c:	ee07 2a90 	vmov	s15, r2
 8013340:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801342c <__ieee754_logf+0x1b4>
 8013344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013348:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801334c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013350:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8013430 <__ieee754_logf+0x1b8>
 8013354:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8013358:	4770      	bx	lr
 801335a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801335e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013362:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013438 <__ieee754_logf+0x1c0>
 8013366:	eddf 4a35 	vldr	s9, [pc, #212]	; 801343c <__ieee754_logf+0x1c4>
 801336a:	4935      	ldr	r1, [pc, #212]	; (8013440 <__ieee754_logf+0x1c8>)
 801336c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8013370:	4419      	add	r1, r3
 8013372:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8013376:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801337a:	430b      	orrs	r3, r1
 801337c:	2b00      	cmp	r3, #0
 801337e:	ee07 2a90 	vmov	s15, r2
 8013382:	ee26 5a06 	vmul.f32	s10, s12, s12
 8013386:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801338a:	ee25 7a05 	vmul.f32	s14, s10, s10
 801338e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8013444 <__ieee754_logf+0x1cc>
 8013392:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013396:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8013448 <__ieee754_logf+0x1d0>
 801339a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801339e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801344c <__ieee754_logf+0x1d4>
 80133a2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80133a6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8013450 <__ieee754_logf+0x1d8>
 80133aa:	eee7 4a87 	vfma.f32	s9, s15, s14
 80133ae:	eddf 7a29 	vldr	s15, [pc, #164]	; 8013454 <__ieee754_logf+0x1dc>
 80133b2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80133b6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80133ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80133be:	dd1c      	ble.n	80133fa <__ieee754_logf+0x182>
 80133c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80133c4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80133c8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80133cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80133d4:	b922      	cbnz	r2, 80133e0 <__ieee754_logf+0x168>
 80133d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80133de:	4770      	bx	lr
 80133e0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801342c <__ieee754_logf+0x1b4>
 80133e4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80133e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80133f0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013430 <__ieee754_logf+0x1b8>
 80133f4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80133f8:	4770      	bx	lr
 80133fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80133fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013402:	2a00      	cmp	r2, #0
 8013404:	d0e9      	beq.n	80133da <__ieee754_logf+0x162>
 8013406:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801342c <__ieee754_logf+0x1b4>
 801340a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801340e:	e7ed      	b.n	80133ec <__ieee754_logf+0x174>
 8013410:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801341c <__ieee754_logf+0x1a4>
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	cc000000 	.word	0xcc000000
 801341c:	00000000 	.word	0x00000000
 8013420:	4c000000 	.word	0x4c000000
 8013424:	004afb20 	.word	0x004afb20
 8013428:	007ffff0 	.word	0x007ffff0
 801342c:	3717f7d1 	.word	0x3717f7d1
 8013430:	3f317180 	.word	0x3f317180
 8013434:	3eaaaaab 	.word	0x3eaaaaab
 8013438:	3e1cd04f 	.word	0x3e1cd04f
 801343c:	3e178897 	.word	0x3e178897
 8013440:	ffcf5c30 	.word	0xffcf5c30
 8013444:	3e638e29 	.word	0x3e638e29
 8013448:	3ecccccd 	.word	0x3ecccccd
 801344c:	3e3a3325 	.word	0x3e3a3325
 8013450:	3e924925 	.word	0x3e924925
 8013454:	3f2aaaab 	.word	0x3f2aaaab

08013458 <__ieee754_log10f>:
 8013458:	b508      	push	{r3, lr}
 801345a:	ee10 2a10 	vmov	r2, s0
 801345e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8013462:	ed2d 8b02 	vpush	{d8}
 8013466:	d108      	bne.n	801347a <__ieee754_log10f+0x22>
 8013468:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80134f0 <__ieee754_log10f+0x98>
 801346c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80134f4 <__ieee754_log10f+0x9c>
 8013470:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013474:	ecbd 8b02 	vpop	{d8}
 8013478:	bd08      	pop	{r3, pc}
 801347a:	2a00      	cmp	r2, #0
 801347c:	da02      	bge.n	8013484 <__ieee754_log10f+0x2c>
 801347e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013482:	e7f3      	b.n	801346c <__ieee754_log10f+0x14>
 8013484:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013488:	db02      	blt.n	8013490 <__ieee754_log10f+0x38>
 801348a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801348e:	e7f1      	b.n	8013474 <__ieee754_log10f+0x1c>
 8013490:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8013494:	bfbf      	itttt	lt
 8013496:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80134f8 <__ieee754_log10f+0xa0>
 801349a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801349e:	f06f 0118 	mvnlt.w	r1, #24
 80134a2:	ee17 2a90 	vmovlt	r2, s15
 80134a6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80134aa:	bfa8      	it	ge
 80134ac:	2100      	movge	r1, #0
 80134ae:	3b7f      	subs	r3, #127	; 0x7f
 80134b0:	440b      	add	r3, r1
 80134b2:	0fd9      	lsrs	r1, r3, #31
 80134b4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80134b8:	ee07 3a90 	vmov	s15, r3
 80134bc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80134c0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80134c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80134c8:	ee00 3a10 	vmov	s0, r3
 80134cc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80134d0:	f7ff fed2 	bl	8013278 <__ieee754_logf>
 80134d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80134fc <__ieee754_log10f+0xa4>
 80134d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80134dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013500 <__ieee754_log10f+0xa8>
 80134e0:	eea8 0a27 	vfma.f32	s0, s16, s15
 80134e4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013504 <__ieee754_log10f+0xac>
 80134e8:	eea8 0a27 	vfma.f32	s0, s16, s15
 80134ec:	e7c2      	b.n	8013474 <__ieee754_log10f+0x1c>
 80134ee:	bf00      	nop
 80134f0:	cc000000 	.word	0xcc000000
 80134f4:	00000000 	.word	0x00000000
 80134f8:	4c000000 	.word	0x4c000000
 80134fc:	3ede5bd9 	.word	0x3ede5bd9
 8013500:	355427db 	.word	0x355427db
 8013504:	3e9a2080 	.word	0x3e9a2080

08013508 <__ieee754_sqrtf>:
 8013508:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801350c:	4770      	bx	lr
	...

08013510 <__kernel_cos>:
 8013510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013514:	ec57 6b10 	vmov	r6, r7, d0
 8013518:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801351c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013520:	ed8d 1b00 	vstr	d1, [sp]
 8013524:	da07      	bge.n	8013536 <__kernel_cos+0x26>
 8013526:	ee10 0a10 	vmov	r0, s0
 801352a:	4639      	mov	r1, r7
 801352c:	f7ed fb94 	bl	8000c58 <__aeabi_d2iz>
 8013530:	2800      	cmp	r0, #0
 8013532:	f000 8088 	beq.w	8013646 <__kernel_cos+0x136>
 8013536:	4632      	mov	r2, r6
 8013538:	463b      	mov	r3, r7
 801353a:	4630      	mov	r0, r6
 801353c:	4639      	mov	r1, r7
 801353e:	f7ed f8db 	bl	80006f8 <__aeabi_dmul>
 8013542:	4b51      	ldr	r3, [pc, #324]	; (8013688 <__kernel_cos+0x178>)
 8013544:	2200      	movs	r2, #0
 8013546:	4604      	mov	r4, r0
 8013548:	460d      	mov	r5, r1
 801354a:	f7ed f8d5 	bl	80006f8 <__aeabi_dmul>
 801354e:	a340      	add	r3, pc, #256	; (adr r3, 8013650 <__kernel_cos+0x140>)
 8013550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013554:	4682      	mov	sl, r0
 8013556:	468b      	mov	fp, r1
 8013558:	4620      	mov	r0, r4
 801355a:	4629      	mov	r1, r5
 801355c:	f7ed f8cc 	bl	80006f8 <__aeabi_dmul>
 8013560:	a33d      	add	r3, pc, #244	; (adr r3, 8013658 <__kernel_cos+0x148>)
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f7ec ff11 	bl	800038c <__adddf3>
 801356a:	4622      	mov	r2, r4
 801356c:	462b      	mov	r3, r5
 801356e:	f7ed f8c3 	bl	80006f8 <__aeabi_dmul>
 8013572:	a33b      	add	r3, pc, #236	; (adr r3, 8013660 <__kernel_cos+0x150>)
 8013574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013578:	f7ec ff06 	bl	8000388 <__aeabi_dsub>
 801357c:	4622      	mov	r2, r4
 801357e:	462b      	mov	r3, r5
 8013580:	f7ed f8ba 	bl	80006f8 <__aeabi_dmul>
 8013584:	a338      	add	r3, pc, #224	; (adr r3, 8013668 <__kernel_cos+0x158>)
 8013586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358a:	f7ec feff 	bl	800038c <__adddf3>
 801358e:	4622      	mov	r2, r4
 8013590:	462b      	mov	r3, r5
 8013592:	f7ed f8b1 	bl	80006f8 <__aeabi_dmul>
 8013596:	a336      	add	r3, pc, #216	; (adr r3, 8013670 <__kernel_cos+0x160>)
 8013598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359c:	f7ec fef4 	bl	8000388 <__aeabi_dsub>
 80135a0:	4622      	mov	r2, r4
 80135a2:	462b      	mov	r3, r5
 80135a4:	f7ed f8a8 	bl	80006f8 <__aeabi_dmul>
 80135a8:	a333      	add	r3, pc, #204	; (adr r3, 8013678 <__kernel_cos+0x168>)
 80135aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ae:	f7ec feed 	bl	800038c <__adddf3>
 80135b2:	4622      	mov	r2, r4
 80135b4:	462b      	mov	r3, r5
 80135b6:	f7ed f89f 	bl	80006f8 <__aeabi_dmul>
 80135ba:	4622      	mov	r2, r4
 80135bc:	462b      	mov	r3, r5
 80135be:	f7ed f89b 	bl	80006f8 <__aeabi_dmul>
 80135c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135c6:	4604      	mov	r4, r0
 80135c8:	460d      	mov	r5, r1
 80135ca:	4630      	mov	r0, r6
 80135cc:	4639      	mov	r1, r7
 80135ce:	f7ed f893 	bl	80006f8 <__aeabi_dmul>
 80135d2:	460b      	mov	r3, r1
 80135d4:	4602      	mov	r2, r0
 80135d6:	4629      	mov	r1, r5
 80135d8:	4620      	mov	r0, r4
 80135da:	f7ec fed5 	bl	8000388 <__aeabi_dsub>
 80135de:	4b2b      	ldr	r3, [pc, #172]	; (801368c <__kernel_cos+0x17c>)
 80135e0:	4598      	cmp	r8, r3
 80135e2:	4606      	mov	r6, r0
 80135e4:	460f      	mov	r7, r1
 80135e6:	dc10      	bgt.n	801360a <__kernel_cos+0xfa>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4650      	mov	r0, sl
 80135ee:	4659      	mov	r1, fp
 80135f0:	f7ec feca 	bl	8000388 <__aeabi_dsub>
 80135f4:	460b      	mov	r3, r1
 80135f6:	4926      	ldr	r1, [pc, #152]	; (8013690 <__kernel_cos+0x180>)
 80135f8:	4602      	mov	r2, r0
 80135fa:	2000      	movs	r0, #0
 80135fc:	f7ec fec4 	bl	8000388 <__aeabi_dsub>
 8013600:	ec41 0b10 	vmov	d0, r0, r1
 8013604:	b003      	add	sp, #12
 8013606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360a:	4b22      	ldr	r3, [pc, #136]	; (8013694 <__kernel_cos+0x184>)
 801360c:	4920      	ldr	r1, [pc, #128]	; (8013690 <__kernel_cos+0x180>)
 801360e:	4598      	cmp	r8, r3
 8013610:	bfcc      	ite	gt
 8013612:	4d21      	ldrgt	r5, [pc, #132]	; (8013698 <__kernel_cos+0x188>)
 8013614:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013618:	2400      	movs	r4, #0
 801361a:	4622      	mov	r2, r4
 801361c:	462b      	mov	r3, r5
 801361e:	2000      	movs	r0, #0
 8013620:	f7ec feb2 	bl	8000388 <__aeabi_dsub>
 8013624:	4622      	mov	r2, r4
 8013626:	4680      	mov	r8, r0
 8013628:	4689      	mov	r9, r1
 801362a:	462b      	mov	r3, r5
 801362c:	4650      	mov	r0, sl
 801362e:	4659      	mov	r1, fp
 8013630:	f7ec feaa 	bl	8000388 <__aeabi_dsub>
 8013634:	4632      	mov	r2, r6
 8013636:	463b      	mov	r3, r7
 8013638:	f7ec fea6 	bl	8000388 <__aeabi_dsub>
 801363c:	4602      	mov	r2, r0
 801363e:	460b      	mov	r3, r1
 8013640:	4640      	mov	r0, r8
 8013642:	4649      	mov	r1, r9
 8013644:	e7da      	b.n	80135fc <__kernel_cos+0xec>
 8013646:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013680 <__kernel_cos+0x170>
 801364a:	e7db      	b.n	8013604 <__kernel_cos+0xf4>
 801364c:	f3af 8000 	nop.w
 8013650:	be8838d4 	.word	0xbe8838d4
 8013654:	bda8fae9 	.word	0xbda8fae9
 8013658:	bdb4b1c4 	.word	0xbdb4b1c4
 801365c:	3e21ee9e 	.word	0x3e21ee9e
 8013660:	809c52ad 	.word	0x809c52ad
 8013664:	3e927e4f 	.word	0x3e927e4f
 8013668:	19cb1590 	.word	0x19cb1590
 801366c:	3efa01a0 	.word	0x3efa01a0
 8013670:	16c15177 	.word	0x16c15177
 8013674:	3f56c16c 	.word	0x3f56c16c
 8013678:	5555554c 	.word	0x5555554c
 801367c:	3fa55555 	.word	0x3fa55555
 8013680:	00000000 	.word	0x00000000
 8013684:	3ff00000 	.word	0x3ff00000
 8013688:	3fe00000 	.word	0x3fe00000
 801368c:	3fd33332 	.word	0x3fd33332
 8013690:	3ff00000 	.word	0x3ff00000
 8013694:	3fe90000 	.word	0x3fe90000
 8013698:	3fd20000 	.word	0x3fd20000
 801369c:	00000000 	.word	0x00000000

080136a0 <__kernel_rem_pio2>:
 80136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a4:	ed2d 8b02 	vpush	{d8}
 80136a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80136ac:	f112 0f14 	cmn.w	r2, #20
 80136b0:	9308      	str	r3, [sp, #32]
 80136b2:	9101      	str	r1, [sp, #4]
 80136b4:	4bc4      	ldr	r3, [pc, #784]	; (80139c8 <__kernel_rem_pio2+0x328>)
 80136b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80136b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80136ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80136be:	9302      	str	r3, [sp, #8]
 80136c0:	9b08      	ldr	r3, [sp, #32]
 80136c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80136c6:	bfa8      	it	ge
 80136c8:	1ed4      	subge	r4, r2, #3
 80136ca:	9306      	str	r3, [sp, #24]
 80136cc:	bfb2      	itee	lt
 80136ce:	2400      	movlt	r4, #0
 80136d0:	2318      	movge	r3, #24
 80136d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80136d6:	f06f 0317 	mvn.w	r3, #23
 80136da:	fb04 3303 	mla	r3, r4, r3, r3
 80136de:	eb03 0a02 	add.w	sl, r3, r2
 80136e2:	9b02      	ldr	r3, [sp, #8]
 80136e4:	9a06      	ldr	r2, [sp, #24]
 80136e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80139b8 <__kernel_rem_pio2+0x318>
 80136ea:	eb03 0802 	add.w	r8, r3, r2
 80136ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80136f0:	1aa7      	subs	r7, r4, r2
 80136f2:	ae22      	add	r6, sp, #136	; 0x88
 80136f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80136f8:	2500      	movs	r5, #0
 80136fa:	4545      	cmp	r5, r8
 80136fc:	dd13      	ble.n	8013726 <__kernel_rem_pio2+0x86>
 80136fe:	9b08      	ldr	r3, [sp, #32]
 8013700:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80139b8 <__kernel_rem_pio2+0x318>
 8013704:	aa22      	add	r2, sp, #136	; 0x88
 8013706:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801370a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801370e:	f04f 0800 	mov.w	r8, #0
 8013712:	9b02      	ldr	r3, [sp, #8]
 8013714:	4598      	cmp	r8, r3
 8013716:	dc2f      	bgt.n	8013778 <__kernel_rem_pio2+0xd8>
 8013718:	ed8d 8b04 	vstr	d8, [sp, #16]
 801371c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8013720:	462f      	mov	r7, r5
 8013722:	2600      	movs	r6, #0
 8013724:	e01b      	b.n	801375e <__kernel_rem_pio2+0xbe>
 8013726:	42ef      	cmn	r7, r5
 8013728:	d407      	bmi.n	801373a <__kernel_rem_pio2+0x9a>
 801372a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801372e:	f7ec ff79 	bl	8000624 <__aeabi_i2d>
 8013732:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013736:	3501      	adds	r5, #1
 8013738:	e7df      	b.n	80136fa <__kernel_rem_pio2+0x5a>
 801373a:	ec51 0b18 	vmov	r0, r1, d8
 801373e:	e7f8      	b.n	8013732 <__kernel_rem_pio2+0x92>
 8013740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013744:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013748:	f7ec ffd6 	bl	80006f8 <__aeabi_dmul>
 801374c:	4602      	mov	r2, r0
 801374e:	460b      	mov	r3, r1
 8013750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013754:	f7ec fe1a 	bl	800038c <__adddf3>
 8013758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801375c:	3601      	adds	r6, #1
 801375e:	9b06      	ldr	r3, [sp, #24]
 8013760:	429e      	cmp	r6, r3
 8013762:	f1a7 0708 	sub.w	r7, r7, #8
 8013766:	ddeb      	ble.n	8013740 <__kernel_rem_pio2+0xa0>
 8013768:	ed9d 7b04 	vldr	d7, [sp, #16]
 801376c:	f108 0801 	add.w	r8, r8, #1
 8013770:	ecab 7b02 	vstmia	fp!, {d7}
 8013774:	3508      	adds	r5, #8
 8013776:	e7cc      	b.n	8013712 <__kernel_rem_pio2+0x72>
 8013778:	9b02      	ldr	r3, [sp, #8]
 801377a:	aa0e      	add	r2, sp, #56	; 0x38
 801377c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013780:	930d      	str	r3, [sp, #52]	; 0x34
 8013782:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013784:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013788:	9c02      	ldr	r4, [sp, #8]
 801378a:	930c      	str	r3, [sp, #48]	; 0x30
 801378c:	00e3      	lsls	r3, r4, #3
 801378e:	930a      	str	r3, [sp, #40]	; 0x28
 8013790:	ab9a      	add	r3, sp, #616	; 0x268
 8013792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013796:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801379a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801379e:	ab72      	add	r3, sp, #456	; 0x1c8
 80137a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80137a4:	46c3      	mov	fp, r8
 80137a6:	46a1      	mov	r9, r4
 80137a8:	f1b9 0f00 	cmp.w	r9, #0
 80137ac:	f1a5 0508 	sub.w	r5, r5, #8
 80137b0:	dc77      	bgt.n	80138a2 <__kernel_rem_pio2+0x202>
 80137b2:	ec47 6b10 	vmov	d0, r6, r7
 80137b6:	4650      	mov	r0, sl
 80137b8:	f000 fc2e 	bl	8014018 <scalbn>
 80137bc:	ec57 6b10 	vmov	r6, r7, d0
 80137c0:	2200      	movs	r2, #0
 80137c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80137c6:	ee10 0a10 	vmov	r0, s0
 80137ca:	4639      	mov	r1, r7
 80137cc:	f7ec ff94 	bl	80006f8 <__aeabi_dmul>
 80137d0:	ec41 0b10 	vmov	d0, r0, r1
 80137d4:	f000 fba0 	bl	8013f18 <floor>
 80137d8:	4b7c      	ldr	r3, [pc, #496]	; (80139cc <__kernel_rem_pio2+0x32c>)
 80137da:	ec51 0b10 	vmov	r0, r1, d0
 80137de:	2200      	movs	r2, #0
 80137e0:	f7ec ff8a 	bl	80006f8 <__aeabi_dmul>
 80137e4:	4602      	mov	r2, r0
 80137e6:	460b      	mov	r3, r1
 80137e8:	4630      	mov	r0, r6
 80137ea:	4639      	mov	r1, r7
 80137ec:	f7ec fdcc 	bl	8000388 <__aeabi_dsub>
 80137f0:	460f      	mov	r7, r1
 80137f2:	4606      	mov	r6, r0
 80137f4:	f7ed fa30 	bl	8000c58 <__aeabi_d2iz>
 80137f8:	9004      	str	r0, [sp, #16]
 80137fa:	f7ec ff13 	bl	8000624 <__aeabi_i2d>
 80137fe:	4602      	mov	r2, r0
 8013800:	460b      	mov	r3, r1
 8013802:	4630      	mov	r0, r6
 8013804:	4639      	mov	r1, r7
 8013806:	f7ec fdbf 	bl	8000388 <__aeabi_dsub>
 801380a:	f1ba 0f00 	cmp.w	sl, #0
 801380e:	4606      	mov	r6, r0
 8013810:	460f      	mov	r7, r1
 8013812:	dd6d      	ble.n	80138f0 <__kernel_rem_pio2+0x250>
 8013814:	1e62      	subs	r2, r4, #1
 8013816:	ab0e      	add	r3, sp, #56	; 0x38
 8013818:	9d04      	ldr	r5, [sp, #16]
 801381a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801381e:	f1ca 0118 	rsb	r1, sl, #24
 8013822:	fa40 f301 	asr.w	r3, r0, r1
 8013826:	441d      	add	r5, r3
 8013828:	408b      	lsls	r3, r1
 801382a:	1ac0      	subs	r0, r0, r3
 801382c:	ab0e      	add	r3, sp, #56	; 0x38
 801382e:	9504      	str	r5, [sp, #16]
 8013830:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013834:	f1ca 0317 	rsb	r3, sl, #23
 8013838:	fa40 fb03 	asr.w	fp, r0, r3
 801383c:	f1bb 0f00 	cmp.w	fp, #0
 8013840:	dd65      	ble.n	801390e <__kernel_rem_pio2+0x26e>
 8013842:	9b04      	ldr	r3, [sp, #16]
 8013844:	2200      	movs	r2, #0
 8013846:	3301      	adds	r3, #1
 8013848:	9304      	str	r3, [sp, #16]
 801384a:	4615      	mov	r5, r2
 801384c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013850:	4294      	cmp	r4, r2
 8013852:	f300 809c 	bgt.w	801398e <__kernel_rem_pio2+0x2ee>
 8013856:	f1ba 0f00 	cmp.w	sl, #0
 801385a:	dd07      	ble.n	801386c <__kernel_rem_pio2+0x1cc>
 801385c:	f1ba 0f01 	cmp.w	sl, #1
 8013860:	f000 80c0 	beq.w	80139e4 <__kernel_rem_pio2+0x344>
 8013864:	f1ba 0f02 	cmp.w	sl, #2
 8013868:	f000 80c6 	beq.w	80139f8 <__kernel_rem_pio2+0x358>
 801386c:	f1bb 0f02 	cmp.w	fp, #2
 8013870:	d14d      	bne.n	801390e <__kernel_rem_pio2+0x26e>
 8013872:	4632      	mov	r2, r6
 8013874:	463b      	mov	r3, r7
 8013876:	4956      	ldr	r1, [pc, #344]	; (80139d0 <__kernel_rem_pio2+0x330>)
 8013878:	2000      	movs	r0, #0
 801387a:	f7ec fd85 	bl	8000388 <__aeabi_dsub>
 801387e:	4606      	mov	r6, r0
 8013880:	460f      	mov	r7, r1
 8013882:	2d00      	cmp	r5, #0
 8013884:	d043      	beq.n	801390e <__kernel_rem_pio2+0x26e>
 8013886:	4650      	mov	r0, sl
 8013888:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80139c0 <__kernel_rem_pio2+0x320>
 801388c:	f000 fbc4 	bl	8014018 <scalbn>
 8013890:	4630      	mov	r0, r6
 8013892:	4639      	mov	r1, r7
 8013894:	ec53 2b10 	vmov	r2, r3, d0
 8013898:	f7ec fd76 	bl	8000388 <__aeabi_dsub>
 801389c:	4606      	mov	r6, r0
 801389e:	460f      	mov	r7, r1
 80138a0:	e035      	b.n	801390e <__kernel_rem_pio2+0x26e>
 80138a2:	4b4c      	ldr	r3, [pc, #304]	; (80139d4 <__kernel_rem_pio2+0x334>)
 80138a4:	2200      	movs	r2, #0
 80138a6:	4630      	mov	r0, r6
 80138a8:	4639      	mov	r1, r7
 80138aa:	f7ec ff25 	bl	80006f8 <__aeabi_dmul>
 80138ae:	f7ed f9d3 	bl	8000c58 <__aeabi_d2iz>
 80138b2:	f7ec feb7 	bl	8000624 <__aeabi_i2d>
 80138b6:	4602      	mov	r2, r0
 80138b8:	460b      	mov	r3, r1
 80138ba:	ec43 2b18 	vmov	d8, r2, r3
 80138be:	4b46      	ldr	r3, [pc, #280]	; (80139d8 <__kernel_rem_pio2+0x338>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	f7ec ff19 	bl	80006f8 <__aeabi_dmul>
 80138c6:	4602      	mov	r2, r0
 80138c8:	460b      	mov	r3, r1
 80138ca:	4630      	mov	r0, r6
 80138cc:	4639      	mov	r1, r7
 80138ce:	f7ec fd5b 	bl	8000388 <__aeabi_dsub>
 80138d2:	f7ed f9c1 	bl	8000c58 <__aeabi_d2iz>
 80138d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80138da:	f84b 0b04 	str.w	r0, [fp], #4
 80138de:	ec51 0b18 	vmov	r0, r1, d8
 80138e2:	f7ec fd53 	bl	800038c <__adddf3>
 80138e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80138ea:	4606      	mov	r6, r0
 80138ec:	460f      	mov	r7, r1
 80138ee:	e75b      	b.n	80137a8 <__kernel_rem_pio2+0x108>
 80138f0:	d106      	bne.n	8013900 <__kernel_rem_pio2+0x260>
 80138f2:	1e63      	subs	r3, r4, #1
 80138f4:	aa0e      	add	r2, sp, #56	; 0x38
 80138f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80138fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80138fe:	e79d      	b.n	801383c <__kernel_rem_pio2+0x19c>
 8013900:	4b36      	ldr	r3, [pc, #216]	; (80139dc <__kernel_rem_pio2+0x33c>)
 8013902:	2200      	movs	r2, #0
 8013904:	f7ed f97e 	bl	8000c04 <__aeabi_dcmpge>
 8013908:	2800      	cmp	r0, #0
 801390a:	d13d      	bne.n	8013988 <__kernel_rem_pio2+0x2e8>
 801390c:	4683      	mov	fp, r0
 801390e:	2200      	movs	r2, #0
 8013910:	2300      	movs	r3, #0
 8013912:	4630      	mov	r0, r6
 8013914:	4639      	mov	r1, r7
 8013916:	f7ed f957 	bl	8000bc8 <__aeabi_dcmpeq>
 801391a:	2800      	cmp	r0, #0
 801391c:	f000 80c0 	beq.w	8013aa0 <__kernel_rem_pio2+0x400>
 8013920:	1e65      	subs	r5, r4, #1
 8013922:	462b      	mov	r3, r5
 8013924:	2200      	movs	r2, #0
 8013926:	9902      	ldr	r1, [sp, #8]
 8013928:	428b      	cmp	r3, r1
 801392a:	da6c      	bge.n	8013a06 <__kernel_rem_pio2+0x366>
 801392c:	2a00      	cmp	r2, #0
 801392e:	f000 8089 	beq.w	8013a44 <__kernel_rem_pio2+0x3a4>
 8013932:	ab0e      	add	r3, sp, #56	; 0x38
 8013934:	f1aa 0a18 	sub.w	sl, sl, #24
 8013938:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 80ad 	beq.w	8013a9c <__kernel_rem_pio2+0x3fc>
 8013942:	4650      	mov	r0, sl
 8013944:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80139c0 <__kernel_rem_pio2+0x320>
 8013948:	f000 fb66 	bl	8014018 <scalbn>
 801394c:	ab9a      	add	r3, sp, #616	; 0x268
 801394e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013952:	ec57 6b10 	vmov	r6, r7, d0
 8013956:	00ec      	lsls	r4, r5, #3
 8013958:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801395c:	46aa      	mov	sl, r5
 801395e:	f1ba 0f00 	cmp.w	sl, #0
 8013962:	f280 80d6 	bge.w	8013b12 <__kernel_rem_pio2+0x472>
 8013966:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80139b8 <__kernel_rem_pio2+0x318>
 801396a:	462e      	mov	r6, r5
 801396c:	2e00      	cmp	r6, #0
 801396e:	f2c0 8104 	blt.w	8013b7a <__kernel_rem_pio2+0x4da>
 8013972:	ab72      	add	r3, sp, #456	; 0x1c8
 8013974:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013978:	f8df a064 	ldr.w	sl, [pc, #100]	; 80139e0 <__kernel_rem_pio2+0x340>
 801397c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013980:	f04f 0800 	mov.w	r8, #0
 8013984:	1baf      	subs	r7, r5, r6
 8013986:	e0ea      	b.n	8013b5e <__kernel_rem_pio2+0x4be>
 8013988:	f04f 0b02 	mov.w	fp, #2
 801398c:	e759      	b.n	8013842 <__kernel_rem_pio2+0x1a2>
 801398e:	f8d8 3000 	ldr.w	r3, [r8]
 8013992:	b955      	cbnz	r5, 80139aa <__kernel_rem_pio2+0x30a>
 8013994:	b123      	cbz	r3, 80139a0 <__kernel_rem_pio2+0x300>
 8013996:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801399a:	f8c8 3000 	str.w	r3, [r8]
 801399e:	2301      	movs	r3, #1
 80139a0:	3201      	adds	r2, #1
 80139a2:	f108 0804 	add.w	r8, r8, #4
 80139a6:	461d      	mov	r5, r3
 80139a8:	e752      	b.n	8013850 <__kernel_rem_pio2+0x1b0>
 80139aa:	1acb      	subs	r3, r1, r3
 80139ac:	f8c8 3000 	str.w	r3, [r8]
 80139b0:	462b      	mov	r3, r5
 80139b2:	e7f5      	b.n	80139a0 <__kernel_rem_pio2+0x300>
 80139b4:	f3af 8000 	nop.w
	...
 80139c4:	3ff00000 	.word	0x3ff00000
 80139c8:	0802c558 	.word	0x0802c558
 80139cc:	40200000 	.word	0x40200000
 80139d0:	3ff00000 	.word	0x3ff00000
 80139d4:	3e700000 	.word	0x3e700000
 80139d8:	41700000 	.word	0x41700000
 80139dc:	3fe00000 	.word	0x3fe00000
 80139e0:	0802c518 	.word	0x0802c518
 80139e4:	1e62      	subs	r2, r4, #1
 80139e6:	ab0e      	add	r3, sp, #56	; 0x38
 80139e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80139f0:	a90e      	add	r1, sp, #56	; 0x38
 80139f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80139f6:	e739      	b.n	801386c <__kernel_rem_pio2+0x1cc>
 80139f8:	1e62      	subs	r2, r4, #1
 80139fa:	ab0e      	add	r3, sp, #56	; 0x38
 80139fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013a04:	e7f4      	b.n	80139f0 <__kernel_rem_pio2+0x350>
 8013a06:	a90e      	add	r1, sp, #56	; 0x38
 8013a08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013a0c:	3b01      	subs	r3, #1
 8013a0e:	430a      	orrs	r2, r1
 8013a10:	e789      	b.n	8013926 <__kernel_rem_pio2+0x286>
 8013a12:	3301      	adds	r3, #1
 8013a14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013a18:	2900      	cmp	r1, #0
 8013a1a:	d0fa      	beq.n	8013a12 <__kernel_rem_pio2+0x372>
 8013a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a1e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013a22:	446a      	add	r2, sp
 8013a24:	3a98      	subs	r2, #152	; 0x98
 8013a26:	920a      	str	r2, [sp, #40]	; 0x28
 8013a28:	9a08      	ldr	r2, [sp, #32]
 8013a2a:	18e3      	adds	r3, r4, r3
 8013a2c:	18a5      	adds	r5, r4, r2
 8013a2e:	aa22      	add	r2, sp, #136	; 0x88
 8013a30:	f104 0801 	add.w	r8, r4, #1
 8013a34:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013a38:	9304      	str	r3, [sp, #16]
 8013a3a:	9b04      	ldr	r3, [sp, #16]
 8013a3c:	4543      	cmp	r3, r8
 8013a3e:	da04      	bge.n	8013a4a <__kernel_rem_pio2+0x3aa>
 8013a40:	461c      	mov	r4, r3
 8013a42:	e6a3      	b.n	801378c <__kernel_rem_pio2+0xec>
 8013a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a46:	2301      	movs	r3, #1
 8013a48:	e7e4      	b.n	8013a14 <__kernel_rem_pio2+0x374>
 8013a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013a50:	f7ec fde8 	bl	8000624 <__aeabi_i2d>
 8013a54:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a5a:	46ab      	mov	fp, r5
 8013a5c:	461c      	mov	r4, r3
 8013a5e:	f04f 0900 	mov.w	r9, #0
 8013a62:	2600      	movs	r6, #0
 8013a64:	2700      	movs	r7, #0
 8013a66:	9b06      	ldr	r3, [sp, #24]
 8013a68:	4599      	cmp	r9, r3
 8013a6a:	dd06      	ble.n	8013a7a <__kernel_rem_pio2+0x3da>
 8013a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a6e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013a72:	f108 0801 	add.w	r8, r8, #1
 8013a76:	930a      	str	r3, [sp, #40]	; 0x28
 8013a78:	e7df      	b.n	8013a3a <__kernel_rem_pio2+0x39a>
 8013a7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013a7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013a82:	f7ec fe39 	bl	80006f8 <__aeabi_dmul>
 8013a86:	4602      	mov	r2, r0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	4639      	mov	r1, r7
 8013a8e:	f7ec fc7d 	bl	800038c <__adddf3>
 8013a92:	f109 0901 	add.w	r9, r9, #1
 8013a96:	4606      	mov	r6, r0
 8013a98:	460f      	mov	r7, r1
 8013a9a:	e7e4      	b.n	8013a66 <__kernel_rem_pio2+0x3c6>
 8013a9c:	3d01      	subs	r5, #1
 8013a9e:	e748      	b.n	8013932 <__kernel_rem_pio2+0x292>
 8013aa0:	ec47 6b10 	vmov	d0, r6, r7
 8013aa4:	f1ca 0000 	rsb	r0, sl, #0
 8013aa8:	f000 fab6 	bl	8014018 <scalbn>
 8013aac:	ec57 6b10 	vmov	r6, r7, d0
 8013ab0:	4ba0      	ldr	r3, [pc, #640]	; (8013d34 <__kernel_rem_pio2+0x694>)
 8013ab2:	ee10 0a10 	vmov	r0, s0
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	4639      	mov	r1, r7
 8013aba:	f7ed f8a3 	bl	8000c04 <__aeabi_dcmpge>
 8013abe:	b1f8      	cbz	r0, 8013b00 <__kernel_rem_pio2+0x460>
 8013ac0:	4b9d      	ldr	r3, [pc, #628]	; (8013d38 <__kernel_rem_pio2+0x698>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	f7ec fe16 	bl	80006f8 <__aeabi_dmul>
 8013acc:	f7ed f8c4 	bl	8000c58 <__aeabi_d2iz>
 8013ad0:	4680      	mov	r8, r0
 8013ad2:	f7ec fda7 	bl	8000624 <__aeabi_i2d>
 8013ad6:	4b97      	ldr	r3, [pc, #604]	; (8013d34 <__kernel_rem_pio2+0x694>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	f7ec fe0d 	bl	80006f8 <__aeabi_dmul>
 8013ade:	460b      	mov	r3, r1
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	4639      	mov	r1, r7
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f7ec fc4f 	bl	8000388 <__aeabi_dsub>
 8013aea:	f7ed f8b5 	bl	8000c58 <__aeabi_d2iz>
 8013aee:	1c65      	adds	r5, r4, #1
 8013af0:	ab0e      	add	r3, sp, #56	; 0x38
 8013af2:	f10a 0a18 	add.w	sl, sl, #24
 8013af6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013afa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013afe:	e720      	b.n	8013942 <__kernel_rem_pio2+0x2a2>
 8013b00:	4630      	mov	r0, r6
 8013b02:	4639      	mov	r1, r7
 8013b04:	f7ed f8a8 	bl	8000c58 <__aeabi_d2iz>
 8013b08:	ab0e      	add	r3, sp, #56	; 0x38
 8013b0a:	4625      	mov	r5, r4
 8013b0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013b10:	e717      	b.n	8013942 <__kernel_rem_pio2+0x2a2>
 8013b12:	ab0e      	add	r3, sp, #56	; 0x38
 8013b14:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013b18:	f7ec fd84 	bl	8000624 <__aeabi_i2d>
 8013b1c:	4632      	mov	r2, r6
 8013b1e:	463b      	mov	r3, r7
 8013b20:	f7ec fdea 	bl	80006f8 <__aeabi_dmul>
 8013b24:	4b84      	ldr	r3, [pc, #528]	; (8013d38 <__kernel_rem_pio2+0x698>)
 8013b26:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	4630      	mov	r0, r6
 8013b2e:	4639      	mov	r1, r7
 8013b30:	f7ec fde2 	bl	80006f8 <__aeabi_dmul>
 8013b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b38:	4606      	mov	r6, r0
 8013b3a:	460f      	mov	r7, r1
 8013b3c:	e70f      	b.n	801395e <__kernel_rem_pio2+0x2be>
 8013b3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013b42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013b46:	f7ec fdd7 	bl	80006f8 <__aeabi_dmul>
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b52:	f7ec fc1b 	bl	800038c <__adddf3>
 8013b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b5a:	f108 0801 	add.w	r8, r8, #1
 8013b5e:	9b02      	ldr	r3, [sp, #8]
 8013b60:	4598      	cmp	r8, r3
 8013b62:	dc01      	bgt.n	8013b68 <__kernel_rem_pio2+0x4c8>
 8013b64:	45b8      	cmp	r8, r7
 8013b66:	ddea      	ble.n	8013b3e <__kernel_rem_pio2+0x49e>
 8013b68:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013b6c:	ab4a      	add	r3, sp, #296	; 0x128
 8013b6e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013b72:	ed87 7b00 	vstr	d7, [r7]
 8013b76:	3e01      	subs	r6, #1
 8013b78:	e6f8      	b.n	801396c <__kernel_rem_pio2+0x2cc>
 8013b7a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	dc0b      	bgt.n	8013b98 <__kernel_rem_pio2+0x4f8>
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	dc35      	bgt.n	8013bf0 <__kernel_rem_pio2+0x550>
 8013b84:	d059      	beq.n	8013c3a <__kernel_rem_pio2+0x59a>
 8013b86:	9b04      	ldr	r3, [sp, #16]
 8013b88:	f003 0007 	and.w	r0, r3, #7
 8013b8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013b90:	ecbd 8b02 	vpop	{d8}
 8013b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013b9a:	2b03      	cmp	r3, #3
 8013b9c:	d1f3      	bne.n	8013b86 <__kernel_rem_pio2+0x4e6>
 8013b9e:	ab4a      	add	r3, sp, #296	; 0x128
 8013ba0:	4423      	add	r3, r4
 8013ba2:	9306      	str	r3, [sp, #24]
 8013ba4:	461c      	mov	r4, r3
 8013ba6:	469a      	mov	sl, r3
 8013ba8:	9502      	str	r5, [sp, #8]
 8013baa:	9b02      	ldr	r3, [sp, #8]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f1aa 0a08 	sub.w	sl, sl, #8
 8013bb2:	dc6b      	bgt.n	8013c8c <__kernel_rem_pio2+0x5ec>
 8013bb4:	46aa      	mov	sl, r5
 8013bb6:	f1ba 0f01 	cmp.w	sl, #1
 8013bba:	f1a4 0408 	sub.w	r4, r4, #8
 8013bbe:	f300 8085 	bgt.w	8013ccc <__kernel_rem_pio2+0x62c>
 8013bc2:	9c06      	ldr	r4, [sp, #24]
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	3408      	adds	r4, #8
 8013bc8:	2100      	movs	r1, #0
 8013bca:	2d01      	cmp	r5, #1
 8013bcc:	f300 809d 	bgt.w	8013d0a <__kernel_rem_pio2+0x66a>
 8013bd0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013bd4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013bd8:	f1bb 0f00 	cmp.w	fp, #0
 8013bdc:	f040 809b 	bne.w	8013d16 <__kernel_rem_pio2+0x676>
 8013be0:	9b01      	ldr	r3, [sp, #4]
 8013be2:	e9c3 5600 	strd	r5, r6, [r3]
 8013be6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013bea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013bee:	e7ca      	b.n	8013b86 <__kernel_rem_pio2+0x4e6>
 8013bf0:	3408      	adds	r4, #8
 8013bf2:	ab4a      	add	r3, sp, #296	; 0x128
 8013bf4:	441c      	add	r4, r3
 8013bf6:	462e      	mov	r6, r5
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	2e00      	cmp	r6, #0
 8013bfe:	da36      	bge.n	8013c6e <__kernel_rem_pio2+0x5ce>
 8013c00:	f1bb 0f00 	cmp.w	fp, #0
 8013c04:	d039      	beq.n	8013c7a <__kernel_rem_pio2+0x5da>
 8013c06:	4602      	mov	r2, r0
 8013c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c0c:	9c01      	ldr	r4, [sp, #4]
 8013c0e:	e9c4 2300 	strd	r2, r3, [r4]
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013c1a:	f7ec fbb5 	bl	8000388 <__aeabi_dsub>
 8013c1e:	ae4c      	add	r6, sp, #304	; 0x130
 8013c20:	2401      	movs	r4, #1
 8013c22:	42a5      	cmp	r5, r4
 8013c24:	da2c      	bge.n	8013c80 <__kernel_rem_pio2+0x5e0>
 8013c26:	f1bb 0f00 	cmp.w	fp, #0
 8013c2a:	d002      	beq.n	8013c32 <__kernel_rem_pio2+0x592>
 8013c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c30:	4619      	mov	r1, r3
 8013c32:	9b01      	ldr	r3, [sp, #4]
 8013c34:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013c38:	e7a5      	b.n	8013b86 <__kernel_rem_pio2+0x4e6>
 8013c3a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013c3e:	eb0d 0403 	add.w	r4, sp, r3
 8013c42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013c46:	2000      	movs	r0, #0
 8013c48:	2100      	movs	r1, #0
 8013c4a:	2d00      	cmp	r5, #0
 8013c4c:	da09      	bge.n	8013c62 <__kernel_rem_pio2+0x5c2>
 8013c4e:	f1bb 0f00 	cmp.w	fp, #0
 8013c52:	d002      	beq.n	8013c5a <__kernel_rem_pio2+0x5ba>
 8013c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c58:	4619      	mov	r1, r3
 8013c5a:	9b01      	ldr	r3, [sp, #4]
 8013c5c:	e9c3 0100 	strd	r0, r1, [r3]
 8013c60:	e791      	b.n	8013b86 <__kernel_rem_pio2+0x4e6>
 8013c62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013c66:	f7ec fb91 	bl	800038c <__adddf3>
 8013c6a:	3d01      	subs	r5, #1
 8013c6c:	e7ed      	b.n	8013c4a <__kernel_rem_pio2+0x5aa>
 8013c6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013c72:	f7ec fb8b 	bl	800038c <__adddf3>
 8013c76:	3e01      	subs	r6, #1
 8013c78:	e7c0      	b.n	8013bfc <__kernel_rem_pio2+0x55c>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	e7c5      	b.n	8013c0c <__kernel_rem_pio2+0x56c>
 8013c80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013c84:	f7ec fb82 	bl	800038c <__adddf3>
 8013c88:	3401      	adds	r4, #1
 8013c8a:	e7ca      	b.n	8013c22 <__kernel_rem_pio2+0x582>
 8013c8c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013c90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013c94:	9b02      	ldr	r3, [sp, #8]
 8013c96:	3b01      	subs	r3, #1
 8013c98:	9302      	str	r3, [sp, #8]
 8013c9a:	4632      	mov	r2, r6
 8013c9c:	463b      	mov	r3, r7
 8013c9e:	4640      	mov	r0, r8
 8013ca0:	4649      	mov	r1, r9
 8013ca2:	f7ec fb73 	bl	800038c <__adddf3>
 8013ca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	4640      	mov	r0, r8
 8013cb0:	4649      	mov	r1, r9
 8013cb2:	f7ec fb69 	bl	8000388 <__aeabi_dsub>
 8013cb6:	4632      	mov	r2, r6
 8013cb8:	463b      	mov	r3, r7
 8013cba:	f7ec fb67 	bl	800038c <__adddf3>
 8013cbe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013cc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013cc6:	ed8a 7b00 	vstr	d7, [sl]
 8013cca:	e76e      	b.n	8013baa <__kernel_rem_pio2+0x50a>
 8013ccc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013cd0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013cd4:	4640      	mov	r0, r8
 8013cd6:	4632      	mov	r2, r6
 8013cd8:	463b      	mov	r3, r7
 8013cda:	4649      	mov	r1, r9
 8013cdc:	f7ec fb56 	bl	800038c <__adddf3>
 8013ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	460b      	mov	r3, r1
 8013ce8:	4640      	mov	r0, r8
 8013cea:	4649      	mov	r1, r9
 8013cec:	f7ec fb4c 	bl	8000388 <__aeabi_dsub>
 8013cf0:	4632      	mov	r2, r6
 8013cf2:	463b      	mov	r3, r7
 8013cf4:	f7ec fb4a 	bl	800038c <__adddf3>
 8013cf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d00:	ed84 7b00 	vstr	d7, [r4]
 8013d04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d08:	e755      	b.n	8013bb6 <__kernel_rem_pio2+0x516>
 8013d0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d0e:	f7ec fb3d 	bl	800038c <__adddf3>
 8013d12:	3d01      	subs	r5, #1
 8013d14:	e759      	b.n	8013bca <__kernel_rem_pio2+0x52a>
 8013d16:	9b01      	ldr	r3, [sp, #4]
 8013d18:	9a01      	ldr	r2, [sp, #4]
 8013d1a:	601d      	str	r5, [r3, #0]
 8013d1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013d20:	605c      	str	r4, [r3, #4]
 8013d22:	609f      	str	r7, [r3, #8]
 8013d24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013d28:	60d3      	str	r3, [r2, #12]
 8013d2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d2e:	6110      	str	r0, [r2, #16]
 8013d30:	6153      	str	r3, [r2, #20]
 8013d32:	e728      	b.n	8013b86 <__kernel_rem_pio2+0x4e6>
 8013d34:	41700000 	.word	0x41700000
 8013d38:	3e700000 	.word	0x3e700000
 8013d3c:	00000000 	.word	0x00000000

08013d40 <__kernel_sin>:
 8013d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d44:	ed2d 8b04 	vpush	{d8-d9}
 8013d48:	eeb0 8a41 	vmov.f32	s16, s2
 8013d4c:	eef0 8a61 	vmov.f32	s17, s3
 8013d50:	ec55 4b10 	vmov	r4, r5, d0
 8013d54:	b083      	sub	sp, #12
 8013d56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013d5e:	9001      	str	r0, [sp, #4]
 8013d60:	da06      	bge.n	8013d70 <__kernel_sin+0x30>
 8013d62:	ee10 0a10 	vmov	r0, s0
 8013d66:	4629      	mov	r1, r5
 8013d68:	f7ec ff76 	bl	8000c58 <__aeabi_d2iz>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d051      	beq.n	8013e14 <__kernel_sin+0xd4>
 8013d70:	4622      	mov	r2, r4
 8013d72:	462b      	mov	r3, r5
 8013d74:	4620      	mov	r0, r4
 8013d76:	4629      	mov	r1, r5
 8013d78:	f7ec fcbe 	bl	80006f8 <__aeabi_dmul>
 8013d7c:	4682      	mov	sl, r0
 8013d7e:	468b      	mov	fp, r1
 8013d80:	4602      	mov	r2, r0
 8013d82:	460b      	mov	r3, r1
 8013d84:	4620      	mov	r0, r4
 8013d86:	4629      	mov	r1, r5
 8013d88:	f7ec fcb6 	bl	80006f8 <__aeabi_dmul>
 8013d8c:	a341      	add	r3, pc, #260	; (adr r3, 8013e94 <__kernel_sin+0x154>)
 8013d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d92:	4680      	mov	r8, r0
 8013d94:	4689      	mov	r9, r1
 8013d96:	4650      	mov	r0, sl
 8013d98:	4659      	mov	r1, fp
 8013d9a:	f7ec fcad 	bl	80006f8 <__aeabi_dmul>
 8013d9e:	a33f      	add	r3, pc, #252	; (adr r3, 8013e9c <__kernel_sin+0x15c>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	f7ec faf0 	bl	8000388 <__aeabi_dsub>
 8013da8:	4652      	mov	r2, sl
 8013daa:	465b      	mov	r3, fp
 8013dac:	f7ec fca4 	bl	80006f8 <__aeabi_dmul>
 8013db0:	a33c      	add	r3, pc, #240	; (adr r3, 8013ea4 <__kernel_sin+0x164>)
 8013db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db6:	f7ec fae9 	bl	800038c <__adddf3>
 8013dba:	4652      	mov	r2, sl
 8013dbc:	465b      	mov	r3, fp
 8013dbe:	f7ec fc9b 	bl	80006f8 <__aeabi_dmul>
 8013dc2:	a33a      	add	r3, pc, #232	; (adr r3, 8013eac <__kernel_sin+0x16c>)
 8013dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc8:	f7ec fade 	bl	8000388 <__aeabi_dsub>
 8013dcc:	4652      	mov	r2, sl
 8013dce:	465b      	mov	r3, fp
 8013dd0:	f7ec fc92 	bl	80006f8 <__aeabi_dmul>
 8013dd4:	a337      	add	r3, pc, #220	; (adr r3, 8013eb4 <__kernel_sin+0x174>)
 8013dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dda:	f7ec fad7 	bl	800038c <__adddf3>
 8013dde:	9b01      	ldr	r3, [sp, #4]
 8013de0:	4606      	mov	r6, r0
 8013de2:	460f      	mov	r7, r1
 8013de4:	b9eb      	cbnz	r3, 8013e22 <__kernel_sin+0xe2>
 8013de6:	4602      	mov	r2, r0
 8013de8:	460b      	mov	r3, r1
 8013dea:	4650      	mov	r0, sl
 8013dec:	4659      	mov	r1, fp
 8013dee:	f7ec fc83 	bl	80006f8 <__aeabi_dmul>
 8013df2:	a325      	add	r3, pc, #148	; (adr r3, 8013e88 <__kernel_sin+0x148>)
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	f7ec fac6 	bl	8000388 <__aeabi_dsub>
 8013dfc:	4642      	mov	r2, r8
 8013dfe:	464b      	mov	r3, r9
 8013e00:	f7ec fc7a 	bl	80006f8 <__aeabi_dmul>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	4620      	mov	r0, r4
 8013e0a:	4629      	mov	r1, r5
 8013e0c:	f7ec fabe 	bl	800038c <__adddf3>
 8013e10:	4604      	mov	r4, r0
 8013e12:	460d      	mov	r5, r1
 8013e14:	ec45 4b10 	vmov	d0, r4, r5
 8013e18:	b003      	add	sp, #12
 8013e1a:	ecbd 8b04 	vpop	{d8-d9}
 8013e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	4b1b      	ldr	r3, [pc, #108]	; (8013e90 <__kernel_sin+0x150>)
 8013e24:	ec51 0b18 	vmov	r0, r1, d8
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f7ec fc65 	bl	80006f8 <__aeabi_dmul>
 8013e2e:	4632      	mov	r2, r6
 8013e30:	ec41 0b19 	vmov	d9, r0, r1
 8013e34:	463b      	mov	r3, r7
 8013e36:	4640      	mov	r0, r8
 8013e38:	4649      	mov	r1, r9
 8013e3a:	f7ec fc5d 	bl	80006f8 <__aeabi_dmul>
 8013e3e:	4602      	mov	r2, r0
 8013e40:	460b      	mov	r3, r1
 8013e42:	ec51 0b19 	vmov	r0, r1, d9
 8013e46:	f7ec fa9f 	bl	8000388 <__aeabi_dsub>
 8013e4a:	4652      	mov	r2, sl
 8013e4c:	465b      	mov	r3, fp
 8013e4e:	f7ec fc53 	bl	80006f8 <__aeabi_dmul>
 8013e52:	ec53 2b18 	vmov	r2, r3, d8
 8013e56:	f7ec fa97 	bl	8000388 <__aeabi_dsub>
 8013e5a:	a30b      	add	r3, pc, #44	; (adr r3, 8013e88 <__kernel_sin+0x148>)
 8013e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e60:	4606      	mov	r6, r0
 8013e62:	460f      	mov	r7, r1
 8013e64:	4640      	mov	r0, r8
 8013e66:	4649      	mov	r1, r9
 8013e68:	f7ec fc46 	bl	80006f8 <__aeabi_dmul>
 8013e6c:	4602      	mov	r2, r0
 8013e6e:	460b      	mov	r3, r1
 8013e70:	4630      	mov	r0, r6
 8013e72:	4639      	mov	r1, r7
 8013e74:	f7ec fa8a 	bl	800038c <__adddf3>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	4629      	mov	r1, r5
 8013e80:	f7ec fa82 	bl	8000388 <__aeabi_dsub>
 8013e84:	e7c4      	b.n	8013e10 <__kernel_sin+0xd0>
 8013e86:	bf00      	nop
 8013e88:	55555549 	.word	0x55555549
 8013e8c:	3fc55555 	.word	0x3fc55555
 8013e90:	3fe00000 	.word	0x3fe00000
 8013e94:	5acfd57c 	.word	0x5acfd57c
 8013e98:	3de5d93a 	.word	0x3de5d93a
 8013e9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013ea0:	3e5ae5e6 	.word	0x3e5ae5e6
 8013ea4:	57b1fe7d 	.word	0x57b1fe7d
 8013ea8:	3ec71de3 	.word	0x3ec71de3
 8013eac:	19c161d5 	.word	0x19c161d5
 8013eb0:	3f2a01a0 	.word	0x3f2a01a0
 8013eb4:	1110f8a6 	.word	0x1110f8a6
 8013eb8:	3f811111 	.word	0x3f811111

08013ebc <with_errnof>:
 8013ebc:	b513      	push	{r0, r1, r4, lr}
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013ec4:	f7fa faae 	bl	800e424 <__errno>
 8013ec8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013ecc:	6004      	str	r4, [r0, #0]
 8013ece:	b002      	add	sp, #8
 8013ed0:	bd10      	pop	{r4, pc}

08013ed2 <xflowf>:
 8013ed2:	b130      	cbz	r0, 8013ee2 <xflowf+0x10>
 8013ed4:	eef1 7a40 	vneg.f32	s15, s0
 8013ed8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013edc:	2022      	movs	r0, #34	; 0x22
 8013ede:	f7ff bfed 	b.w	8013ebc <with_errnof>
 8013ee2:	eef0 7a40 	vmov.f32	s15, s0
 8013ee6:	e7f7      	b.n	8013ed8 <xflowf+0x6>

08013ee8 <__math_uflowf>:
 8013ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ef0 <__math_uflowf+0x8>
 8013eec:	f7ff bff1 	b.w	8013ed2 <xflowf>
 8013ef0:	10000000 	.word	0x10000000

08013ef4 <__math_oflowf>:
 8013ef4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013efc <__math_oflowf+0x8>
 8013ef8:	f7ff bfeb 	b.w	8013ed2 <xflowf>
 8013efc:	70000000 	.word	0x70000000

08013f00 <fabs>:
 8013f00:	ec51 0b10 	vmov	r0, r1, d0
 8013f04:	ee10 2a10 	vmov	r2, s0
 8013f08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f0c:	ec43 2b10 	vmov	d0, r2, r3
 8013f10:	4770      	bx	lr
 8013f12:	0000      	movs	r0, r0
 8013f14:	0000      	movs	r0, r0
	...

08013f18 <floor>:
 8013f18:	ec51 0b10 	vmov	r0, r1, d0
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013f24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013f28:	2e13      	cmp	r6, #19
 8013f2a:	ee10 5a10 	vmov	r5, s0
 8013f2e:	ee10 8a10 	vmov	r8, s0
 8013f32:	460c      	mov	r4, r1
 8013f34:	dc32      	bgt.n	8013f9c <floor+0x84>
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	da14      	bge.n	8013f64 <floor+0x4c>
 8013f3a:	a333      	add	r3, pc, #204	; (adr r3, 8014008 <floor+0xf0>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec fa24 	bl	800038c <__adddf3>
 8013f44:	2200      	movs	r2, #0
 8013f46:	2300      	movs	r3, #0
 8013f48:	f7ec fe66 	bl	8000c18 <__aeabi_dcmpgt>
 8013f4c:	b138      	cbz	r0, 8013f5e <floor+0x46>
 8013f4e:	2c00      	cmp	r4, #0
 8013f50:	da57      	bge.n	8014002 <floor+0xea>
 8013f52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013f56:	431d      	orrs	r5, r3
 8013f58:	d001      	beq.n	8013f5e <floor+0x46>
 8013f5a:	4c2d      	ldr	r4, [pc, #180]	; (8014010 <floor+0xf8>)
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	4621      	mov	r1, r4
 8013f60:	4628      	mov	r0, r5
 8013f62:	e025      	b.n	8013fb0 <floor+0x98>
 8013f64:	4f2b      	ldr	r7, [pc, #172]	; (8014014 <floor+0xfc>)
 8013f66:	4137      	asrs	r7, r6
 8013f68:	ea01 0307 	and.w	r3, r1, r7
 8013f6c:	4303      	orrs	r3, r0
 8013f6e:	d01f      	beq.n	8013fb0 <floor+0x98>
 8013f70:	a325      	add	r3, pc, #148	; (adr r3, 8014008 <floor+0xf0>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec fa09 	bl	800038c <__adddf3>
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f7ec fe4b 	bl	8000c18 <__aeabi_dcmpgt>
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d0eb      	beq.n	8013f5e <floor+0x46>
 8013f86:	2c00      	cmp	r4, #0
 8013f88:	bfbe      	ittt	lt
 8013f8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013f8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013f92:	19a4      	addlt	r4, r4, r6
 8013f94:	ea24 0407 	bic.w	r4, r4, r7
 8013f98:	2500      	movs	r5, #0
 8013f9a:	e7e0      	b.n	8013f5e <floor+0x46>
 8013f9c:	2e33      	cmp	r6, #51	; 0x33
 8013f9e:	dd0b      	ble.n	8013fb8 <floor+0xa0>
 8013fa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013fa4:	d104      	bne.n	8013fb0 <floor+0x98>
 8013fa6:	ee10 2a10 	vmov	r2, s0
 8013faa:	460b      	mov	r3, r1
 8013fac:	f7ec f9ee 	bl	800038c <__adddf3>
 8013fb0:	ec41 0b10 	vmov	d0, r0, r1
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc0:	fa23 f707 	lsr.w	r7, r3, r7
 8013fc4:	4207      	tst	r7, r0
 8013fc6:	d0f3      	beq.n	8013fb0 <floor+0x98>
 8013fc8:	a30f      	add	r3, pc, #60	; (adr r3, 8014008 <floor+0xf0>)
 8013fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fce:	f7ec f9dd 	bl	800038c <__adddf3>
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f7ec fe1f 	bl	8000c18 <__aeabi_dcmpgt>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0bf      	beq.n	8013f5e <floor+0x46>
 8013fde:	2c00      	cmp	r4, #0
 8013fe0:	da02      	bge.n	8013fe8 <floor+0xd0>
 8013fe2:	2e14      	cmp	r6, #20
 8013fe4:	d103      	bne.n	8013fee <floor+0xd6>
 8013fe6:	3401      	adds	r4, #1
 8013fe8:	ea25 0507 	bic.w	r5, r5, r7
 8013fec:	e7b7      	b.n	8013f5e <floor+0x46>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013ff4:	fa03 f606 	lsl.w	r6, r3, r6
 8013ff8:	4435      	add	r5, r6
 8013ffa:	4545      	cmp	r5, r8
 8013ffc:	bf38      	it	cc
 8013ffe:	18e4      	addcc	r4, r4, r3
 8014000:	e7f2      	b.n	8013fe8 <floor+0xd0>
 8014002:	2500      	movs	r5, #0
 8014004:	462c      	mov	r4, r5
 8014006:	e7aa      	b.n	8013f5e <floor+0x46>
 8014008:	8800759c 	.word	0x8800759c
 801400c:	7e37e43c 	.word	0x7e37e43c
 8014010:	bff00000 	.word	0xbff00000
 8014014:	000fffff 	.word	0x000fffff

08014018 <scalbn>:
 8014018:	b570      	push	{r4, r5, r6, lr}
 801401a:	ec55 4b10 	vmov	r4, r5, d0
 801401e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014022:	4606      	mov	r6, r0
 8014024:	462b      	mov	r3, r5
 8014026:	b99a      	cbnz	r2, 8014050 <scalbn+0x38>
 8014028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801402c:	4323      	orrs	r3, r4
 801402e:	d036      	beq.n	801409e <scalbn+0x86>
 8014030:	4b39      	ldr	r3, [pc, #228]	; (8014118 <scalbn+0x100>)
 8014032:	4629      	mov	r1, r5
 8014034:	ee10 0a10 	vmov	r0, s0
 8014038:	2200      	movs	r2, #0
 801403a:	f7ec fb5d 	bl	80006f8 <__aeabi_dmul>
 801403e:	4b37      	ldr	r3, [pc, #220]	; (801411c <scalbn+0x104>)
 8014040:	429e      	cmp	r6, r3
 8014042:	4604      	mov	r4, r0
 8014044:	460d      	mov	r5, r1
 8014046:	da10      	bge.n	801406a <scalbn+0x52>
 8014048:	a32b      	add	r3, pc, #172	; (adr r3, 80140f8 <scalbn+0xe0>)
 801404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404e:	e03a      	b.n	80140c6 <scalbn+0xae>
 8014050:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014054:	428a      	cmp	r2, r1
 8014056:	d10c      	bne.n	8014072 <scalbn+0x5a>
 8014058:	ee10 2a10 	vmov	r2, s0
 801405c:	4620      	mov	r0, r4
 801405e:	4629      	mov	r1, r5
 8014060:	f7ec f994 	bl	800038c <__adddf3>
 8014064:	4604      	mov	r4, r0
 8014066:	460d      	mov	r5, r1
 8014068:	e019      	b.n	801409e <scalbn+0x86>
 801406a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801406e:	460b      	mov	r3, r1
 8014070:	3a36      	subs	r2, #54	; 0x36
 8014072:	4432      	add	r2, r6
 8014074:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014078:	428a      	cmp	r2, r1
 801407a:	dd08      	ble.n	801408e <scalbn+0x76>
 801407c:	2d00      	cmp	r5, #0
 801407e:	a120      	add	r1, pc, #128	; (adr r1, 8014100 <scalbn+0xe8>)
 8014080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014084:	da1c      	bge.n	80140c0 <scalbn+0xa8>
 8014086:	a120      	add	r1, pc, #128	; (adr r1, 8014108 <scalbn+0xf0>)
 8014088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801408c:	e018      	b.n	80140c0 <scalbn+0xa8>
 801408e:	2a00      	cmp	r2, #0
 8014090:	dd08      	ble.n	80140a4 <scalbn+0x8c>
 8014092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801409a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801409e:	ec45 4b10 	vmov	d0, r4, r5
 80140a2:	bd70      	pop	{r4, r5, r6, pc}
 80140a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140a8:	da19      	bge.n	80140de <scalbn+0xc6>
 80140aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80140ae:	429e      	cmp	r6, r3
 80140b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80140b4:	dd0a      	ble.n	80140cc <scalbn+0xb4>
 80140b6:	a112      	add	r1, pc, #72	; (adr r1, 8014100 <scalbn+0xe8>)
 80140b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d1e2      	bne.n	8014086 <scalbn+0x6e>
 80140c0:	a30f      	add	r3, pc, #60	; (adr r3, 8014100 <scalbn+0xe8>)
 80140c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c6:	f7ec fb17 	bl	80006f8 <__aeabi_dmul>
 80140ca:	e7cb      	b.n	8014064 <scalbn+0x4c>
 80140cc:	a10a      	add	r1, pc, #40	; (adr r1, 80140f8 <scalbn+0xe0>)
 80140ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d0b8      	beq.n	8014048 <scalbn+0x30>
 80140d6:	a10e      	add	r1, pc, #56	; (adr r1, 8014110 <scalbn+0xf8>)
 80140d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140dc:	e7b4      	b.n	8014048 <scalbn+0x30>
 80140de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140e2:	3236      	adds	r2, #54	; 0x36
 80140e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80140ec:	4620      	mov	r0, r4
 80140ee:	4b0c      	ldr	r3, [pc, #48]	; (8014120 <scalbn+0x108>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	e7e8      	b.n	80140c6 <scalbn+0xae>
 80140f4:	f3af 8000 	nop.w
 80140f8:	c2f8f359 	.word	0xc2f8f359
 80140fc:	01a56e1f 	.word	0x01a56e1f
 8014100:	8800759c 	.word	0x8800759c
 8014104:	7e37e43c 	.word	0x7e37e43c
 8014108:	8800759c 	.word	0x8800759c
 801410c:	fe37e43c 	.word	0xfe37e43c
 8014110:	c2f8f359 	.word	0xc2f8f359
 8014114:	81a56e1f 	.word	0x81a56e1f
 8014118:	43500000 	.word	0x43500000
 801411c:	ffff3cb0 	.word	0xffff3cb0
 8014120:	3c900000 	.word	0x3c900000

08014124 <finitef>:
 8014124:	b082      	sub	sp, #8
 8014126:	ed8d 0a01 	vstr	s0, [sp, #4]
 801412a:	9801      	ldr	r0, [sp, #4]
 801412c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014130:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014134:	bfac      	ite	ge
 8014136:	2000      	movge	r0, #0
 8014138:	2001      	movlt	r0, #1
 801413a:	b002      	add	sp, #8
 801413c:	4770      	bx	lr
	...

08014140 <_init>:
 8014140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014142:	bf00      	nop
 8014144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014146:	bc08      	pop	{r3}
 8014148:	469e      	mov	lr, r3
 801414a:	4770      	bx	lr

0801414c <_fini>:
 801414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414e:	bf00      	nop
 8014150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014152:	bc08      	pop	{r3}
 8014154:	469e      	mov	lr, r3
 8014156:	4770      	bx	lr
